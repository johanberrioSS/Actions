-- *******************************************************************************************
-- Replace ALL MATCHES FOR the nex two parameter with the values you need 
-- eg: change THE FIRST to FocussSS and THE LAST ONE to C:\backupFocuss (without \ at the end) 
-- 
-- databaseNewName
-- urlDisk
-- *******************************************************************************************
PRINT 'Creation of databaseNewName database is started, please wait...'
USE [master]
GO

SET NOCOUNT ON;
GO

CREATE DATABASE FocussCreationNameDatabase
GO

USE [FocussCreationNameDatabase]
GO

ALTER DATABASE FocussCreationNameDatabase COLLATE Modern_Spanish_CS_AS;
GO
ALTER DATABASE FocussCreationNameDatabase SET AUTO_CLOSE OFF;
GO
ALTER DATABASE FocussCreationNameDatabase SET COMPATIBILITY_LEVEL = 140;
GO

-- *******************************************************************************************
ALTER DATABASE SCOPED CONFIGURATION SET ACCELERATED_PLAN_FORCING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET BATCH_MODE_ADAPTIVE_JOINS = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET BATCH_MODE_MEMORY_GRANT_FEEDBACK = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET BATCH_MODE_ON_ROWSTORE = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET DEFERRED_COMPILATION_TV = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET ELEVATE_ONLINE = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET ELEVATE_RESUMABLE = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET GLOBAL_TEMPORARY_TABLE_AUTO_DROP = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET IDENTITY_CACHE = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET INTERLEAVED_EXECUTION_TVF = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET ISOLATE_SECURITY_POLICY_CARDINALITY = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LAST_QUERY_PLAN_STATS = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LIGHTWEIGHT_QUERY_PROFILING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET OPTIMIZE_FOR_AD_HOC_WORKLOADS = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET ROW_MODE_MEMORY_GRANT_FEEDBACK = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET TSQL_SCALAR_UDF_INLINING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET VERBOSE_TRUNCATION_WARNINGS = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET XTP_PROCEDURE_EXECUTION_STATISTICS = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET XTP_QUERY_EXECUTION_STATISTICS = OFF;
GO
USE [FocussCreationNameDatabase]
GO
/****** Object:  UserDefinedTableType [dbo].[BufferHistoryTblType]    Script Date: 5/04/2021 6:23:06 p. m. ******/
CREATE TYPE [dbo].[BufferHistoryTblType] AS TABLE(
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[FAMILY] [varchar](50) NOT NULL,
	[ORIGIN_LOCATION] [varchar](50) NOT NULL,
	[REPLENISHMENT_TIME] [int] NOT NULL,
	[BUFFER] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_TRANSIT] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PURCHASING] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION] [numeric](17, 5) NOT NULL,
	[UPDATE_MOVEMENTS] [date] NOT NULL,
	[MEASUREMENT_UNIT] [varchar](50) NULL,
	[MINIMUM_BUFFER] [numeric](17, 5) NOT NULL,
	[SECURITY_STOCK] [numeric](17, 5) NOT NULL,
	[MINIMUM_REPLENISHMENT] [numeric](17, 5) NULL,
	[PACKAGING_UNIT] [numeric](17, 5) NOT NULL,
	[UNIT_PRICE] [numeric](17, 2) NULL,
	[TVC] [numeric](17, 2) NOT NULL,
	[CONSOLIDATED_REPLENISHMENT] [numeric](17, 5) NOT NULL,
	[POSITIVE_ADJUST_CONSOLIDATED] [numeric](17, 5) NOT NULL,
	[CONSOLIDATED_CONSUMPTION] [numeric](17, 5) NOT NULL,
	[NEGATIVE_ADJUST_CONSOLIDATED] [numeric](17, 5) NOT NULL,
	[LOCATION_TYPE] [varchar](50) NOT NULL,
	[UNIT_THROUGHPUT] [numeric](17, 2) NULL,
	[CREATION_DATE] [datetime] NULL,
	[ALLOWED_OVERSTOCKING] [numeric](17, 5) NULL,
	[EFFECTIVE_BUFFER] [numeric](17, 5) NULL,
	[INVENTORY_ON_SITE] [numeric](15, 5) NULL,
	[INVENTORY_ON_TRANSIT] [numeric](17, 5) NULL,
	[INVENTORY_ON_PURCHASING] [numeric](17, 5) NULL,
	[INVENTORY_ON_PRODUCTION] [numeric](17, 5) NULL,
	[INVENTORY_ON_CHAIN] [numeric](17, 5) NULL,
	[SITE_PRIORITY] [numeric](17, 2) NULL,
	[SITE_PRIORITY_COLOR] [varchar](50) NULL,
	[NET_PRIORITY] [numeric](17, 2) NULL,
	[NET_PRIORITY_COLOR] [varchar](50) NULL,
	[TOTAL_CONSOLIDATED_INPUTS] [numeric](17, 5) NULL,
	[TOTAL_CONSOLIDATED_OUTPUTS] [numeric](17, 5) NULL,
	[YELLOW_ZONE_START] [numeric](10, 2) NULL,
	[RED_ZONE_START] [numeric](10, 2) NULL,
	[DAYS_SINCE_LAST_OUT] [numeric](5, 0) NULL,
	[LAST_TOTAL_OUTS_MAX_SUM] [numeric](17, 5) NULL,
	[PROTECTION_FACTOR] [numeric](17, 2) NULL,
	[WORST_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[BAA_OUT_CLASSIFICATION] [varchar](2) NULL,
	[REPLENISHMENT_PROBLEM] [varchar](10) NOT NULL,
	[PENDING_DEMAND] [numeric](17, 5) NULL,
	[NET_INVENTORY] [numeric](17, 5) NULL,
	[REPLENISHMENT_PRIORITY] [int] NULL,
	[EXCLUDED_OUTS] [numeric](17, 5) NULL,
	[REPLENISHMENT_FREQUENCY] [int] NULL,
	[DAILY_AVERAGE_CONSUMPTION] [numeric](17, 5) NULL,
	PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LOCATION] ASC,
	[UPDATE_MOVEMENTS] ASC
)WITH (IGNORE_DUP_KEY = OFF)
)
GO
/****** Object:  UserDefinedTableType [dbo].[BufferTblType]    Script Date: 5/04/2021 6:23:06 p. m. ******/
CREATE TYPE [dbo].[BufferTblType] AS TABLE(
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[FAMILY] [varchar](50) NULL,
	[ORIGIN_LOCATION] [varchar](50) NULL,
	[REPLENISHMENT_TIME] [int] NULL,
	[BUFFER] [numeric](17, 5) NULL,
	[TOTAL_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[TOTAL_INVENTORY_ON_TRANSIT] [numeric](17, 5) NULL,
	[TOTAL_INVENTORY_ON_PURCHASING] [numeric](17, 5) NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION] [numeric](17, 5) NULL,
	[UPDATE_MOVEMENTS] [date] NULL,
	[MINIMUM_BUFFER] [numeric](17, 5) NULL,
	[SECURITY_STOCK] [numeric](17, 5) NULL,
	[MINIMUM_REPLENISHMENT] [numeric](17, 5) NULL,
	[PACKAGING_UNIT] [numeric](17, 5) NULL,
	[UNIT_PRICE] [numeric](17, 2) NULL,
	[TVC] [numeric](17, 2) NULL,
	[CONSOLIDATED_REPLENISHMENT] [numeric](17, 5) NULL,
	[POSITIVE_ADJUSTMENTS] [numeric](17, 5) NULL,
	[CONSUMPTION] [numeric](17, 5) NULL,
	[NEGATIVE_ADJUSTMENTS] [numeric](17, 5) NULL,
	[LOCATION_TYPE] [varchar](50) NULL,
	[UNIT_THROUGHPUT] [numeric](17, 2) NULL,
	[NOTES] [nvarchar](max) NULL,
	[INACTIVE] [bit] NULL,
	[INACTIVATION_DATE] [date] NULL,
	[BUFFER_INITIAL_DATE] [date] NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATOR_USER] [varchar](50) NULL,
	[MODIFY_DATE] [datetime] NULL,
	[MODIFY_USER] [varchar](50) NULL,
	[ALLOWED_OVERSTOCKING] [numeric](17, 5) NULL,
	[EFFECTIVE_BUFFER] [numeric](17, 5) NULL,
	[INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[INVENTORY_ON_TRANSIT] [numeric](17, 5) NULL,
	[INVENTORY_ON_PURCHASING] [numeric](17, 5) NULL,
	[INVENTORY_ON_PRODUCTION] [numeric](17, 5) NULL,
	[INVENTORY_ON_CHAIN] [numeric](17, 5) NULL,
	[SITE_PRIORITY] [numeric](17, 2) NULL,
	[SITE_PRIORITY_COLOR] [varchar](50) NULL,
	[NET_PRIORITY] [numeric](17, 2) NULL,
	[NET_PRIORITY_COLOR] [varchar](50) NULL,
	[MISSING_BUFFER_INVENTORY] [numeric](17, 5) NULL,
	[SUGGESTED_BUFFER_REPLENISH] [numeric](17, 5) NULL,
	[APPROVED_BUFFER_REPLENISH] [numeric](17, 5) NULL,
	[REPLENISHMENT_ACTION] [varchar](10) NULL,
	[TOTAL_CONSOLIDATED_INPUTS] [numeric](17, 5) NULL,
	[TOTAL_CONSOLIDATED_OUTPUTS] [numeric](17, 5) NULL,
	[LAST_COLOR_CHANGE_DATE] [date] NULL,
	[MANAGED] [bit] NULL,
	[CDGROUP] [numeric](2, 0) NULL,
	[CDUNIT] [varchar](50) NULL,
	[LAST_TOTAL_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[DAYS_SINCE_LAST_OUT] [numeric](5, 0) NULL,
	[LAST_TOTAL_OUTS_MAX_SUM] [numeric](17, 5) NULL,
	[PROTECTION_FACTOR] [numeric](17, 2) NULL,
	[ADJUSTMENT_TYPE] [varchar](50) NULL,
	[SUGGESTED_BUFFER] [numeric](17, 5) NULL,
	[APPROVED_BUFFER] [numeric](17, 5) NULL,
	[ADJUSTMENT_ACTION] [varchar](50) NULL,
	[SUGGESTION_DATE] [datetime] NULL,
	[SUGGESTION_REJECTION_CAUSE] [varchar](50) NULL,
	[SUGGESTION_EXPIRATION_DATE] [datetime] NULL,
	[SUGGESTION_ALERTS] [varchar](50) NULL,
	[NEXT_BUFFER_ANALYSIS] [datetime] NULL,
	[NEXT_RC_ANALYSIS] [datetime] NULL,
	[WORST_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[BAA_OUT_CLASSIFICATION] [varchar](2) NULL,
	[RED_ZONE_START] [numeric](10, 2) NULL,
	[YELLOW_ZONE_START] [numeric](10, 2) NULL,
	[REPLENISHMENT_PROBLEM] [varchar](10) NULL,
	[PENDING_DEMAND] [numeric](17, 5) NULL,
	[NET_INVENTORY] [numeric](17, 5) NULL,
	[REPLENISHMENT_PRIORITY] [int] NULL,
	[OPTIMIZED_REPLENISHMENT] [numeric](17, 5) NULL,
	[OPTIMIZED_PRIORITY] [numeric](17, 5) NULL,
	[OPTIMIZED_PRIORITY_COLOR] [varchar](50) NULL,
	[IS_ORIGIN_BUFFER] [bit] NULL,
	[CONVERSION_FACTOR] [numeric](17, 5) NULL,
	[FACTORIZED_SUGGESTED_REPLENISHMENT] [numeric](17, 5) NULL,
	[EXCLUDED_OUTS] [numeric](17, 5) NULL,
	[PROJECTED_REPLENISHMENT] [numeric](17, 5) NULL,
	[FACTORIZED_REPLENISHMENT] [numeric](17, 5) NULL,
	[PROJECTED_PRIORITY] [numeric](17, 5) NULL,
	[REPLENISHMENT_FREQUENCY] [int] NULL,
	[SBC_BUFFER_SIZE] [numeric](17, 5) NULL,
	[DAILY_AVERAGE_CONSUMPTION] [numeric](17, 5) NULL,
	[AVAILABLE_INVENTORY] [numeric](15, 5) NULL,
	[REPLENISHMENT_TARGET] [numeric](17, 5) NULL,
	PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LOCATION] ASC
)WITH (IGNORE_DUP_KEY = OFF)
)
GO
/****** Object:  UserDefinedTableType [dbo].[tempSKUBuffer]    Script Date: 5/04/2021 6:23:06 p. m. ******/
CREATE TYPE [dbo].[tempSKUBuffer] AS TABLE(
	[SKU_TEMP] [varchar](50) NULL,
	[LOCATION_TEMP] [varchar](50) NULL,
	[ID_EVENT] [varchar](50) NULL,
	[PREPARATION_START_DATE] [date] NULL,
	[EVENT_DATE] [date] NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[ADD_TIME_TO_DATE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 06/03/2014
-- Description:	add time to date
-- =============================================
CREATE FUNCTION [dbo].[ADD_TIME_TO_DATE]
(
	-- Add the parameters for the function here
	@vDate DATETIME,
	@vHourMinutes VARCHAR(5)
)
RETURNS DATETIME
AS
BEGIN
	DECLARE @vResult DATETIME
	DECLARE @vHoursStr VARCHAR(5)
	DECLARE @vMinutesStr VARCHAR(5)
	DECLARE @vMinutesTotalInt INT
	DECLARE @vTime DATETIME
	
	SET @vMinutesStr = @vHourMinutes
	SET @vHoursStr = SUBSTRING(@vMinutesStr, 0, PATINDEX('%:%',@vMinutesStr))
	SET @vMinutesStr = SUBSTRING(@vMinutesStr, LEN(@vHoursStr + ',') + 1, LEN(@vMinutesStr))
	SET @vMinutesTotalInt = CAST(@vHoursStr AS INT)*60 + CAST(@vMinutesStr AS INT)
	
	--BEGIN TRY
		
		IF @vDate IS NOT NULL
			SET @vResult = DATEADD(mi, @vMinutesTotalInt, DATEDIFF(dd, 0, @vDate))
		ELSE
			SET @vResult = NULL
		
		RETURN @vResult
		
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 30/04/2014
-- Description:	get function calculate buffer last color change date
-- =============================================
CREATE FUNCTION [dbo].[BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE]
(
	-- Add the parameters for the function here
	@vOldLastColorChangeDate DATETIME,
	@vOldPriorityColor VARCHAR(50),
	@vNewPriorityColor VARCHAR(50),
	@vUPDATE_MOVEMENTS DATETIME
	--,@vOldCdOrder VARCHAR(50)
)
RETURNS DATETIME 
AS
BEGIN
	DECLARE @vResult DATETIME
	
	--BEGIN TRY
	--IF @vOldCdOrder IS NULL
	--	SET @vResult = NULL
	--ELSE
	--	BEGIN
			
			IF @vOldPriorityColor IS NULL
				SET @vResult = @vOldLastColorChangeDate
			ELSE IF @vOldPriorityColor <> @vNewPriorityColor
				SET @vResult = @vUPDATE_MOVEMENTS
			ELSE
				SET @vResult = @vOldLastColorChangeDate 
	--	END

	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[BUFFER_GET_CALCULATE_MANAGED]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 04/30/2014
-- Description:	get function calculate managed order
-- =============================================
CREATE FUNCTION [dbo].[BUFFER_GET_CALCULATE_MANAGED]
(
	-- Add the parameters for the function here
	@vOldPriorityColor VARCHAR(50),
	@vNewPriorityColor VARCHAR(50)
	--,@vOldCdOrder VARCHAR(50)
)
RETURNS BIT 
AS
BEGIN
	DECLARE @vResult BIT
	
	--BEGIN TRY
	--IF @vOldCdOrder IS NULL
	--	SET @vResult = 1
	--ELSE
	--	BEGIN
			
			IF @vOldPriorityColor IS NULL
				SET @vResult = 1
			ELSE IF @vOldPriorityColor <> @vNewPriorityColor
				SET @vResult = 0
			ELSE
				SET @vResult = 1
	--	END

	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[BUFFER_GET_CALCULATE_PRIORITY_COLOR]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 04/22/2014 
-- Description:	get function calculate buffer site priority color
-- =============================================
CREATE FUNCTION [dbo].[BUFFER_GET_CALCULATE_PRIORITY_COLOR]
(
	-- Add the parameters for the function here
	@vPRIORITY NUMERIC(17,2), 
	@vINVENTORY NUMERIC(17,5), 
	@vEFFECTIVE_BUFFER NUMERIC(17,5),
	@vYELLOW_ZONE_START NUMERIC(5,2),
	@vRED_ZONE_START NUMERIC(5,2)
)
RETURNS VARCHAR(50) 
AS
BEGIN
	DECLARE @vResult VARCHAR(50)
	--BEGIN TRY
	IF (@vPRIORITY IS NULL)
		SET @vResult = 'White'
	ELSE IF ( (@vPRIORITY < 0) AND (@vINVENTORY > @vEFFECTIVE_BUFFER) )
		SET @vResult = 'Blue'
	ELSE IF ( (@vPRIORITY < 0) AND (@vINVENTORY <= @vEFFECTIVE_BUFFER) )
		SET @vResult = 'Cyan'
	ELSE IF ( (@vPRIORITY >= 0) AND @vPRIORITY < @vYELLOW_ZONE_START)
		SET @vResult = 'Green'
	ELSE IF ( (@vPRIORITY >= @vYELLOW_ZONE_START) AND (@vPRIORITY < @vRED_ZONE_START) )
		SET @vResult = 'Yellow'
	ELSE IF ( (@vPRIORITY >= @vRED_ZONE_START) AND (@vPRIORITY < 100) )
		SET @vResult = 'Red'
	ELSE IF (@vPRIORITY >= 100)
		SET @vResult = 'Black'
	ELSE
		SET @vResult = 'Error'
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[BUFFER_GET_CDGROUP]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 04/30/2014
-- Description:	get cdgroup buffer
-- =============================================
CREATE FUNCTION [dbo].[BUFFER_GET_CDGROUP]
(
	-- Add the parameters for the function here
	--@vPRIORITY NUMERIC(14,2)
)
RETURNS NUMERIC(2,0) 
AS
BEGIN
	DECLARE @vResult NUMERIC(2,0)
	--BEGIN TRY
	SET @vResult = 1;
	
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[BUFFER_GET_STR_PRE_FUNCTIONS_CALCULATED_FIELDS]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Edward Rodriguez
-- Create date: 03/04/2014 
-- Description:	get string pre functions buffers calculated fields
-- ---------------------------------------------------------------------------
-- Author:		Oscar Londoño
-- Create date: 25/02/2015 
-- Description:	Increase the @vIndividualColumns length
-- ===========================================================================
CREATE FUNCTION [dbo].[BUFFER_GET_STR_PRE_FUNCTIONS_CALCULATED_FIELDS]
(
	-- Add the parameters for the function here
	@vStringAllColumns NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX) --WITH ENCRYPTION
AS
BEGIN
	-- Declare the return variable here
	DECLARE @vResultVar NVARCHAR(MAX) = '';
	DECLARE @vColumns   NVARCHAR(MAX);
	DECLARE @vIndividualColumns varchar(150) = null;
	DECLARE @vCount     INT = 0;
	DECLARE @vTab       VARCHAR(10) = '    ';
	
	SET @vColumns = @vStringAllColumns;
	
	WHILE LEN(@vColumns) > 0
	BEGIN
		SET @vCount = @vCount + 1;
		IF (PATINDEX('%,%',@vColumns) > 0)
		BEGIN
			SET @vIndividualColumns = SUBSTRING(@vColumns, 0, PATINDEX('%,%',@vColumns));
			SET @vColumns = SUBSTRING(@vColumns, LEN(@vIndividualColumns + ',') + 1, LEN(@vColumns));
		END
		ELSE
		BEGIN
			SET @vIndividualColumns = @vColumns;
			SET @vColumns = NULL;
		END
		
		SET @vIndividualColumns = LTRIM(RTRIM(@vIndividualColumns));
		
		IF (@vCount = 1) 
		BEGIN 
			SET @vResultVar = @vResultVar + ' ';
		END
		ELSE
		BEGIN
			SET @vResultVar = @vResultVar + @vTab + @vTab + @vTab ;
		END	
		
		IF (@vIndividualColumns = 'TMP.FAMILY')
		BEGIN
			SET @vResultVar = @vResultVar + 'CBF.CDBUFFER_FAMILY' + ',' + CHAR(13);			
		END	
		ELSE IF (@vIndividualColumns = 'TMP.ORIGIN_LOCATION')
		BEGIN
			SET @vResultVar = @vResultVar + 'CLO.CDLOCATION' + ',' + CHAR(13);
		END	
		ELSE 
		BEGIN
			SET @vResultVar = @vResultVar + @vIndividualColumns + ',' + CHAR(13);
		END		
	END
	
	IF (LEN(@vResultVar) > 0)
	BEGIN
		SET @vResultVar = SUBSTRING(@vResultVar, 0, LEN(@vResultVar)-1);
	END
	
	RETURN @vResultVar;
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GET_PURCHASE_PRIORITY_COLOR]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FN_GET_PURCHASE_PRIORITY_COLOR]
(  
	@vPriority        NUMERIC(17,2), 
	@vYellowZoneStart NUMERIC(5,2),
	@vRedZoneStart    NUMERIC(5,2) 
)
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @vPriorityColor VARCHAR(50);
	IF (@vPriority IS NULL)
		SET @vPriorityColor = 'White';
	ELSE IF (@vPriority < 0)
		SET @vPriorityColor = 'Blue';
	ELSE IF (@vPriority >= 0 AND @vPriority < @vYellowZoneStart)
		SET @vPriorityColor = 'Green';
	ELSE IF (@vPriority >= @vYellowZoneStart AND @vPriority < @vRedZoneStart)
		SET @vPriorityColor = 'Yellow';
	ELSE IF (@vPriority >= @vRedZoneStart AND @vPriority < 100)
		SET @vPriorityColor = 'Red';
	ELSE IF (@vPriority >= 100)
		SET @vPriorityColor = 'Black';	
	RETURN @vPriorityColor 	 
END
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GET_RESTART_REPLENISHMENT_PROBLEM_VALUE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================
-- @author 		 oscarlondono
-- @since 		 2017-01-12
-- @description	 This function returns whether replenishment problem value 
--				 has to be restarted or not to its default value
-- @param		 @ivaSITE_PRIORITY_COLOR_OLD Prior site priority color	
-- @param		 @ivaSITE_PRIORITY_COLOR Current site priority color	
-- @return		 @RESTART Whether replenishment problem value has to be 
--				 restarted (Y) or not (N)
-- ===========================================================================
CREATE FUNCTION [dbo].[FN_GET_RESTART_REPLENISHMENT_PROBLEM_VALUE]
(
	-- Add the parameters for the function here
	@ivaSITE_PRIORITY_COLOR_OLD	VARCHAR(50), 
	@ivaSITE_PRIORITY_COLOR		VARCHAR(50)
)
RETURNS VARCHAR(1) -- WITH ENCRYPTION
AS
BEGIN
	 DECLARE @RESTART	VARCHAR(1); 

	SET @RESTART = 'N';

	-- -----------------------------------------------------------------------
	-- If site Priority Color is neither anymore blue, nor red, nor black, 
	-- it is because the problem already passed and the field is restarted
	-- to its default value
	-- -----------------------------------------------------------------------
	IF (@ivaSITE_PRIORITY_COLOR != 'Blue' AND @ivaSITE_PRIORITY_COLOR != 'Red' 
		AND @ivaSITE_PRIORITY_COLOR != 'Black')
	BEGIN 
		SET @RESTART = 'Y';
	END
	ELSE IF ((@ivaSITE_PRIORITY_COLOR_OLD = 'Blue' 
			AND (@ivaSITE_PRIORITY_COLOR = 'Red' OR @ivaSITE_PRIORITY_COLOR = 'Black')))
	BEGIN
		-- -------------------------------------------------------------------
		-- Or if the color changes from 'Blue' to 'Red'/'Black'
		-- -------------------------------------------------------------------
		SET @RESTART = 'Y';
	END 
	ELSE IF ((@ivaSITE_PRIORITY_COLOR_OLD = 'Red' OR @ivaSITE_PRIORITY_COLOR_OLD = 'Black')
			AND (@ivaSITE_PRIORITY_COLOR = 'Blue'))
	BEGIN 
		-- -------------------------------------------------------------------
		-- Or vice versa: color changes from 'Red'/'Black' to 'Blue'
		-- -------------------------------------------------------------------
		SET @RESTART = 'Y';
	END 
	RETURN @RESTART	 
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julian Andres Gonzalez
-- Create date: 02/12/2015 
-- Description:	 function for calculating the effective buffer 
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER]
(
	-- Add the parameters for the function here
	@vInventoryAccuracy NUMERIC(3,0),
	@vBuffer NUMERIC(17,5),
	@vSecurityStock NUMERIC(17,5),
	@vAllowedOverStocking NUMERIC(17,5)
)
RETURNS NUMERIC(17,5)

AS
BEGIN
	DECLARE @vEffectiveBufferResult NUMERIC(17,5)	
	SET @vEffectiveBufferResult = dbo.VALIDATE_COLUMN_ACCURACY(@vInventoryAccuracy,@vBuffer) + dbo.VALIDATE_COLUMN_ACCURACY(@vInventoryAccuracy,@vSecurityStock) + dbo.VALIDATE_COLUMN_ACCURACY(@vInventoryAccuracy,@vAllowedOverStocking)	
	RETURN @vEffectiveBufferResult	
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_BUFFER_NET_PRIORITY]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 23/06/2017
-- Description : * Rename GET_CALCULATE_BUFFER_CHAIN_PRIORITY by 
--                 GET_CALCULATE_BUFFER_NET_PRIORITY and 
--				   Change parameter Inventory On Chain by Net Inventory
-- Version     : 4.7.0
-- ---------------------------------------------------------------------------
-- Author:		Julian Andres Gonzalez
-- Create date: 02/12/2015 
-- Description:	 function for calculating the chain priority 
-- ===========================================================================
CREATE FUNCTION [dbo].[GET_CALCULATE_BUFFER_NET_PRIORITY]
( -- Add the parameters for the function here
	@vBuffer        NUMERIC(17,5),
	@vSecurityStock NUMERIC(17,5),
	@vNetInventory  NUMERIC(17,5) 
)
RETURNS NUMERIC(17,2)
-- WITH ENCRYPTION
AS
BEGIN
	DECLARE @vChainPriorityResult NUMERIC(17,2)	
	IF (@vBuffer = 0) 
	BEGIN 
		SET @vChainPriorityResult = NULL 
	END 
	ELSE 
	BEGIN 
		SET @vChainPriorityResult = CAST(((CAST(((@vBuffer + @vSecurityStock - @vNetInventory) / @vBuffer) AS NUMERIC(17,4))) * 100) AS NUMERIC(17,2)) 
	END 	
	RETURN @vChainPriorityResult	
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_BUFFER_SITE_PRIORITY]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julian Andres Gonzalez
-- Create date: 02/12/2015 
-- Description:	 function for calculating Buffer site priority
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_BUFFER_SITE_PRIORITY]
(
	-- Add the parameters for the function here
	@vBuffer NUMERIC(17,5),
	@vSecurityStock NUMERIC(17,5),
	@vInventoryOnSite NUMERIC(17,5)
)
RETURNS NUMERIC(17,2)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vSitePriorityResult NUMERIC(17,2)
	
	IF(@vBuffer = 0) 
		BEGIN 
			SET @vSitePriorityResult = NULL 
		END 
	ELSE 
		BEGIN 
			SET @vSitePriorityResult = CAST(     (    (   CAST(  ( (@vBuffer + @vSecurityStock - @vInventoryOnSite)/@vBuffer ) AS NUMERIC(17,4)  )   ) * 100    )     AS NUMERIC(17,2)     ) 
		END 
				
	
	RETURN @vSitePriorityResult
	
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_DAYSOFWEEK_BETWEEN]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/19/2013 
-- Description:	get function calculate days between
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_DAYSOFWEEK_BETWEEN]
(
	-- Add the parameters for the function here
	@vStartDate_W DATETIME,
	@vEndDate_W DATETIME,
	@vDayFind_W INT -- weekday: sunday = 1, monday = 2 ...
)
RETURNS INT
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @vResult_W INT = 0
	DECLARE @vCount_W INT = 0
	DECLARE @vDelayCount_W INT = 1
	DECLARE @vDateCount_W DATE
	
	DECLARE @vStartDateNoTime_W DATE
	DECLARE @vEndDateNoTime_W DATE
	
	SET @vStartDateNoTime_W = @vStartDate_W
	SET @vEndDateNoTime_W = @vEndDate_W
	
	--BEGIN TRY
	SET @vDateCount_W = @vStartDateNoTime_W
	
	WHILE (@vDateCount_W <= @vEndDateNoTime_W)
		BEGIN 
			IF ( datepart(weekday,@vDateCount_W) =  @vDayFind_W)
				BEGIN
					SET @vResult_W = @vResult_W + 1
					SET @vDelayCount_W = 7
				END
			SET @vCount_W = @vCount_W + @vDelayCount_W
			SET @vDateCount_W = DATEADD(day, @vCount_W, @vStartDateNoTime_W)
		END
	RETURN @vResult_W
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_DAYSOFYEAR_BETWEEN]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/19/2013 
-- Description:	get function calculate days of year between
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_DAYSOFYEAR_BETWEEN]
(
	-- Add the parameters for the function here
	@vStartDate_Y DATETIME,
	@vEndDate_Y DATETIME,
	@vDateFind_Y DATE
)
RETURNS INT
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @vResult_Y INT = 0
	DECLARE @vCountDay_Y INT = 0
	DECLARE @vDateCount_Y DATE
	
	DECLARE @vDayOfMonthFind_Y INT
	DECLARE @vMonthFind_Y INT
	
	DECLARE @vStartDateNoTime_Y DATE
	DECLARE @vEndDateNoTime_Y DATE
	
	SET @vStartDateNoTime_Y = @vStartDate_Y
	SET @vEndDateNoTime_Y = @vEndDate_Y
	
	--BEGIN TRY
	SET @vDayOfMonthFind_Y = datepart(day,@vDateFind_Y)
	SET @vMonthFind_Y = datepart(month,@vDateFind_Y)
	
	SET @vDateCount_Y =
	CAST(
		(
			CAST(DATEPART (year, @vStartDateNoTime_Y) AS VARCHAR(4))+'-'+
			CAST(DATEPART (month, @vDateFind_Y) AS VARCHAR(4))+'-'+
			CAST(DATEPART (day, @vDateFind_Y) AS VARCHAR(4))
		)
		AS DATE
	)
	
	IF(@vDateCount_Y < @vStartDateNoTime_Y)
	BEGIN
		SET @vDateCount_Y = DATEADD(year, 1, @vDateCount_Y)
	END
				
	WHILE (@vDateCount_Y <= @vEndDateNoTime_Y)
		BEGIN 
			IF ( datepart(day,@vDateCount_Y) = @vDayOfMonthFind_Y AND datepart(month,@vDateCount_Y) = @vMonthFind_Y)
				BEGIN
					SET @vResult_Y = @vResult_Y + 1
					SET @vDateCount_Y = DATEADD(year, 1, @vDateCount_Y)
				END
			ELSE
				BEGIN				
					SET @vCountDay_Y = @vCountDay_Y + 1
					SET @vDateCount_Y = DATEADD(day, @vCountDay_Y, @vStartDateNoTime_Y)
				END
		END
	RETURN @vResult_Y
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/18/2013 
-- Description:	get function calculate difference days accuracy minutes
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES]
(
	-- Add the parameters for the function here
	@vEndDate DATETIME,
	@vStartDate DATETIME
)
RETURNS NUMERIC(14,4)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vResult NUMERIC(14,4)
	--BEGIN TRY
	
	SET @vResult = 
	CAST(
		(
			CAST
			(
				(
					DATEDIFF(mi, 0, @vEndDate) - 
					DATEDIFF(mi, 0, @vStartDate)
				)
				AS NUMERIC(14,4)
			)
			/1440 
		)
		AS NUMERIC(14,4)
	)
					
	
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_LAST_COLOR_UPDATE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/19/2013 
-- Description:	get function calculate last color update
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_LAST_COLOR_UPDATE]
(
	-- Add the parameters for the function here
	@vOldLastColorUpdate DATETIME,
	@vOldPriorityColor VARCHAR(50),
	@vNewPriorityColor VARCHAR(50),
	@vPresentDate DATETIME,
	@vOldCdOrder VARCHAR(50),
	@vNoNullReturn BIT
)
RETURNS DATETIME
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vResult DATETIME
	
	--BEGIN TRY
	IF @vOldCdOrder IS NULL
		SET @vResult = NULL
	ELSE
		BEGIN
			
			IF @vOldPriorityColor IS NULL
				SET @vResult = @vOldLastColorUpdate
			ELSE IF @vOldPriorityColor <> @vNewPriorityColor
				SET @vResult = @vPresentDate
			ELSE
				SET @vResult = @vOldLastColorUpdate 
		END
		
	IF (@vNoNullReturn = 1 AND @vResult IS NULL)
		BEGIN
			
			SET @vResult = '1901-01-01 00:00:00'
		END 

	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_MANAGED_ORDER]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/19/2013 
-- Description:	get function calculate managed order
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_MANAGED_ORDER]
(
	-- Add the parameters for the function here
	@vOldPriorityColor VARCHAR(50),
	@vNewPriorityColor VARCHAR(50),
	@vOldCdOrder VARCHAR(50)
)
RETURNS BIT
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vResult BIT
	
	--BEGIN TRY
	IF @vOldCdOrder IS NULL
		SET @vResult = 1
	ELSE
		BEGIN
			
			IF @vOldPriorityColor IS NULL
				SET @vResult = 1
			ELSE IF @vOldPriorityColor <> @vNewPriorityColor
				SET @vResult = 0
			ELSE
				SET @vResult = 1
		END

	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_NON_WORKING_DAYS]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/18/2013 
-- Description:	get function calculate non working days
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_NON_WORKING_DAYS]
(
	-- Add the parameters for the function here
	@vDateEndParam DATETIME,
	@vDateStartParam DATETIME,
	@vCdCalendar NUMERIC(4,0)
)
RETURNS NUMERIC(10,2)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vResult NUMERIC(10,4) = 0
	
	DECLARE @vDateFixedDayFind DATE
	DECLARE @vDayWeekFind INT
	DECLARE @vDateDayWeekFind DATE
	DECLARE @vDateYearFind DATE
	
	DECLARE @vStartDateNoTime DATE
	DECLARE @vEndDateNoTime DATE
	DECLARE @vStartDate DATETIME
	DECLARE @vEndDate DATETIME
	
	DECLARE @TEMPORARY_DATES TABLE (
		CALENDAR_DATE_BASE DATE NOT NULL,
		--FREQUENCY VARCHAR(1) NOT NULL,
		REAL_DATE DATE NOT NULL
		--,PRIMARY KEY (CALENDAR_DATE_BASE, REAL_DATE)
	)
	
	--DECLARE @vDateStartParamNoTime DATE
	--DECLARE @vDateEndParamNoTime DATE
	--BEGIN TRY
	
	--SET @vDateStartParamNoTime = @vDateStartParam
	--SET @vDateEndParamNoTime = @vDateEndParam
	
	IF @vDateStartParam > @vDateEndParam
		BEGIN
			SET @vStartDate = @vDateEndParam
			SET @vEndDate = @vDateStartParam
		END
	ELSE
		BEGIN
			SET @vStartDate = @vDateStartParam
			SET @vEndDate = @vDateEndParam
		END

	SET @vStartDateNoTime = @vStartDate
	SET @vEndDateNoTime = @vEndDate
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- Start Repeat Weekly
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	DECLARE CURSORVCWEEK CURSOR FAST_FORWARD FOR
		SELECT CALENDAR_DATE 
		FROM TFSCM_CLI_DET_CALENDAR
		WHERE CDCALENDAR = @vCdCalendar AND
		FREQUENCY = 'W'
	
	OPEN CURSORVCWEEK
		FETCH NEXT FROM CURSORVCWEEK INTO @vDateDayWeekFind
		
		WHILE @@FETCH_STATUS = 0 
		BEGIN
			SET @vDayWeekFind = DATEPART(dw,@vDateDayWeekFind)
			-- Las funciones no pueden tener como parametros de entrada una variable tipo TABLA, por eso tuve que pasar esa funcion para aca:  
			--SET @vResult = @vResult + dbo.GET_CALCULATE_DAYSOFWEEK_BETWEEN(@vStartDate,@vEndDate, @vDayWeekFind)
			--------------------------------------------------------------------------------------------------------------------------
			------- START GET_CALCULATE_DAYSOFWEEK_BETWEEN----------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------------------
			-- Add the parameters for the function here
			DECLARE @vStartDate_W DATETIME = @vStartDate
			DECLARE @vEndDate_W DATETIME = @vEndDate
			DECLARE @vDayFind_W INT = @vDayWeekFind -- weekday: sunday = 1, monday = 2 ...
			--------------------------------------------------------------------------------------------------------------------------		
			DECLARE @vResult_W INT = 0
			DECLARE @vCount_W INT = 0
			DECLARE @vDelayCount_W INT = 1
			DECLARE @vDateCount_W DATE
			
			DECLARE @vStartDateNoTime_W DATE
			DECLARE @vEndDateNoTime_W DATE
			
			SET @vStartDateNoTime_W = @vStartDate_W
			SET @vEndDateNoTime_W = @vEndDate_W
			
			--BEGIN TRY
			SET @vDateCount_W = @vStartDateNoTime_W
			
			WHILE (@vDateCount_W <= @vEndDateNoTime_W)
				BEGIN 
					IF ( datepart(weekday,@vDateCount_W) =  @vDayFind_W)
						BEGIN
							
							IF NOT EXISTS ( SELECT TOP 1 1 FROM @TEMPORARY_DATES WHERE CALENDAR_DATE_BASE != @vDateDayWeekFind AND datepart(weekday,REAL_DATE) = @vDayFind_W )
							BEGIN
								INSERT INTO @TEMPORARY_DATES (CALENDAR_DATE_BASE, /*FREQUENCY,*/ REAL_DATE) VALUES (@vDateDayWeekFind, /*'W',*/ @vDateCount_W)
								SET @vResult_W = @vResult_W + 1
							END
							
							SET @vDelayCount_W = 7
						END
					SET @vCount_W = @vCount_W + @vDelayCount_W
					SET @vDateCount_W = DATEADD(day, @vCount_W, @vStartDateNoTime_W)
				END
				--RETURN @vResult_W
			------------------------------------------------------------------------------------------------------------------------------		
			SET @vResult = @vResult + @vResult_W
			------------------------------------------------------------------------------------------------------------------------------
			------- END GET_CALCULATE_DAYSOFWEEK_BETWEEN----------------------------------------------------------------------------
			------------------------------------------------------------------------------------------------------------------------------
			
			FETCH NEXT FROM CURSORVCWEEK INTO @vDateDayWeekFind
		END
	CLOSE CURSORVCWEEK 
	DEALLOCATE CURSORVCWEEK
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- End Repeat Weekly
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- Start Repeat Year
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************	
	DECLARE CURSORVCYEAR CURSOR FAST_FORWARD FOR
		SELECT CALENDAR_DATE 
		FROM TFSCM_CLI_DET_CALENDAR
		WHERE CDCALENDAR = @vCdCalendar AND
		FREQUENCY = 'Y'
	
	OPEN CURSORVCYEAR
		FETCH NEXT FROM CURSORVCYEAR INTO @vDateYearFind
		
		WHILE @@FETCH_STATUS = 0 
		BEGIN
			-- Las funciones no pueden tener como parametros de entrada una variable tipo TABLA, por eso tuve que pasar esa funcion para aca:
			--SET @vResult = @vResult + dbo.GET_CALCULATE_DAYSOFYEAR_BETWEEN(@vStartDate,@vEndDate, @vDateYearFind)
			--------------------------------------------------------------------------------------------------------------------------
			------- START GET_CALCULATE_DAYSOFYEAR_BETWEEN----------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------------------
			-- Add the parameters for the function here
			DECLARE @vStartDate_Y DATETIME = @vStartDate
			DECLARE @vEndDate_Y DATETIME = @vEndDate
			DECLARE @vDateFind_Y DATE = @vDateYearFind
			--------------------------------------------------------------------------------------------------------------------------
			DECLARE @vResult_Y INT = 0
			DECLARE @vCountDay_Y INT = 0
			DECLARE @vDateCount_Y DATE
			
			DECLARE @vDayOfMonthFind_Y INT
			DECLARE @vMonthFind_Y INT
			
			DECLARE @vStartDateNoTime_Y DATE
			DECLARE @vEndDateNoTime_Y DATE
			
			SET @vStartDateNoTime_Y = @vStartDate_Y
			SET @vEndDateNoTime_Y = @vEndDate_Y
			
			--BEGIN TRY
			SET @vDayOfMonthFind_Y = datepart(day,@vDateFind_Y)
			SET @vMonthFind_Y = datepart(month,@vDateFind_Y)
			
			SET @vDateCount_Y =
			CAST(
				(
					CAST(DATEPART (year, @vStartDateNoTime_Y) AS VARCHAR(4))+'-'+
					CAST(DATEPART (month, @vDateFind_Y) AS VARCHAR(4))+'-'+
					CAST(DATEPART (day, @vDateFind_Y) AS VARCHAR(4))
				)
				AS DATE
			)
			
			IF(@vDateCount_Y < @vStartDateNoTime_Y)
			BEGIN
				SET @vDateCount_Y = DATEADD(year, 1, @vDateCount_Y)
			END
						
			WHILE (@vDateCount_Y <= @vEndDateNoTime_Y)
				BEGIN 
					IF ( datepart(day,@vDateCount_Y) = @vDayOfMonthFind_Y AND datepart(month,@vDateCount_Y) = @vMonthFind_Y)
						BEGIN
							
							IF NOT EXISTS ( 
								SELECT TOP 1 1 FROM @TEMPORARY_DATES 
								WHERE 
								(
									CALENDAR_DATE_BASE != @vDateYearFind AND datepart(day,REAL_DATE) = @vDayOfMonthFind_Y AND datepart(month,REAL_DATE) = @vMonthFind_Y  
								)
							)
							BEGIN
								INSERT INTO @TEMPORARY_DATES (CALENDAR_DATE_BASE, /*FREQUENCY,*/ REAL_DATE) VALUES (@vDateYearFind, /*'Y',*/ @vDateCount_Y)
								SET @vResult_Y = @vResult_Y + 1
							END
							
							SET @vDateCount_Y = DATEADD(year, 1, @vDateCount_Y)
						END
					ELSE
						BEGIN				
							SET @vCountDay_Y = @vCountDay_Y + 1
							SET @vDateCount_Y = DATEADD(day, @vCountDay_Y, @vStartDateNoTime_Y)
						END
				END
			--RETURN @vResult_Y
			--------------------------------------------------------------------------------------------------------------------------
			SET @vResult = @vResult + @vResult_Y
			--------------------------------------------------------------------------------------------------------------------------
			------- END GET_CALCULATE_DAYSOFYEAR_BETWEEN------------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------------------
			FETCH NEXT FROM CURSORVCYEAR INTO @vDateYearFind
		END
	CLOSE CURSORVCYEAR 
	DEALLOCATE CURSORVCYEAR
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- End Repeat Year
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- Start Not Repeat (Fixed Day)
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	
	DECLARE CURSORVCFIXEDDAY CURSOR FAST_FORWARD FOR
		SELECT CALENDAR_DATE 
		FROM TFSCM_CLI_DET_CALENDAR
		WHERE CDCALENDAR = @vCdCalendar AND
		CALENDAR_DATE >= @vStartDateNoTime AND CALENDAR_DATE <= @vEndDateNoTime
		AND FREQUENCY = 'N'
	
	OPEN CURSORVCFIXEDDAY
		FETCH NEXT FROM CURSORVCFIXEDDAY INTO @vDateFixedDayFind
		
		WHILE @@FETCH_STATUS = 0 
		BEGIN
			
			IF NOT EXISTS (SELECT TOP 1 1 FROM @TEMPORARY_DATES WHERE REAL_DATE = @vDateFixedDayFind)
			BEGIN
				INSERT INTO @TEMPORARY_DATES (CALENDAR_DATE_BASE, /*FREQUENCY,*/ REAL_DATE) VALUES (@vDateFixedDayFind, /*'N',*/ @vDateFixedDayFind)
				SET @vResult = @vResult + 1
			END
			
			FETCH NEXT FROM CURSORVCFIXEDDAY INTO @vDateFixedDayFind
		END
	CLOSE CURSORVCFIXEDDAY 
	DEALLOCATE CURSORVCFIXEDDAY
	
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
	-- End Not Repeat (Fixed Day)
	--*************************************************************************************************************************************************
	--*************************************************************************************************************************************************
			
	--DECLARE @vEndTimeInMinutes INT 
	--DECLARE @vStartTimeInMinutes INT 
	
	--SET @vEndTimeInMinutes = DATEPART (minute, @vEndDate) + (60 * DATEPART (hour, @vEndDate))
	--SET @vStartTimeInMinutes = DATEPART (minute, @vStartDate) + (60 * DATEPART (hour, @vStartDate))
		
	-- Add or substract time difference 
	/*
	SET @vResult = @vResult + 
	(
		CAST
		(
			(
				CAST
				(
					(
						@vEndTimeInMinutes - 
						@vStartTimeInMinutes
					)
					AS NUMERIC(14,4)
				)
				/1440 
			)
			AS NUMERIC(10,2)
		)
	)
	*/
	IF @vDateStartParam > @vDateEndParam
		BEGIN
			SET @vResult = -@vResult
		END
	
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_PRIORITY]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author:		Oscar Londoño Ospina
-- Create date: 24/04/2015
-- Description:	Change the numeric @ProductionBuffer from (10,0) to (14,4)
-- -------------------------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 09/18/2013 
-- Description:	get function calculate priority
-- ===========================================================================================
CREATE FUNCTION [dbo].[GET_CALCULATE_PRIORITY]
(
	-- Add the parameters for the function here
	@PromisedDeliveryDate          AS DATETIME,
	@FinalizationDateOrPresentDate AS DATETIME,
	@ProductionBuffer              AS NUMERIC(14,4),
	@NonWorkingDays                AS NUMERIC(10,2),
	@CdOrderType                   AS VARCHAR(1),
	@ProgressPercentage            AS NUMERIC(17,5),
	@TouchTime                     AS NUMERIC(17,5)
)
RETURNS NUMERIC(17, 2)
AS
BEGIN
	-- ---------------------------------------------------------------------------------------
	-- OHLO 20210121: This variable is declared as numeric, with 17 as its size, but with 4 as 
	--                its scale, because the calculations could have several decimal positions 
	--                for example 0.7532, and that value is multiplied by 100 for getting the 
    --                percentage, so the value would be 75.32%.
	-- ---------------------------------------------------------------------------------------
	DECLARE @Result AS NUMERIC(17, 4);
 
	IF (@CdOrderType != 'S')	
	BEGIN
		SET @Result = 
			CONVERT(NUMERIC(17, 2),
				(
					1 - 
					CAST (
					(
						(
							dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PromisedDeliveryDate, @FinalizationDateOrPresentDate)
							- @NonWorkingDays
						)/@ProductionBuffer
					)
					AS NUMERIC(17,4))
				) * 100,
				105
			)
		
		IF (@ProgressPercentage <> -1 AND @TouchTime <> -1)
		BEGIN
			IF (@TouchTime <> 0)
			BEGIN
				SET @Result = ((@Result / 100) - ((@TouchTime / @ProductionBuffer) * (@ProgressPercentage / 100))) / (1 - (@TouchTime / @ProductionBuffer));
				SET @Result = CONVERT(NUMERIC(17, 2), @Result * 100, 105);
			END 
		END
	END
	
	RETURN @Result 
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_PRIORITY_COLOR]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author     : Edward Rodriguez
-- Create date: 09/19/2013 
-- Description:	Get function calculate priority color
-- ---------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Date       : 18/11/2014
-- Description: Add Yellow and Red Zones 
-- ===========================================================================
CREATE FUNCTION [dbo].[GET_CALCULATE_PRIORITY_COLOR]
(
	-- Add the parameters for the function here
	@vPriority NUMERIC(17,2),
	@vCdOrderType VARCHAR(1),
	@vYellowZoneStart NUMERIC(5,2),
	@vRedZoneStart NUMERIC(5,2)
)
RETURNS VARCHAR(50)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @vResult VARCHAR(50)
	--BEGIN TRY
	IF(@vCdOrderType='S')
	BEGIN
		IF (@vPriority IS NULL)
		BEGIN
			SET @vResult = 'White'
		END 
		ELSE IF (@vPriority <= 0)
		BEGIN
			SET @vResult = 'Blue'
		END
			
		ELSE IF ( (@vPriority > 0) AND @vPriority < @vYellowZoneStart)
		BEGIN
			SET @vResult = 'Green'
		END
			
		ELSE IF ( (@vPriority >= @vYellowZoneStart) AND (@vPriority < @vRedZoneStart) )
		BEGIN
			SET @vResult = 'Yellow'
		END
			
		ELSE IF ( (@vPriority >= @vRedZoneStart) AND (@vPriority < 100) )
		BEGIN
			SET @vResult = 'Red'
		END
			
		ELSE IF (@vPriority >= 100)
		BEGIN
			SET @vResult = 'Black'
		END 			
		ELSE
		BEGIN
			SET @vResult = 'Error'
		END
			 
		
	END
	ELSE
	BEGIN
		IF @vPriority < 0
			SET @vResult = 'Cyan'
		ELSE IF (@vPriority >= 0 AND @vPriority <= @vYellowZoneStart)
			SET @vResult = 'Green'
		ELSE IF (@vPriority > @vYellowZoneStart AND @vPriority <= @vRedZoneStart)
			SET @vResult = 'Yellow'
		ELSE IF (@vPriority > @vRedZoneStart AND @vPriority < 100)
			SET @vResult = 'Red'
		ELSE
			SET @vResult = 'Black'
	END
	
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_RECOMMENDED_RELEASE_DATE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/17/2013 
-- Description:	get function calculated recomended release date
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_RECOMMENDED_RELEASE_DATE]
(
	-- Add the parameters for the function here
	@vPromisedDeliveryDate DATE,
	@vProductionBuffer NUMERIC(10,0),
	@vCdCalendar NUMERIC(4,0),
	@vCdOrderType VARCHAR(1),
	@vOldPriorityColor VARCHAR(50),
	@vNewPriorityColor VARCHAR(50),
	@vRecommendedReleaseDateOld DATETIME,
	@vDATE_CALCULATION AS DATETIME
)
RETURNS DATETIME

AS
BEGIN
	
	DECLARE @vResult DATETIME 
	DECLARE @WORKING_DAYS AS INT = 0
	DECLARE @vCountDay AS INT = 0
	DECLARE @vCountStep AS INT = 1
	DECLARE @vAbsProductionBuffer NUMERIC(10,0)
	
	--BEGIN TRY
		--SET @vResult = DATEADD(dd, -@vProductionBuffer, @vPromisedDeliveryDate)
		IF(@vCdOrderType='S')
		BEGIN	
			IF (@vOldPriorityColor IS NULL OR @vOldPriorityColor = 'Blue' OR @vOldPriorityColor = 'White')
			BEGIN
				SET @vResult = @vDATE_CALCULATION
			END 
			ELSE
			BEGIN
			 SET @vResult = @vRecommendedReleaseDateOld
			END
		END 
		ELSE
		BEGIN
			SET @vResult = @vPromisedDeliveryDate
			SET @vAbsProductionBuffer = ABS(@vProductionBuffer)
			
			IF ( @vProductionBuffer < 0)
				BEGIN
					SET @vCountStep = -1
				END
			
			WHILE (@WORKING_DAYS < @vAbsProductionBuffer)
			BEGIN 
			
				SET @vCountDay = @vCountDay + @vCountStep
				SET @vResult = DATEADD(day, -@vCountDay, @vPromisedDeliveryDate)
				
				IF ( dbo.GET_CALCULATE_NON_WORKING_DAYS(@vResult, @vResult, @vCdCalendar) = 0)
					BEGIN
						SET @WORKING_DAYS = @WORKING_DAYS + 1
					END
			END
		
		END
		
		
		RETURN @vResult
		
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_CALCULATE_RELEASE_STATUS]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/17/2013 
-- Description:	get function calculate release status
-- =============================================
CREATE FUNCTION [dbo].[GET_CALCULATE_RELEASE_STATUS]
(
	-- Add the parameters for the function here
	@vRealReleaseDate DATE,
	@vRecommendedReleaseDate DATE,
	@vORDER_MODIFY_DATE DATE
)
RETURNS VARCHAR(1)

AS
BEGIN
	DECLARE @vResult  VARCHAR(1)
	
	IF (@vRecommendedReleaseDate IS NULL)
	BEGIN
		SET @vResult = 'W' --W-->Wait(Esperar)
	END
	ELSE
	BEGIN
		IF @vRealReleaseDate IS NULL
		BEGIN
			IF @vORDER_MODIFY_DATE < @vRecommendedReleaseDate
				SET @vResult = 'W' --W-->Wait(Esperar)
			ELSE IF @vORDER_MODIFY_DATE = @vRecommendedReleaseDate
				SET @vResult = 'R' --R --> Release(Liberacion)
			ELSE IF @vORDER_MODIFY_DATE > @vRecommendedReleaseDate
				SET @vResult = 'S' --Speed Up(Agilizar)
		END
		ELSE
		BEGIN
			IF @vRealReleaseDate < @vRecommendedReleaseDate
				SET @vResult = 'E' --E-->Early(Anticipada)
			ELSE IF @vRealReleaseDate = @vRecommendedReleaseDate
				SET @vResult = 'A' --A-->Accomplished(Cumplida)
			ELSE IF @vRealReleaseDate > @vRecommendedReleaseDate
				SET @vResult = 'O' --O-->Overdue(Atrasada)
		END	
	END
	
		
	RETURN @vResult
	
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_MAXIMUM_OF]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Oscar Londoño
-- Create date: 22/01/2015
-- Description:	Returns the maximum value of four arguments sent
-- ===========================================================================
CREATE FUNCTION [dbo].[GET_MAXIMUM_OF]
(	@ivaNumber1 NUMERIC(17,5),
	@ivaNumber2 NUMERIC(17,5),
	@ivaNumber3 NUMERIC(17,5),
	@ivaNumber4 NUMERIC(17,5) 
)
RETURNS NUMERIC(17,5) 
AS
BEGIN
	DECLARE @result    AS NUMERIC(17,5);			
	DECLARE @tabValues AS TABLE (EACH_VALUE NUMERIC(17,5));

	INSERT INTO @tabValues 
	VALUES (@ivaNumber1), 
		   (@ivaNumber2), 
		   (@ivaNumber3), 
		   (@ivaNumber4);

	SET @result = (SELECT MAX(EACH_VALUE) FROM @tabValues);
		 		
	RETURN @result
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_PREVIOUS_WORK_DAY]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 07/03/2014
-- Description:	Get previous work day
-- =============================================
CREATE FUNCTION [dbo].[GET_PREVIOUS_WORK_DAY]
(
	-- Add the parameters for the function here
	@vDate DATETIME,
	@vCdCalendar NUMERIC(4,0)
)
RETURNS DATETIME

AS
BEGIN
	DECLARE @vDateNoTimeTmp DATE = @vDate
	DECLARE @vDateNoTime DATETIME = @vDateNoTimeTmp
	DECLARE @vCount INT = 1
	DECLARE @vReturn DATETIME
	
	WHILE (@vCount > 0)
	BEGIN
		SET @vDateNoTime = DATEADD(day, -1, @vDateNoTime)
		SET @vCount = dbo.VALIDATE_NON_WORK_DAY (@vDateNoTime,@vCdCalendar)
	END
	
	SET @vReturn = DATEADD(hour, 23, @vDateNoTime )
	SET @vReturn = DATEADD(minute, 59, @vReturn )
	
	RETURN @vReturn
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_REPLENISHMENT_ACTION]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 15/04/2014
-- Description:	Method for getting the replenisment 
--action acording to the chain priority color and the replenisment family mode
-- =============================================
CREATE FUNCTION [dbo].[GET_REPLENISHMENT_ACTION]

(	@ivaReplenishmentMode VARCHAR(3),
	@ivaChainPriorityColor VARCHAR(50)	
)
RETURNS VARCHAR(10) 
AS
BEGIN
	declare @replenishmentAction  VARCHAR(10)	

	if (@ivaReplenishmentMode='A')
	begin
		set @replenishmentAction='ACCEPT'
	end
		
	if((@ivaReplenishmentMode='I')and(@ivaChainPriorityColor='Yellow' or @ivaChainPriorityColor='Red'or @ivaChainPriorityColor='Black'))
	begin
		set @replenishmentAction='ACCEPT'
	end
	
	if((@ivaReplenishmentMode='U')and(@ivaChainPriorityColor='Red'or @ivaChainPriorityColor='Black'))
	begin
		set @replenishmentAction='ACCEPT'
	end

	RETURN @replenishmentAction

END
GO
/****** Object:  UserDefinedFunction [dbo].[GET_STR_PRE_FUNCTIONS_CALCULATED_FIELDS]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 09/12/2013 
-- Description:	get string pre functions calculated fields
-- =============================================
CREATE FUNCTION [dbo].[GET_STR_PRE_FUNCTIONS_CALCULATED_FIELDS]
(
	-- Add the parameters for the function here
	@vStringAllColumns NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)

AS
BEGIN
	-- Declare the return variable here
	DECLARE @vResultVar NVARCHAR(MAX) = ''
	DECLARE @vColumns NVARCHAR(MAX)
	DECLARE @vIndividualColumns varchar(50) = null

	--BEGIN TRY
		SET @vColumns = @vStringAllColumns
		
		WHILE LEN(@vColumns) > 0
		BEGIN
			IF PATINDEX('%,%',@vColumns) > 0
				BEGIN
					SET @vIndividualColumns = SUBSTRING(@vColumns, 0, PATINDEX('%,%',@vColumns))
					SET @vColumns = SUBSTRING(@vColumns, LEN(@vIndividualColumns + ',') + 1, LEN(@vColumns))
				END
			ELSE
				BEGIN
					SET @vIndividualColumns = @vColumns
					SET @vColumns = NULL
				END
				
			IF @vIndividualColumns = 'TMP.CDFAMILY'
				SET @vResultVar = @vResultVar + '	'+'CPF.CDFAMILY' + ',' + CHAR(13)
			
			/* No esta definido en el excel pero lo necesito como variable intermedia para recalcular el valor de PROMISED_DELIVERY_DATE */
			ELSE IF @vIndividualColumns = 'SHIPPING_TIME'
				SET @vResultVar = @vResultVar + '	'+'CC.SHIPPING_TIME' + ',' + CHAR(13)

			/* No esta definido en el excel pero lo necesito como variable intermedia para calcular el valor de la funcion GET_CALCULATE_NON_WORKING_DAYS */
			ELSE IF @vIndividualColumns = 'CDCALENDAR'
				SET @vResultVar = @vResultVar + '	'+'CC.CDCALENDAR' + ',' + CHAR(13)
			
			/* definido en excel en posicion 1 */
			ELSE IF @vIndividualColumns = 'CDPLANT'
				SET @vResultVar = @vResultVar + '	'+'CPF.CDLOCATION' + ',' + CHAR(13)
				
			/* definido en excel en posicion 3 */
			ELSE IF @vIndividualColumns = 'INITIAL_BUFFER'
				SET @vResultVar = @vResultVar + '	'+'CPF.BUFFER' + ',' + CHAR(13)

			/* definido en excel en posicion 4 */
			ELSE IF @vIndividualColumns = 'CLEARENCE_BUFFER'
				SET @vResultVar = @vResultVar + '	'+'0' + ',' + CHAR(13)
			
			/* definido en excel en posicion 9 */
			ELSE IF @vIndividualColumns = 'FINALIZATION_DATE'
					SET @vResultVar = @vResultVar + '	'+'NULL' + ',' + CHAR(13)
				
			ELSE 
				SET @vResultVar = @vResultVar + '	'+@vIndividualColumns + ',' + CHAR(13)
				
		END
		
		IF LEN(@vResultVar) > 0
			SET @vResultVar = SUBSTRING(@vResultVar, 0, LEN(@vResultVar)-1)
		
		RETURN @vResultVar
		
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[GETINDICATORSDESCRIPTION]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ricardo Osorio Loaiza
-- Create date: 14/08/2013
-- Description:	Method to get indicators description associated with to a license
-- =============================================
CREATE FUNCTION [dbo].[GETINDICATORSDESCRIPTION] 
(
	@ivaIdLicense NUMERIC(10)
)
RETURNS NVARCHAR(500)

AS

BEGIN
	--Fields use by the function	
	DECLARE @vDescription AS NVARCHAR(500) = NULL;
	DECLARE @vDsIndicatorType AS NVARCHAR(50);
	DECLARE @vCIndicator CURSOR;
	SET @vCIndicator = CURSOR FORWARD_ONLY STATIC   FOR SELECT TIT.DSINDICATOR_TYPE
													    FROM TFSCM_LIC_INDICATORS TLI
															 JOIN TFSCM_CLI_INDICATORS_TYPE TIT ON(TLI.CDINDICATOR_TYPE = TIT.CDINDICATOR_TYPE) 	
													    WHERE TLI.IDLICENSE = @ivaIdLicense;
   
    --Process Indicators
    OPEN @vCIndicator;
	FETCH NEXT FROM @vCIndicator INTO @vDsIndicatorType;
    WHILE @@FETCH_STATUS = 0
	 BEGIN
		IF @vDsIndicatorType = 'indicator_value_orders_overdue'
			BEGIN
				SET @vDsIndicatorType = 'Valor de entregas a tiempo'; 
			END
		ELSE IF @vDsIndicatorType = 'indicator_perc_deliv_in_time'
			BEGIN
				SET @vDsIndicatorType = 'Porcentaje de entregas a tiempo'; 
			END 	 
		ELSE IF @vDsIndicatorType = 'indicator_color_distribution'
			BEGIN
				SET @vDsIndicatorType = 'Distribución de colores'; 
			END 	 
		ELSE IF @vDsIndicatorType = 'indicator_anti_overd_releases'
			BEGIN
				SET @vDsIndicatorType = 'Liberaciones anticipadas y atrasadas'; 
			END 
			 
 		IF @vDescription IS NOT NULL
 			BEGIN
 				SET @vDescription = @vDescription+',';
 			END
 		ELSE
 			BEGIN
 				SET @vDescription = '';
 			END
 		SET @vDescription = @vDescription+@vDsIndicatorType;				
		FETCH NEXT FROM @vCIndicator INTO @vDsIndicatorType;
    END;
     	
	
	CLOSE @vCIndicator;
	DEALLOCATE @vCIndicator;	
   	
    RETURN @vDescription;

END;
GO
/****** Object:  UserDefinedFunction [dbo].[LOG_BASE_N]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 22/07/2015
-- Description:	Return the LOGARITM value of a number y whatever base
-- =============================================
CREATE FUNCTION [dbo].[LOG_BASE_N]

(	@ivaBase NUMERIC(17,5),
	@ivaValue NUMERIC(17,5)
)
RETURNS NUMERIC(17,5) 
---- WITH ENCRYPTION
AS
BEGIN

	DECLARE @result  NUMERIC(17,5)	
		
		SELECT @result = LOG(@ivaValue) / LOG(@ivaBase)
	RETURN @result

END
GO
/****** Object:  UserDefinedFunction [dbo].[MAXIMUM]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 28/03/2014
-- Description:	Return the next intenger if the decimal part of the number is greater than zero 
-- =============================================
CREATE FUNCTION [dbo].[MAXIMUM]

(	@ivaNumber1 NUMERIC(17,5),
	@ivaNumber2 NUMERIC(17,5)
)
RETURNS NUMERIC(17,5) 
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @result  NUMERIC(17,5)	
		
		SELECT @result =  (0.5 * ((@ivaNumber1 + @ivaNumber2) + ABS(@ivaNumber1 - @ivaNumber2))) 
	RETURN @result

END
GO
/****** Object:  UserDefinedFunction [dbo].[MAXIMUM_TWO_VALUES]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 29/12/2020
-- Description : Refactoring code for nulls to be included in calculation.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Create date: 16/07/2015
-- Description:	Return the greater value of two numbers
-- ===========================================================================================
CREATE FUNCTION [dbo].[MAXIMUM_TWO_VALUES]
	(
		@ivaNumber1 AS NUMERIC(17,5),
		@ivaNumber2 AS NUMERIC(17,5)
	)
RETURNS NUMERIC(17,5)
AS
BEGIN
	DECLARE @Result AS NUMERIC(17,5);
		
	SELECT @Result = MAX(NV.NUMERIC_VALUE)
	  FROM (SELECT @ivaNumber1 AS NUMERIC_VALUE 
			 UNION 
			SELECT @ivaNumber2 AS NUMERIC_VALUE) AS NV;	

	RETURN @Result;

END
GO
/****** Object:  UserDefinedFunction [dbo].[MINIMUM_TWO_VALUES]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 29/12/2020
-- Description : Refactoring code for nulls to be included in calculation.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Create date: 16/07/2015
-- Description:	Return the less value of two numbers
-- ===========================================================================================
CREATE FUNCTION [dbo].[MINIMUM_TWO_VALUES]

(	@ivaNumber1 NUMERIC(17,5),
	@ivaNumber2 NUMERIC(17,5)
)
RETURNS NUMERIC(17,5)
AS
BEGIN
	DECLARE @Result  NUMERIC(17,5);

	SELECT @Result = MIN(NV.NUMERIC_VALUE)
	  FROM (SELECT @ivaNumber1 AS NUMERIC_VALUE 
			 UNION 
			SELECT @ivaNumber2 AS NUMERIC_VALUE) AS NV;	

	RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [dbo].[split]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 31/03/2014
-- Description:	Return tabel from split operation 
-- =============================================
CREATE FUNCTION [dbo].[split]

(	@ivaString NVARCHAR(MAX),
	@ivaDelimiter CHAR(1)
)
	RETURNS @temptable TABLE (items VARCHAR(8000)) 
	--WITH ENCRYPTION
AS     
BEGIN     
DECLARE @idx INT     
DECLARE @slice VARCHAR(8000)     

SELECT @idx = 1     
    IF len(@ivaString)<1 or @ivaString is null  RETURN     

WHILE @idx!= 0     
BEGIN     
    SET @idx = charindex(@ivaDelimiter,@ivaString)     
    IF @idx!=0     
        SET @slice = left(@ivaString,@idx - 1)     
    ELSE     
        SET @slice = @ivaString     

    IF(len(@slice)>0)
        INSERT INTO @temptable(items) VALUES(@slice)     

    SET @ivaString = right(@ivaString,len(@ivaString) - @idx)     
    IF len(@ivaString) = 0 BREAK     
END 
RETURN     
END
GO
/****** Object:  UserDefinedFunction [dbo].[TO_FIXED]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 27/07/2015
-- Description:	Round or zero-pad a number to digits decimal places.
-- =============================================
CREATE FUNCTION [dbo].[TO_FIXED]

(	@ivaValue NUMERIC(17,5),
	@ivaDigits INT
)
RETURNS VARCHAR(MAX)
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @result VARCHAR(MAX)
	DECLARE @resultAux  NUMERIC(18,7)
	DECLARE @lenghtValue INT		
	
	SELECT @lenghtValue = LEN(@ivaValue)
	SELECT @resultAux = ROUND(@ivaValue, @ivaDigits)
	IF(@ivaDigits < 0 )
	BEGIN
		SELECT @result = STR(@resultAux,(@lenghtValue),0)
	END
	ELSE
	BEGIN
		SELECT @result = STR(@resultAux,(@lenghtValue+@ivaDigits),@ivaDigits)
	END
		
	
	RETURN REPLACE(@result, ' ', '')
END
GO
/****** Object:  UserDefinedFunction [dbo].[TO_PRECISION]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 27/07/2015
-- Description:	 Format a number to a length of precision digits, rounding or 
-- adding a decimal point and zero-padding as necessary
-- =============================================
CREATE FUNCTION [dbo].[TO_PRECISION]

(	@ivaValue NUMERIC(17,5),
	@ivaDigits INT
)
RETURNS VARCHAR(MAX)
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @result VARCHAR(MAX)
	DECLARE @resultAux  NUMERIC(18,7)
	DECLARE @lenghtValue INT
	DECLARE @intSide INTEGER;
	SET  @intSide = @ivaValue
			
	IF(@ivaDigits <= 0)
	BEGIN 
		SET @result =  '.'
	END
	ELSE
	BEGIN
		
	    SELECT @lenghtValue = LEN(@intSide)	    
	    SELECT @ivaValue = ROUND(@ivaValue, @ivaDigits-@lenghtValue)
	    
	    IF(@ivaDigits <= @lenghtValue)
	    BEGIN 
			SELECT @result = STR(@ivaValue,(@lenghtValue+@ivaDigits),0)	
	    END 
	    ELSE
	    BEGIN
			SELECT @result = STR(@ivaValue,(@lenghtValue+@ivaDigits),@ivaDigits-@lenghtValue)	
	    END
		
	END 
	
	RETURN REPLACE(@result, ' ', '')
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 10/11/2020
-- Description : Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				 BAA_OUT_CLASSIFICATION.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 25/08/2020
-- Description : * Rename function UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION to
--				   UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY.
--				 * Update the function adding the Calculated Consumption Frequency column.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 26/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 28/01/2020
-- Description : * Add the filter "Ignore Outs in BAA = N".
-- 				 * Rename function UFN_CALCULATE_MOVING_AVERAGE_CONSUMPTION to
--				   UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION.
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 30/03/2017
-- Description : Removing unnecessary code.
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 29/03/2017
-- Description : Transformation to function.
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 13/08/2015
-- Description : Add the Period Lenght calculation and changes on Select Filters .
-- -------------------------------------------------------------------------------------------
-- Author       : Edward Rodriguez
-- Creation date: 05/05/2014
-- Description  : Calculate moving average consumption.
-- ===========================================================================================
CREATE FUNCTION [dbo].[UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY]
(
	@GinAverageDate	AS DATE,
	@GinAverageDays	AS INT,
	@GinSku			AS VARCHAR(50),
	@GinLocation	AS VARCHAR(50)
) RETURNS @GoutTableResult TABLE(
	GoutResult1 NUMERIC(15,5) NOT NULL,
	GoutResult2 NUMERIC(15,5) NOT NULL
) 
AS
BEGIN
    -- Fields use for calculation 
	DECLARE @BAA_OUT_CLASSIFICATION_NORMAL	AS VARCHAR(2) = 'N';	
	DECLARE @TempDays            	  		AS INT = 0;
	DECLARE @TempConsumption     	  		AS NUMERIC(15,5) = 0;
	DECLARE @DaysWithConsumption 	  		AS INT = 0;
	DECLARE @GoutResult1 		 	  		AS NUMERIC(15,5);
	DECLARE @GoutResult2 		 	  		AS NUMERIC(15,5);
	
	SET @GoutResult1 = 0;	
	SET @GoutResult2 = 0;	

	SELECT @TempDays = COUNT(1),
		   @TempConsumption = SUM([BH].[CONSOLIDATED_CONSUMPTION]) 
	  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
	 WHERE ([BH].SKU      = @GinSku)
	   AND ([BH].LOCATION = @GinLocation)
	   AND ([BH].UPDATE_MOVEMENTS  >= DATEADD(dd, -@GinAverageDays, @GinAverageDate))
	   AND ([BH].UPDATE_MOVEMENTS   < @GinAverageDate)
	   AND (([BH].INVENTORY_ON_SITE + [BH].CONSOLIDATED_CONSUMPTION) > 0)
	   AND ([BH].BAA_OUT_CLASSIFICATION = @BAA_OUT_CLASSIFICATION_NORMAL);

	IF (@TempDays = 0) 
	BEGIN
		SET @GoutResult1 = 0;
		SET @GoutResult2 = 0;
	END
	ELSE 
	BEGIN
		SET @GoutResult1 = CAST((CAST(@TempConsumption AS NUMERIC(15,5)) / @TempDays) AS NUMERIC(15,5));

		SELECT @DaysWithConsumption = COUNT(1)
		  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
		 WHERE ([BH].UPDATE_MOVEMENTS  >= DATEADD(dd, -@GinAverageDays, @GinAverageDate))
		   AND ([BH].UPDATE_MOVEMENTS   < @GinAverageDate)
		   AND ([BH].SKU      = @GinSku)
		   AND ([BH].LOCATION = @GinLocation)
		   AND ([BH].CONSOLIDATED_CONSUMPTION > 0)
		   AND ([BH].BAA_OUT_CLASSIFICATION = @BAA_OUT_CLASSIFICATION_NORMAL);
	
		IF(@DaysWithConsumption > 0)
		BEGIN
			SET @GoutResult2 = CAST((CAST(@TempDays AS NUMERIC(15,5)) / @DaysWithConsumption) AS NUMERIC(15,5));
		END
		ELSE
		BEGIN
			SET @GoutResult2 = 0;
		END						
	END
	
	INSERT @GoutTableResult
	SELECT @GoutResult1, @GoutResult2;
	RETURN; 
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_AVERAGE_ZONE]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 26/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 07/06/2018
-- Description : Get LastBufferUpdateDate for records with buffer > 0
-- Version     : 4.9.1
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 24/01/2018
-- Description : Refactoring SP_CALCULATE_AVERAGE_ZONE
-- Version     : 4.8.3
-- -------------------------------------------------------------------------------------------
-- Author      : Julian A Gonzalez
-- Upgrade date: 01/07/2016
-- Description : Buffer Validation when its value is equal to zero:
-- Version     : 2.2.0
-- -------------------------------------------------------------------------------------------
-- Author       : HernÃƒÂ¡n Dario Jimenez
-- Creation date: 22/01/2015
-- Description  : Calculate average zone for a Buffer
-- Version      : 2.2.0
-- ===========================================================================================
CREATE FUNCTION [dbo].[UFN_GET_AVERAGE_ZONE]
(
	@GinCalculationDate	DATETIME,
	@GinDayAmount		INT,	
	@GinSku				VARCHAR(50),
	@GinLocation		VARCHAR(50)
) RETURNS NVARCHAR(MAX)
AS	    
BEGIN
    DECLARE @LastPeriodDate			DATETIME;
    DECLARE @FirstPeriodDate		DATETIME;
    DECLARE @LastBufferUpdateDate  	DATETIME
    DECLARE @LongPeriod				NUMERIC(15,5);
    DECLARE @BufferInitialDate		DATETIME;
    DECLARE @AverageZone    		NUMERIC(15,5);
    DECLARE @AverageDays			NUMERIC(15,5);
    DECLARE @CyanZone				NUMERIC(15,5);
	DECLARE @GoutMessage			VARCHAR(MAX);
	
	SET @GoutMessage = ''; 
	
	-- -----------------------------------------------------------------------
	-- MESSAGES  
	-- -----------------------------------------------------------------------
	DECLARE @Language                               VARCHAR(2) = 'es';
	DECLARE @MsgCalcAvgZoneBufferNotFoundError   	NVARCHAR(MAX); 
	DECLARE @MsgCalcAvgZoneAmountDaysError        	NVARCHAR(MAX);
	
	SET @MsgCalcAvgZoneBufferNotFoundError = 'CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR';
	SET @MsgCalcAvgZoneAmountDaysError     = 'CALC_AVG_ZONE_AMOUNT_DAYS_ERROR';

	SELECT @Language = [P].[PARAM_VALUE]
	  FROM [dbo].[TFSCM_COM_PARAMS] [P]
	 WHERE [P].[CDCOMPONENT] = 6 
	   AND [P].[CDPARAM] = 'DEFAULT_LANGUAGE';
			
	SELECT @MsgCalcAvgZoneBufferNotFoundError = [M].[TEXT]
	  FROM [dbo].[TFSCM_COM_MESSAGE] [M]
	 WHERE [M].[CDMESSAGE] = 'CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR' 
	   AND [M].[LANGUAGE]  = @Language;

	SELECT @MsgCalcAvgZoneAmountDaysError = [M].[TEXT]
	  FROM [dbo].[TFSCM_COM_MESSAGE] [M]
	 WHERE [M].[CDMESSAGE] = 'CALC_AVG_ZONE_AMOUNT_DAYS_ERROR' 
	   AND [M].[LANGUAGE]  = @Language;
		
	IF EXISTS (SELECT TOP 1 * FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] WHERE [SKU] = @GinSku AND [LOCATION] = @GinLocation)
	BEGIN
		SET @LastBufferUpdateDate  = (SELECT TOP 1 MAX([BH].[UPDATE_MOVEMENTS])
										 FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH] 
								        WHERE [BH].[SKU]      = @GinSku 
										  AND [BH].[LOCATION] = @GinLocation
										  AND [BH].[BUFFER]   > 0 
										  AND [BH].[UPDATE_MOVEMENTS] <= @GinCalculationDate);
										
	    SET @BufferInitialDate = (SELECT [B].[BUFFER_INITIAL_DATE] 
									FROM [dbo].[TFSCM_CLI_BUFFER] [B]
								   WHERE [B].[SKU]      = @GinSku 
								     AND [B].[LOCATION] = @GinLocation);						   
		SET @LastPeriodDate    = @LastBufferUpdateDate;
		SET @LastPeriodDate    = DATEADD(d, -1, @LastPeriodDate);
		SET @LongPeriod        = DATEDIFF(d, @BufferInitialDate, @LastPeriodDate) + 1;
			
		IF (@LongPeriod < @GinDayAmount)
		BEGIN
			SET @GoutMessage = @MsgCalcAvgZoneAmountDaysError;	
			RETURN @GoutMessage
		END 
			
		SET @FirstPeriodDate = DATEADD(d, 1 - @GinDayAmount, @LastPeriodDate);
			
		SELECT @AverageZone = SUM(([BH].[WORST_INVENTORY_ON_SITE] - (( 1 - ([BH].[RED_ZONE_START] / 100)) * [BH].[BUFFER])) / 
									([BH].[BUFFER] * (([BH].[RED_ZONE_START] - [BH].[YELLOW_ZONE_START]) / 100 ))),
			   @AverageDays = COUNT([BH].[UPDATE_MOVEMENTS])
		  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
		 WHERE [BH].[SKU]      = @GinSku
		   AND [BH].[LOCATION] = @GinLocation
		   AND [BH].[BUFFER]	> 0 
		   AND [BH].[UPDATE_MOVEMENTS] >= @FirstPeriodDate
		   AND [BH].[UPDATE_MOVEMENTS] <= @LastPeriodDate;	 
			 
		SELECT @CyanZone = ([BH].[RED_ZONE_START] / ([BH].[RED_ZONE_START] - [BH].[YELLOW_ZONE_START]))
		  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
	     WHERE [BH].[SKU]      = @GinSku
		   AND [BH].[LOCATION] = @GinLocation
		   AND [BH].[UPDATE_MOVEMENTS] = @LastPeriodDate;
 
		SET @AverageZone = (@AverageZone / @AverageDays);
	
		IF (@AverageZone < 0)
		BEGIN
			SET @GoutMessage = 'RED';
		END 
		ELSE IF (@AverageZone >= 0 AND @AverageZone <= 1)
		BEGIN
			SET @GoutMessage = 'YELLOW';
		END
		ELSE IF (@AverageZone > 1 AND @AverageZone <= @CyanZone)
		BEGIN
			SET @GoutMessage = 'GREEN';
		END
		ELSE IF (@AverageZone > @CyanZone)
		BEGIN
			SET @GoutMessage = 'CYAN';
		END 
	END 
	ELSE
	BEGIN
		SET @GoutMessage = @MsgCalcAvgZoneBufferNotFoundError;
	END 
	
	RETURN @GoutMessage;
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_MAXIMUM_DATE_OF]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 21/11/2015
-- Description  : Returns the maximum value of four dates sent
-- Version      : 4.10.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_MAXIMUM_DATE_OF]
(	@GinDate1 DATE,
	@GinDate2 DATE,
	@GinDate3 DATE,
	@GinDate4 DATE 
)
RETURNS DATE
AS
BEGIN
	DECLARE @result    AS DATE;			
	DECLARE @tabValues AS TABLE (EACH_VALUE DATE);

	INSERT INTO @tabValues 
	VALUES (@GinDate1), 
		   (@GinDate2), 
		   (@GinDate3), 
		   (@GinDate4);

	SET @result = (SELECT MAX(EACH_VALUE) FROM @tabValues);
		 		
	RETURN @result
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_MINIMUM_OF]    Script Date: 5/04/2021 6:23:06 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 29/09/2017
-- Description  : Returns the minimum value of four arguments sent
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_MINIMUM_OF] 
(	@ivaNumber1 NUMERIC(17,5),
	@ivaNumber2 NUMERIC(17,5),
	@ivaNumber3 NUMERIC(17,5),
	@ivaNumber4 NUMERIC(17,5) 
)
RETURNS NUMERIC(17,5)
AS
BEGIN
	DECLARE @result    AS NUMERIC(17,5);
	DECLARE @tabValues AS TABLE (EACH_VALUE NUMERIC(17,5));

	INSERT INTO @tabValues 
	VALUES (@ivaNumber1),
		   (@ivaNumber2),
		   (@ivaNumber3),
		   (@ivaNumber4);

	SET @result = (SELECT MIN(EACH_VALUE) FROM @tabValues);
		 		
	RETURN @result
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_NEXT_QUANTITY_TO_REPLENISH]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 02/10/2017
-- Description  : Returns the next quantity to replenish for the buffer sent
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_NEXT_QUANTITY_TO_REPLENISH]
(	
	/* Input Parameters: */ 
	@GinThisBuffer        BufferTblType READONLY,
	-- Distribution type can be 'EXCESS' or 'SHORTAGE'
	@GinDistributionType  VARCHAR(10)
)
RETURNS NUMERIC(17,5)
AS
BEGIN  
	DECLARE @NextQuantity			 NUMERIC(17,5);  
	DECLARE @OptimizedReplenishment	 NUMERIC(17,5);
	DECLARE @SuggestedReplenishment	 NUMERIC(17,5);
	DECLARE @ProjectedSuggestion     NUMERIC(17,5);
	
	IF ((SELECT COUNT(*) FROM @GinThisBuffer) > 0)
	BEGIN
		SET @NextQuantity = 0;
		
		SELECT @NextQuantity = 
					CASE WHEN (BUFFER = 0) THEN	
							-- If buffer size is equal to 0, this buffer won't participate in the distribution
							0
						WHEN (IS_ORIGIN_BUFFER = 1) THEN
							-- Origin Buffers are consumed unit by unit, and only if its size is greater than 0
							[dbo].[UFN_GET_MINIMUM_OF] (BUFFER, 1, 9999999999, 9999999999)
						WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
							-- Next Quantity will be what is missing to complete the minimum replenishment
							MINIMUM_REPLENISHMENT - OPTIMIZED_REPLENISHMENT
						ELSE
							-- Next Quantity will be the packaging unit or what is missing to complete it
							PACKAGING_UNIT - (OPTIMIZED_REPLENISHMENT % PACKAGING_UNIT)
					END,
				@OptimizedReplenishment = OPTIMIZED_REPLENISHMENT,
				@SuggestedReplenishment = SUGGESTED_BUFFER_REPLENISH
		   FROM @GinThisBuffer;
		 
		-- Now, if the 'shortage' is being distributed, the Next Quantity is limited to Suggested Replenishment. 
		IF (@GinDistributionType = 'SHORTAGE')
		BEGIN
			SET @ProjectedSuggestion = @OptimizedReplenishment + @NextQuantity;
			
			IF (@ProjectedSuggestion > @SuggestedReplenishment)
			BEGIN
				SET @NextQuantity = 0;
			END
		END
	END
	ELSE
	BEGIN
		SET @NextQuantity = -404;
	END

	RETURN @NextQuantity
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_OPTIMIZED_PRIORITY_COLOR]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 26/09/2017
-- Description  : Calculation of the optimized priority color.
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_OPTIMIZED_PRIORITY_COLOR]
(  -- Parameters
	@GinOptimizedPriority  NUMERIC(17,5),
	@GinOptimizedInventory NUMERIC(17,5),
	@GinEffectiveBuffer    NUMERIC(17,5),
	@GinYellowZoneStart    NUMERIC(5,2),
	@GinRedZoneStart       NUMERIC(5,2)
)
RETURNS VARCHAR(50)  
AS
BEGIN
	DECLARE @OptimizedPriorityColor VARCHAR(50);
	
	IF (@GinOptimizedPriority IS NULL)
	BEGIN
		SET @OptimizedPriorityColor = 'White';
	END
	ELSE IF (@GinOptimizedPriority < 0 AND @GinOptimizedInventory > @GinEffectiveBuffer)
	BEGIN
		SET @OptimizedPriorityColor = 'Blue';
	END
	ELSE IF (@GinOptimizedPriority < 0 AND @GinOptimizedInventory <=  @GinEffectiveBuffer)
	BEGIN
		SET @OptimizedPriorityColor = 'Cyan';
	END
	ELSE IF (@GinOptimizedPriority >= 0 AND @GinOptimizedPriority < @GinYellowZoneStart)
	BEGIN
		SET @OptimizedPriorityColor = 'Green';
	END
	ELSE IF (@GinOptimizedPriority >= @GinYellowZoneStart AND @GinOptimizedPriority < @GinRedZoneStart)
	BEGIN
		SET @OptimizedPriorityColor = 'Yellow';
	END
	ELSE IF (@GinOptimizedPriority >= @GinRedZoneStart AND @GinOptimizedPriority < 100)
	BEGIN
		SET @OptimizedPriorityColor = 'Red';
	END
	ELSE IF (@GinOptimizedPriority >= 100)
	BEGIN
		SET @OptimizedPriorityColor = 'Black';
	END
	
	RETURN @OptimizedPriorityColor; 	 
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_PROJECTED_BUFFER_PRIORITY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 03/10/2017
-- Description  : Returns projected priority for the buffer sent
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_PROJECTED_BUFFER_PRIORITY]
(	
	/* Input Parameters: */ 
	@GinThisBuffer        BufferTblType READONLY, 
	@GinTentativeQuantity NUMERIC(17,5)
)
RETURNS NUMERIC(17,5)
AS
BEGIN
	DECLARE @ProjectedPriority  NUMERIC(17,5);	

	SET @ProjectedPriority	= 0;
	
	IF ((SELECT COUNT(*) FROM @GinThisBuffer) > 0)
	BEGIN
		SELECT @ProjectedPriority = 
				CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
						(BUFFER + SECURITY_STOCK - (OPTIMIZED_REPLENISHMENT + @GinTentativeQuantity)) / BUFFER
					ELSE 
						(BUFFER + SECURITY_STOCK - (NET_INVENTORY + OPTIMIZED_REPLENISHMENT + @GinTentativeQuantity)) / BUFFER
				END
		  FROM @GinThisBuffer;
	END
	ELSE
	BEGIN
		SET @ProjectedPriority = -404;
	END
 
	RETURN @ProjectedPriority
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_GET_TARGET_QUANTITY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 05/10/2017
-- Description  : Returns target quantity for the buffer list sent 
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_GET_TARGET_QUANTITY]
(	
	/* Input Parameters */ 
	@GinBufferList BufferTblType READONLY 
)
RETURNS NUMERIC(17,5)
AS
BEGIN
	DECLARE @TargetQuantity NUMERIC(17,5);
	SET @TargetQuantity = 0;

	SELECT @TargetQuantity = SUM(FACTORIZED_SUGGESTED_REPLENISHMENT) FROM @GinBufferList; 
 
	RETURN @TargetQuantity
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_IS_AVAILABLE_QUANTITY_ENOUGH]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 02/10/2017
-- Description  : Returns whether available quantity is enough or not
-- Version      : 4.8.0
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_IS_AVAILABLE_QUANTITY_ENOUGH] 
(	@GinAvailableQuantity 	 	NUMERIC(17,5),
	@GinFactorizedReplenishment NUMERIC(17,5),
	@GinCanExceedTarget   	    BIT 
)
RETURNS BIT
AS
BEGIN
	DECLARE @Response BIT;

	IF (@GinFactorizedReplenishment = 0)
	BEGIN
		SET @Response  = 0;
	END
	ELSE IF (@GinFactorizedReplenishment <= @GinAvailableQuantity)
	BEGIN
		SET @Response = 1;
	END
	ELSE IF (@GinCanExceedTarget = 1)
	BEGIN
		SET @Response = 1;
	END
	ELSE
	BEGIN
		SET @Response = 0;
	END 

	RETURN @Response
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_ORDER_STRING_CHARACTERS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: dd/mm/yyyy
-- Description : 
-- Version     : ?.?.?
-- ---------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Create date : 25/04/2018
-- Description : Function for ordering characters alphabeticaly within a string
-- Return      : String with upper-alphabetical-ordered characters
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_ORDER_STRING_CHARACTERS]
(	
	@GinString NVARCHAR(MAX) 
)
	RETURNS NVARCHAR(MAX)
AS     
BEGIN    
	DECLARE @OrderedString	NVARCHAR(MAX)  ;
	DECLARE @CurrentPos     INT;     
	DECLARE @CurrentChar    VARCHAR(1);
	DECLARE @StringSize     INT
	DECLARE @TempTable		TABLE (item VARCHAR(1));
	     
	IF (@GinString IS NULL OR LEN(@GinString) = 0)
	BEGIN
		RETURN @GinString;
	END
	
	SET @StringSize = LEN(@GinString);
	SET @CurrentPos = 1;

	WHILE (@CurrentPos <= @StringSize)
	BEGIN
		SET @CurrentChar = SUBSTRING(@GinString, @CurrentPos, 1);
		SET @CurrentPos  = @CurrentPos + 1;
		
		INSERT INTO @TempTable(item)
		VALUES (@CurrentChar);
	END 

	DECLARE chars_cursor CURSOR FAST_FORWARD FOR
	 SELECT DISTINCT UPPER(item) item
	   FROM @TempTable
	  ORDER BY item;

	OPEN chars_cursor;
	
	FETCH NEXT FROM chars_cursor
	 INTO @CurrentChar;

	SET @OrderedString = '';

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		SET @OrderedString = @OrderedString + @CurrentChar;
		
		FETCH NEXT FROM chars_cursor 
		 INTO @CurrentChar;
	END
	
	RETURN @OrderedString;
END
GO
/****** Object:  UserDefinedFunction [dbo].[UFN_VALIDATE_RECALCULATE_BUFFERS_JOB]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================
-- Author      : 
-- Upgrade date: dd/mm/yyyy
-- Description : 
-- Version     : X.Y.Z
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 20/02/2018
-- Description  : Function for doing some validations when a Recalculate 
--                Buffers Job is being created or modified
-- Parameters   : @GinPeriodicityType Periodicity Type selected for the job:
--										* MONTLY
--										* WEEKLY
--										* DAILY
--										* EACH_N_DAYS
--										* NONE
--				  @GinIdJob           Job ID
--										* If it is new, the Id sent is -9999
--										* If it already exists, the Job ID 
-- Version      : 4.8.3
-- ===========================================================================
CREATE FUNCTION [dbo].[UFN_VALIDATE_RECALCULATE_BUFFERS_JOB]
(
	@GinPeriodicityType VARCHAR(50),
	@GinIdJob NUMERIC(10,0)
) 
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @ovaMessage VARCHAR(500);
	
	SET @ovaMessage = '';
		 
	/* Job type 6 --> 'Recalculate Buffers' */
	DECLARE @JobType    NUMERIC(2)  = 6;
	DECLARE @IsActive   VARCHAR(1)  = 'Y';
	DECLARE @Montly     VARCHAR(50) = 'MONTLY';
	DECLARE @Weekly     VARCHAR(50) = 'WEEKLY';
	DECLARE @Daily      VARCHAR(50) = 'DAILY';
	DECLARE @None       VARCHAR(50) = 'NONE';

	IF (@GinPeriodicityType = @Weekly)
	BEGIN
		/* Look for another Weekly Job, already created*/
		IF EXISTS (SELECT *
					 FROM [dbo].[TFSCM_COM_JOBS]
					WHERE (JOB_TYPE = @JobType) 
					  AND (ENABLE   = @IsActive)
					  AND (CRON_EXP_DAY_OF_WEEK IS NOT NULL AND CRON_EXP_DAY_OF_WEEK != '?')
					  AND (IDJOB  NOT IN (@GinIdJob)))
		BEGIN
			SET @ovaMessage = 'recalculateBuffersWeeklyJobAlreadyExists'
		END
		ELSE IF EXISTS (SELECT *
						 FROM [dbo].[TFSCM_COM_JOBS]
						WHERE (JOB_TYPE = @JobType) 
						  AND (ENABLE   = @IsActive)
					      AND (IDJOB  NOT IN (@GinIdJob)))
		BEGIN			
			SET @ovaMessage = 'recalculateBuffersWeeklyJobCannotBeCreated'
		END
		
	END
	ELSE IF (@GinPeriodicityType != @Weekly)
	BEGIN
		IF EXISTS (SELECT *
					 FROM [dbo].[TFSCM_COM_JOBS]
					WHERE (JOB_TYPE = @JobType) 
					  AND (ENABLE = @IsActive)
					  AND (CRON_EXP_DAY_OF_WEEK IS NOT NULL AND CRON_EXP_DAY_OF_WEEK != '?')
					  AND (IDJOB NOT IN (@GinIdJob)))
		BEGIN
			SET @ovaMessage = 'recalculateBuffersWeeklyJobExists'
		END
		/* ELSE IF EXISTS (SELECT *
					 FROM [dbo].[TFSCM_COM_JOBS]
					WHERE (JOB_TYPE = @JobType) AND (ENABLE = @IsActive))
		BEGIN
			SET @ovaMessage = 'recalculateBuffersJobAlreadyExists'
		END */
	END

	RETURN @ovaMessage;
END
GO
/****** Object:  UserDefinedFunction [dbo].[VALIDATE_COLUMN_ACCURACY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julian Andres Gonzalez Velez
-- Create date: 21/08/2014
-- Description:	Method for validating decimal accuracy by column
-- =============================================
CREATE FUNCTION [dbo].[VALIDATE_COLUMN_ACCURACY]

(	@ivaColumnAccuracy INT,
	@ivaDecimalValue NUMERIC(38,5)	
)
RETURNS  NUMERIC(38,5) 
AS
BEGIN	
	declare @finalResult  NUMERIC(38,5)
	IF(@ivaColumnAccuracy<0)
	BEGIN
		SET @ivaColumnAccuracy = 0
	END 
	
	IF(@ivaColumnAccuracy>5)
	BEGIN
		SET @ivaColumnAccuracy = 5
	END 	
	SELECT @finalResult =  ROUND(@ivaDecimalValue,@ivaColumnAccuracy)
	RETURN @finalResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[VALIDATE_DENOMINATOR]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 10/09/2013
-- Description:	Method for validating the denominador value for divitions with zero
-- =============================================
CREATE FUNCTION [dbo].[VALIDATE_DENOMINATOR]

(	@ivaNumerator NUMERIC(18,2),
	@ivaDenominator NUMERIC(10)	
)
RETURNS NUMERIC(10,2) 
AS
BEGIN

	declare @result  NUMERIC(10,2)

	if @ivaDenominator=0
		set @result=0
	else 
		set @result=(@ivaNumerator/@ivaDenominator)*100

	RETURN @result

END
GO
/****** Object:  UserDefinedFunction [dbo].[VALIDATE_NON_WORK_DAY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 15/11/2013 
-- Description:	validate non work day
-- =============================================
CREATE FUNCTION [dbo].[VALIDATE_NON_WORK_DAY]
(
	-- Add the parameters for the function here
	@vPromisedDeliveryDateWithTime DATETIME,
	@vCdCalendar NUMERIC(4,0)
)
RETURNS BIT

AS
BEGIN
	DECLARE @vResult BIT = 0
	DECLARE @vCount INT = 0
	--DECLARE @vResultAux NUMERIC(4,0) = 0
	DECLARE @vPromisedDeliveryDate DATE
	
	SET @vPromisedDeliveryDate = @vPromisedDeliveryDateWithTime
	
	SET @vCount =
	(
		SELECT COUNT(CDCALENDAR)
		FROM TFSCM_CLI_DET_CALENDAR
		WHERE CDCALENDAR = @vCdCalendar AND
		CALENDAR_DATE = @vPromisedDeliveryDate
		AND FREQUENCY = 'N' --Not repeat
	) 
	
	IF(@vCount = 0)
	BEGIN
		SET @vCount =
		(
			SELECT COUNT(CDCALENDAR)
			FROM TFSCM_CLI_DET_CALENDAR
			WHERE CDCALENDAR = @vCdCalendar 
			AND FREQUENCY = 'W'
			AND DATEPART(dw,CALENDAR_DATE) = DATEPART(dw,@vPromisedDeliveryDate)
		)
		
	END
	
	IF(@vCount = 0)
	BEGIN
		SET @vCount =
		(
			SELECT COUNT(CDCALENDAR)
			FROM TFSCM_CLI_DET_CALENDAR
			WHERE CDCALENDAR = @vCdCalendar 
			AND FREQUENCY = 'Y'
			AND DATEPART(day,CALENDAR_DATE) = DATEPART(day,@vPromisedDeliveryDate)
			AND DATEPART(month,CALENDAR_DATE) = DATEPART(month,@vPromisedDeliveryDate)
		)
	
	END
	
	IF(@vCount > 0)
	BEGIN
		SET @vResult = 1
	END
	
	
	RETURN @vResult
	--END TRY
	
	--BEGIN CATCH
	--	PRINT	' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
	--			' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
	--			' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	--END CATCH
END
GO
/****** Object:  Table [dbo].[TFSCM_LIC_LICENSES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_LIC_LICENSES](
	[IDLICENSE] [numeric](10, 0) IDENTITY(1,1) NOT NULL,
	[CUSTOMER_NAME] [varchar](100) NOT NULL,
	[NIT] [varchar](50) NULL,
	[CUSTOMER_ADDRESS] [varchar](200) NULL,
	[PHONE] [varchar](50) NULL,
	[START_DATE] [datetime] NOT NULL,
	[LIFE_TIME] [numeric](6, 0) NOT NULL,
	[DATABASE_LIMIT] [numeric](4, 0) NOT NULL,
	[PRODUCTION_ORDERS_LIMIT] [numeric](10, 0) NOT NULL,
	[CRITICAL_RESOURCES_LIMIT] [numeric](10, 0) NOT NULL,
	[BUFFERS_LIMIT] [numeric](10, 0) NOT NULL,
	[PURCHASE_ORDER_LIMIT] [numeric](10, 0) NOT NULL,
	[USERS_LIMIT] [numeric](10, 0) NOT NULL,
	[SERVER_CODE] [varchar](4000) NOT NULL,
 CONSTRAINT [PK_TFSCM_LIC_LICENSES] PRIMARY KEY CLUSTERED 
(
	[IDLICENSE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[TFSCM_LIC_LICENSES_VIEW]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[TFSCM_LIC_LICENSES_VIEW] AS
SELECT TLL.*,dbo.GETINDICATORSDESCRIPTION(TLL.IDLICENSE) INDICATORS,DATEADD(DD,TLL.LIFE_TIME,TLL.START_DATE) END_DATE
FROM TFSCM_LIC_LICENSES TLL
GO
/****** Object:  Table [dbo].[archivo]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[archivo](
	[RECORD_ID] [varchar](140) NULL,
	[ITEM_ID] [varchar](140) NOT NULL,
	[VALUE] [varchar](140) NULL,
	[DATE_1] [varchar](140) NULL,
	[DESCRIPCION] [varchar](140) NULL,
PRIMARY KEY CLUSTERED 
(
	[ITEM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DUAL]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DUAL](
	[DUMMY] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LOG_TMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LOG_TMP](
	[CODE] [bigint] IDENTITY(1,1) NOT NULL,
	[LOG_MESSAGE] [nvarchar](max) NULL,
 CONSTRAINT [PK_LOG_TMP] PRIMARY KEY CLUSTERED 
(
	[CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_ANTI_OVERD_RELEASES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_ANTI_OVERD_RELEASES](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[SERIE] [varchar](300) NOT NULL,
	[COMPLETED_EARLY_RELEASES] [numeric](8, 0) NOT NULL,
	[OPEN_EARLY_RELEASES] [numeric](8, 0) NOT NULL,
	[COMPLETED_OVERDUE_RELEASES] [numeric](8, 0) NOT NULL,
	[OPEN_OVERDUE_RELEASES] [numeric](8, 0) NOT NULL,
	[TOTAL_RELEASES] [numeric](9, 0) NOT NULL,
	[PERCENTAGE_EARLY_RELEASES] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_OVERDUE_RELEASES] [numeric](10, 2) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_ANTI_OVERD_RELEASES] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC,
	[SERIE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_AUTOMATION_RULES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_AUTOMATION_RULES](
	[RULE_ID] [int] IDENTITY(1,1) NOT NULL,
	[CDSECTION] [varchar](10) NOT NULL,
	[CDRULE] [varchar](50) NOT NULL,
	[DESCRIPTION] [varchar](50) NULL,
	[FILTER] [varchar](5000) NOT NULL,
	[JSON_FILTER] [varchar](5000) NOT NULL,
	[TARGET_FIELD] [varchar](50) NOT NULL,
	[TARGET_VALUE] [varchar](200) NULL,
	[SEQUENCE] [int] NOT NULL,
	[IS_ACTIVE] [varchar](1) NOT NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATION_USER] [varchar](50) NULL,
	[MODIFICATION_DATE] [datetime] NULL,
	[MODIFICATION_USER] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_AUTOMATION_RULES] PRIMARY KEY CLUSTERED 
(
	[RULE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER](
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[FAMILY] [varchar](50) NOT NULL,
	[ORIGIN_LOCATION] [varchar](50) NOT NULL,
	[REPLENISHMENT_TIME] [int] NOT NULL,
	[BUFFER] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_SITE] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_TRANSIT] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PURCHASING] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION] [numeric](17, 5) NOT NULL,
	[UPDATE_MOVEMENTS] [date] NOT NULL,
	[MINIMUM_BUFFER] [numeric](17, 5) NOT NULL,
	[SECURITY_STOCK] [numeric](17, 5) NOT NULL,
	[MINIMUM_REPLENISHMENT] [numeric](17, 5) NULL,
	[PACKAGING_UNIT] [numeric](17, 5) NOT NULL,
	[UNIT_PRICE] [numeric](17, 2) NULL,
	[TVC] [numeric](17, 2) NOT NULL,
	[CONSOLIDATED_REPLENISHMENT] [numeric](17, 5) NOT NULL,
	[POSITIVE_ADJUSTMENTS] [numeric](17, 5) NOT NULL,
	[CONSUMPTION] [numeric](17, 5) NOT NULL,
	[NEGATIVE_ADJUSTMENTS] [numeric](17, 5) NOT NULL,
	[LOCATION_TYPE] [varchar](50) NOT NULL,
	[UNIT_THROUGHPUT] [numeric](17, 2) NULL,
	[NOTES] [nvarchar](4000) NULL,
	[INACTIVE] [bit] NOT NULL,
	[INACTIVATION_DATE] [date] NULL,
	[BUFFER_INITIAL_DATE] [date] NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATOR_USER] [varchar](50) NULL,
	[MODIFY_DATE] [datetime] NULL,
	[MODIFY_USER] [varchar](50) NULL,
	[ALLOWED_OVERSTOCKING] [numeric](17, 5) NULL,
	[EFFECTIVE_BUFFER] [numeric](17, 5) NULL,
	[INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[INVENTORY_ON_TRANSIT] [numeric](17, 5) NULL,
	[INVENTORY_ON_PURCHASING] [numeric](17, 5) NULL,
	[INVENTORY_ON_PRODUCTION] [numeric](17, 5) NULL,
	[INVENTORY_ON_CHAIN] [numeric](17, 5) NULL,
	[SITE_PRIORITY] [numeric](17, 2) NULL,
	[SITE_PRIORITY_COLOR] [varchar](50) NULL,
	[NET_PRIORITY] [numeric](17, 2) NULL,
	[NET_PRIORITY_COLOR] [varchar](50) NULL,
	[MISSING_BUFFER_INVENTORY] [numeric](17, 5) NULL,
	[SUGGESTED_BUFFER_REPLENISH] [numeric](17, 5) NULL,
	[APPROVED_BUFFER_REPLENISH] [numeric](17, 5) NULL,
	[REPLENISHMENT_ACTION] [varchar](10) NULL,
	[TOTAL_CONSOLIDATED_INPUTS] [numeric](17, 5) NULL,
	[TOTAL_CONSOLIDATED_OUTPUTS] [numeric](17, 5) NULL,
	[LAST_COLOR_CHANGE_DATE] [date] NULL,
	[MANAGED] [bit] NULL,
	[CDGROUP] [numeric](2, 0) NOT NULL,
	[CDUNIT] [varchar](50) NOT NULL,
	[LAST_TOTAL_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[WORST_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[LAST_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[DAYS_SINCE_LAST_OUT] [numeric](5, 0) NULL,
	[LAST_TOTAL_OUTS_MAX_SUM] [numeric](17, 5) NULL,
	[PROTECTION_FACTOR] [numeric](17, 2) NULL,
	[ADJUSTMENT_TYPE] [varchar](50) NULL,
	[SUGGESTED_BUFFER] [numeric](17, 5) NULL,
	[APPROVED_BUFFER] [numeric](17, 5) NULL,
	[ADJUSTMENT_ACTION] [varchar](50) NULL,
	[SUGGESTION_DATE] [datetime] NULL,
	[SUGGESTION_REJECTION_CAUSE] [varchar](10) NULL,
	[SUGGESTION_EXPIRATION_DATE] [datetime] NULL,
	[SUGGESTION_ALERTS] [varchar](50) NULL,
	[NEXT_BUFFER_ANALYSIS] [datetime] NULL,
	[RT_ADJUSTMENT_TYPE] [varchar](50) NULL,
	[LAST_INCREASE_SUGGESTION_DATE] [date] NULL,
	[MANAGED_RT] [bit] NOT NULL,
	[RESET_COUNT] [bit] NOT NULL,
	[REPLENISHMENT_PROBLEM] [varchar](10) NULL,
	[PENDING_DEMAND] [numeric](17, 5) NOT NULL,
	[NET_INVENTORY] [numeric](17, 5) NULL,
	[REPLENISHMENT_PRIORITY] [int] NOT NULL,
	[OPTIMIZED_REPLENISHMENT] [numeric](17, 5) NULL,
	[OPTIMIZED_PRIORITY] [numeric](17, 2) NULL,
	[OPTIMIZED_PRIORITY_COLOR] [varchar](50) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EXCLUDED_OUTS] [numeric](17, 5) NOT NULL,
	[REPLENISHMENT_FREQUENCY] [numeric](10, 0) NOT NULL,
	[SBC_BUFFER_SIZE] [numeric](17, 5) NOT NULL,
	[PROJECTED_INCREMENTS] [numeric](12, 2) NULL,
	[ATYPICAL_CONSUMPTION_FREQUENCY] [numeric](10, 0) NULL,
	[DAILY_AVERAGE_CONSUMPTION] [numeric](15, 5) NULL,
	[AVAILABLE_INVENTORY] [numeric](15, 5) NOT NULL,
	[AVERAGE_CONSUMPTION_FREQUENCY] [numeric](12, 2) NULL,
	[ORIGIN_INVENTORY_ON_SITE] [numeric](15, 5) NULL,
	[ORIGIN_NET_INVENTORY] [numeric](15, 5) NULL,
	[ORIGIN_BUFFER_FAMILY] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LOCATION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[ACCEPTED_SUGGESTIONS] [numeric](10, 0) NOT NULL,
	[MODIFIED_SUGGESTIONS] [numeric](10, 0) NOT NULL,
	[REJECTED_SUGGESTIONS] [numeric](10, 0) NOT NULL,
	[EXPIRED_SUGGESTIONS] [numeric](10, 0) NOT NULL,
	[TOTAL_SUGGESTIONS] [numeric](10, 0) NOT NULL,
	[ACCEPTED_SUGGESTIONS_PERCENT] [numeric](18, 2) NOT NULL,
	[MODIFIED_SUGGESTIONS_PERCENT] [numeric](18, 2) NOT NULL,
	[REJECTED_SUGGESTIONS_PERCENT] [numeric](18, 2) NOT NULL,
	[EXPIRED_SUGGESTIONS_PERCENT] [numeric](18, 2) NOT NULL,
	[START_DATE] [date] NOT NULL,
	[END_DATE] [date] NOT NULL,
	[CALCULATION_DATETIME] [datetime] NOT NULL,
 CONSTRAINT [PK_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_CHANGES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES](
	[EVENT] [varchar](50) NOT NULL,
	[CHANGE_TYPE] [varchar](1) NOT NULL,
	[REQUIRED_CHANGE] [numeric](17, 5) NOT NULL,
	[PREPARATION_START_DATE] [date] NOT NULL,
	[EVENT_STARTING_DATE] [date] NOT NULL,
	[EVENT_ENDING_DATE] [date] NOT NULL,
	[CHANGE_STEPS] [numeric](10, 0) NOT NULL,
	[FILTER] [varchar](max) NULL,
	[DAYS_BETWEEN_CHANGES] [numeric](17, 5) NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATION_USER] [varchar](50) NULL,
	[MODIFICATION_DATE] [datetime] NULL,
	[MODIFICATION_USER] [varchar](50) NULL,
	[PREPARATION_END_DATE] [date] NOT NULL,
	[MODE] [varchar](50) NULL,
	[SKU_CHG] [varchar](50) NULL,
	[LOCATION_CHG] [varchar](50) NULL,
	[JSON_FILTER] [varchar](max) NOT NULL,
	[PROCESSING_DATE] [datetime] NOT NULL,
	[ATYPICAL_CONSUMPTION_STATUS] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_CHANGES] PRIMARY KEY CLUSTERED 
(
	[EVENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS](
	[EVENT_STEP_ID] [int] IDENTITY(1,1) NOT NULL,
	[EVENT] [varchar](50) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[STEP] [numeric](10, 0) NOT NULL,
	[DATE] [date] NOT NULL,
	[DELTA] [numeric](17, 5) NOT NULL,
	[BASE_BUFFER_DELTA] [numeric](17, 5) NOT NULL,
	[PROCESSING_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_CHANGES_STEPS] PRIMARY KEY CLUSTERED 
(
	[EVENT_STEP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP](
	[ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[IDEXCHANGE] [numeric](10, 0) NOT NULL,
	[EVENT] [varchar](50) NOT NULL,
	[SKU_CHG] [varchar](50) NOT NULL,
	[LOCATION_CHG] [varchar](50) NOT NULL,
	[CHANGE_TYPE] [varchar](1) NOT NULL,
	[REQUIRED_CHANGE] [numeric](17, 5) NULL,
	[PREPARATION_START_DATE] [date] NOT NULL,
	[EVENT_STARTING_DATE] [date] NOT NULL,
	[EVENT_ENDING_DATE] [date] NULL,
	[CHANGE_STEPS] [numeric](10, 0) NOT NULL,
	[FILE_NAME] [varchar](500) NOT NULL,
	[PREPARATION_END_DATE] [date] NOT NULL,
	[MODE] [varchar](50) NULL,
	[STATUS] [bit] NULL,
	[PROCESSING_DATE] [datetime] NOT NULL,
	[ATYPICAL_CONSUMPTION_STATUS] [varchar](1) NOT NULL,
	[FILE_ROW_NUMBER] [int] NULL,
	[REQUIRED_CHANGE_STR] [varchar](50) NULL,
	[PREPARATION_START_DATE_STR] [varchar](50) NULL,
	[EVENT_STARTING_DATE_STR] [varchar](50) NULL,
	[EVENT_ENDING_DATE_STR] [varchar](50) NULL,
	[CHANGE_STEPS_STR] [varchar](50) NULL,
	[PREPARATION_END_DATE_STR] [varchar](50) NULL,
	[PROCESSING_DATE_STR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_CHANGES_TEMP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[BLUE_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[BLUE_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[CIAN_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[CIAN_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[GREEN_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[GREEN_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[YELLOW_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[YELLOW_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[RED_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[RED_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[BLACK_BUFFERS_ON_CHAIN] [numeric](8, 0) NOT NULL,
	[BLACK_BUFFERS_ON_SITE] [numeric](8, 0) NOT NULL,
	[TOTAL_BUFFERS] [numeric](9, 0) NOT NULL,
	[PERCENTAGE_BLUE_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_BLUE_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_CIAN_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_CIAN_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_GREEN_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_GREEN_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_YELLOW_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_RED_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_RED_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_BLACK_BUFFERS_ON_CHAIN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_BLACK_BUFFERS_ON_SITE] [numeric](10, 2) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_STOCK_COLOR_DISTRIBUTION] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_FAMILY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY](
	[CDBUFFER_FAMILY] [varchar](50) NOT NULL,
	[DSBUFFER_FAMILY] [varchar](50) NULL,
	[REPLENISHMENT_MODE] [varchar](3) NOT NULL,
	[REPLENISHMENT_ROUNDING_MODE] [varchar](3) NOT NULL,
	[YELLOW_ZONE_START] [numeric](5, 2) NOT NULL,
	[RED_ZONE_START] [numeric](5, 2) NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[BUFFER_ADJUSTMENT_MODE] [varchar](50) NOT NULL,
	[BUFFER_DECREASE_THRESHOLD] [numeric](5, 2) NOT NULL,
	[BUFFER_INCREASE_THRESHOLD] [numeric](5, 2) NOT NULL,
	[MOVING_SUMS_FOR_RECALCULATIONS] [numeric](10, 0) NOT NULL,
	[INACTIVITY_WINDOW] [numeric](10, 0) NOT NULL,
	[TIME_BETWEEN_BUFFER_RECALCULATIONS] [numeric](10, 0) NOT NULL,
	[LOWER_PROTECTION_FACTOR] [numeric](17, 5) NOT NULL,
	[MIDDLE_PROTECTION_FACTOR] [numeric](17, 5) NOT NULL,
	[UPPER_PROTECTION_FACTOR] [numeric](17, 5) NOT NULL,
	[ATYPICAL_CONSUMPTION_THRESHOLD] [numeric](5, 2) NOT NULL,
	[CONSECUTIVE_INCREMENTS_FOR_ALERT] [numeric](10, 0) NOT NULL,
	[MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY] [numeric](10, 0) NOT NULL,
	[CONSECUTIVE_INCREMENTS_FOR_RECALCULATION] [numeric](10, 0) NOT NULL,
	[DAC_HORIZON] [numeric](10, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_FAMILY] PRIMARY KEY CLUSTERED 
(
	[CDBUFFER_FAMILY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_GROUP_PARTITION]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_GROUP_PARTITION](
	[CDGROUP] [numeric](2, 0) NOT NULL,
	[START_PARTITION_DATE] [date] NOT NULL,
	[END_PARTITION_DATE] [date] NOT NULL,
	[TABLE_PARTITION_NAME] [varchar](200) NOT NULL,
	[STATUS] [varchar](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_GROUPS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_GROUPS](
	[CDGROUP] [numeric](2, 0) NOT NULL,
	[BUFFERS_COUNT] [numeric](10, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_GROUPS] PRIMARY KEY CLUSTERED 
(
	[CDGROUP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_HISTORY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_HISTORY](
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[FAMILY] [varchar](50) NOT NULL,
	[ORIGIN_LOCATION] [varchar](50) NOT NULL,
	[REPLENISHMENT_TIME] [int] NOT NULL,
	[BUFFER] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_TRANSIT] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PURCHASING] [numeric](17, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION] [numeric](17, 5) NOT NULL,
	[MEASUREMENT_UNIT] [varchar](50) NULL,
	[MINIMUM_BUFFER] [numeric](17, 5) NOT NULL,
	[SECURITY_STOCK] [numeric](17, 5) NOT NULL,
	[MINIMUM_REPLENISHMENT] [numeric](17, 5) NULL,
	[PACKAGING_UNIT] [numeric](17, 5) NOT NULL,
	[UNIT_PRICE] [numeric](17, 2) NULL,
	[TVC] [numeric](17, 2) NOT NULL,
	[CONSOLIDATED_REPLENISHMENT] [numeric](17, 5) NOT NULL,
	[POSITIVE_ADJUST_CONSOLIDATED] [numeric](17, 5) NOT NULL,
	[CONSOLIDATED_CONSUMPTION] [numeric](17, 5) NOT NULL,
	[NEGATIVE_ADJUST_CONSOLIDATED] [numeric](17, 5) NOT NULL,
	[LOCATION_TYPE] [varchar](50) NOT NULL,
	[UNIT_THROUGHPUT] [numeric](17, 2) NULL,
	[UPDATE_MOVEMENTS] [date] NOT NULL,
	[CREATION_DATE] [datetime] NULL,
	[ALLOWED_OVERSTOCKING] [numeric](17, 5) NULL,
	[EFFECTIVE_BUFFER] [numeric](17, 5) NULL,
	[INVENTORY_ON_SITE] [numeric](15, 5) NULL,
	[INVENTORY_ON_TRANSIT] [numeric](17, 5) NULL,
	[INVENTORY_ON_PURCHASING] [numeric](17, 5) NULL,
	[INVENTORY_ON_PRODUCTION] [numeric](17, 5) NULL,
	[INVENTORY_ON_CHAIN] [numeric](17, 5) NULL,
	[SITE_PRIORITY] [numeric](17, 2) NULL,
	[SITE_PRIORITY_COLOR] [varchar](50) NULL,
	[NET_PRIORITY] [numeric](17, 2) NULL,
	[NET_PRIORITY_COLOR] [varchar](50) NULL,
	[TOTAL_CONSOLIDATED_INPUTS] [numeric](17, 5) NULL,
	[TOTAL_CONSOLIDATED_OUTPUTS] [numeric](17, 5) NULL,
	[YELLOW_ZONE_START] [numeric](10, 2) NULL,
	[RED_ZONE_START] [numeric](10, 2) NULL,
	[DAYS_SINCE_LAST_OUT] [numeric](5, 0) NULL,
	[LAST_TOTAL_OUTS_MAX_SUM] [numeric](17, 5) NULL,
	[PROTECTION_FACTOR] [numeric](17, 2) NULL,
	[WORST_INVENTORY_ON_SITE] [numeric](17, 5) NULL,
	[BAA_OUT_CLASSIFICATION] [varchar](2) NULL,
	[REPLENISHMENT_PROBLEM] [varchar](10) NULL,
	[PENDING_DEMAND] [numeric](17, 5) NOT NULL,
	[NET_INVENTORY] [numeric](17, 5) NULL,
	[REPLENISHMENT_PRIORITY] [int] NOT NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[EXCLUDED_OUTS] [numeric](17, 5) NOT NULL,
	[REPLENISHMENT_FREQUENCY] [numeric](10, 0) NOT NULL,
	[DAILY_AVERAGE_CONSUMPTION] [numeric](15, 5) NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_HISTORY] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LOCATION] ASC,
	[UPDATE_MOVEMENTS] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY](
	[SKU] [varchar](50) NOT NULL,
	[CDLOCATION] [varchar](50) NOT NULL,
	[LOCATION_TYPE] [varchar](50) NOT NULL,
	[CDLOCATION_SOURCE] [varchar](50) NOT NULL,
	[UNITS] [varchar](50) NOT NULL,
	[SITE_PRIORITY] [numeric](17, 2) NULL,
	[NET_PRIORITY] [numeric](17, 2) NULL,
	[MISSING_INVENTORY] [numeric](17, 5) NULL,
	[SUGGESTED_REPLENISHMENT] [numeric](17, 5) NULL,
	[APPROVED_REPLENISHMENT] [numeric](17, 5) NULL,
	[SUGGESTED_TYPE] [varchar](50) NULL,
	[APPROVAL_DATE] [datetime] NOT NULL,
	[APPROVER_USER] [varchar](50) NULL,
	[EXPORTED] [varchar](10) NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[CDLOCATION] ASC,
	[APPROVAL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[START_DATE] [date] NOT NULL,
	[END_DATE] [date] NOT NULL,
	[PERIOD_DAYS] [numeric](10, 0) NOT NULL,
	[SAFETY_STOCK_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[BUFFER_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[ALLOWED_OVERSTOCKING_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[SITE_SAFETY_STOCK_COST] [numeric](18, 2) NOT NULL,
	[SITE_BUFFER_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[SITE_CYAN_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[SITE_BLUE_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[CHAIN_SAFETY_STOCK_COST] [numeric](18, 2) NOT NULL,
	[CHAIN_BUFFER_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[CHAIN_CYAN_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[CHAIN_BLUE_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_SAFETY_STOCK_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_BUFFER_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_SITE_SAFETY_STOCK_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_SITE_BUFFER_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_SITE_CYAN_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_SITE_BLUE_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_CHAIN_SAFETY_STOCK_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_CHAIN_BUFFER_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_CHAIN_CYAN_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[AVERAGE_CHAIN_BLUE_INVENTORY_COST] [numeric](18, 2) NOT NULL,
	[CALCULATION_DATETIME] [datetime] NOT NULL,
 CONSTRAINT [PK_BUFFER_STOCK_VALUE] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_STOCKOUT_VALUE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_STOCKOUT_VALUE](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[SERIE] [varchar](300) NOT NULL,
	[TOTAL_SV] [numeric](18, 2) NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_BUFFER_STOCKOUT_VALUE] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[SERIE] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_BUFFER_TEMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP](
	[ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[IDEXCHANGE] [numeric](10, 0) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[FAMILY] [varchar](50) NOT NULL,
	[ORIGIN_LOCATION] [varchar](50) NOT NULL,
	[REPLENISHMENT_TIME] [numeric](9, 0) NOT NULL,
	[BUFFER] [numeric](15, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_SITE] [numeric](15, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_TRANSIT] [numeric](15, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PURCHASING] [numeric](15, 5) NOT NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION] [numeric](15, 5) NOT NULL,
	[UPDATE_MOVEMENTS] [date] NOT NULL,
	[FILE_NAME] [varchar](500) NOT NULL,
	[MINIMUM_BUFFER] [numeric](15, 5) NULL,
	[SECURITY_STOCK] [numeric](17, 5) NULL,
	[MINIMUM_REPLENISHMENT] [numeric](15, 2) NULL,
	[PACKAGING_UNIT] [numeric](15, 5) NULL,
	[UNIT_PRICE] [numeric](17, 2) NULL,
	[TVC] [numeric](17, 2) NULL,
	[POSITIVE_ADJUSTMENTS] [numeric](15, 5) NULL,
	[NEGATIVE_ADJUSTMENTS] [numeric](15, 5) NULL,
	[CDUNIT] [varchar](50) NOT NULL,
	[IS_CREATION] [bit] NOT NULL,
	[CONSUMPTION] [numeric](20, 5) NOT NULL,
	[CONSOLIDATED_REPLENISHMENT] [numeric](20, 5) NOT NULL,
	[PENDING_DEMAND] [numeric](17, 5) NOT NULL,
	[REPLENISHMENT_PRIORITY] [int] NOT NULL,
	[EXCLUDED_OUTS] [numeric](17, 5) NOT NULL,
	[REPLENISHMENT_FREQUENCY] [numeric](10, 0) NOT NULL,
	[FILE_ROW_NUMBER] [int] NULL,
	[REPLENISHMENT_TIME_STR] [varchar](50) NULL,
	[BUFFER_STR] [varchar](50) NULL,
	[TOTAL_INVENTORY_ON_SITE_STR] [varchar](50) NULL,
	[TOTAL_INVENTORY_ON_TRANSIT_STR] [varchar](50) NULL,
	[TOTAL_INVENTORY_ON_PURCHASING_STR] [varchar](50) NULL,
	[TOTAL_INVENTORY_ON_PRODUCTION_STR] [varchar](50) NULL,
	[UPDATE_MOVEMENTS_STR] [varchar](50) NULL,
	[MINIMUM_BUFFER_STR] [varchar](50) NULL,
	[SECURITY_STOCK_STR] [varchar](50) NULL,
	[MINIMUM_REPLENISHMENT_STR] [varchar](50) NULL,
	[PACKAGING_UNIT_STR] [varchar](50) NULL,
	[UNIT_PRICE_STR] [varchar](50) NULL,
	[TVC_STR] [varchar](50) NULL,
	[POSITIVE_ADJUSTMENTS_STR] [varchar](50) NULL,
	[NEGATIVE_ADJUSTMENTS_STR] [varchar](50) NULL,
	[CONSUMPTION_STR] [varchar](50) NULL,
	[CONSOLIDATED_REPLENISHMENT_STR] [varchar](50) NULL,
	[PENDING_DEMAND_STR] [varchar](50) NULL,
	[REPLENISHMENT_PRIORITY_STR] [varchar](50) NULL,
	[EXCLUDED_OUTS_STR] [varchar](50) NULL,
	[REPLENISHMENT_FREQUENCY_STR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_BUFFER_TEMP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_CALENDAR]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_CALENDAR](
	[CDCALENDAR] [numeric](4, 0) NOT NULL,
	[DSCALENDAR] [varchar](50) NOT NULL,
	[SHIPPING_TIME] [varchar](5) NOT NULL,
	[IS_DEFAULT] [bit] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
 CONSTRAINT [PK_TFSCM_CLI_CALENDAR] PRIMARY KEY CLUSTERED 
(
	[CDCALENDAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_CAUSES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_CAUSES](
	[CDCAUSE] [varchar](10) NOT NULL,
	[DSCAUSE] [varchar](50) NOT NULL,
	[CAUSE_TYPE] [varchar](1) NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[IS_SYSTEM] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_CAUSES] PRIMARY KEY CLUSTERED 
(
	[CDCAUSE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_COL_TABLE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_COL_TABLE](
	[CDVIEW] [int] NOT NULL,
	[CDTABLE] [smallint] NOT NULL,
	[CDCOLUMN] [varchar](50) NOT NULL,
	[IS_EDITABLE] [varchar](1) NULL,
	[VIEW_TYPE] [varchar](1) NULL,
	[SQL_LIST] [varchar](2000) NULL,
	[VIEW_FORMAT] [varchar](1) NULL,
	[IS_PRIMARY_KEY] [varchar](50) NULL,
	[DSTYPE] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_COL_TABLE] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC,
	[CDTABLE] ASC,
	[CDCOLUMN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[CIAN_ORDERS] [numeric](8, 0) NOT NULL,
	[YELLOW_ORDERS] [numeric](8, 0) NOT NULL,
	[RED_ORDERS] [numeric](8, 0) NOT NULL,
	[BLACK_ORDERS] [numeric](8, 0) NOT NULL,
	[TOTAL_ORDERS] [numeric](9, 0) NOT NULL,
	[PERCENTAGE_CIAN] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_YELLOW] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_RED] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_BLACK] [numeric](10, 2) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
	[GREEN_ORDERS] [numeric](8, 0) NOT NULL,
	[PERCENTAGE_GREEN] [numeric](5, 2) NOT NULL,
	[BLUE_ORDERS] [numeric](8, 0) NOT NULL,
	[PERCENTAGE_BLUE] [numeric](10, 2) NOT NULL,
 CONSTRAINT [PK_COLOR_DISTRIBUTION] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_COLUMN_LIST]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_COLUMN_LIST](
	[LIST_TYPE] [varchar](50) NOT NULL,
	[CODE] [varchar](50) NOT NULL,
	[DESCRIPTION] [varchar](100) NOT NULL,
	[DSTYPE] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_COLUMN_LIST] PRIMARY KEY CLUSTERED 
(
	[LIST_TYPE] ASC,
	[CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_DET_CALENDAR]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_DET_CALENDAR](
	[CDCALENDAR] [numeric](4, 0) NOT NULL,
	[CALENDAR_DATE] [date] NOT NULL,
	[FREQUENCY] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_DET_CALENDAR] PRIMARY KEY CLUSTERED 
(
	[CDCALENDAR] ASC,
	[CALENDAR_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_INDICATORS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_INDICATORS](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[CDINDICATOR_TYPE] [numeric](4, 0) NOT NULL,
	[JSON_USER_FILTER] [varchar](4000) NULL,
	[SERIE_COLUMN] [varchar](50) NULL,
	[FREQUENCY] [varchar](1) NULL,
	[LAST_CALCULATION_DATE] [datetime] NULL,
 CONSTRAINT [PK_TFSCM_CLI_INDICATORS] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_INDICATORS_TYPE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_INDICATORS_TYPE](
	[CDINDICATOR_TYPE] [numeric](4, 0) NOT NULL,
	[DSINDICATOR_TYPE] [varchar](50) NOT NULL,
	[CALCULATION_TYPE] [varchar](10) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_INDICATORS_TYPE] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_LOCATION]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_LOCATION](
	[CDLOCATION] [varchar](50) NOT NULL,
	[CDCALENDAR] [numeric](4, 0) NOT NULL,
	[LOCATION_TYPE] [varchar](2) NOT NULL,
	[LOCATION_MODIFY_DATE] [date] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
 CONSTRAINT [PK_TFSCM_CLI_LOCATION] PRIMARY KEY CLUSTERED 
(
	[CDLOCATION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_LOCATION_TEMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_LOCATION_TEMP](
	[IDEXCHANGE] [numeric](10, 0) NOT NULL,
	[CDLOCATION] [nvarchar](50) NOT NULL,
	[LOCATION_TYPE] [varchar](2) NOT NULL,
	[FILE_NAME] [varchar](500) NOT NULL,
	[ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[LOCATION_MODIFY_DATE] [datetime] NULL,
	[FILE_ROW_NUMBER] [int] NULL,
	[LOCATION_MODIFY_DATE_STR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_LOCATION_TEMP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS](
	[ID_MESSAGESNOTIFICATIONS] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[MESSAGE] [varchar](8000) NULL,
	[NOTIFICATION_TYPE] [varchar](3) NULL,
	[SHOW_IN_CONTROL_PANEL] [bit] NULL,
 CONSTRAINT [PK_MESSAGESNOTIFICATIONS] PRIMARY KEY CLUSTERED 
(
	[ID_MESSAGESNOTIFICATIONS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL](
	[ID_MESSAGESNOTIFICATIONS_DETAIL] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[ID_MESSAGESNOTIFICATIONS] [numeric](18, 0) NOT NULL,
	[MESSAGES] [varchar](4000) NULL,
 CONSTRAINT [PK_MESSAGESNOTIFICATIONS_DETAIL] PRIMARY KEY CLUSTERED 
(
	[ID_MESSAGESNOTIFICATIONS_DETAIL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS](
	[CDVIEW] [int] NOT NULL,
	[ID_MESSAGESNOTIFICATIONS] [numeric](18, 0) NOT NULL,
 CONSTRAINT [PK_MESSAGESNOTIFICATIONS_VIEWS] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC,
	[ID_MESSAGESNOTIFICATIONS] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_MODULE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_MODULE](
	[CDMODULE] [smallint] NOT NULL,
	[DSMODULE] [varchar](100) NOT NULL,
	[MENU_ORDER] [smallint] NULL,
	[CDPERMISSION] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_MODULE] PRIMARY KEY CLUSTERED 
(
	[CDMODULE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PERC_DELIV_IN_TIME]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PERC_DELIV_IN_TIME](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[SERIE] [varchar](300) NOT NULL,
	[COMPLETED_ORDERS_OVERDUE] [numeric](18, 2) NOT NULL,
	[OPEN_ORDERS_OVERDUE] [numeric](18, 2) NOT NULL,
	[ORDERS_DELIVER] [numeric](10, 0) NOT NULL,
	[PERCENTAGE_COO] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_OOO] [numeric](10, 2) NOT NULL,
	[PERCENTAGE_DEL_IN_TIME] [numeric](10, 2) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_PERC_DELIV_IN_TIME] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[SERIE] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PORTLET_PANEL]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PORTLET_PANEL](
	[CDVIEW] [int] NOT NULL,
	[SHOW_SERIES] [bit] NULL,
	[NM_POSITION] [int] NOT NULL,
	[COLUM_NUM] [int] NOT NULL,
	[SHOW_X_AXIS] [bit] NULL,
	[FRECUENCY_TYPE] [varchar](1) NOT NULL,
	[FRECUENCY_AMOUNT] [numeric](3, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_PORTLET_PANEL] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PRODUCTION_FAMILY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY](
	[CDFAMILY] [varchar](50) NOT NULL,
	[DSFAMILY] [varchar](50) NULL,
	[BUFFER] [numeric](10, 0) NOT NULL,
	[STANDARD_TIME_DELIVERY] [numeric](10, 0) NOT NULL,
	[CDLOCATION] [varchar](50) NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[YELLOW_ZONE_START] [numeric](5, 2) NOT NULL,
	[RED_ZONE_START] [numeric](5, 2) NOT NULL,
	[TOUCH_TIME] [numeric](17, 5) NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_FAMILY] PRIMARY KEY CLUSTERED 
(
	[CDFAMILY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS](
	[CDORDER] [varchar](50) NOT NULL,
	[CDPARENT_ORDER] [varchar](50) NULL,
	[CDORDER_TYPE] [varchar](1) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[CDDESTINATION] [varchar](50) NOT NULL,
	[PROMISED_DELIVERY_DATE] [datetime] NULL,
	[REAL_RELEASE_DATE] [datetime] NULL,
	[CDFAMILY] [varchar](50) NOT NULL,
	[PENDING_AMOUNT] [numeric](17, 2) NOT NULL,
	[ORDER_VALUE] [numeric](17, 2) NOT NULL,
	[CDPLANT] [varchar](50) NOT NULL,
	[INITIAL_BUFFER] [numeric](8, 0) NULL,
	[CLEARENCE_BUFFER] [numeric](10, 0) NULL,
	[PRODUCTION_BUFFER] [numeric](10, 0) NULL,
	[RECOMMENDED_RELEASE_DATE] [datetime] NULL,
	[RELEASE_STATUS] [varchar](1) NULL,
	[FINALIZATION_DATE] [datetime] NULL,
	[PRIORITY] [numeric](17, 2) NULL,
	[PRIORITY_COLOR] [varchar](50) NULL,
	[LAST_COLOR_UPDATE] [datetime] NULL,
	[MANAGED_ORDER] [bit] NULL,
	[ORDER_NOTES] [nvarchar](4000) NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATOR_USER] [varchar](50) NULL,
	[MODIFY_DATE] [datetime] NULL,
	[MODIFY_USER] [varchar](50) NULL,
	[CAUSE_EARLY_RELEASE] [varchar](10) NULL,
	[CDWORKPLACE] [varchar](50) NULL,
	[ORDER_MODIFY_DATE] [datetime] NOT NULL,
	[TOTAL_AMOUNT] [numeric](17, 2) NOT NULL,
	[PROGRESS_PERCENTAGE] [numeric](17, 5) NULL,
	[PRODUCTION_PROBLEM_CAUSE] [varchar](10) NULL,
	[PRODUCTION_PROBLEM_DATE] [datetime] NULL,
	[TOUCH_TIME] [numeric](17, 5) NULL,
	[EXCHANGES_IN_QUARANTINE] [numeric](8, 0) NULL,
	[QUARANTINE_DATE] [datetime] NULL,
	[DATE_INSERTION] [datetime] NOT NULL,
	[RELEASE_PROBLEM] [varchar](10) NULL,
	[RELEASE_PROBLEM_DATE] [datetime] NULL,
 CONSTRAINT [PK_TFSCM_CLI_PRODUCTION_ORDERS] PRIMARY KEY CLUSTERED 
(
	[CDORDER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP](
	[IDEXCHANGE] [numeric](10, 0) NOT NULL,
	[CDORDER] [varchar](50) NOT NULL,
	[CDORDER_TYPE] [varchar](1) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[CDDESTINATION] [varchar](50) NOT NULL,
	[PROMISED_DELIVERY_DATE] [datetime] NULL,
	[REAL_RELEASE_DATE] [datetime] NULL,
	[CDFAMILY] [varchar](50) NOT NULL,
	[PENDING_AMOUNT] [numeric](17, 2) NOT NULL,
	[ORDER_MODIFY_DATE] [datetime] NOT NULL,
	[FILE_NAME] [varchar](500) NOT NULL,
	[ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[TOTAL_AMOUNT] [numeric](17, 2) NOT NULL,
	[STATUS] [bit] NOT NULL,
	[DATE_INSERTION] [datetime] NOT NULL,
	[FILE_ROW_NUMBER] [int] NULL,
	[PROMISED_DELIVERY_DATE_STR] [varchar](50) NULL,
	[REAL_RELEASE_DATE_STR] [varchar](50) NULL,
	[PENDING_AMOUNT_STR] [varchar](50) NULL,
	[ORDER_MODIFY_DATE_STR] [varchar](50) NULL,
	[TOTAL_AMOUNT_STR] [varchar](50) NULL,
	[DATE_INSERTION_STR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_PRODUCTION_ORDERS_TEMP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PURCHASE_ORDERS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS](
	[CDPURCHASE_ORDER] [varchar](50) NOT NULL,
	[PO_TYPE] [varchar](1) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[DESTINATION] [varchar](50) NOT NULL,
	[SUPPLIER] [varchar](50) NOT NULL,
	[ORDER_CREATION_DATE] [date] NULL,
	[ORDER_CREATION_DATETIME] [datetime] NULL,
	[PROMISED_DELIVERY_DATE] [date] NOT NULL,
	[PROMISED_DELIVERY_DATETIME] [datetime] NOT NULL,
	[NECESSITY_DATE] [date] NULL,
	[NECESSITY_DATETIME] [datetime] NULL,
	[PENDING_QUANTITY] [numeric](17, 5) NOT NULL,
	[ORDER_VALUE] [numeric](17, 2) NULL,
	[UPDATE_DATE] [date] NOT NULL,
	[UNITS] [varchar](50) NULL,
	[FINALIZATION_DATE] [datetime] NOT NULL,
	[PURCHASE_NOTES] [nvarchar](4000) NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[CREATION_USER] [varchar](50) NOT NULL,
	[MODIFICATION_DATE] [datetime] NULL,
	[MODIFICATION_USER] [varchar](50) NOT NULL,
	[PRIORITY] [numeric](17, 2) NULL,
	[PRIORITY_COLOR] [varchar](50) NULL,
	[COLOR_CHANGE_DATE] [date] NOT NULL,
	[MANAGED] [bit] NULL,
	[EXCHANGES_IN_QUARANTINE] [numeric](10, 0) NULL,
	[QUARANTINE_DATE] [datetime] NULL,
 CONSTRAINT [PK_PURCHASE_ORDERS] PRIMARY KEY CLUSTERED 
(
	[CDPURCHASE_ORDER] ASC,
	[SUPPLIER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP](
	[IDEXCHANGE] [numeric](10, 0) NOT NULL,
	[CDPURCHASE_ORDER] [varchar](50) NOT NULL,
	[PO_TYPE] [varchar](1) NOT NULL,
	[SKU] [varchar](50) NOT NULL,
	[DESTINATION] [varchar](50) NOT NULL,
	[SUPPLIER] [varchar](50) NOT NULL,
	[PROMISED_DELIVERY_DATE] [date] NOT NULL,
	[PENDING_QUANTITY] [numeric](17, 5) NOT NULL,
	[UPDATE_DATE] [date] NOT NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FILE_NAME] [varchar](500) NOT NULL,
	[STATUS] [bit] NOT NULL,
	[FILE_ROW_NUMBER] [int] NULL,
	[PROMISED_DELIVERY_DATE_STR] [varchar](50) NULL,
	[PENDING_QUANTITY_STR] [varchar](50) NULL,
	[UPDATE_DATE_STR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_PURCHASE_ORDERS_TEMP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_SECTION]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_SECTION](
	[CDSECTION] [smallint] NOT NULL,
	[DSSECTION] [varchar](50) NOT NULL,
	[CDMODULE] [smallint] NOT NULL,
	[CDSECTION_TYPE] [varchar](1) NOT NULL,
	[CDSECTION_SUBTYPE] [varchar](1) NULL,
	[MENU_ORDER] [smallint] NULL,
	[CDPERMISSION] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_SECTION] PRIMARY KEY CLUSTERED 
(
	[CDSECTION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY](
	[SKU] [varchar](50) NOT NULL,
	[LOCATION] [varchar](50) NOT NULL,
	[DATE_MANAGEMENT] [datetime] NOT NULL,
	[FAMILY] [varchar](50) NOT NULL,
	[LOCATION_TYPE] [varchar](50) NOT NULL,
	[ORIGIN_LOCATION] [varchar](50) NOT NULL,
	[BUFFER] [numeric](17, 5) NOT NULL,
	[MINIMUM_BUFFER] [numeric](17, 5) NOT NULL,
	[LAST_TOTAL_OUTS_MAX_SUM] [numeric](17, 5) NULL,
	[ADJUSTMENT_TYPE] [varchar](50) NULL,
	[PROTECTION_FACTOR] [numeric](17, 2) NULL,
	[SUGGESTED_BUFFER] [numeric](17, 5) NULL,
	[APPROVED_BUFFER] [numeric](17, 5) NULL,
	[ADJUSTMENT_ACTION] [varchar](50) NULL,
	[SUGGESTION_DATE] [datetime] NULL,
	[SUGGESTION_REJECTION_CAUSE] [varchar](10) NULL,
	[SUGGESTION_EXPIRATION_DATE] [datetime] NULL,
	[SUGGESTION_ALERTS] [varchar](50) NULL,
	[MANAGED_BY] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY] PRIMARY KEY CLUSTERED 
(
	[SKU] ASC,
	[LOCATION] ASC,
	[DATE_MANAGEMENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_UNITS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_UNITS](
	[CDUNIT] [varchar](50) NOT NULL,
	[DSUNIT] [varchar](50) NULL,
	[INVENTORY_ACCURACY] [numeric](3, 0) NOT NULL,
	[IS_DEFAULT_UNIT] [bit] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
 CONSTRAINT [PK_TFSCM_CLI_UNITS] PRIMARY KEY CLUSTERED 
(
	[CDUNIT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_USER_FILTER]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_USER_FILTER](
	[CDVIEW] [int] NOT NULL,
	[CDUSER_FILTER] [numeric](20, 0) NOT NULL,
	[JSON_USER_FILTER] [varchar](4000) NOT NULL,
	[CDTYPE] [varchar](1) NULL,
 CONSTRAINT [PK_TFSCM_CLI_USER_FILTER] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC,
	[CDUSER_FILTER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_USER_SERIES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_USER_SERIES](
	[CDSERIE] [int] NOT NULL,
	[DSSERIE] [varchar](500) NULL,
	[IS_ACTIVE] [varchar](1) NULL,
	[SERIES_TYPE] [varchar](50) NOT NULL,
	[USER_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_USER_SERIES] PRIMARY KEY CLUSTERED 
(
	[USER_ID] ASC,
	[CDSERIE] ASC,
	[SERIES_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_VALUE_ORDERS_OVERDUE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_VALUE_ORDERS_OVERDUE](
	[CDINDICATOR] [numeric](4, 0) NOT NULL,
	[SERIE] [nvarchar](300) NOT NULL,
	[COMPLETED_ORDERS_OVERDUE] [numeric](18, 2) NOT NULL,
	[OPEN_ORDERS_OVERDUE] [numeric](18, 2) NOT NULL,
	[VALUE_ORDERS_OVERDUE] [numeric](18, 2) NOT NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NOT NULL,
	[CALCULATION_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_VALUE_ORDERS_OVERDUE] PRIMARY KEY CLUSTERED 
(
	[CDINDICATOR] ASC,
	[SERIE] ASC,
	[START_DATE] ASC,
	[END_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS](
	[CDVIEW_TYPE] [varchar](50) NOT NULL,
	[FILTER_TYPE] [varchar](2) NOT NULL,
	[FILTER_COLUMN] [varchar](50) NULL,
	[FILTER_SQL] [varchar](5000) NULL,
 CONSTRAINT [PK_TFSCM_CLI_VIEW_TYPE_FILTERS] PRIMARY KEY CLUSTERED 
(
	[CDVIEW_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_VIEWS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_VIEWS](
	[CDVIEW] [int] NOT NULL,
	[DSVIEW] [varchar](50) NOT NULL,
	[JSON_SYSTEM_FILTER] [varchar](3000) NULL,
	[JSON_VIEW_CONF] [varchar](max) NOT NULL,
	[JSON_JOIN_TABLES] [varchar](6000) NULL,
	[CDINDICATOR] [numeric](4, 0) NULL,
	[MESSAGE] [varchar](500) NULL,
	[CDSECTION] [smallint] NOT NULL,
	[IS_DEFAULT_VIEW] [varchar](1) NOT NULL,
	[IS_FAVORITE_VIEW] [varchar](1) NOT NULL,
	[IS_INITIAL_VIEW] [varchar](1) NOT NULL,
	[IS_AUTO_GENERATED] [varchar](1) NULL,
	[VIEW_TYPE] [varchar](50) NULL,
	[VIEW_FILTER] [varchar](max) NULL,
	[VIEW_GROUP_TOTALIZE] [varchar](3000) NULL,
	[IS_PANEL_COLLAPSED] [varchar](1) NULL,
	[INITIAL_PANEL] [varchar](50) NULL,
	[USER_ID] [bigint] NULL,
 CONSTRAINT [PK_TFSCM_CLI_VIEWS] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS](
	[CDVIEW] [int] NOT NULL,
	[ID_MESSAGESNOTIFICATIONS] [numeric](18, 0) NULL,
	[USER_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_TFSCM_CLI_VIEWS_SHARED_TO_USERS] PRIMARY KEY CLUSTERED 
(
	[CDVIEW] ASC,
	[USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_COL_TABLE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_COL_TABLE](
	[CDTABLE] [smallint] NOT NULL,
	[CDCOLUMN] [varchar](50) NOT NULL,
	[DSNAME] [varchar](50) NOT NULL,
	[DSCOLUMN] [varchar](50) NULL,
	[DSTYPE] [varchar](50) NOT NULL,
	[COLUMN_SIZE] [smallint] NULL,
	[CDPERMISSION_EDIT] [varchar](50) NULL,
	[IS_EDITABLE] [varchar](1) NOT NULL,
	[IS_SYSTEM] [varchar](1) NOT NULL,
	[IS_NULLABLE] [varchar](1) NOT NULL,
	[IS_COLOR] [varchar](1) NOT NULL,
	[IS_UPGRADABLE] [varchar](1) NOT NULL,
	[VIEW_TYPE] [varchar](1) NOT NULL,
	[SQL_LIST] [varchar](2000) NULL,
	[VIEW_FORMAT] [varchar](1) NOT NULL,
	[IS_PRIMARY_KEY] [varchar](50) NOT NULL,
	[USE_AS_SERIE] [varchar](1) NOT NULL,
	[IS_USE_AS_PERMISSION] [varchar](1) NOT NULL,
	[VIEW_COL_WIDTH] [numeric](3, 0) NULL,
	[SAVE_HISTORY] [varchar](1) NOT NULL,
	[COLUMN_ACCURACY] [smallint] NULL,
	[IS_FOREIGN_KEY] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_COL_TABLE] PRIMARY KEY CLUSTERED 
(
	[CDTABLE] ASC,
	[CDCOLUMN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_COMPONENT]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_COMPONENT](
	[CDCOMPONENT] [smallint] NOT NULL,
	[DSCOMPONENT] [varchar](50) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_COMPONENT] PRIMARY KEY CLUSTERED 
(
	[CDCOMPONENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_DATABASES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_DATABASES](
	[JNDI] [varchar](50) NOT NULL,
	[DATABASE_NAME] [varchar](50) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_DATABASES_1] PRIMARY KEY CLUSTERED 
(
	[DATABASE_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_DELETE_HISTORY]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_DELETE_HISTORY](
	[DELETE_TYPE] [varchar](4) NOT NULL,
	[HISTORY_DAYS] [int] NOT NULL,
	[ACTIVE] [bit] NOT NULL,
	[DAY_OF_WEEK] [varchar](1) NOT NULL,
	[TIME_EXECUTION] [varchar](5) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_DELETE_HISTORY] PRIMARY KEY CLUSTERED 
(
	[DELETE_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_HISTORY_TABLES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_HISTORY_TABLES](
	[CDTABLE] [varchar](50) NOT NULL,
	[HISTORY_TABLE_NAME] [varchar](100) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_HISTORY_TABLES] PRIMARY KEY CLUSTERED 
(
	[CDTABLE] ASC,
	[HISTORY_TABLE_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_JOB_INTERFACES]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_JOB_INTERFACES](
	[IDJOB] [numeric](10, 0) NOT NULL,
	[CDINTERFACE] [smallint] NOT NULL,
 CONSTRAINT [PK_JOB_INTERFACES] PRIMARY KEY CLUSTERED 
(
	[IDJOB] ASC,
	[CDINTERFACE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_JOBS]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_JOBS](
	[TRIGGER_NAME] [varchar](100) NOT NULL,
	[JOB_TYPE] [numeric](2, 0) NOT NULL,
	[START_TIME] [datetime] NOT NULL,
	[END_TIME] [datetime] NULL,
	[TIME_ZONE] [varchar](50) NOT NULL,
	[CRON_EXP_MIN] [varchar](50) NULL,
	[CRON_EXP_HOURS] [varchar](50) NULL,
	[CRON_EXP_DAY_OF_MONTH] [varchar](50) NULL,
	[CRON_EXP_DAY_OF_WEEK] [varchar](50) NULL,
	[IS_SYSTEM] [varchar](1) NOT NULL,
	[ENABLE] [varchar](1) NULL,
	[STATUS] [varchar](1) NULL,
	[IDJOB] [numeric](10, 0) IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_JOBS] PRIMARY KEY CLUSTERED 
(
	[IDJOB] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_LOG]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_LOG](
	[IDLOG] [numeric](17, 0) IDENTITY(1,1) NOT NULL,
	[DSLOG] [varchar](8000) NOT NULL,
	[LOG_DETAIL] [varchar](8000) NULL,
	[CDTYPE] [varchar](1) NULL,
	[LOG_TIME] [datetime] NOT NULL,
	[ELEMENT_CODE] [varchar](50) NULL,
	[LOCATION_CODE] [varchar](50) NULL,
	[RECORD_CONTENT] [varchar](8000) NULL,
	[ROW_NUMBER] [int] NULL,
	[COLUMN_NAME] [varchar](50) NULL,
	[FILE_NAME] [varchar](500) NULL,
	[UPDATE_DATE] [date] NULL,
 CONSTRAINT [PK_TFSCM_COM_LOG] PRIMARY KEY CLUSTERED 
(
	[IDLOG] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_MESSAGE]    Script Date: 5/04/2021 6:23:07 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_MESSAGE](
	[CDMESSAGE] [varchar](62) NOT NULL,
	[LANGUAGE] [varchar](2) NOT NULL,
	[TEXT] [varchar](250) NULL,
 CONSTRAINT [PK_TFSCM_COM_MESSAGE] PRIMARY KEY CLUSTERED 
(
	[CDMESSAGE] ASC,
	[LANGUAGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE](
	[JNDI] [varchar](50) NOT NULL,
	[STATE_DATA_EXCHANGE] [varbinary](1024) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_NOTIFICATION_DATA_EXCHANGE] PRIMARY KEY CLUSTERED 
(
	[JNDI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS](
	[CDUSER] [varchar](50) NOT NULL,
	[CREATION_DATE] [varchar](255) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_NOTIFICATIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_NOTIFICATIONS](
	[IDNOTIFICATION] [numeric](18, 0) NOT NULL,
	[DSNOTIFICATION] [varchar](200) NULL,
	[CDNOTIFICATION_TYPE] [varchar](1) NOT NULL,
	[NOTIFICATION_SUBJECT] [varchar](200) NOT NULL,
	[NOTIFICATION_BODY] [varchar](8000) NOT NULL,
	[NOTIFICATION_FROM] [varchar](100) NOT NULL,
	[NOTIFICATION_TO] [varchar](1000) NOT NULL,
	[ATTACHMENT_PATH] [varchar](8000) NULL,
	[NOTIFICATION_STATUS] [varchar](1) NOT NULL,
	[CREATION_DATE] [date] NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_NOTIFICATIONS] PRIMARY KEY CLUSTERED 
(
	[IDNOTIFICATION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_PARAMS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_PARAMS](
	[CDCOMPONENT] [smallint] NOT NULL,
	[CDPARAM] [varchar](50) NOT NULL,
	[DSPARAM] [varchar](50) NOT NULL,
	[PARAM_VALUE] [varchar](1000) NULL,
	[PARAM_TYPE] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_PARAMS] PRIMARY KEY CLUSTERED 
(
	[CDCOMPONENT] ASC,
	[CDPARAM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_PERMISSION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_PERMISSION](
	[CDPERMISSION] [varchar](50) NOT NULL,
	[DSPERMISSION] [varchar](50) NOT NULL,
	[CDTYPE] [varchar](1) NOT NULL,
	[IS_SYSTEM] [varchar](1) NOT NULL,
	[IS_SUPER_USER] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_PERMISSION] PRIMARY KEY CLUSTERED 
(
	[CDPERMISSION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_PERMISSION_VAL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_PERMISSION_VAL](
	[CDROL] [smallint] NOT NULL,
	[CDTABLE] [smallint] NOT NULL,
	[CDCOLUMN] [varchar](50) NOT NULL,
	[FILTER_VALUE] [varchar](50) NOT NULL,
	[FILTER_OPERATOR] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_COM_PERMISSION_VAL] PRIMARY KEY CLUSTERED 
(
	[CDTABLE] ASC,
	[CDCOLUMN] ASC,
	[CDROL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_ROL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_ROL](
	[CDROL] [smallint] NOT NULL,
	[DSROL] [varchar](50) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_ROL] PRIMARY KEY CLUSTERED 
(
	[CDROL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_ROL_PERM]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_ROL_PERM](
	[CDROL] [smallint] NOT NULL,
	[CDPERMISSION] [varchar](50) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_ROL_PERM] PRIMARY KEY CLUSTERED 
(
	[CDROL] ASC,
	[CDPERMISSION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_STATISTICS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_STATISTICS](
	[IDJOB] [numeric](10, 2) NULL,
	[START_TIME_EXE] [datetime] NOT NULL,
	[END_TIME_EXE] [datetime] NULL,
	[TOTAL_TIME_EXE] [numeric](10, 0) NULL,
	[DSSTATISTIC] [varchar](500) NOT NULL,
	[STATISTIC_DETAIL] [varchar](8000) NULL,
	[STATUS] [varchar](1) NOT NULL,
	[IDSTATISTIC] [numeric](17, 0) IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_STATISTICS] PRIMARY KEY CLUSTERED 
(
	[IDSTATISTIC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_TABLES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_TABLES](
	[CDTABLE] [smallint] NOT NULL,
	[DSTABLE] [varchar](50) NOT NULL,
	[TABLE_NAME] [varchar](50) NOT NULL,
	[TABLE_NAME_TEMP] [varchar](50) NULL,
	[CDPERMISSION_ADD] [varchar](50) NULL,
	[CDPERMISSION_DELETE] [varchar](50) NULL,
	[APPLY_CUSTOM_COL] [varchar](1) NULL,
	[UPGRADE_TABLE_DATE] [datetime] NULL,
	[ERP_DATE_COLUMN] [varchar](50) NULL,
	[USED_IN_PERMISSION] [varchar](1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_TABLES] PRIMARY KEY CLUSTERED 
(
	[CDTABLE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_USER_ROL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_USER_ROL](
	[CDROL] [smallint] NOT NULL,
	[USER_ID] [bigint] NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_USER_ROL] PRIMARY KEY CLUSTERED 
(
	[USER_ID] ASC,
	[CDROL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_USER_ROW_EDIT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_USER_ROW_EDIT](
	[CD_ID] [int] IDENTITY(1,1) NOT NULL,
	[CD_USER] [varchar](50) NOT NULL,
	[CD_ROW] [varchar](200) NOT NULL,
	[TABLE_NAME] [varchar](50) NOT NULL,
	[EDIT_DATE] [datetime] NOT NULL,
	[CD_COLUMN_NAME_ROW] [varchar](200) NOT NULL,
	[ACTIVE] [int] NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_USER_ROW_EDIT] PRIMARY KEY CLUSTERED 
(
	[CD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_COM_USERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_COM_USERS](
	[USERNAME] [varchar](50) NOT NULL,
	[PASSWORD] [varchar](200) NOT NULL,
	[DSEMAIL] [varchar](50) NULL,
	[WINDOW_OPEN_MODE] [varchar](1) NOT NULL,
	[IS_SUPER_USER] [varchar](1) NOT NULL,
	[DEFAULT_LANG] [varchar](50) NOT NULL,
	[LAST_PASSWORD_CHANGE] [datetime] NULL,
	[USER_ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TFSCM_COM_USERS] PRIMARY KEY CLUSTERED 
(
	[USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_DEX_INT_DETAIL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_DEX_INT_DETAIL](
	[CDINTERFACE] [smallint] NOT NULL,
	[CDFIELD] [varchar](50) NOT NULL,
	[DSFIELD] [varchar](100) NOT NULL,
	[ERP_NAME] [varchar](50) NULL,
	[IS_UPGRADEABLE] [varchar](1) NOT NULL,
	[NMPOSITION] [smallint] NOT NULL,
	[IS_SYSTEM_REQUIRED] [varchar](1) NOT NULL,
	[DATE_FORMAT] [varchar](20) NULL,
 CONSTRAINT [PK_TFSCM_DEX_INT_DETAIL] PRIMARY KEY CLUSTERED 
(
	[CDINTERFACE] ASC,
	[CDFIELD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_DEX_INT_IND_TYPE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE](
	[CDINTERFACE] [smallint] NOT NULL,
	[CDINDICATOR_TYPE] [numeric](4, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_DEX_INT_IND_TYPE] PRIMARY KEY CLUSTERED 
(
	[CDINTERFACE] ASC,
	[CDINDICATOR_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_DEX_INTERFACES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_DEX_INTERFACES](
	[CDINTERFACE] [smallint] NOT NULL,
	[FILE_PREFIX] [varchar](50) NOT NULL,
	[COLUMN_SEPARATOR] [varchar](1) NOT NULL,
	[HAS_HEADER] [varchar](1) NOT NULL,
	[CDTYPE] [varchar](1) NOT NULL,
	[CDTABLE] [smallint] NOT NULL,
	[NMORDER] [smallint] NOT NULL,
	[FILE_FORMAT] [varchar](10) NULL,
	[PROCESSING_TYPE] [varchar](1) NULL,
	[GROUP_FIELD] [varchar](50) NULL,
	[INTERFACE_NAME] [varchar](50) NULL,
 CONSTRAINT [PK_TFSCM_DEX_INTERFACES] PRIMARY KEY CLUSTERED 
(
	[CDINTERFACE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_JOB_INDICATORS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_JOB_INDICATORS](
	[IDJOB] [numeric](10, 0) NOT NULL,
	[CDINDICATOR_TYPE] [numeric](4, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_JOB_INDICATORS] PRIMARY KEY CLUSTERED 
(
	[IDJOB] ASC,
	[CDINDICATOR_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_LIC_INDICATORS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_LIC_INDICATORS](
	[IDLICENSE] [numeric](10, 0) NOT NULL,
	[CDINDICATOR_TYPE] [numeric](4, 0) NOT NULL,
 CONSTRAINT [PK_TFSCM_LIC_INDICATORS] PRIMARY KEY CLUSTERED 
(
	[IDLICENSE] ASC,
	[CDINDICATOR_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TFSCM_LOG_DATABASE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TFSCM_LOG_DATABASE](
	[IDDBLOG] [numeric](17, 0) IDENTITY(1,1) NOT NULL,
	[CURRENT_SCRIPT_FILE] [varchar](255) NOT NULL,
	[CURRENT_VERSION] [varchar](100) NOT NULL,
	[PRIOR_SCRIPT_FILE] [varchar](255) NULL,
	[PRIOR_VERSION] [varchar](100) NULL,
	[EXECUTION_DATE] [datetime] NOT NULL,
	[EXECUTION_USER] [varchar](50) NOT NULL,
 CONSTRAINT [PK_TFSCM_LOG_DB] PRIMARY KEY CLUSTERED 
(
	[IDDBLOG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
INSERT [dbo].[archivo] ([RECORD_ID], [ITEM_ID], [VALUE], [DATE_1], [DESCRIPCION]) VALUES (N'1', N'1', N'1', N'29/01/2014', N'nuevo')
INSERT [dbo].[archivo] ([RECORD_ID], [ITEM_ID], [VALUE], [DATE_1], [DESCRIPCION]) VALUES (N'2', N'2', N'2', N'2', N'dfdf')
INSERT [dbo].[DUAL] ([DUMMY]) VALUES (N'SERIE')
INSERT [dbo].[TFSCM_CLI_BUFFER_GROUPS] ([CDGROUP], [BUFFERS_COUNT]) VALUES (CAST(1 AS Numeric(2, 0)), CAST(0 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'1', N'cause_expired_suggestion', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'10', N'release_problem_not_assigned_cause', N'R', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'2', N'cause_none_type', N'I', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'3', N'replenishment_problem_none_cause', N'B', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'4', N'cause_buffer_changing_through_interface', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'5', N'cause_manual_buffer_changing', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'6', N'cause_programmed_buffer_change', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'7', N'cause_min_buffer_changing_through_interface', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'8', N'cause_manual_min_buffer_changing', N'S', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE], [DSCAUSE], [CAUSE_TYPE], [IS_ACTIVE], [IS_SYSTEM]) VALUES (N'9', N'release_problem_none_cause', N'R', 1, N'Y')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (9, 7, N'CDCOMPONENT', N'N', N'L', N'SELECT CDCOMPONENT CODE, DSCOMPONENT DESCRIPTION, ''I'' DSTYPE FROM TFSCM_COM_COMPONENT WHERE CDCOMPONENT <> 0', N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (11, 5, N'CDCALENDAR', N'Y', N'L', N'SELECT CDCALENDAR CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCALENDAR ELSE ''[''+ DSCALENDAR +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_CALENDAR', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'CDTABLE', N'Y', N'L', N'SELECT CDTABLE+'''' CODE,DSTABLE DESCRIPTION,''E'' DSTYPE FROM TFSCM_COM_TABLES WHERE APPLY_CUSTOM_COL = ''Y''', N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'DSTYPE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_DSTYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_COLOR', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_EDITABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_NULLABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_PRIMARY_KEY', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_SYSTEM', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_UPGRADABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'IS_USE_AS_PERMISSION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'USE_AS_SERIE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'VIEW_FORMAT', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_FORMAT''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (12, 8, N'VIEW_TYPE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 1, N'PRODUCTION_PROBLEM_CAUSE', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''I''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 1, N'PROGRESS_PERCENTAGE', N'Y', N'T', NULL, N'P', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (25, 2, N'TOUCH_TIME', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 1, N'RELEASE_PROBLEM', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''R''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (29, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 1, N'RELEASE_PROBLEM', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''R''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (30, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 1, N'MANAGED_ORDER', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (31, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 1, N'MANAGED_ORDER', N'N', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (32, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (52, 11, N'APPROVED_BUFFER_REPLENISH', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (52, 11, N'REPLENISHMENT_ACTION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ACTION'' AND CODE != ''IGNORE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (52, 12, N'REPLENISHMENT_ROUNDING_MODE', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ROUNDING_MODE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (53, 11, N'ADJUSTMENT_ACTION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_ACTION'' AND CODE <> ''IGNORE'' AND CODE <> ''EXPIRE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (53, 11, N'APPROVED_BUFFER', N'Y', N'T', NULL, N'N', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (53, 11, N'SUGGESTION_REJECTION_CAUSE', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, ''N'' DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''S'' AND IS_SYSTEM = ''N''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (54, 11, N'MANAGED_RT', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'APPROVED_BUFFER_REPLENISH', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'BUFFER', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'FAMILY', N'N', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INACTIVE', N'N', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INVENTORY_ON_CHAIN', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INVENTORY_ON_PRODUCTION', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INVENTORY_ON_PURCHASING', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INVENTORY_ON_SITE', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'INVENTORY_ON_TRANSIT', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'MANAGED', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'MISSING_BUFFER_INVENTORY', N'N', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'NET_PRIORITY', N'N', N'T', NULL, N'P', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'ORIGIN_LOCATION', N'N', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_LOCATION', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'REPLENISHMENT_ACTION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ACTION'' AND CODE != ''IGNORE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'SITE_PRIORITY', N'N', N'T', NULL, N'P', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (55, 11, N'UPDATE_MOVEMENTS', N'N', N'T', NULL, N'D', N'N', N'datetime')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'BUFFER', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'CDUNIT', N'Y', N'L', N'SELECT CDUNIT CODE, (CASE IS_ACTIVE WHEN 1 THEN CDUNIT ELSE ''[''+ CDUNIT +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_UNITS', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'CONSOLIDATED_REPLENISHMENT', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'CONSUMPTION', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'EXCLUDED_OUTS', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'FAMILY', N'Y', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'LOCATION', N'Y', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_LOCATION WHERE LOCATION_TYPE IN (''WH'', ''CL'', ''PS'')', N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'MINIMUM_BUFFER', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'MINIMUM_REPLENISHMENT', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'NEGATIVE_ADJUSTMENTS', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'ORIGIN_LOCATION', N'Y', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_LOCATION', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'PACKAGING_UNIT', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'PENDING_DEMAND', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'POSITIVE_ADJUSTMENTS', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'REPLENISHMENT_FREQUENCY', N'Y', N'T', NULL, N'N', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'REPLENISHMENT_PRIORITY', N'Y', N'T', NULL, N'N', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'REPLENISHMENT_TIME', N'Y', N'T', NULL, N'N', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'SECURITY_STOCK', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'SKU', N'Y', N'T', NULL, N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'TOTAL_INVENTORY_ON_PRODUCTION', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'TOTAL_INVENTORY_ON_PURCHASING', N'Y', N'T', NULL, N'F', N'N', N'numeric')
GO
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'TOTAL_INVENTORY_ON_SITE', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'TOTAL_INVENTORY_ON_TRANSIT', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'TVC', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (56, 11, N'UNIT_PRICE', N'Y', N'T', NULL, N'M', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (57, 11, N'REPLENISHMENT_PROBLEM', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''B''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (58, 11, N'INACTIVE', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (59, 11, N'RESET_COUNT', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (60, 5, N'CDCALENDAR', N'Y', N'L', N'SELECT CDCALENDAR CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCALENDAR ELSE ''[''+ DSCALENDAR +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_CALENDAR', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (71, 19, N'MANAGED', N'Y', N'C', NULL, N'N', N'N', N'boolean')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 1, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 1, N'CDORDER', N'N', N'T', NULL, NULL, N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 1, N'PRODUCTION_PROBLEM_CAUSE', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''I''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 1, N'PROGRESS_PERCENTAGE', N'N', N'T', NULL, N'P', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 2, N'BUFFER', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 2, N'CDFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 2, N'CDLOCATION', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 2, N'DSFAMILY', N'N', N'T', NULL, NULL, N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (79, 2, N'STANDARD_TIME_DELIVERY', N'N', N'T', NULL, NULL, N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (83, 11, N'APPROVED_BUFFER_REPLENISH', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (83, 11, N'REPLENISHMENT_ACTION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ACTION'' ', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (83, 12, N'REPLENISHMENT_ROUNDING_MODE', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ROUNDING_MODE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (142, 5, N'CDCALENDAR', N'Y', N'L', N'SELECT CDCALENDAR CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCALENDAR ELSE ''[''+ DSCALENDAR +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_CALENDAR', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'CDTABLE', N'Y', N'L', N'SELECT CDTABLE+'''' CODE,DSTABLE DESCRIPTION,''E'' DSTYPE FROM TFSCM_COM_TABLES WHERE APPLY_CUSTOM_COL = ''Y''', N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'DSTYPE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_DSTYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_COLOR', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_EDITABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_NULLABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_PRIMARY_KEY', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_SYSTEM', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_UPGRADABLE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'IS_USE_AS_PERMISSION', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'USE_AS_SERIE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'VIEW_FORMAT', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_FORMAT''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (143, 8, N'VIEW_TYPE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'CHANGE_STEPS', N'Y', N'T', NULL, N'I', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'CHANGE_TYPE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''CHANGE_TYPE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'EVENT', N'Y', N'T', NULL, N'N', N'Y', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'EVENT_ENDING_DATE', N'Y', N'T', NULL, N'D', N'N', N'datetime')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'EVENT_STARTING_DATE', N'Y', N'T', NULL, N'D', N'N', N'datetime')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'LOCATION_CHG', N'Y', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION WHERE LOCATION_TYPE IN (''WH'',''CL'',''PS'')', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'MODE', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''CHANGE_MODE''', N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'PREPARATION_END_DATE', N'Y', N'T', NULL, N'D', N'N', N'datetime')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'PREPARATION_START_DATE', N'Y', N'T', NULL, N'D', N'N', N'datetime')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'REQUIRED_CHANGE', N'Y', N'T', NULL, N'F', N'N', N'numeric')
INSERT [dbo].[TFSCM_CLI_COL_TABLE] ([CDVIEW], [CDTABLE], [CDCOLUMN], [IS_EDITABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE]) VALUES (150, 20, N'SKU_CHG', N'Y', N'T', NULL, N'N', N'N', N'varchar')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_ACTION', N'ACCEPT', N'adjustment_action_accept', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_ACTION', N'ANALYZE', N'adjustment_action_analyze', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_ACTION', N'EXPIRE', N'adjustment_action_expire', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_ACTION', N'IGNORE', N'adjustment_action_ignore', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_ACTION', N'REJECT', N'adjustment_action_reject', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_MODE', N'A', N'adjustment_mode_auto', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_MODE', N'I', N'adjustment_mode_inactive', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_MODE', N'M', N'adjustment_mode_manual', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_TYPE', N'ANALYZE', N'adjustment_type_analyze', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_TYPE', N'DISCONTINUE', N'adjustment_type_discontinue', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_TYPE', N'EMPTY', N'adjustment_type_empty', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_TYPE', N'INCREASE', N'adjustment_type_increase', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ADJUSTMENT_TYPE', N'REDUCE', N'adjustment_type_decrease', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BAA_OUT_CLASSIFICATION_TYPE', N'A', N'baa_out_classification_atypical', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BAA_OUT_CLASSIFICATION_TYPE', N'N', N'baa_out_classification_normal', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BAA_OUT_CLASSIFICATION_TYPE', N'P', N'baa_out_classification_pending', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BAA_OUT_CLASSIFICATION_TYPE', N'S', N'baa_out_classification_scheduled', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BUFFER_CHANGES_STATUS_TYPE', N'F', N'buffer_change_status_type_finished', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BUFFER_CHANGES_STATUS_TYPE', N'N', N'buffer_change_status_type_none', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'BUFFER_CHANGES_STATUS_TYPE', N'S', N'buffer_change_status_type_started', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CAUSE_TYPE', N'B', N'replenishment_problem_cause', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CAUSE_TYPE', N'I', N'causes_flow_interruption', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CAUSE_TYPE', N'R', N'release_problem_cause_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CAUSE_TYPE', N'S', N'causes_buffer_suggestion_rejected', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CHANGE_MODE', N'NONE', N'buffer_change_mode_none', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CHANGE_MODE', N'PARTIAL', N'buffer_change_mode_partial', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CHANGE_MODE', N'TOTAL', N'buffer_change_mode_total', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CHANGE_TYPE', N'A', N'buffer_change_type_a', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'CHANGE_TYPE', N'P', N'buffer_change_type_p', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Black', N'Black', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Blue', N'Blue', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Cyan', N'Cyan', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Green', N'Green', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Red', N'Red', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'White', N'White', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'COLOR', N'Yellow', N'Yellow', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DATE_FORMATS_LIST', N' ', N' ', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DATE_FORMATS_LIST', N'dd/MM/yyyy', N'dd/MM/yyyy', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DATE_FORMATS_LIST', N'dd-MM-yyyy', N'dd-MM-yyyy', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DATE_FORMATS_LIST', N'yyyy/MM/dd', N'yyyy/MM/dd', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DATE_FORMATS_LIST', N'yyyy-MM-dd', N'yyyy-MM-dd', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'1', N'dayOfWeekSunday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'2', N'dayOfWeekMonday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'3', N'dayOfWeekTuesday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'4', N'dayOfWeekWednesday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'5', N'dayOfWeekThursday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'6', N'dayOfWeekFriday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DAY_OF_WEEK', N'7', N'dayOfWeekSaturday', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'01PO', N'deleteHistoryTypeProductionOrders', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'02BF', N'deleteHistoryTypeBuffers', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'03IH', N'deleteHistoryTypeIndicatorsWithoutView', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'04ST', N'deleteHistoryTypeStatistic', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'05LG', N'deleteHistoryTypeLog', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'06NT', N'deleteHistoryTypeNotifications', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'07VO', N'deleteHistoryTypeIndicatorVOA', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'08PE', N'deleteHistoryTypeIndicatorPET', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'09DC', N'deleteHistoryTypeIndicatorDCOPS', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'10LA', N'deleteHistoryTypeIndicatorLAA', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'11DC', N'deleteHistoryTypeIndicatorDCA', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'12BH', N'deleteHistoryTypeBuffersHistory', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'13BR', N'deleteHistoryTypeBuffersReplenishmentHist', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'14BA', N'deleteHistoryTypeBuffersSuggestionAdjustmentHist', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'15PU', N'deleteHistoryTypePurchases', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'16VA', N'deleteHistoryTypeIndicatorVA', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'17VI', N'deleteHistoryTypeIndicatorVI', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'DELETE_HISTORY_TYPE', N'18ES', N'deleteHistoryTypeIndicatorESAA', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'EXPORTED_TYPE', N'E', N'exported_type_expired', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'EXPORTED_TYPE', N'N', N'exported_type_no', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'EXPORTED_TYPE', N'Y', N'exported_type_yes', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_DSTYPE', N'boolean', N'fields_data_type_boolean', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_DSTYPE', N'datetime', N'fields_data_type_datetime', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_DSTYPE', N'numeric', N'fields_data_type_numeric', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_DSTYPE', N'varchar', N'fields_data_type_varchar', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'D', N'fields_view_format_date', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'F', N'fields_view_format_float', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'M', N'fields_view_format_money', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'N', N'fields_view_format_none', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'P', N'fields_view_format_percentage', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_FORMAT', N'T', N'fields_view_format_date_time', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_TYPE', N'A', N'fields_view_type_text_area', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_TYPE', N'B', N'fields_view_type_text_label', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_TYPE', N'C', N'fields_view_type_text_check', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_TYPE', N'L', N'fields_view_type_text_list', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'FIELDS_VIEW_TYPE', N'T', N'fields_view_type_text_field', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'1', N'jobtype_licence_expiration', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'2', N'jobtype_data_exchange', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'23', N'jobtypeExportData', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'27', N'jobtype_optimization', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'3', N'jobtype_calculate_indicators', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'JOB_TYPE', N'5', N'jobtype_notification', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LANGUAGES_LIST', N'en', N'preferences_language_en', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LANGUAGES_LIST', N'es', N'preferences_language_es', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOCATION_TYPE', N'CL', N'location_type_customer', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOCATION_TYPE', N'PL', N'location_type_plant', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOCATION_TYPE', N'PS', N'location_type_pos', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOCATION_TYPE', N'SU', N'location_type_supplier', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOCATION_TYPE', N'WH', N'location_type_storeroom', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOG_TYPE', N'A', N'log_type_alert', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOG_TYPE', N'E', N'log_type_error', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'LOG_TYPE', N'I', N'log_type_information', N'I')
GO
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ORDER_TYPE', N'O', N'order_order_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'ORDER_TYPE', N'S', N'order_stock_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PARAM_TYPE', N'N', N'param_type_number', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PARAM_TYPE', N'P', N'param_type_path', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PARAM_TYPE', N'S', N'param_type_string', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'0', N'0', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'100', N'100', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'20', N'20', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'40', N'40', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'60', N'60', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PROGRESS_PERCENTAGE_VAL', N'80', N'80', N'N')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PURCHASE_ORDER_TYPE', N'O', N'purchase_order_type_order', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'PURCHASE_ORDER_TYPE', N'S', N'purchase_order_type_stock', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'A', N'release_status_accomplished', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'E', N'release_status_early', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'O', N'release_status_overdue', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'R', N'release_status_release', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'S', N'release_status_speedUp', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RELEASE_STATUS', N'W', N'release_status_wait', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ACTION', N'ACCEPT', N'replenishment_action_accept', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ACTION', N'ANALYZE', N'replenishment_action_analyze', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ACTION', N'IGNORE', N'replenishment_action_ignore', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ACTION', N'REJECT', N'replenishment_action_refuse', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_MODE', N'A', N'replenishment_mode_auto_all', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_MODE', N'D', N'replenishment_mode_disable', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_MODE', N'I', N'replenishment_mode_auto_intermediate', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_MODE', N'M', N'replenishment_mode_manual', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_MODE', N'U', N'replenishment_mode_auto_urgent', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ROUNDING_MODE', N'MA', N'replenishment_rounding_mode_max_availability', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'REPLENISHMENT_ROUNDING_MODE', N'MS', N'replenishment_rounding_mode_min_stock', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RT_ADJUSTMENT_TYPE', N'EMPTY', N'rt_adjustment_type_empty', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RT_ADJUSTMENT_TYPE', N'INCREASE', N'rt_adjustment_type_increase', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RT_ADJUSTMENT_TYPE', N'REDUCE', N'rt_adjustment_type_decrease', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RULE_STATUS', N'N', N'rule_status_inactive', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'RULE_STATUS', N'Y', N'rule_status_active', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'A', N'atypical_outputs', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'AE', N'sugg_buffer_equ_current_atypical', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'AER', N'sugg_buffer_equ_current_atyp_reject', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'AM', N'sugg_buffer_equ_current_ms_atypical', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'AMR', N'sugg_buffer_equ_current_ms_atyp_reject', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'AR', N'atyp_out_sugg_gen_after_reject', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'E', N'sugg_buffer_equal_to_min_buffer', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'ER', N'sugg_buffer_equ_current_rejected', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'L', N'req_buffer_less_than_min_buffer', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'M', N'sugg_buffer_equ_current_ms', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'MR', N'sugg_buffer_equ_current_ms_rejected', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'R', N'sugg_generation_after_rejection_previous', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'RS', N'sugg_buffer_same_min_buffer_after_pre_reject', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_ALERT_TYPE', N'S', N'sugg_buffer_same_min_buffer', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_TYPE', N'BST', N'buffer_suggestion_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'SUGGESTION_TYPE', N'OST', N'optimizer_suggestion_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'YES_NO_TYPE', N'N', N'no_type', N'I')
INSERT [dbo].[TFSCM_CLI_COLUMN_LIST] ([LIST_TYPE], [CODE], [DESCRIPTION], [DSTYPE]) VALUES (N'YES_NO_TYPE', N'Y', N'yes_type', N'I')
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(2 AS Numeric(4, 0)), CAST(4 AS Numeric(4, 0)), NULL, NULL, N'D', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(3 AS Numeric(4, 0)), CAST(3 AS Numeric(4, 0)), NULL, NULL, N'M', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(5 AS Numeric(4, 0)), CAST(3 AS Numeric(4, 0)), NULL, NULL, N'D', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(6 AS Numeric(4, 0)), CAST(3 AS Numeric(4, 0)), NULL, NULL, N'W', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(9 AS Numeric(4, 0)), CAST(4 AS Numeric(4, 0)), NULL, NULL, N'W', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(10 AS Numeric(4, 0)), CAST(4 AS Numeric(4, 0)), NULL, NULL, N'M', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(11 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'M', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(12 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(13 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'D', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(14 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(15 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(16 AS Numeric(4, 0)), CAST(5 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(17 AS Numeric(4, 0)), CAST(6 AS Numeric(4, 0)), NULL, NULL, N'M', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(18 AS Numeric(4, 0)), CAST(6 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(19 AS Numeric(4, 0)), CAST(6 AS Numeric(4, 0)), NULL, NULL, N'D', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(20 AS Numeric(4, 0)), CAST(7 AS Numeric(4, 0)), NULL, NULL, N'M', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(21 AS Numeric(4, 0)), CAST(7 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(22 AS Numeric(4, 0)), CAST(7 AS Numeric(4, 0)), NULL, NULL, N'D', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(23 AS Numeric(4, 0)), CAST(8 AS Numeric(4, 0)), NULL, NULL, N'M', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(24 AS Numeric(4, 0)), CAST(8 AS Numeric(4, 0)), NULL, NULL, N'W', NULL)
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(51 AS Numeric(4, 0)), CAST(2 AS Numeric(4, 0)), NULL, NULL, N'M', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(59 AS Numeric(4, 0)), CAST(2 AS Numeric(4, 0)), NULL, NULL, N'W', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(60 AS Numeric(4, 0)), CAST(2 AS Numeric(4, 0)), NULL, NULL, N'D', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(61 AS Numeric(4, 0)), CAST(1 AS Numeric(4, 0)), NULL, NULL, N'M', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(62 AS Numeric(4, 0)), CAST(1 AS Numeric(4, 0)), NULL, NULL, N'W', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR], [CDINDICATOR_TYPE], [JSON_USER_FILTER], [SERIE_COLUMN], [FREQUENCY], [LAST_CALCULATION_DATE]) VALUES (CAST(63 AS Numeric(4, 0)), CAST(1 AS Numeric(4, 0)), NULL, NULL, N'D', CAST(N'1901-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(1 AS Numeric(4, 0)), N'indicator_value_orders_overdue', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(2 AS Numeric(4, 0)), N'indicator_perc_deliv_in_time', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(3 AS Numeric(4, 0)), N'indicator_color_distribution', N'D')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(4 AS Numeric(4, 0)), N'indicator_anti_overd_releases', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(5 AS Numeric(4, 0)), N'indicator_buffer_color_distribution', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(6 AS Numeric(4, 0)), N'indicator_buffer_va', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(7 AS Numeric(4, 0)), N'indicator_buffer_vi', N'A')
INSERT [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE], [DSINDICATOR_TYPE], [CALCULATION_TYPE]) VALUES (CAST(8 AS Numeric(4, 0)), N'indicator_buffer_adjustment_suggestions_status', N'A')
INSERT [dbo].[TFSCM_CLI_MODULE] ([CDMODULE], [DSMODULE], [MENU_ORDER], [CDPERMISSION]) VALUES (1, N'module_production', 1, N'100')
INSERT [dbo].[TFSCM_CLI_MODULE] ([CDMODULE], [DSMODULE], [MENU_ORDER], [CDPERMISSION]) VALUES (2, N'module_component_manager', 5, N'200')
INSERT [dbo].[TFSCM_CLI_MODULE] ([CDMODULE], [DSMODULE], [MENU_ORDER], [CDPERMISSION]) VALUES (3, N'module_license', 4, N'400')
INSERT [dbo].[TFSCM_CLI_MODULE] ([CDMODULE], [DSMODULE], [MENU_ORDER], [CDPERMISSION]) VALUES (4, N'module_stock', 2, N'800')
INSERT [dbo].[TFSCM_CLI_MODULE] ([CDMODULE], [DSMODULE], [MENU_ORDER], [CDPERMISSION]) VALUES (5, N'module_purchases', 3, N'1000')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (1, N'module_section_pdn_manage_orders', 1, N'R', NULL, 1, N'101')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (2, N'module_section_pdn_ind_value_orders_overdue', 1, N'I', NULL, 2, N'102')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (3, N'module_section_pdn_ind_perc_deliv_in_time', 1, N'I', NULL, 3, N'103')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (4, N'module_section_pdn_ind_color_distribution', 1, N'I', NULL, 4, N'104')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (5, N'module_section_pdn_ind_anti_overd_releases', 1, N'I', NULL, 5, N'105')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (6, N'module_section_cm_licence_load', 2, N'C', N'L', 2, N'204')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (7, N'module_section_license_create_license', 3, N'C', N'C', 1, N'400')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (8, N'module_section_statistics', 2, N'R', N'Q', 3, N'201')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (9, N'module_section_jobs', 2, N'C', N'J', 9, N'207')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (10, N'module_production_params', 2, N'C', N'M', 1, N'203')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (11, N'module_production_production_family', 1, N'C', NULL, 1, N'106')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (12, N'module_production_location', 1, N'C', NULL, 2, N'107')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (13, N'module_production_custom_field', 1, N'C', NULL, 3, N'108')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (14, N'module_production_frequent_causes', 1, N'C', NULL, 6, N'109')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (15, N'module_section_log', 2, N'R', N'Q', 4, N'202')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (16, N'module_section_cm_users', 2, N'C', N'U', 5, N'208')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (17, N'module_section_cm_interfaces', 2, N'C', N'I', 6, N'205')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (18, N'module_section_cm_calendar', 1, N'C', N'C', 5, N'110')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (19, N'module_section_cm_databases', 2, N'C', N'D', 8, N'206')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (20, N'module_section_cm_preferences', 2, N'C', N'P', 10, N'301')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (21, N'module_section_stk_buffer_family', 4, N'C', NULL, 1, N'801')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (22, N'module_section_stk_units', 4, N'C', NULL, 2, N'802')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (23, N'module_section_stk_manage_buffers', 4, N'R', NULL, 1, N'803')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (24, N'module_production_location', 4, N'C', NULL, 4, N'107')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (25, N'module_production_custom_field', 4, N'C', NULL, 5, N'108')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (26, N'module_production_frequent_causes', 4, N'C', NULL, 7, N'109')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (27, N'module_section_cm_calendar', 4, N'C', N'C', 6, N'110')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (28, N'module_section_cm_about', 2, N'C', N'S', 10, N'301')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (29, N'module_section_stk_units', 1, N'C', NULL, 4, N'802')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (30, N'module_delete_history', 2, N'C', N'M', 10, N'209')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (31, N'module_section_buff_ind_color_distribution', 4, N'I', NULL, 3, N'901')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (32, N'module_section_purchases_manage_orders', 5, N'R', NULL, 1, N'1001')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (33, N'module_production_location', 5, N'C', NULL, 1, N'107')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (34, N'module_production_custom_field', 5, N'C', NULL, 2, N'108')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (35, N'module_production_frequent_causes', 5, N'C', NULL, 5, N'109')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (36, N'module_section_cm_calendar', 5, N'C', N'C', 4, N'110')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (37, N'module_section_stk_units', 5, N'C', NULL, 3, N'802')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (38, N'module_buffer_changes_manage', 4, N'C', NULL, 3, N'807')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (39, N'module_section_buff_ind_va', 4, N'I', NULL, 1, N'903')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (40, N'module_section_buff_ind_vi', 4, N'I', NULL, 2, N'905')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (41, N'module_section_buff_ind_esaa', 4, N'I', NULL, 4, N'907')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (42, N'module_section_buff_rep_history', 4, N'R', N'Q', 2, N'808')
INSERT [dbo].[TFSCM_CLI_SECTION] ([CDSECTION], [DSSECTION], [CDMODULE], [CDSECTION_TYPE], [CDSECTION_SUBTYPE], [MENU_ORDER], [CDPERMISSION]) VALUES (43, N'module_section_buff_set_automation_rules', 4, N'C', NULL, 8, N'809')
INSERT [dbo].[TFSCM_CLI_UNITS] ([CDUNIT], [DSUNIT], [INVENTORY_ACCURACY], [IS_DEFAULT_UNIT], [IS_ACTIVE]) VALUES (N'UN', N'UN', CAST(0 AS Numeric(3, 0)), 1, 1)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (9, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"notEqual", 
            "fieldName":"CDCOMPONENT", 
            "value":"0", 
            "_constructor":"AdvancedCriteria"
        }
    ]
}} ', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (12, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"iEquals", 
            "fieldName":"IS_SYSTEM", 
            "value":"N", 
            "_constructor":"AdvancedCriteria"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (13, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",       "criteria":[          {             "fieldName":"IS_SYSTEM",               "operator":"equals",               "value":"N",               "_constructor":"AdvancedCriteria"          }     ] } }', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (25, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"isNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (25, CAST(2 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (29, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"isNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (29, CAST(2 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (29, CAST(3 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"or", 
    "criteria":[
        {
            "fieldName":"RELEASE_STATUS", 
            "operator":"equals", 
            "value":"R"
        }, 
        {
            "fieldName":"RELEASE_STATUS", 
            "operator":"equals", 
            "value":"S"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (29, CAST(4 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (29, CAST(5 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (30, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"isNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (30, CAST(2 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (30, CAST(3 AS Numeric(20, 0)), N'{"data":{
	"_constructor":"AdvancedCriteria", 
	"operator":"and", 
	"criteria":[
		{
			"fieldName":"RELEASE_STATUS", 
			"operator":"equals", 
			"value":"E"
		}
	]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (30, CAST(4 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (31, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"isNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (31, CAST(2 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "fieldName":"MANAGED_ORDER", 
            "operator":"equals", 
            "value":false
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (32, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"notNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (32, CAST(2 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
    ]
}}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (37, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"IDSTATISTIC", "operator":"notNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (41, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"IS_SYSTEM", "operator":"equals", "value":"N", "_constructor":"AdvancedCriteria" }, { "fieldName":"ENABLE", "operator":"equals", "value":"Y", "_constructor":"AdvancedCriteria" } ] }}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (51, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"IDLOG", "operator":"notNull", "value":"", "_constructor":"AdvancedCriteria" } ] }}', NULL)
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (52, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "operator":"and", 
    "_constructor":"AdvancedCriteria", 
    "criteria":[
        {
            "fieldName":"REPLENISHMENT_ACTION", 
            "operator":"equals", 
            "value":"ANALYZE"
        }, 
        {
            "fieldName":"INACTIVE", 
            "operator":"equals", 
            "value":false
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (53, CAST(1 AS Numeric(20, 0)), N'{"data":{      "operator":"and",       "_constructor":"AdvancedCriteria",       "criteria":[          {              "fieldName":"ADJUSTMENT_ACTION",               "operator":"equals",               "value":"ANALYZE"          },           {              "fieldName":"INACTIVE",               "operator":"equals",               "value":false          }      ]  }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (54, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "fieldName":"RT_ADJUSTMENT_TYPE",              "operator":"notEqual",              "value":"EMPTY"         },          {             "fieldName":"INACTIVE",              "operator":"equals",              "value":false         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (55, CAST(1 AS Numeric(20, 0)), N'{"data":{ "operator":"and", "_constructor":"AdvancedCriteria", "criteria":[ {"fieldName":"MANAGED", "operator":"equals", "value":false }, { "fieldName":"INACTIVE", "operator":"equals", "value":false} ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (56, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"INACTIVE",              "operator":"equals",              "value":false,              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (57, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"INACTIVE",              "operator":"equals",              "value":false,              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (58, CAST(1 AS Numeric(20, 0)), N'{"data":{"operator":"and", "_constructor":"AdvancedCriteria",  "criteria":[{"fieldName":"INACTIVE", "operator":"equals", "value":true}]}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (59, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"greaterOrEqualField",              "fieldName":"DAYS_SINCE_LAST_OUT",              "value":"INACTIVITY_WINDOW"         },          {             "fieldName":"INACTIVE",              "operator":"equals",              "value":false         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (61, CAST(1 AS Numeric(20, 0)), N'{"data":{
			"_constructor":"AdvancedCriteria", 
			"operator":"and", 
			"criteria":[
				{
					"operator":"iEquals", 
					"fieldName":"IS_SYSTEM", 
					"value":"N", 
					"_constructor":"AdvancedCriteria"
				}
			]
		}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (62, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",       "criteria":[          {             "fieldName":"IS_SYSTEM",               "operator":"equals",               "value":"N",               "_constructor":"AdvancedCriteria"          }     ] } }', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (64, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (65, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (66, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (67, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (68, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (69, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"INACTIVE", "operator":"equals", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (70, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"equals", "value":"1901-01-01 00:00", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (71, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"equals", "value":"1901-01-01 00:00", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (71, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"MANAGED", "operator":"equals", "value":false, "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (72, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"notEqual", "value":"1901-01-01 00:00", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (73, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"WORST_INVENTORY_ON_SITE",              "operator":"lessOrEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (73, CAST(2 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"notNull",              "fieldName":"UNIT_THROUGHPUT"         },          {             "fieldName":"UNIT_THROUGHPUT",              "operator":"notEqual",              "value":0         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (73, CAST(3 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"BUFFER",              "operator":"notEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (74, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"WORST_INVENTORY_ON_SITE",              "operator":"lessOrEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (74, CAST(2 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"notNull",              "fieldName":"UNIT_THROUGHPUT"         },          {             "fieldName":"UNIT_THROUGHPUT",              "operator":"notEqual",              "value":0         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (74, CAST(3 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"BUFFER",              "operator":"notEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (75, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"WORST_INVENTORY_ON_SITE",              "operator":"lessOrEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (75, CAST(2 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"notNull",              "fieldName":"UNIT_THROUGHPUT"         },          {             "fieldName":"UNIT_THROUGHPUT",              "operator":"notEqual",              "value":0         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (75, CAST(3 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",      "criteria":[         {             "fieldName":"BUFFER",              "operator":"notEqual",              "value":"0",              "_constructor":"AdvancedCriteria"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (79, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE",       "operator":"isNull",  "value":"",  "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (79, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"EXCHANGES_IN_QUARANTINE", "operator":"notEqual", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (80, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"FINALIZATION_DATE",       "operator":"equals",  "value":"1901-01-01 00:00:00",  "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (80, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"EXCHANGES_IN_QUARANTINE", "operator":"notEqual", "value":"0", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (83, CAST(1 AS Numeric(20, 0)), N'  {"data":{
				"operator":"and", 
				"_constructor":"AdvancedCriteria", 
				"criteria":[
					{
						"fieldName":"REPLENISHMENT_ACTION", 
						"operator":"notEqual", 
						"value":"ACCEPT"
					}, 
					{
						"fieldName":"INACTIVE", 
						"operator":"equals", 
						"value":false
					}
				]
			}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (109, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"isNull", 
            "fieldName":"CDPARENT_ORDER"
        }, 
        {
            "operator":"isNull", 
            "fieldName":"FINALIZATION_DATE"
        }, 
        {
            "operator":"notNull", 
            "fieldName":"REAL_RELEASE_DATE"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (110, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"isNull", 
            "fieldName":"CDPARENT_ORDER"
        }, 
        {
            "operator":"isNull", 
            "fieldName":"FINALIZATION_DATE"
        }, 
        {
            "operator":"notNull", 
            "fieldName":"REAL_RELEASE_DATE"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (111, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"isNull", 
            "fieldName":"CDPARENT_ORDER"
        }, 
        {
            "operator":"isNull", 
            "fieldName":"FINALIZATION_DATE"
        }, 
        {
            "operator":"notNull", 
            "fieldName":"REAL_RELEASE_DATE"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (112, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         },          {             "operator":"notNull",              "fieldName":"REAL_RELEASE_DATE"         },          {             "operator":"notEqualField",              "fieldName":"REAL_RELEASE_DATE",              "value":"RECOMMENDED_RELEASE_DATE"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (113, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         },          {             "operator":"notNull",              "fieldName":"REAL_RELEASE_DATE"         },          {             "operator":"notEqualField",              "fieldName":"REAL_RELEASE_DATE",              "value":"RECOMMENDED_RELEASE_DATE"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (114, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         },          {             "operator":"notNull",              "fieldName":"REAL_RELEASE_DATE"         },          {             "operator":"notEqualField",              "fieldName":"REAL_RELEASE_DATE",              "value":"RECOMMENDED_RELEASE_DATE"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (125, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (125, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[    {  "operator":"greaterThanField",  "fieldName":"FINALIZATION_DATE",  "value":"PROMISED_DELIVERY_DATE"      },   {  "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" }]}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (133, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (133, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[    {  "operator":"greaterThanField",  "fieldName":"FINALIZATION_DATE",  "value":"PROMISED_DELIVERY_DATE"      },   {  "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" }]}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (137, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (137, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[    {  "operator":"greaterThanField",  "fieldName":"FINALIZATION_DATE",  "value":"PROMISED_DELIVERY_DATE"      },   {  "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" }]}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (139, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (139, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"notNull", "value":"" }, { "fieldName":"FINALIZATION_DATE", "operator":"greaterThanField", "value":"PROMISED_DELIVERY_DATE" }]},
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE",  "operator":"isNull",  "value":"" }, { "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" } ]}
] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (140, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (140, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"notNull", "value":"" }, { "fieldName":"FINALIZATION_DATE", "operator":"greaterThanField", "value":"PROMISED_DELIVERY_DATE" }]},
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE",  "operator":"isNull",  "value":"" }, { "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" } ]}
] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (141, CAST(1 AS Numeric(20, 0)), N'{"data":{     "_constructor":"AdvancedCriteria",      "operator":"and",      "criteria":[         {             "operator":"isNull",              "fieldName":"CDPARENT_ORDER"         },          {             "fieldName":"CDORDER_TYPE",              "operator":"notEqual",              "value":"S"         }     ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (141, CAST(2 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"or", "criteria":[
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE", "operator":"notNull", "value":"" }, { "fieldName":"FINALIZATION_DATE", "operator":"greaterThanField", "value":"PROMISED_DELIVERY_DATE" }]},
{"_constructor":"AdvancedCriteria",  "operator":"and",  "criteria":[ { "fieldName":"FINALIZATION_DATE",  "operator":"isNull",  "value":"" }, { "fieldName":"PROMISED_DELIVERY_DATE", "operator":"lessThan", "value":"$today" } ]}
] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (143, CAST(1 AS Numeric(20, 0)), N'{"data":{
    "_constructor":"AdvancedCriteria", 
    "operator":"and", 
    "criteria":[
        {
            "operator":"iEquals", 
            "fieldName":"IS_SYSTEM", 
            "value":"N", 
            "_constructor":"AdvancedCriteria"
        }
    ]
}}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (144, CAST(1 AS Numeric(20, 0)), N'{"data":{     "operator":"and",      "_constructor":"AdvancedCriteria",       "criteria":[          {             "fieldName":"IS_SYSTEM",               "operator":"equals",               "value":"N",               "_constructor":"AdvancedCriteria"          }     ] } }', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (150, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"PROCESSING_DATE", "operator":"equals", "value":"1901-01-01 00:00", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_FILTER] ([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE]) VALUES (151, CAST(1 AS Numeric(20, 0)), N'{"data":{ "_constructor":"AdvancedCriteria", "operator":"and", "criteria":[ { "fieldName":"PROCESSING_DATE", "operator":"notEqual", "value":"1901-01-01 00:00", "_constructor":"AdvancedCriteria" } ] }}', N'Y')
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (0, N'1_Azul', N'Y', N'PMC_BUFFER_SERIE', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (0, N'4_Yellow', N'Y', N'PMCAA_BUFFER_SERIES', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (0, N'1_Gray', N'Y', N'RELEASE_POOGI_SERIES', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (1, N'5_Rojo', N'Y', N'PMC_BUFFER_SERIE', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (1, N'Cumulative %', N'Y', N'PMCAA_BUFFER_SERIES', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (1, N'Cumulative %', N'Y', N'RELEASE_POOGI_SERIES', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (2, N'3 Inventario en Sitio para Amortiguador', N'Y', N'BUFFERS', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (2, N'6_Negro', N'Y', N'PMC_BUFFER_SERIE', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (3, N'% Acumulado', N'Y', N'PMC_BUFFER_SERIE', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (4, N'5_Red', N'Y', N'PDN_ORDERS', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (5, N'6_Black', N'Y', N'PDN_ORDERS', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (6, N'Cumulative %', N'Y', N'PDN_ORDERS', 1)
INSERT [dbo].[TFSCM_CLI_USER_SERIES] ([CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE], [USER_ID]) VALUES (99, N'Color Zones', N'Y', N'ZONES', 1)
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_ADJUSTMENT', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_GENERAL_PRIORIZATION', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_INACTIVES', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION ')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_MASTER', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION ')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_REPLENISHMENT', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'BUFFER_REPLENISHMENT_OPT', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'COLOR_MANAGEMENT', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'FILTER_VIEW_LOCATIONS', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION ')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'PRODUCTION_ORDERS_FINISHED', N'DT', N'FINALIZATION_DATE', N'')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'TRS_ADJUSTMENT_TYPE', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEW_TYPE_FILTERS] ([CDVIEW_TYPE], [FILTER_TYPE], [FILTER_COLUMN], [FILTER_SQL]) VALUES (N'WITHOUTS_OUTS_TYPE', N'LC', N'LOCATION', N'SELECT CDLOCATION CODE, CDLOCATION  DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION')
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (8, N'licence_creation', NULL, N'({selected:"[{IDLICENSE:31}]",field:"[{name:\"CUSTOMER_NAME\",autoFitWidth:false,width:154},{name:\"NIT\",autoFitWidth:false,width:145},{name:\"SERVER_CODE\",autoFitWidth:false,width:148},{name:\"START_DATE\",autoFitWidth:false,width:98},{name:\"END_DATE\",autoFitWidth:false,width:115},{name:\"LIFE_TIME\",autoFitWidth:false,width:113},{name:\"CUSTOMER_ADDRESS\",autoFitWidth:false,width:139},{name:\"PHONE\",autoFitWidth:false,width:99},{name:\"DATABASE_LIMIT\",autoFitWidth:false,width:90},{name:\"PRODUCTION_ORDERS_LIMIT\",autoFitWidth:false,width:145},{name:\"CRITICAL_RESOURCES_LIMIT\",autoFitWidth:false,width:108},{name:\"BUFFERS_LIMIT\",autoFitWidth:false,width:90},{name:\"IDLICENSE\",visible:false,autoFitWidth:false,width:90},{name:\"PURCHASE_ORDER_LIMIT\",autoFitWidth:false,width:129},{name:\"USERS_LIMIT\",autoFitWidth:false,width:90},{name:\"INDICATORS\",autoFitWidth:false,width:428}]",sort:"({fieldName:\"CUSTOMER_NAME\",sortDir:\"ascending\"})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_LIC_LICENSES_VIEW", "ALIAS" : "LIC"	}], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 7, N'Y', N'N', N'N', N'Y', N'', NULL, NULL, NULL, NULL, 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (9, N'module_production_params', NULL, N'({selected:"[{CDCOMPONENT:\"3\",CDPARAM:\"SMTP_PASSWORD\"}]",field:"[{name:\"DSPARAM\",autoFitWidth:false,width:460},{name:\"CDCOMPONENT\",autoFitWidth:false,width:166},{name:\"PARAM_TYPE\",visible:false,autoFitWidth:false,width:75},{name:\"PARAM_VALUE\",autoFitWidth:false,width:425}]",sort:"({fieldName:\"CDCOMPONENT\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDCOMPONENT\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_PARAMS", "ALIAS" : "PARAMS" }], "joinTables": [ ],"constrainColumn": [ ]}', NULL, NULL, 10, N'Y', N'N', N'N', N'Y', N'PARAMETER', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (10, N'module_production_production_family', NULL, N'({selected:"[]",field:"[{name:\"CDFAMILY\",autoFitWidth:false,width:235},{name:\"DSFAMILY\",autoFitWidth:false,width:250},{name:\"BUFFER\",autoFitWidth:false,width:114},{name:\"STANDARD_TIME_DELIVERY\",autoFitWidth:false,width:142},{name:\"YELLOW_ZONE_START\",autoFitWidth:false,width:183},{name:\"RED_ZONE_START\",autoFitWidth:false,width:162},{name:\"CDLOCATION\",autoFitWidth:false,width:165},{name:\"IS_ACTIVE\",autoFitWidth:false,width:64},{name:\"TOUCH_TIME\",autoFitWidth:false,width:160}]",sort:"({fieldName:\"CDFAMILY\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDFAMILY\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS" : "FAMILY" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 11, N'Y', N'N', N'N', N'Y', N'PRODUCTION_FAMILY', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (11, N'module_production_location', NULL, N'({selected:"[]",field:"[{name:\"CDLOCATION\",autoFitWidth:false,width:255},{name:\"CF_1\",visible:false,width:120},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:301},{name:\"CDCALENDAR\",autoFitWidth:false,width:327},{name:\"LOCATION_MODIFY_DATE\",autoFitWidth:false,width:170},{name:\"CF_LC_2\",visible:false,autoFitWidth:false,width:100},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"CDLOCATION\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDLOCATION\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_LOCATION", "ALIAS" : "LOCATION" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 12, N'Y', N'N', N'N', N'Y', N'LOCATION', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (12, N'module_production_custom_field', NULL, N'({selected:"[]",field:"[{name:\"CDTABLE\",autoFitWidth:false,width:200},{name:\"DSNAME\",autoFitWidth:false,width:210},{name:\"DSTYPE\",autoFitWidth:false,width:88},{name:\"IS_EDITABLE\",autoFitWidth:false,width:77},{name:\"COLUMN_SIZE\",autoFitWidth:false,width:68},{name:\"COLUMN_ACCURACY\",autoFitWidth:false,width:75},{name:\"IS_NULLABLE\",autoFitWidth:false,width:108},{name:\"USE_AS_SERIE\",autoFitWidth:false,width:124},{name:\"CDPERMISSION_EDIT\",autoFitWidth:false,width:150},{name:\"IS_USE_AS_PERMISSION\",autoFitWidth:false,width:150},{name:\"SAVE_HISTORY\",autoFitWidth:false,width:131}]",sort:"({fieldName:\"CDTABLE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDTABLE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_COL_TABLE", "ALIAS" : "FIELD" }], "joinTables": [ ],"constrainColumn": [{"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_COLOR"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_PRIMARY_KEY"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_UPGRADABLE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "SQL_LIST"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_COL_WIDTH"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_FORMAT"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_TYPE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN":"DSCOLUMN"}]}', NULL, NULL, 13, N'Y', N'N', N'N', N'Y', N'CUSTOM_FIELD', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (13, N'module_production_frequent_causes', NULL, N'({selected:"[]",field:"[{name:\"DSCAUSE\",autoFitWidth:false,width:538},{name:\"CAUSE_TYPE\",autoFitWidth:false,width:530},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"DSCAUSE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"DSCAUSE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_CAUSES", "ALIAS" : "CAUSES" }], "joinTables": [ ],"constrainColumn": [ ]}', NULL, NULL, 14, N'Y', N'N', N'N', N'Y', N'FREQUENT_CAUSES', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (14, N'view_stock_buffer_family', NULL, N'({selected:"[]",field:"[{name:\"CDBUFFER_FAMILY\",autoFitWidth:false,width:159},{name:\"DSBUFFER_FAMILY\",autoFitWidth:false,width:255},{name:\"BUFFER_ADJUSTMENT_MODE\",autoFitWidth:false,width:200},{name:\"REPLENISHMENT_MODE\",autoFitWidth:false,width:195},{name:\"REPLENISHMENT_ROUNDING_MODE\",autoFitWidth:false,width:290},{name:\"YELLOW_ZONE_START\",autoFitWidth:false,width:191},{name:\"RED_ZONE_START\",autoFitWidth:false,width:166},{name:\"BUFFER_DECREASE_THRESHOLD\",autoFitWidth:false,width:280},{name:\"BUFFER_INCREASE_THRESHOLD\",autoFitWidth:false,width:275},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",autoFitWidth:false,width:215},{name:\"DAC_HORIZON\",autoFitWidth:false,width:220},{name:\"LOWER_PROTECTION_FACTOR\",autoFitWidth:false,width:200},{name:\"MIDDLE_PROTECTION_FACTOR\",autoFitWidth:false,width:200},{name:\"UPPER_PROTECTION_FACTOR\",autoFitWidth:false,width:200},{name:\"INACTIVITY_WINDOW\",autoFitWidth:false,width:170},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",autoFitWidth:false,width:295},{name:\"ATYPICAL_CONSUMPTION_THRESHOLD\",autoFitWidth:false,width:220},{name:\"CONSECUTIVE_INCREMENTS_FOR_ALERT\",autoFitWidth:false,width:250},{name:\"MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY\",autoFitWidth:false,width:290},{name:\"CONSECUTIVE_INCREMENTS_FOR_RECALCULATION\",autoFitWidth:false,width:270},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"CDBUFFER_FAMILY\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDBUFFER_FAMILY\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_BUFFER_FAMILY", "ALIAS" : "BUFFER_FAM" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 21, N'N', N'N', N'N', N'Y', N'BUFFER_FAMILY', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (15, N'view_stock_units', NULL, N'({selected:"[]",field:"[{name:\"CDUNIT\",autoFitWidth:false,width:277},{name:\"DSUNIT\",autoFitWidth:false,width:435},{name:\"INVENTORY_ACCURACY\",autoFitWidth:false,width:190},{name:\"IS_DEFAULT_UNIT\",autoFitWidth:false,width:148},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"IS_DEFAULT_UNIT\",sortDir:\"descending\",sortSpecifiers:[{property:\"IS_DEFAULT_UNIT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_UNITS", "ALIAS" : "CLI_UNITS" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 22, N'N', N'N', N'N', N'Y', N'UNITS', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (16, N'view_stock_units', NULL, N'({selected:"[]",field:"[{name:\"CDUNIT\",autoFitWidth:false,width:277},{name:\"DSUNIT\",autoFitWidth:false,width:435},{name:\"INVENTORY_ACCURACY\",autoFitWidth:false,width:190},{name:\"IS_DEFAULT_UNIT\",autoFitWidth:false,width:148},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"IS_DEFAULT_UNIT\",sortDir:\"descending\",sortSpecifiers:[{property:\"IS_DEFAULT_UNIT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_UNITS", "ALIAS" : "CLI_UNITS" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 29, N'Y', N'N', N'N', N'Y', N'UNITS', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (25, N'1_general_prioritizing', N'', N'({selected:"[]",field:"[{name:\"CDPLANT\",autoFitWidth:false,width:120},{name:\"CDWORKPLACE\",visible:false,width:120},{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",autoFitWidth:false,width:150},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"PRIORITY\",autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"CDFAMILY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CDPARENT_ORDER\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"RELEASE_STATUS\",autoFitWidth:false,width:151},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:235},{name:\"RELEASE_PROBLEM\",visible:false,autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:180},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:205},{name:\"PROGRESS_PERCENTAGE\",autoFitWidth:false,width:120},{name:\"PRODUCTION_PROBLEM_CAUSE\",autoFitWidth:false,width:260},{name:\"PRODUCTION_PROBLEM_DATE\",autoFitWidth:false,width:260},{name:\"ORDER_NOTES\",autoFitWidth:false,width:100},{name:\"ORDER_MODIFY_DATE\",autoFitWidth:false,width:166},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,width:100},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260}]",sort:"({fieldName:\"PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'Y', N'N', N'N', N'Y', N'OP_GENERAL_PRIORITIZING', N'', NULL, N'N', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (29, N'2_default_view_release_plan', N'', N'({selected:"[]",field:"[{name:\"CDPLANT\",autoFitWidth:false,width:120},{name:\"CDWORKPLACE\",autoFitWidth:false,width:137},{name:\"CDORDER\",autoFitWidth:false,width:113},{name:\"CDPARENT_ORDER\",autoFitWidth:false,width:129},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",visible:false,width:150},{name:\"CDFAMILY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:207},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:252},{name:\"RELEASE_STATUS\",autoFitWidth:false,width:166},{name:\"RELEASE_PROBLEM\",autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",autoFitWidth:false,width:180},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260},{name:\"ORDER_MODIFY_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_PROBLEM_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"PROGRESS_PERCENTAGE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"RECOMMENDED_RELEASE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"RECOMMENDED_RELEASE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'N', N'N', N'N', N'Y', N'OP_REALEASE_PLAN', NULL, NULL, N'N', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (30, N'3_advance_releases', N'', N'({selected:"[]",field:"[{name:\"CDPLANT\",autoFitWidth:false,width:120},{name:\"CDLOCATION\",autoFitWidth:false,width:72},{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:82},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",visible:false,width:150},{name:\"CDDESTINATION\",autoFitWidth:false,width:76},{name:\"CDORDER_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER\",visible:false,width:100},{name:\"CDFAMILY\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:164},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:216},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:156},{name:\"RELEASE_PROBLEM\",autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",autoFitWidth:false,width:180},{name:\"CAUSE_EARLY_RELEASE\",visible:false,autoFitWidth:false,width:157},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"CDWORKPLACE\",visible:false,width:120},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260}]",sort:"({fieldName:\"REAL_RELEASE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"REAL_RELEASE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'N', N'N', N'N', N'Y', N'OP_ADVANCE_RELEASE', NULL, NULL, N'Y', N'Detail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (31, N'4_default_view_manage_orders', N'', N'({selected:"[]",field:"[{name:\"MANAGED_ORDER\",frozen:true,autoFitWidth:false,width:120},{name:\"CDPLANT\",frozen:true,autoFitWidth:false,width:120},{name:\"CDORDER\",frozen:true,autoFitWidth:false,width:120},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",autoFitWidth:false,width:150},{name:\"CDDESTINATION\",autoFitWidth:false,width:120},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:120},{name:\"CDWORKPLACE\",autoFitWidth:false,width:120},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:120},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:87},{name:\"LAST_COLOR_UPDATE\",autoFitWidth:false,width:166},{name:\"ORDER_NOTES\",autoFitWidth:false,width:90},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:168},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:120},{name:\"CLEARENCE_BUFFER\",visible:false,autoFitWidth:false,width:120},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:120},{name:\"FINALIZATION_DATE\",visible:false,width:120},{name:\"INITIAL_BUFFER\",visible:false,autoFitWidth:false,width:120},{name:\"PRODUCTION_BUFFER\",visible:false,autoFitWidth:false,width:120},{name:\"PROMISED_DELIVERY_DATE\",visible:false,autoFitWidth:false,width:120},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:120},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:120},{name:\"RELEASE_PROBLEM\",visible:false,autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:180},{name:\"CDFAMILY\",visible:false,autoFitWidth:false,width:120},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:120},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:120},{name:\"ORDER_VALUE\",visible:false,autoFitWidth:false,width:120},{name:\"CAUSE_EARLY_RELEASE\",visible:false,autoFitWidth:false,width:120},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260}]",sort:"({fieldName:\"LAST_COLOR_UPDATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"LAST_COLOR_UPDATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'N', N'N', N'N', N'Y', N'OP_MANAGE_ORDER', NULL, NULL, N'Y', N'Detail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (32, N'5_default_view_completed_orders', N'', N'({selected:"[]",field:"[{name:\"MANAGED_ORDER\",visible:false,width:120},{name:\"CDPLANT\",autoFitWidth:false,width:120},{name:\"CDWORKPLACE\",visible:false,width:120},{name:\"CLEARENCE_BUFFER\",visible:false,width:120},{name:\"CREATION_DATE\",visible:false,width:120},{name:\"CDORDER\",autoFitWidth:false,width:120},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",autoFitWidth:false,width:150},{name:\"CDFAMILY\",visible:false,width:120},{name:\"PRIORITY\",visible:false,width:120},{name:\"PRIORITY_COLOR\",visible:false,width:120},{name:\"PRODUCTION_BUFFER\",visible:false,width:120},{name:\"CDDESTINATION\",autoFitWidth:false,width:120},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,width:120},{name:\"RELEASE_STATUS\",autoFitWidth:false,width:120},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:219},{name:\"RELEASE_PROBLEM\",visible:false,autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:180},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:178},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:181},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:171},{name:\"INITIAL_BUFFER\",visible:false,width:120},{name:\"LAST_COLOR_UPDATE\",visible:false,width:120},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:120},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:120},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:120},{name:\"ORDER_NOTES\",autoFitWidth:false,width:90},{name:\"ORDER_VALUE\",visible:false,width:120},{name:\"CAUSE_EARLY_RELEASE\",visible:false,autoFitWidth:false,width:120},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260}]",sort:"({fieldName:\"FINALIZATION_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"FINALIZATION_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'N', N'N', N'N', N'Y', N'PRODUCTION_ORDERS_FINISHED', N' (''05-02-2014 00:00:00.000'', ''12-02-2015 23:59:59.999'') ', NULL, N'N', N'ChartPMC', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (37, N'default_view_statistics', NULL, N'({selected:"[]",field:"[{name:\"ID\",visible:true,autoFitWidth:false,width:90},{name:\"IDJOB\",visible:true,autoFitWidth:false,width:90},{name:\"START_TIME_EXE\",autoFitWidth:false,width:115},{name:\"END_TIME_EXE\",autoFitWidth:false,width:115},{name:\"TOTAL_TIME_EXE\",autoFitWidth:false,width:99},{name:\"DSSTATISTIC\",autoFitWidth:false,width:154},{name:\"STATISTIC_DETAIL\",autoFitWidth:false,width:300},{name:\"STATUS\",autoFitWidth:false,width:90}]",sort:"({fieldName:\"IDSTATISTIC\",sortDir:\"descending\"})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_STATISTICS", "ALIAS" : "STA"	}], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 8, N'Y', N'N', N'N', N'Y', N'', NULL, NULL, NULL, NULL, 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (41, N'jobs_creation', NULL, N'({selected:"[]",field:"[{name:\"IDJOB\",visible:false,autoFitWidth:false,width:90},{name:\"TRIGGER_NAME\",autoFitWidth:false,width:200},{name:\"STATUS\",autoFitWidth:false,width:60},{name:\"IS_SYSTEM\",visible:false,autoFitWidth:false,width:90},{name:\"ENABLE\",visible:false,autoFitWidth:false,width:90}]",sort:"({fieldName:\"TRIGGER_NAME\",sortDir:\"ascending\"})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_JOBS", "ALIAS" : "JOB"	}], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 9, N'Y', N'N', N'N', N'Y', N'', NULL, NULL, NULL, NULL, 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (51, N'default_view_log', NULL, N'({selected:"[]",field:"[{name:\"IDLOG\",visible:true,autoFitWidth:false,width:90},{name:\"LOG_TIME\",visible:true,autoFitWidth:false,width:150},{name:\"CDTYPE\",visible:true,autoFitWidth:false,width:100},{name:\"DSLOG\",visible:true,autoFitWidth:false,width:650},{name:\"LOG_DETAIL\",visible:false,autoFitWidth:false,width:800},{name:\"ELEMENT_CODE\",autoFitWidth:false,width:180},{name:\"LOCATION_CODE\",autoFitWidth:false,width:180},{name:\"RECORD_CONTENT\",autoFitWidth:false,width:180},{name:\"ROW_NUMBER\",autoFitWidth:false,width:90},{name:\"COLUMN_NAME\",autoFitWidth:false,width:180},{name:\"FILE_NAME\",autoFitWidth:false,width:450},{name:\"UPDATE_DATE\",autoFitWidth:false,width:100}]",sort:"({fieldName:\"IDLOG\",sortDir:\"descending\"})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_LOG", "ALIAS" : "LG" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 15, N'Y', N'N', N'N', N'Y', N'', NULL, NULL, NULL, NULL, 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (52, N'4_buffer_replenishment', NULL, N'({selected:"[]",field:"[{name:\"REPLENISHMENT_ACTION\",frozen:true,autoFitWidth:false,width:202},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:144},{name:\"SKU\",frozen:true,autoFitWidth:false,width:143},{name:\"APPROVED_BUFFER_REPLENISH\",frozen:true,autoFitWidth:false,width:224},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:224},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:153},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"NET_INVENTORY\",autoFitWidth:false,width:180},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"REPLENISHMENT_ROUNDING_MODE\",autoFitWidth:false,width:335},{name:\"CDUNIT\",autoFitWidth:false,width:151},{name:\"MISSING_BUFFER_INVENTORY\",autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"SUGGESTED_BUFFER_REPLENISH\",autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",autoFitWidth:false,width:153},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:175},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:146},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INVENTORY_ON_CHAIN\",visible:false,autoFitWidth:false,width:231},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:195},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"NET_PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"NET_PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'BUFFER_REPLENISHMENT', N'', NULL, N'N', N'ChainColors', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (53, N'2_buffer_adjustment', NULL, N'({selected:"[]",field:"[{name:\"ADJUSTMENT_ACTION\",frozen:true,autoFitWidth:false,width:150},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:144},{name:\"SKU\",frozen:true,autoFitWidth:false,width:156},{name:\"ADJUSTMENT_TYPE\",frozen:true,autoFitWidth:false,width:136},{name:\"REPLENISHMENT_ROUNDING_MODE\",visible:false,autoFitWidth:false,width:90},{name:\"APPROVED_BUFFER\",frozen:true,autoFitWidth:false,width:184},{name:\"REPLENISHMENT_ACTION\",frozen:true,visible:false,autoFitWidth:false,width:202},{name:\"APPROVED_BUFFER_REPLENISH\",frozen:true,visible:false,autoFitWidth:false,width:224},{name:\"ORIGIN_LOCATION\",visible:false,autoFitWidth:false,width:153},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:186},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:146},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",autoFitWidth:false,width:179},{name:\"SUGGESTION_REJECTION_CAUSE\",autoFitWidth:false,width:239},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"SUGGESTED_BUFFER\",autoFitWidth:false,width:183},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:100},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"SUGGESTION_DATE\",autoFitWidth:false,width:180},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:218},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"ADJUSTMENT_TYPE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"ADJUSTMENT_TYPE\",direction:\"ascending\"},{property:\"LOCATION\",direction:\"ascending\"},{property:\"SUGGESTION_DATE\",direction:\"ascending\"},{property:\"BUFFER\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'BUFFER_ADJUSTMENT', N'', NULL, N'N', N'ChartBuffer', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (54, N'3_buffer_trs_adjustment', NULL, N'({selected:"[]",field:"[{name:\"MANAGED_RT\",frozen:true,autoFitWidth:false,width:110},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"RT_ADJUSTMENT_TYPE\",frozen:true,autoFitWidth:false,width:200},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:173},{name:\"SKU\",frozen:true,autoFitWidth:false,width:168},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",autoFitWidth:false,width:247},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:100},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:186},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:50},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"ORIGIN_LOCATION\",visible:false,autoFitWidth:false,width:176},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:146},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:285},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:50},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"RT_ADJUSTMENT_TYPE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"RT_ADJUSTMENT_TYPE\",direction:\"ascending\"},{property:\"LOCATION\",direction:\"ascending\"},{property:\"UPDATE_MOVEMENTS\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'TRS_ADJUSTMENT_TYPE', N'', NULL, N'N', N'ChartBuffer', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (55, N'6_default_view_color_changes', N' ', N'({selected:"[]",field:"[{name:\"MANAGED\",frozen:true,autoFitWidth:false,width:96},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:117},{name:\"SKU\",frozen:true,autoFitWidth:false,width:116},{name:\"SITE_PRIORITY\",frozen:true,autoFitWidth:false,width:100},{name:\"ALLOWED_OVERSTOCKING\",visible:false,width:50},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,width:50},{name:\"APPROVED_BUFFER\",visible:false,width:50},{name:\"BUFFER_INITIAL_DATE\",visible:false,width:90},{name:\"CREATION_DATE\",visible:false,width:90},{name:\"CREATOR_USER\",visible:false,width:120},{name:\"EFFECTIVE_BUFFER\",visible:false,width:50},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:212},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:153},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:113},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"INACTIVATION_DATE\",visible:false,width:90},{name:\"INACTIVE\",visible:false,width:90},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:160},{name:\"INVENTORY_ON_TRANSIT\",autoFitWidth:false,width:185},{name:\"INVENTORY_ON_PURCHASING\",autoFitWidth:false,width:190},{name:\"INVENTORY_ON_PRODUCTION\",autoFitWidth:false,width:203},{name:\"NET_INVENTORY\",autoFitWidth:false,width:195},{name:\"MISSING_BUFFER_INVENTORY\",autoFitWidth:false,width:164},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"FAMILY\",autoFitWidth:false,width:130},{name:\"NOTES\",autoFitWidth:false,width:61},{name:\"LAST_COLOR_CHANGE_DATE\",autoFitWidth:false,width:191},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:169},{name:\"LOCATION_TYPE\",visible:false,width:90},{name:\"MODIFY_DATE\",visible:false,width:120},{name:\"MODIFY_USER\",visible:false,width:120},{name:\"REPLENISHMENT_ACTION\",visible:false,width:120},{name:\"REPLENISHMENT_TIME\",visible:false,width:50},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,width:50},{name:\"SUGGESTED_BUFFER\",visible:false,width:50},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,width:50},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,width:50},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,width:50},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,width:50},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,width:50},{name:\"UNIT_THROUGHPUT\",visible:false,width:50},{name:\"CDUNIT\",visible:false,width:50},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,width:50},{name:\"CONSUMPTION\",visible:false,width:50},{name:\"MINIMUM_BUFFER\",visible:false,width:50},{name:\"MINIMUM_REPLENISHMENT\",visible:false,width:50},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,width:50},{name:\"PACKAGING_UNIT\",visible:false,width:50},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,width:50},{name:\"SECURITY_STOCK\",visible:false,width:50},{name:\"TVC\",visible:false,width:50},{name:\"UNIT_PRICE\",visible:false,width:50},{name:\"LOCATION_TYPE\",visible:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"LAST_COLOR_CHANGE_DATE\",sortDir:\"descending\",sortSpecifiers:[{property:\"LAST_COLOR_CHANGE_DATE\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'COLOR_MANAGEMENT', N'', NULL, N'Y', N'ChartBuffer', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (56, N'8_buffer_master', NULL, N'({selected:"[]",field:"[{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"SKU\",autoFitWidth:false,width:168},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"CDUNIT\",autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",autoFitWidth:false,width:247},{name:\"REPLENISHMENT_FREQUENCY\",autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"MINIMUM_BUFFER\",autoFitWidth:false,width:216},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",autoFitWidth:false,width:139},{name:\"TVC\",autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",autoFitWidth:false,width:154},{name:\"CONSUMPTION\",autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",autoFitWidth:false,width:159},{name:\"EXCLUDED_OUTS\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_INVENTORY_ON_SITE\",autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",autoFitWidth:false,width:216},{name:\"PENDING_DEMAND\",autoFitWidth:false,width:180},{name:\"REPLENISHMENT_PRIORITY\",autoFitWidth:false,width:180},{name:\"UPDATE_MOVEMENTS\",visible:false,autoFitWidth:false,width:175},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:195},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"INVENTORY_ON_CHAIN\",visible:false,autoFitWidth:false,width:231},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_2\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_3\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_4\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_6\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_7\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"LOCATION\",sortDir:\"ascending\",sortSpecifiers:[{property:\"LOCATION\",direction:\"ascending\"},{property:\"SKU\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'BUFFER_MASTER', N' (''0000000001_101002'',''0000000002_105010'',''0000000003_111010'',''0000000004_114001'',''0000000005_144001'',''0000000006_1662'',''0000000007_204001'',''0000000008_268'',''0000000009_271'',''0000000010_300201'',''0000000011_300208'',''0000000012_300601'',''0000000013_300901'',''0000000014_301201'',''0000000015_302201'',''0000000016_302601'',''0000000017_306502'',''0000000018_316201'',''0000000019_316601'',''0000000020_318001'',''0000000021_320301'',''0000000022_321201'',''0000000023_322101'',''0000000024_537'',''0000000025_54'',''0000000026_543'',''0000000027_600022'',''0000000028_600041'',''0000000029_600082'',''0000000030_600207'',''0000000031_600402'',''0000000032_600875'',''0000000033_600887'',''0000000034_600961'',''0000000035_600990'',''0000000036_600998'',''0000000037_601055'',''0000000038_700001'',''0000000039_700002'',''0000000040_700003'',''0000000041_766619'',''0000000042_766644'',''0000000043_766739'',''0000000044_788832'',''0000000045_799947'',''0000000046_8'',''0000000047_800010'',''0000000048_800012'',''0000000049_800034'',''0000000050_800046'',''0000000051_800052'',''0000000052_800071'',''0000000053_800090'',''0000000054_800100'',''0000000055_800102'',''0000000056_800130'',''0000000057_800137'',''0000000058_800140'',''0000000059_800148'',''0000000060_800201'',''0000000061_800217'',''0000000062_800218'',''0000000063_800225'',''0000000064_800232'',''0000000065_800241'',''0000000066_800250'',''0000000067_800261'',''0000000068_800263'',''0000000069_800268'',''0000000070_800272'',''0000000071_800278'',''0000000073_BODEGA8'',''0000000074_BODPP'',''0000000075_BODPT'',''0000000076_''''JULIAN002'',''0000000077_JULIAN003'''''',''0000000083_location_empty5'',''0000000084_location_emptyJuliano1'',''0000000085_location_emptyJuliano2'',''0000000086_location_Exportjul1'',''0000000087_location_Exportjul2'',''0000000088_location_Exportjul3'',''0000000089_location_Exportjul4'',''0000000090_location_Exportjul5'',''0000000091_location_jul1'',''0000000092_location_jul2'',''0000000093_location_ohlo4'',''0000000094_location75331'',''0000000095_location75332'',''0000000096_locationbyDate0'',''0000000097_locationbyDate01'',''0000000098_locationbyDate1'',''0000000099_locationbyDate2'',''0000000100_locationbyDate3'',''0000000101_LOCATIONJU001'',''0000000102_locationjulian75331'',''0000000103_locationjulian75332'',''0000000104_locationjULIANsEP'',''0000000105_locationjULIANsEP1'',''0000000106_locationjULIANsEP2'',''0000000107_locationjULIANsEP3'',''0000000108_locationjULIANsEP4'',''0000000109_locationjULIANsEP5'',''0000000110_locationjULIANsEP6'',''0000000111_locat''''n'',''0000000112_PlantaDelPie'',''0000000113_Proveedor'',''0000000114_PRUEBA'',''0000000115_UBICACION1'',''0000000116_UBICACION1JULIAN1'',''0000000117_UBICACION2'',''0000000118_UBICACION2.1JULIAN2.1'',''0000000119_UBICACION2JULIAN2'',''0000000120_UBICACION3'',''0000000121_UBICACION3JULIAN3'',''0000000122_UBICACION4'',''0000000123_Ubicatio''''s'',''0000000124_Ultimita'',''0000000125_VEA MAS'',''0000000126_VEA_QUE'',''0000000127_VEA_SI'',''0000000128_VEAOTRO'',''0000000130_WH01'',''0000000131_WH02'',''0000000132_WH03'',''0000000133_WH07'',''0000000134_WH08'',''0000000135_WH''''''''10'',''0000000137_WH18'')', NULL, N'Y', N'AditionalDetail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (57, N'1_buffer_general_prioritizing', NULL, N'({selected:"[]",field:"[{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"SKU\",autoFitWidth:false,width:168},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:100},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:171},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"NET_INVENTORY\",autoFitWidth:false,width:184},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:129},{name:\"INVENTORY_ON_TRANSIT\",autoFitWidth:false,width:177},{name:\"INVENTORY_ON_PURCHASING\",autoFitWidth:false,width:180},{name:\"INVENTORY_ON_PRODUCTION\",autoFitWidth:false,width:193},{name:\"PENDING_DEMAND\",autoFitWidth:false,width:180},{name:\"MISSING_BUFFER_INVENTORY\",autoFitWidth:false,width:167},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"REPLENISHMENT_PROBLEM\",autoFitWidth:false,width:206},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:175},{name:\"CF_BF_9\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"CF_BF_4\",visible:false,autoFitWidth:false,width:100},{name:\"CF_LC_8\",visible:false,autoFitWidth:false,width:100},{name:\"CF_LC_2\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_3\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_7\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"CF_BF_2\",visible:false,autoFitWidth:false,width:100},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:186},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"EXCLUDED_OUTS\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"CF_BF_6\",visible:false,autoFitWidth:false,width:100},{name:\"CF_BF_8\",visible:false,autoFitWidth:false,width:100},{name:\"CF_LC_3\",visible:false,autoFitWidth:false,width:100},{name:\"CF_LC_4\",visible:false,autoFitWidth:false,width:100},{name:\"CF_LC_5\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224}]",sort:"({fieldName:\"SITE_PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"SITE_PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'Y', N'N', N'N', N'Y', N'BUFFER_GENERAL_PRIORIZATION', N'', NULL, N'N', N'SiteColors', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (58, N'9_inactive_buffers', NULL, N'({selected:"[]",field:"[{name:\"INACTIVE\",frozen:true,autoFitWidth:false,width:90},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:173},{name:\"SKU\",frozen:true,autoFitWidth:false,width:168},{name:\"ORIGIN_LOCATION\",visible:false,autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"NET_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:186},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:195},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"INVENTORY_ON_CHAIN\",visible:false,autoFitWidth:false,width:231},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"INACTIVATION_DATE\",autoFitWidth:false,width:217},{name:\"UPDATE_MOVEMENTS\",visible:false,autoFitWidth:false,width:175},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"INACTIVATION_DATE\",sortDir:\"descending\",sortSpecifiers:[{property:\"INACTIVATION_DATE\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'BUFFER_INACTIVES', N' (''0000000001_101002'',''0000000002_105010'',''0000000003_111010'',''0000000004_114001'',''0000000005_144001'',''0000000007_204001'',''0000000010_300201'',''0000000011_300208'',''0000000012_300601'',''0000000013_300901'',''0000000014_301201'',''0000000015_302201'',''0000000016_302601'',''0000000017_306502'',''0000000018_316201'',''0000000019_316601'',''0000000020_318001'',''0000000021_320301'',''0000000022_321201'',''0000000023_322101'',''0000000027_600022'',''0000000028_600041'',''0000000029_600082'',''0000000030_600207'',''0000000031_600402'',''0000000032_600875'',''0000000033_600887'',''0000000034_600961'',''0000000035_600990'',''0000000036_600998'',''0000000037_601055'',''0000000038_700001'',''0000000039_700002'',''0000000040_700003'',''0000000041_766619'',''0000000042_766644'',''0000000043_766739'',''0000000044_788832'',''0000000045_799947'',''0000000047_800010'',''0000000048_800012'',''0000000049_800034'',''0000000050_800046'',''0000000051_800052'',''0000000052_800071'',''0000000053_800090'',''0000000054_800100'',''0000000055_800102'',''0000000056_800130'',''0000000057_800137'',''0000000058_800140'',''0000000059_800148'',''0000000060_800201'',''0000000061_800217'',''0000000062_800218'',''0000000063_800225'',''0000000064_800232'',''0000000065_800241'',''0000000066_800250'',''0000000067_800261'',''0000000068_800263'',''0000000069_800268'',''0000000070_800272'',''0000000071_800278'',''0000000073_BODEGA8'',''0000000074_BODPP'',''0000000075_BODPT'',''0000000083_location_empty5'',''0000000084_location_emptyJuliano1'',''0000000085_location_emptyJuliano2'',''0000000086_location_Exportjul1'',''0000000087_location_Exportjul2'',''0000000088_location_Exportjul3'',''0000000089_location_Exportjul4'',''0000000090_location_Exportjul5'',''0000000091_location_jul1'',''0000000092_location_jul2'',''0000000093_location_ohlo4'',''0000000094_location75331'',''0000000095_location75332'',''0000000096_locationbyDate0'',''0000000097_locationbyDate01'',''0000000098_locationbyDate1'',''0000000099_locationbyDate2'',''0000000100_locationbyDate3'',''0000000102_locationjulian75331'',''0000000103_locationjulian75332'',''0000000104_locationjULIANsEP'',''0000000105_locationjULIANsEP1'',''0000000106_locationjULIANsEP2'',''0000000107_locationjULIANsEP3'',''0000000108_locationjULIANsEP4'',''0000000109_locationjULIANsEP5'',''0000000110_locationjULIANsEP6'',''0000000114_PRUEBA'',''0000000115_UBICACION1'',''0000000116_UBICACION1JULIAN1'',''0000000117_UBICACION2'',''0000000118_UBICACION2.1JULIAN2.1'',''0000000119_UBICACION2JULIAN2'',''0000000120_UBICACION3'',''0000000121_UBICACION3JULIAN3'',''0000000122_UBICACION4'',''0000000125_VEA MAS'',''0000000126_VEA_QUE'',''0000000127_VEA_SI'',''0000000128_VEAOTRO'')', NULL, N'Y', N'ChartBuffer', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (59, N'7_buffer_without_outs', NULL, N'({selected:"[]",field:"[{name:\"RESET_COUNT\",frozen:true,autoFitWidth:false,width:120},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:173},{name:\"SKU\",frozen:true,autoFitWidth:false,width:168},{name:\"ORIGIN_LOCATION\",visible:false,autoFitWidth:false,width:176},{name:\"DAYS_SINCE_LAST_OUT\",autoFitWidth:false,width:178},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"NET_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:186},{name:\"SUGGESTED_BUFFER\",visible:false,width:50},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:146},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:175},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:133},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"DAYS_SINCE_LAST_OUT\",sortDir:\"descending\",sortSpecifiers:[{property:\"DAYS_SINCE_LAST_OUT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'WITHOUTS_OUTS_TYPE', N' (''0000000001_101002'',''0000000002_105010'',''0000000003_111010'',''0000000004_114001'',''0000000005_144001'',''0000000006_1662'',''0000000007_204001'',''0000000008_268'',''0000000009_271'',''0000000010_300201'',''0000000011_300208'',''0000000012_300601'',''0000000013_300901'',''0000000014_301201'',''0000000015_302201'',''0000000016_302601'',''0000000017_306502'',''0000000018_316201'',''0000000019_316601'',''0000000020_318001'',''0000000021_320301'',''0000000022_321201'',''0000000023_322101'',''0000000024_537'',''0000000025_54'',''0000000026_543'',''0000000027_600022'',''0000000028_600041'',''0000000029_600082'',''0000000030_600207'',''0000000031_600402'',''0000000032_600875'',''0000000033_600887'',''0000000034_600961'',''0000000035_600990'',''0000000036_600998'',''0000000037_601055'',''0000000038_700001'',''0000000039_700002'',''0000000040_700003'',''0000000041_766619'',''0000000042_766644'',''0000000043_766739'',''0000000044_788832'',''0000000045_799947'',''0000000046_8'',''0000000047_800010'',''0000000048_800012'',''0000000049_800034'',''0000000050_800046'',''0000000051_800052'',''0000000052_800071'',''0000000053_800090'',''0000000054_800100'',''0000000055_800102'',''0000000056_800130'',''0000000057_800137'',''0000000058_800140'',''0000000059_800148'',''0000000060_800201'',''0000000061_800217'',''0000000062_800218'',''0000000063_800225'',''0000000064_800232'',''0000000065_800241'',''0000000066_800250'',''0000000067_800261'',''0000000068_800263'',''0000000069_800268'',''0000000070_800272'',''0000000071_800278'',''0000000073_BODEGA8'',''0000000074_BODPP'',''0000000075_BODPT'',''0000000076_''''JULIAN002'',''0000000077_JULIAN003'''''',''0000000083_location_empty5'',''0000000084_location_emptyJuliano1'',''0000000085_location_emptyJuliano2'',''0000000086_location_Exportjul1'',''0000000087_location_Exportjul2'',''0000000088_location_Exportjul3'',''0000000089_location_Exportjul4'',''0000000090_location_Exportjul5'',''0000000091_location_jul1'',''0000000092_location_jul2'',''0000000093_location_ohlo4'',''0000000094_location75331'',''0000000095_location75332'',''0000000096_locationbyDate0'',''0000000097_locationbyDate01'',''0000000098_locationbyDate1'',''0000000099_locationbyDate2'',''0000000100_locationbyDate3'',''0000000101_LOCATIONJU001'',''0000000102_locationjulian75331'',''0000000103_locationjulian75332'',''0000000104_locationjULIANsEP'',''0000000105_locationjULIANsEP1'',''0000000106_locationjULIANsEP2'',''0000000107_locationjULIANsEP3'',''0000000108_locationjULIANsEP4'',''0000000109_locationjULIANsEP5'',''0000000110_locationjULIANsEP6'',''0000000111_locat''''n'',''0000000112_PlantaDelPie'',''0000000113_Proveedor'',''0000000114_PRUEBA'',''0000000115_UBICACION1'',''0000000116_UBICACION1JULIAN1'',''0000000117_UBICACION2'',''0000000118_UBICACION2.1JULIAN2.1'',''0000000119_UBICACION2JULIAN2'',''0000000120_UBICACION3'',''0000000121_UBICACION3JULIAN3'',''0000000122_UBICACION4'',''0000000125_VEA MAS'',''0000000126_VEA_QUE'',''0000000127_VEA_SI'',''0000000128_VEAOTRO'',''0000000129_WH01'',''0000000130_WH02'',''0000000131_WH03'',''0000000132_WH07'',''0000000133_WH08'',''0000000136_WH18'')', NULL, N'N', N'ChartBuffer', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (60, N'module_production_location', NULL, N'({selected:"[]",field:"[{name:\"CDLOCATION\",autoFitWidth:false,width:255},{name:\"CF_1\",visible:false,width:120},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:301},{name:\"CDCALENDAR\",autoFitWidth:false,width:327},{name:\"LOCATION_MODIFY_DATE\",autoFitWidth:false,width:170},{name:\"CF_LC_2\",visible:false,autoFitWidth:false,width:100},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"CDLOCATION\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDLOCATION\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_LOCATION", "ALIAS" : "LOCATION" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 24, N'Y', N'N', N'N', N'Y', N'LOCATION', N'', NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (61, N'module_production_custom_field', NULL, N'({selected:"[]",field:"[{name:\"CDTABLE\",autoFitWidth:false,width:200},{name:\"DSNAME\",autoFitWidth:false,width:210},{name:\"DSTYPE\",autoFitWidth:false,width:88},{name:\"IS_EDITABLE\",autoFitWidth:false,width:77},{name:\"COLUMN_SIZE\",autoFitWidth:false,width:68},{name:\"COLUMN_ACCURACY\",autoFitWidth:false,width:75},{name:\"IS_NULLABLE\",autoFitWidth:false,width:108},{name:\"USE_AS_SERIE\",autoFitWidth:false,width:124},{name:\"CDPERMISSION_EDIT\",autoFitWidth:false,width:150},{name:\"IS_USE_AS_PERMISSION\",autoFitWidth:false,width:150},{name:\"SAVE_HISTORY\",autoFitWidth:false,width:131}]",sort:"({fieldName:\"CDTABLE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDTABLE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_COL_TABLE", "ALIAS" : "FIELD" }], "joinTables": [ ],"constrainColumn": [{"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_COLOR"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_PRIMARY_KEY"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_UPGRADABLE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "SQL_LIST"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_COL_WIDTH"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_FORMAT"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_TYPE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN":"DSCOLUMN"}]}', NULL, NULL, 25, N'Y', N'N', N'N', N'Y', N'CUSTOM_FIELD', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (62, N'module_production_frequent_causes', NULL, N'({selected:"[]",field:"[{name:\"DSCAUSE\",autoFitWidth:false,width:538},{name:\"CAUSE_TYPE\",autoFitWidth:false,width:530},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"DSCAUSE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"DSCAUSE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_CAUSES", "ALIAS" : "CAUSES" }], "joinTables": [ ],"constrainColumn": [ ]}', NULL, NULL, 26, N'Y', N'N', N'N', N'Y', N'FREQUENT_CAUSES', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (63, N'delete_history', NULL, N'({selected:"[]",field:"[{name:\"DELETE_TYPE\",autoFitWidth:false,width:450},{name:\"HISTORY_DAYS\",autoFitWidth:false,width:110},{name:\"DAY_OF_WEEK\",autoFitWidth:false,width:100},{name:\"TIME_EXECUTION\",autoFitWidth:false,width:110}]",sort:"({fieldName:\"DELETE_TYPE\",sortDir:\"descending\",sortSpecifiers:[{property:\"DELETE_TYPE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_DELETE_HISTORY", "ALIAS" : "DELETE_HISTORY" }], "joinTables": [ ],"constrainColumn": [ ]}', NULL, NULL, 30, N'Y', N'N', N'N', N'Y', N'DELETE_HISTORY', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (64, N'1_default_dca_indicator_monthly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(11 AS Numeric(4, 0)), NULL, 31, N'Y', N'N', N'N', N'Y', N'DCA_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (65, N'2_default_dca_indicator_weekly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(12 AS Numeric(4, 0)), NULL, 31, N'N', N'N', N'N', N'Y', N'DCA_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (66, N'3_default_dca_indicator_daily', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(13 AS Numeric(4, 0)), NULL, 31, N'N', N'N', N'N', N'Y', N'DCA_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (67, N'4_default_dca_indicator_well_reple_buffer', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(14 AS Numeric(4, 0)), NULL, 31, N'N', N'N', N'N', N'Y', N'DCA_WELL_REPLENISHED', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (68, N'5_default_dca_indicator_urgent_buffer', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(15 AS Numeric(4, 0)), NULL, 31, N'N', N'N', N'N', N'Y', N'DCA_URGENT', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (69, N'6_default_dca_indicator_buffer_wiht_excess', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"SITE_PRIORITY\",autoFitWidth:false,width:170},{name:\"SITE_PRIORITY_COLOR\",autoFitWidth:false,width:217},{name:\"NET_PRIORITY\",autoFitWidth:false,width:207},{name:\"NET_PRIORITY_COLOR\",autoFitWidth:false,width:247},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"NET_INVENTORY\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:230},{name:\"CDUNIT\",visible:false,autoFitWidth:false,width:151},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:153},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"MISSING_BUFFER_INVENTORY\",visible:false,autoFitWidth:false,width:221},{name:\"NOTES\",visible:false,autoFitWidth:false,width:193},{name:\"SUGGESTED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"APPROVED_BUFFER_REPLENISH\",visible:false,autoFitWidth:false,width:229},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:229},{name:\"REPLENISHMENT_ACTION\",visible:false,autoFitWidth:false,width:240},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_ADJUSTMENT_MODE\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_DECREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"BUFFER_INCREASE_THRESHOLD\",visible:false,autoFitWidth:false,width:100},{name:\"INACTIVITY_WINDOW\",visible:false,autoFitWidth:false,width:100},{name:\"LOWER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MIDDLE_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"UPPER_PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"MOVING_SUMS_FOR_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100},{name:\"TIME_BETWEEN_BUFFER_RECALCULATIONS\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATION" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BH.LOCATION", "fieldName2": "LOCATION.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }] }', CAST(16 AS Numeric(4, 0)), NULL, 31, N'N', N'N', N'N', N'Y', N'DCA_WITH_EXCESS', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (70, N'1_purchase_orders_general_prioritizing', NULL, N'({selected:"[]",field:"[{name:\"DESTINATION\",autoFitWidth:false,width:120},{name:\"SUPPLIER\",autoFitWidth:false,width:120},{name:\"CDPURCHASE_ORDER\",autoFitWidth:false,width:120},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"PENDING_QUANTITY\",autoFitWidth:false,width:180},{name:\"PO_TYPE\",autoFitWidth:false,width:120},{name:\"PRIORITY\",autoFitWidth:false,width:120},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:120},{name:\"ORDER_CREATION_DATETIME\",autoFitWidth:false,width:220},{name:\"PROMISED_DELIVERY_DATETIME\",autoFitWidth:false,width:200},{name:\"NECESSITY_DATETIME\",autoFitWidth:false,width:180},{name:\"PURCHASE_NOTES\",autoFitWidth:false,width:120},{name:\"UPDATE_DATE\",autoFitWidth:false,width:180},{name:\"CREATION_USER\",visible:false,width:180},{name:\"FINALIZATION_DATE\",visible:false,width:180},{name:\"MANAGED\",visible:false,width:100},{name:\"UNITS\",visible:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:180},{name:\"COLOR_CHANGE_DATE\",visible:false,width:220},{name:\"MODIFICATION_USER\",visible:false,width:180},{name:\"MODIFICATION_DATE\",visible:false,width:180},{name:\"CREATION_DATE\",visible:false,width:180}]",sort:"({fieldName:\"PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_PURCHASE_ORDERS", "ALIAS" : "PURCHASE_ORDERS" },{ "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" },{ "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }], "joinTables": [{ "fieldName1": "PURCHASE_ORDERS.DESTINATION", "fieldName2": "UBICACION.CDLOCATION" },{ "fieldName1": "PURCHASE_ORDERS.UNITS", "fieldName2": "UNIT.CDUNIT" }],"constrainColumn": [ { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "ORDER_CREATION_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "PROMISED_DELIVERY_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "NECESSITY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" }]}', NULL, NULL, 32, N'Y', N'N', N'N', N'Y', N'PURCHASE_ORDERS_GENERAL_PRIORITIZING', NULL, NULL, N'N', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (71, N'2_purchase_orders_color_change', NULL, N'({selected:"[]",field:"[{name:\"MANAGED\",frozen:true,autoFitWidth:false,width:100},{name:\"DESTINATION\",frozen:true,autoFitWidth:false,width:120},{name:\"SUPPLIER\",frozen:true,autoFitWidth:false,width:120},{name:\"CDPURCHASE_ORDER\",frozen:true,autoFitWidth:false,width:120},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"PENDING_QUANTITY\",autoFitWidth:false,width:180},{name:\"PO_TYPE\",autoFitWidth:false,width:120},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:120},{name:\"COLOR_CHANGE_DATE\",autoFitWidth:false,width:220},{name:\"PURCHASE_NOTES\",autoFitWidth:false,width:120},{name:\"ORDER_CREATION_DATETIME\",visible:false,width:220},{name:\"PROMISED_DELIVERY_DATETIME\",visible:false,width:220},{name:\"NECESSITY_DATETIME\",visible:false,width:180},{name:\"UPDATE_DATE\",visible:false,width:180},{name:\"CREATION_USER\",visible:false,width:180},{name:\"FINALIZATION_DATE\",visible:false,width:180},{name:\"PRIORITY\",visible:false,width:120},{name:\"UNITS\",visible:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:180},{name:\"MODIFICATION_USER\",visible:false,width:180},{name:\"MODIFICATION_DATE\",visible:false,width:180},{name:\"CREATION_DATE\",visible:false,width:180}]",sort:"({fieldName:\"COLOR_CHANGE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"COLOR_CHANGE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_PURCHASE_ORDERS", "ALIAS" : "PURCHASE_ORDERS" },{ "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" },{ "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }], "joinTables": [{ "fieldName1": "PURCHASE_ORDERS.DESTINATION", "fieldName2": "UBICACION.CDLOCATION" },{ "fieldName1": "PURCHASE_ORDERS.UNITS", "fieldName2": "UNIT.CDUNIT" }],"constrainColumn": [ { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "ORDER_CREATION_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "PROMISED_DELIVERY_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "NECESSITY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" }]}', NULL, NULL, 32, N'N', N'N', N'N', N'Y', N'PURCHASE_ORDERS_COLOR_CHANGE', NULL, NULL, N'Y', N'Detail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (72, N'3_purchase_orders_finalized_orders', NULL, N'({selected:"[]",field:"[{name:\"DESTINATION\",autoFitWidth:false,width:120},{name:\"SUPPLIER\",autoFitWidth:false,width:120},{name:\"CDPURCHASE_ORDER\",autoFitWidth:false,width:120},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"PENDING_QUANTITY\",autoFitWidth:false,width:180},{name:\"PO_TYPE\",autoFitWidth:false,width:120},{name:\"ORDER_CREATION_DATETIME\",autoFitWidth:false,width:220},{name:\"PROMISED_DELIVERY_DATETIME\",autoFitWidth:false,width:220},{name:\"NECESSITY_DATETIME\",autoFitWidth:false,width:180},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:180},{name:\"PURCHASE_NOTES\",autoFitWidth:false,width:120},{name:\"PRIORITY\",visible:false,width:120},{name:\"PRIORITY_COLOR\",visible:false,width:120},{name:\"UPDATE_DATE\",visible:false,width:180},{name:\"CREATION_USER\",visible:false,width:180},{name:\"MANAGED\",visible:false,width:100},{name:\"UNITS\",visible:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:180},{name:\"COLOR_CHANGE_DATE\",visible:false,width:220},{name:\"MODIFICATION_USER\",visible:false,width:180},{name:\"MODIFICATION_DATE\",visible:false,width:180},{name:\"CREATION_DATE\",visible:false,width:180}]",sort:"({fieldName:\"FINALIZATION_DATE\",sortDir:\"descending\",sortSpecifiers:[{property:\"FINALIZATION_DATE\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_PURCHASE_ORDERS", "ALIAS" : "PURCHASE_ORDERS" },{ "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" },{ "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }], "joinTables": [{ "fieldName1": "PURCHASE_ORDERS.DESTINATION", "fieldName2": "UBICACION.CDLOCATION" },{ "fieldName1": "PURCHASE_ORDERS.UNITS", "fieldName2": "UNIT.CDUNIT" }],"constrainColumn": [ { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "ORDER_CREATION_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "PROMISED_DELIVERY_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "NECESSITY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" }]}', NULL, NULL, 32, N'N', N'N', N'N', N'Y', N'PURCHASE_ORDERS_FINALIZED_ORDERS', NULL, NULL, N'N', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (73, N'1_default_va_indicator_monthly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"UNIT_THROUGHPUT\",autoFitWidth:false,width:202},{name:\"UNIT_PRICE\",autoFitWidth:false,width:141},{name:\"TVC\",autoFitWidth:false,width:216},{name:\"WORST_INVENTORY_ON_SITE\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"DAILY_AVERAGE_CONSUMPTION\",autoFitWidth:false,width:230},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:245}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(17 AS Numeric(4, 0)), NULL, 39, N'Y', N'N', N'N', N'Y', N'VA_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (74, N'2_default_va_indicator_weekly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"UNIT_THROUGHPUT\",autoFitWidth:false,width:202},{name:\"UNIT_PRICE\",autoFitWidth:false,width:141},{name:\"TVC\",autoFitWidth:false,width:216},{name:\"WORST_INVENTORY_ON_SITE\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"DAILY_AVERAGE_CONSUMPTION\",autoFitWidth:false,width:230},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:245}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(18 AS Numeric(4, 0)), NULL, 39, N'N', N'N', N'N', N'Y', N'VA_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (75, N'3_default_va_indicator_daily', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"UNIT_THROUGHPUT\",autoFitWidth:false,width:202},{name:\"UNIT_PRICE\",autoFitWidth:false,width:141},{name:\"TVC\",autoFitWidth:false,width:216},{name:\"WORST_INVENTORY_ON_SITE\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"DAILY_AVERAGE_CONSUMPTION\",autoFitWidth:false,width:230},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:245}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(19 AS Numeric(4, 0)), NULL, 39, N'N', N'N', N'N', N'Y', N'VA_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (76, N'1_default_vi_indicator_monthly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"INVENTORY_ON_CHAIN\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:180}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(20 AS Numeric(4, 0)), NULL, 40, N'Y', N'N', N'N', N'Y', N'VI_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (77, N'2_default_vi_indicator_weekly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"INVENTORY_ON_CHAIN\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:180}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(21 AS Numeric(4, 0)), NULL, 40, N'N', N'N', N'N', N'Y', N'VI_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (78, N'3_default_vi_indicator_daily', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:173},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:228},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:176},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"EFFECTIVE_BUFFER\",autoFitWidth:false,width:202},{name:\"ALLOWED_OVERSTOCKING\",autoFitWidth:false,width:141},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"INVENTORY_ON_SITE\",autoFitWidth:false,width:195},{name:\"INVENTORY_ON_CHAIN\",autoFitWidth:false,width:231},{name:\"FAMILY\",autoFitWidth:false,width:146},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:180}]",sort:"({fieldName:\"UPDATE_MOVEMENTS\",sortDir:\"descending\",sortSpecifiers:[{property:\"UPDATE_MOVEMENTS\",direction:\"descending\"}]})",hilite:null,group:""})', N'{"operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }], "joinTables": [{ "fieldName1": "BH.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_ROUNDING_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }]}', CAST(22 AS Numeric(4, 0)), NULL, 40, N'N', N'N', N'N', N'Y', N'VI_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (79, N'4_default_view_quarantine_orders', NULL, N'({selected:"[]",field:"[{name:\"QUARANTINE_DATE\",autoFitWidth:false,width:170},{name:\"CDORDER\",autoFitWidth:false,width:170},{name:\"EXCHANGES_IN_QUARANTINE\",autoFitWidth:false,width:190},{name:\"ORDER_MODIFY_DATE\",autoFitWidth:false,width:160},{name:\"CDPARENT_ORDER\",autoFitWidth:false,width:150},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:90},{name:\"SKU\",autoFitWidth:false,width:140},{name:\"CDDESTINATION\",autoFitWidth:false,width:150},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:190},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:170},{name:\"CDFAMILY\",autoFitWidth:false,width:190},{name:\"TOTAL_AMOUNT\",autoFitWidth:false,width:150},{name:\"PENDING_AMOUNT\",autoFitWidth:false,width:150},{name:\"ORDER_VALUE\",autoFitWidth:false,width:140},{name:\"CDWORKPLACE\",autoFitWidth:false,width:160},{name:\"PROGRESS_PERCENTAGE\",autoFitWidth:false,width:100},{name:\"CDPLANT\",visible:false,autoFitWidth:false,width:120},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:151},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:235},{name:\"RELEASE_PROBLEM\",visible:false,autoFitWidth:false,width:180},{name:\"RELEASE_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:180},{name:\"PRODUCTION_PROBLEM_CAUSE\",visible:false,autoFitWidth:false,width:260},{name:\"PRODUCTION_PROBLEM_DATE\",visible:false,autoFitWidth:false,width:260},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100},{name:\"TOUCH_TIME\",visible:false,autoFitWidth:false,width:260}]",sort:"({fieldName:\"QUARANTINE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"QUARANTINE_DATE\",direction:\"ascending\"},{property:\"CDORDER\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILIA" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILIA.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILIA.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] } ', NULL, NULL, 1, N'N', N'N', N'N', N'Y', N'OP_QUARANTINE_ORDERS', NULL, NULL, N'Y', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (80, N'2_purchase_orders_quarantine_orders', NULL, N'({selected:"[]",field:"[{name:\"QUARANTINE_DATE\",autoFitWidth:false,width:185},{name:\"CDPURCHASE_ORDER\",autoFitWidth:false,width:160},{name:\"EXCHANGES_IN_QUARANTINE\",autoFitWidth:false,width:170},{name:\"UPDATE_DATE\",autoFitWidth:false,width:160},{name:\"PO_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:120},{name:\"DESTINATION\",autoFitWidth:false,width:120},{name:\"SUPPLIER\",autoFitWidth:false,width:120},{name:\"ORDER_CREATION_DATETIME\",autoFitWidth:false,width:220},{name:\"PROMISED_DELIVERY_DATETIME\",autoFitWidth:false,width:200},{name:\"NECESSITY_DATETIME\",autoFitWidth:false,width:180},{name:\"PENDING_QUANTITY\",autoFitWidth:false,width:180},{name:\"ORDER_VALUE\",autoFitWidth:false,width:180},{name:\"UNITS\",autoFitWidth:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:120},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:120},{name:\"PURCHASE_NOTES\",visible:false,autoFitWidth:false,width:120},{name:\"CREATION_USER\",visible:false,width:180},{name:\"FINALIZATION_DATE\",visible:false,width:180},{name:\"MANAGED\",visible:false,width:100},{name:\"COLOR_CHANGE_DATE\",visible:false,width:220},{name:\"MODIFICATION_USER\",visible:false,width:180},{name:\"MODIFICATION_DATE\",visible:false,width:180},{name:\"CREATION_DATE\",visible:false,width:180}]",sort:"({fieldName:\"QUARANTINE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"QUARANTINE_DATE\",direction:\"ascending\"},{property:\"CDPURCHASE_ORDER\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_PURCHASE_ORDERS", "ALIAS" : "PURCHASE_ORDERS" },{ "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "PURCHASE_ORDERS.DESTINATION", "fieldName2": "UBICACION.CDLOCATION" }],"constrainColumn": [ { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "ORDER_CREATION_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "PROMISED_DELIVERY_DATE" }, { "TABLE": "TFSCM_CLI_PURCHASE_ORDERS", "COLUMN": "NECESSITY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }]}', NULL, NULL, 32, N'N', N'N', N'N', N'Y', N'PURCHASE_QUARANTINE_ORDERS', NULL, NULL, N'Y', N'TabChart', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (81, N'1_default_esaa_indicator_monthly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:168},{name:\"FAMILY\",autoFitWidth:false,width:168},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:168},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:168},{name:\"BUFFER\",autoFitWidth:false,width:168},{name:\"MINIMUM_BUFFER\",autoFitWidth:false,width:168},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",autoFitWidth:false,width:168},{name:\"PROTECTION_FACTOR\",autoFitWidth:false,width:168},{name:\"ADJUSTMENT_TYPE\",autoFitWidth:false,width:168},{name:\"SUGGESTED_BUFFER\",autoFitWidth:false,width:168},{name:\"APPROVED_BUFFER\",autoFitWidth:false,width:168},{name:\"ADJUSTMENT_ACTION\",autoFitWidth:false,width:168},{name:\"SUGGESTION_DATE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_REJECTION_CAUSE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_EXPIRATION_DATE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_ALERTS\",autoFitWidth:false,width:168},{name:\"DATE_MANAGEMENT\",autoFitWidth:false,width:168},{name:\"MANAGED_BY\",autoFitWidth:false,width:168}]",sort:"({fieldName:\"DATE_MANAGEMENT\",sortDir:\"descending\",sortSpecifiers:[{property:\"DATE_MANAGEMENT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY", "ALIAS": "SBAH" }], "joinTables": [],"constrainColumn": [] }', CAST(23 AS Numeric(4, 0)), NULL, 41, N'Y', N'N', N'N', N'Y', N'ESAA_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (82, N'2_default_esaa_indicator_weekly', NULL, N'({selected:"[]",field:"[{name:\"SKU\",autoFitWidth:false,width:168},{name:\"LOCATION\",autoFitWidth:false,width:168},{name:\"FAMILY\",autoFitWidth:false,width:168},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:168},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:168},{name:\"BUFFER\",autoFitWidth:false,width:168},{name:\"MINIMUM_BUFFER\",autoFitWidth:false,width:168},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",autoFitWidth:false,width:168},{name:\"PROTECTION_FACTOR\",autoFitWidth:false,width:168},{name:\"ADJUSTMENT_TYPE\",autoFitWidth:false,width:168},{name:\"SUGGESTED_BUFFER\",autoFitWidth:false,width:168},{name:\"APPROVED_BUFFER\",autoFitWidth:false,width:168},{name:\"ADJUSTMENT_ACTION\",autoFitWidth:false,width:168},{name:\"SUGGESTION_DATE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_REJECTION_CAUSE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_EXPIRATION_DATE\",autoFitWidth:false,width:168},{name:\"SUGGESTION_ALERTS\",autoFitWidth:false,width:168},{name:\"DATE_MANAGEMENT\",autoFitWidth:false,width:168},{name:\"MANAGED_BY\",autoFitWidth:false,width:168}]",sort:"({fieldName:\"DATE_MANAGEMENT\",sortDir:\"descending\",sortSpecifiers:[{property:\"DATE_MANAGEMENT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY", "ALIAS": "SBAH" }], "joinTables": [],"constrainColumn": [] }', CAST(24 AS Numeric(4, 0)), NULL, 41, N'N', N'N', N'N', N'Y', N'ESAA_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (83, N'4_buffer_replenishment_opt', NULL, N'({selected:"[]",field:"[{name:\"REPLENISHMENT_ACTION\",frozen:true,autoFitWidth:false,width:202},{name:\"ORIGIN_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_BUFFER_FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION\",frozen:true,autoFitWidth:false,width:144},{name:\"SKU\",frozen:true,autoFitWidth:false,width:143},{name:\"APPROVED_BUFFER_REPLENISH\",frozen:true,autoFitWidth:false,width:224},{name:\"OPTIMIZED_REPLENISHMENT\",autoFitWidth:false,width:200},{name:\"OPTIMIZED_PRIORITY\",autoFitWidth:false,width:115},{name:\"OPTIMIZED_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:150},{name:\"APPROVED_BUFFER\",visible:false,autoFitWidth:false,width:224},{name:\"ORIGIN_LOCATION\",autoFitWidth:false,width:153},{name:\"NET_PRIORITY\",autoFitWidth:false,width:100},{name:\"NET_INVENTORY\",autoFitWidth:false,width:180},{name:\"REPLENISHMENT_FREQUENCY\",visible:false,autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:141},{name:\"SECURITY_STOCK\",autoFitWidth:false,width:186},{name:\"REPLENISHMENT_ROUNDING_MODE\",autoFitWidth:false,width:335},{name:\"CDUNIT\",autoFitWidth:false,width:151},{name:\"MISSING_BUFFER_INVENTORY\",autoFitWidth:false,width:221},{name:\"AVAILABLE_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"SUGGESTED_BUFFER_REPLENISH\",autoFitWidth:false,width:226},{name:\"SUGGESTED_BUFFER\",visible:false,autoFitWidth:false,width:226},{name:\"MINIMUM_REPLENISHMENT\",autoFitWidth:false,width:202},{name:\"PACKAGING_UNIT\",autoFitWidth:false,width:153},{name:\"REPLENISHMENT_PRIORITY\",autoFitWidth:false,width:115},{name:\"NOTES\",autoFitWidth:false,width:193},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:175},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:141},{name:\"BUFFER_INITIAL_DATE\",visible:false,autoFitWidth:false,width:140},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:247},{name:\"CREATOR_USER\",visible:false,autoFitWidth:false,width:159},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:203},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:202},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:146},{name:\"INACTIVATION_DATE\",visible:false,autoFitWidth:false,width:217},{name:\"INACTIVE\",visible:false,autoFitWidth:false,width:90},{name:\"INVENTORY_ON_CHAIN\",visible:false,autoFitWidth:false,width:231},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:222},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:229},{name:\"INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:195},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:219},{name:\"LAST_COLOR_CHANGE_DATE\",visible:false,autoFitWidth:false,width:215},{name:\"MANAGED\",visible:false,autoFitWidth:false,width:90},{name:\"MODIFY_DATE\",visible:false,autoFitWidth:false,width:257},{name:\"MODIFY_USER\",visible:false,autoFitWidth:false,width:224},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:247},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:217},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:154},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:140},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:216},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:204},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:230},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:187},{name:\"CONSUMPTION\",visible:false,autoFitWidth:false,width:141},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:216},{name:\"NEGATIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:159},{name:\"POSITIVE_ADJUSTMENTS\",visible:false,autoFitWidth:false,width:154},{name:\"TVC\",visible:false,autoFitWidth:false,width:116},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:139},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:228},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:164},{name:\"LAST_TOTAL_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_ACTION\",visible:false,autoFitWidth:false,width:100},{name:\"ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INCREASE_SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:100},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"AVERAGE_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:220},{name:\"PROJECTED_INCREMENTS\",visible:false,autoFitWidth:false,width:170},{name:\"ATYPICAL_CONSUMPTION_FREQUENCY\",visible:false,autoFitWidth:false,width:230},{name:\"MANAGED_RT\",visible:false,autoFitWidth:false,width:100},{name:\"NEXT_BUFFER_ANALYSIS\",visible:false,autoFitWidth:false,width:100},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:100},{name:\"RESET_COUNT\",visible:false,autoFitWidth:false,width:100},{name:\"RT_ADJUSTMENT_TYPE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_ALERTS\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_EXPIRATION_DATE\",visible:false,autoFitWidth:false,width:100},{name:\"SUGGESTION_REJECTION_CAUSE\",visible:false,autoFitWidth:false,width:100},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:100}]",sort:"({fieldName:\"NET_PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"NET_PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER", "ALIAS": "BUFFER" }, { "TABLA": "TFSCM_CLI_BUFFER_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_UNITS", "ALIAS": "UNIT" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "LOCATIONS" }], "joinTables": [{ "fieldName1": "FAMILY.REPLENISHMENT_MODE", "fieldName2": "''M''" },{ "fieldName1": "FAMILY.IS_ACTIVE", "fieldName2": "''1''" },{ "fieldName1": "BUFFER.FAMILY", "fieldName2": "FAMILY.CDBUFFER_FAMILY" },{ "fieldName1": "BUFFER.CDUNIT", "fieldName2": "UNIT.CDUNIT" },{ "fieldName1": "BUFFER.LOCATION", "fieldName2": "LOCATIONS.CDLOCATION" }], "constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "TIME_BETWEEN_BUFFER_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "INACTIVITY_WINDOW" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "LOWER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MIDDLE_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "UPPER_PROTECTION_FACTOR" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MOVING_SUMS_FOR_RECALCULATIONS" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_DECREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_INCREASE_THRESHOLD" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "BUFFER_ADJUSTMENT_MODE" },{ "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CDBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DSBUFFER_FAMILY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "REPLENISHMENT_MODE" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "DAC_HORIZON" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "ATYPICAL_CONSUMPTION_THRESHOLD" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_ALERT" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY" }, { "TABLE": "TFSCM_CLI_BUFFER_FAMILY", "COLUMN": "CONSECUTIVE_INCREMENTS_FOR_RECALCULATION" }, { "TABLE": "TFSCM_CLI_BUFFER", "COLUMN": "CDGROUP" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "CDUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "DSUNIT" },{ "TABLE": "TFSCM_CLI_UNITS", "COLUMN": "IS_DEFAULT_UNIT" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" },{ "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }] }', NULL, NULL, 23, N'N', N'N', N'N', N'Y', N'BUFFER_REPLENISHMENT_OPT', N'', NULL, N'N', N'ChainColors', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (84, N'1_default_buffer_history', NULL, N'({selected:"[]",field:"[{name:\"LOCATION\",autoFitWidth:false,width:180},{name:\"SKU\",autoFitWidth:false,width:180},{name:\"BUFFER\",autoFitWidth:false,width:180},{name:\"UPDATE_MOVEMENTS\",autoFitWidth:false,width:180},{name:\"FAMILY\",visible:false,autoFitWidth:false,width:180},{name:\"ORIGIN_LOCATION\",visible:false,autoFitWidth:false,width:180},{name:\"REPLENISHMENT_TIME\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:180},{name:\"MEASUREMENT_UNIT\",visible:false,autoFitWidth:false,width:180},{name:\"MINIMUM_BUFFER\",visible:false,autoFitWidth:false,width:180},{name:\"SECURITY_STOCK\",visible:false,autoFitWidth:false,width:180},{name:\"MINIMUM_REPLENISHMENT\",visible:false,autoFitWidth:false,width:180},{name:\"PACKAGING_UNIT\",visible:false,autoFitWidth:false,width:180},{name:\"UNIT_PRICE\",visible:false,autoFitWidth:false,width:180},{name:\"TVC\",visible:false,autoFitWidth:false,width:180},{name:\"CONSOLIDATED_REPLENISHMENT\",visible:false,autoFitWidth:false,width:180},{name:\"POSITIVE_ADJUST_CONSOLIDATED\",visible:false,autoFitWidth:false,width:180},{name:\"CONSOLIDATED_CONSUMPTION\",visible:false,autoFitWidth:false,width:180},{name:\"NEGATIVE_ADJUST_CONSOLIDATED\",visible:false,autoFitWidth:false,width:180},{name:\"LOCATION_TYPE\",visible:false,autoFitWidth:false,width:180},{name:\"UNIT_THROUGHPUT\",visible:false,autoFitWidth:false,width:180},{name:\"CREATION_DATE\",visible:false,autoFitWidth:false,width:180},{name:\"ALLOWED_OVERSTOCKING\",visible:false,autoFitWidth:false,width:180},{name:\"EFFECTIVE_BUFFER\",visible:false,autoFitWidth:false,width:180},{name:\"INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"INVENTORY_ON_TRANSIT\",visible:false,autoFitWidth:false,width:180},{name:\"INVENTORY_ON_PURCHASING\",visible:false,autoFitWidth:false,width:180},{name:\"INVENTORY_ON_PRODUCTION\",visible:false,autoFitWidth:false,width:180},{name:\"INVENTORY_ON_CHAIN\",visible:false,autoFitWidth:false,width:180},{name:\"SITE_PRIORITY\",visible:false,autoFitWidth:false,width:180},{name:\"SITE_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:180},{name:\"NET_PRIORITY\",visible:false,autoFitWidth:false,width:180},{name:\"NET_PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_CONSOLIDATED_INPUTS\",visible:false,autoFitWidth:false,width:180},{name:\"TOTAL_CONSOLIDATED_OUTPUTS\",visible:false,autoFitWidth:false,width:180},{name:\"YELLOW_ZONE_START\",visible:false,autoFitWidth:false,width:180},{name:\"RED_ZONE_START\",visible:false,autoFitWidth:false,width:180},{name:\"DAYS_SINCE_LAST_OUT\",visible:false,autoFitWidth:false,width:180},{name:\"LAST_TOTAL_OUTS_MAX_SUM\",visible:false,autoFitWidth:false,width:180},{name:\"DAILY_AVERAGE_CONSUMPTION\",visible:false,autoFitWidth:false,width:220},{name:\"PROTECTION_FACTOR\",visible:false,autoFitWidth:false,width:180},{name:\"WORST_INVENTORY_ON_SITE\",visible:false,autoFitWidth:false,width:180},{name:\"BAA_OUT_CLASSIFICATION\",visible:false,autoFitWidth:false,width:180},{name:\"REPLENISHMENT_PROBLEM\",visible:false,autoFitWidth:false,width:180},{name:\"PENDING_DEMAND\",visible:false,autoFitWidth:false,width:180},{name:\"NET_INVENTORY\",visible:false,autoFitWidth:false,width:180},{name:\"REPLENISHMENT_PRIORITY\",visible:false,autoFitWidth:false,width:180},{name:\"ID\",visible:false,autoFitWidth:false,width:180},{name:\"EXCLUDED_OUTS\",visible:false,autoFitWidth:false,width:180}]",sort:"({fieldName:null,sortDir:\"descending\"})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_BUFFER_HISTORY", "ALIAS": "BH" }], "joinTables": [],"constrainColumn": [{ "TABLE": "TFSCM_CLI_BUFFER_HISTORY", "COLUMN": "TOTAL_INVENTORY_ON_TRANSIT" },{ "TABLE": "TFSCM_CLI_BUFFER_HISTORY", "COLUMN": "TOTAL_INVENTORY_ON_PURCHASING" },{ "TABLE": "TFSCM_CLI_BUFFER_HISTORY", "COLUMN": "TOTAL_INVENTORY_ON_PRODUCTION"}] }', NULL, NULL, 42, N'Y', N'N', N'N', N'Y', N'BUFFER_HISTORY', NULL, NULL, N'Y', N'Detail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (85, N'view_stock_automation_rules', NULL, N'({selected:null,field:"[{name:\"CDSECTION\",autoFitWidth:false,width:130},{name:\"CDRULE\",autoFitWidth:false,width:150},{name:\"DESCRIPTION\",autoFitWidth:false,width:190},{name:\"FILTER\",autoFitWidth:false,width:180},{name:\"TARGET_FIELD\",autoFitWidth:false,width:180},{name:\"TARGET_VALUE\",autoFitWidth:false,width:130},{name:\"SEQUENCE\",autoFitWidth:false,width:85},{name:\"IS_ACTIVE\",autoFitWidth:false,width:85},{name:\"CREATION_DATE\",autoFitWidth:false,width:145},{name:\"CREATION_USER\",autoFitWidth:false,width:145},{name:\"MODIFICATION_DATE\",autoFitWidth:false,width:145},{name:\"MODIFICATION_USER\",autoFitWidth:false,width:145}]",sort:"({fieldName:\"SEQUENCE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"SEQUENCE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_AUTOMATION_RULES", "ALIAS" : "AUTO_RULES" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 43, N'Y', N'N', N'N', N'Y', N'AUTOMATION_RULES', NULL, NULL, N'N', N'RulesDetail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (109, N'1_default_indicator_monthly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:125},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:223},{name:\"PRIORITY\",autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:100},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:170},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(3 AS Numeric(4, 0)), NULL, 4, N'Y', N'N', N'N', N'Y', N'CD_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (110, N'3_default_indicator_daily', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:125},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:223},{name:\"PRIORITY\",autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:100},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:170},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(5 AS Numeric(4, 0)), NULL, 4, N'N', N'N', N'N', N'Y', N'CD_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (111, N'2_default_indicator_weekly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:125},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:223},{name:\"PRIORITY\",autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",autoFitWidth:false,width:100},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:170},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PRIORITY\",sortDir:\"descending\",sortSpecifiers:[{property:\"PRIORITY\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(6 AS Numeric(4, 0)), NULL, 4, N'N', N'N', N'N', N'Y', N'CD_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (112, N'1_default_indicator_monthly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:100},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:252},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:209},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"PROMISED_DELIVERY_DATE\",visible:false,autoFitWidth:false,width:171},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"REAL_RELEASE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"REAL_RELEASE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(10 AS Numeric(4, 0)), NULL, 5, N'Y', N'N', N'N', N'Y', N'ELR_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (113, N'3_default_indicator_daily', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:100},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:252},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:209},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"PROMISED_DELIVERY_DATE\",visible:false,autoFitWidth:false,width:171},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"REAL_RELEASE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"REAL_RELEASE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(2 AS Numeric(4, 0)), NULL, 5, N'N', N'N', N'N', N'Y', N'ELR_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (114, N'2_default_indicator_weekly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:100},{name:\"RECOMMENDED_RELEASE_DATE\",autoFitWidth:false,width:252},{name:\"REAL_RELEASE_DATE\",autoFitWidth:false,width:209},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",visible:false,width:100},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"PROMISED_DELIVERY_DATE\",visible:false,autoFitWidth:false,width:171},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"REAL_RELEASE_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"REAL_RELEASE_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(9 AS Numeric(4, 0)), NULL, 5, N'N', N'N', N'N', N'Y', N'ELR_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (125, N'1_default_indicator_monthly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:110},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:114},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:243},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:169},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(51 AS Numeric(4, 0)), NULL, 3, N'Y', N'N', N'N', N'Y', N'OTDP_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (133, N'2_default_indicator_weekly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:110},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:114},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:243},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:169},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(59 AS Numeric(4, 0)), NULL, 3, N'N', N'N', N'N', N'Y', N'OTDP_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (137, N'3_default_indicator_daily', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:110},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:100},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:100},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:114},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:243},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:169},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"ORDER_VALUE\",visible:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(60 AS Numeric(4, 0)), NULL, 3, N'N', N'N', N'N', N'Y', N'OTDP_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (139, N'1_default_indicator_monthly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:62},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:87},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"ORDER_VALUE\",autoFitWidth:false,width:146},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:91},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:192},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:167},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(61 AS Numeric(4, 0)), NULL, 2, N'Y', N'N', N'N', N'Y', N'LOV_MONTHLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (140, N'2_default_indicator_weekly', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:62},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:87},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"ORDER_VALUE\",autoFitWidth:false,width:146},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:91},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:192},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:167},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(62 AS Numeric(4, 0)), NULL, 2, N'N', N'N', N'N', N'Y', N'LOV_WEEKLY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (141, N'3_default_indicator_daily', N'', N'({selected:"[]",field:"[{name:\"CDORDER\",autoFitWidth:false,width:100},{name:\"CDORDER_TYPE\",autoFitWidth:false,width:62},{name:\"SKU\",autoFitWidth:false,width:100},{name:\"CDDESTINATION\",autoFitWidth:false,width:87},{name:\"CDFAMILY\",autoFitWidth:false,width:200},{name:\"ORDER_VALUE\",autoFitWidth:false,width:146},{name:\"CDPLANT\",width:100},{name:\"CDLOCATION\",autoFitWidth:false,width:91},{name:\"PROMISED_DELIVERY_DATE\",autoFitWidth:false,width:192},{name:\"CDWORKPLACE\",visible:false,autoFitWidth:false,width:120},{name:\"CDPARENT_ORDER\",visible:false,autoFitWidth:false,width:100},{name:\"PENDING_AMOUNT\",visible:false,autoFitWidth:false,width:130},{name:\"BUFFER\",visible:false,width:100},{name:\"STANDARD_TIME_DELIVERY\",visible:false,width:100},{name:\"CAUSE_EARLY_RELEASE\",visible:false,width:100},{name:\"CLEARENCE_BUFFER\",visible:false,width:100},{name:\"CREATION_DATE\",visible:false,width:100},{name:\"CREATOR_USER\",visible:false,width:100},{name:\"FINALIZATION_DATE\",autoFitWidth:false,width:167},{name:\"INITIAL_BUFFER\",visible:false,width:100},{name:\"LAST_COLOR_UPDATE\",visible:false,width:100},{name:\"MANAGED_ORDER\",visible:false,width:100},{name:\"MODIFY_DATE\",visible:false,width:100},{name:\"MODIFY_USER\",visible:false,width:100},{name:\"REAL_RELEASE_DATE\",visible:false,autoFitWidth:false,width:178},{name:\"RECOMMENDED_RELEASE_DATE\",visible:false,autoFitWidth:false,width:212},{name:\"RELEASE_STATUS\",visible:false,autoFitWidth:false,width:134},{name:\"ORDER_NOTES\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY\",visible:false,autoFitWidth:false,width:100},{name:\"PRIORITY_COLOR\",visible:false,autoFitWidth:false,width:100},{name:\"PRODUCTION_BUFFER\",visible:false,width:100}]",sort:"({fieldName:\"PROMISED_DELIVERY_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PROMISED_DELIVERY_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [{ "TABLA": "TFSCM_CLI_PRODUCTION_ORDERS", "ALIAS": "ORDERS" }, { "TABLA": "TFSCM_CLI_PRODUCTION_FAMILY", "ALIAS": "FAMILY" }, { "TABLA": "TFSCM_CLI_LOCATION", "ALIAS": "UBICACION" }], "joinTables": [{ "fieldName1": "ORDERS.CDFAMILY", "fieldName2": "FAMILY.CDFAMILY" }, { "fieldName1": "UBICACION.CDLOCATION", "fieldName2": "FAMILY.CDLOCATION" }], "constrainColumn": [ { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "TOUCH_TIME" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "YELLOW_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "RED_ZONE_START" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "IS_ACTIVE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "DSFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "BUFFER" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "STANDARD_TIME_DELIVERY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_FAMILY", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CDFAMILY" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "CAUSE_EARLY_RELEASE" }, { "TABLE": "TFSCM_CLI_PRODUCTION_ORDERS", "COLUMN": "INITIAL_BUFFER" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDLOCATION" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "CDCALENDAR" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_TYPE" }, { "TABLE": "TFSCM_CLI_LOCATION", "COLUMN": "LOCATION_MODIFY_DATE" }] }', CAST(63 AS Numeric(4, 0)), NULL, 2, N'N', N'N', N'N', N'Y', N'LOV_DAILY', NULL, NULL, N'N', N'DataSheet', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (142, N'module_production_location', NULL, N'({selected:"[]",field:"[{name:\"CDLOCATION\",autoFitWidth:false,width:255},{name:\"CF_1\",visible:false,width:120},{name:\"LOCATION_TYPE\",autoFitWidth:false,width:301},{name:\"CDCALENDAR\",autoFitWidth:false,width:327},{name:\"LOCATION_MODIFY_DATE\",autoFitWidth:false,width:170},{name:\"CF_LC_2\",visible:false,autoFitWidth:false,width:100},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"CDLOCATION\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDLOCATION\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_LOCATION", "ALIAS" : "LOCATION" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 33, N'Y', N'N', N'N', N'Y', N'LOCATION', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (143, N'module_production_custom_field', NULL, N'({selected:"[]",field:"[{name:\"CDTABLE\",autoFitWidth:false,width:200},{name:\"DSNAME\",autoFitWidth:false,width:210},{name:\"DSTYPE\",autoFitWidth:false,width:88},{name:\"IS_EDITABLE\",autoFitWidth:false,width:77},{name:\"COLUMN_SIZE\",autoFitWidth:false,width:68},{name:\"COLUMN_ACCURACY\",autoFitWidth:false,width:75},{name:\"IS_NULLABLE\",autoFitWidth:false,width:108},{name:\"USE_AS_SERIE\",autoFitWidth:false,width:124},{name:\"CDPERMISSION_EDIT\",autoFitWidth:false,width:150},{name:\"IS_USE_AS_PERMISSION\",autoFitWidth:false,width:150},{name:\"SAVE_HISTORY\",autoFitWidth:false,width:131}]",sort:"({fieldName:\"CDTABLE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"CDTABLE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_COM_COL_TABLE", "ALIAS" : "FIELD" }], "joinTables": [ ],"constrainColumn": [{"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_COLOR"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_PRIMARY_KEY"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "IS_UPGRADABLE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "SQL_LIST"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_COL_WIDTH"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_FORMAT"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN": "VIEW_TYPE"}, {"TABLE" : "TFSCM_COM_COL_TABLE", "COLUMN":"DSCOLUMN"}]}', NULL, NULL, 34, N'Y', N'N', N'N', N'Y', N'CUSTOM_FIELD', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (144, N'module_production_frequent_causes', NULL, N'({selected:"[]",field:"[{name:\"DSCAUSE\",autoFitWidth:false,width:538},{name:\"CAUSE_TYPE\",autoFitWidth:false,width:530},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"DSCAUSE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"DSCAUSE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_CAUSES", "ALIAS" : "CAUSES" }], "joinTables": [ ],"constrainColumn": [ ]}', NULL, NULL, 35, N'Y', N'N', N'N', N'Y', N'FREQUENT_CAUSES', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (145, N'view_stock_units', NULL, N'({selected:"[]",field:"[{name:\"CDUNIT\",autoFitWidth:false,width:277},{name:\"DSUNIT\",autoFitWidth:false,width:435},{name:\"INVENTORY_ACCURACY\",autoFitWidth:false,width:190},{name:\"IS_DEFAULT_UNIT\",autoFitWidth:false,width:148},{name:\"IS_ACTIVE\",autoFitWidth:false,width:80}]",sort:"({fieldName:\"IS_DEFAULT_UNIT\",sortDir:\"descending\",sortSpecifiers:[{property:\"IS_DEFAULT_UNIT\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_UNITS", "ALIAS" : "CLI_UNITS" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 37, N'Y', N'N', N'N', N'Y', N'UNITS', NULL, NULL, N'Y', N'Notifications', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (150, N'1_buffer_changes_unprocessed_events', N'', N'({selected:"[]",field:"[{name:\"EVENT\",autoFitWidth:false,width:120},{name:\"CHANGE_TYPE\",autoFitWidth:false,width:100},{name:\"REQUIRED_CHANGE\",autoFitWidth:false,width:150},{name:\"PREPARATION_START_DATE\",autoFitWidth:false,width:250},{name:\"PREPARATION_END_DATE\",autoFitWidth:false,width:250},{name:\"CHANGE_STEPS\",autoFitWidth:false,width:120},{name:\"EVENT_STARTING_DATE\",autoFitWidth:false,width:180},{name:\"EVENT_ENDING_DATE\",autoFitWidth:false,width:180},{name:\"MODE\",autoFitWidth:false,width:120},{name:\"FILTER\",autoFitWidth:false,width:180},{name:\"ATYPICAL_CONSUMPTION_STATUS\",autoFitWidth:false,width:200},{name:\"DAYS_BETWEEN_CHANGES\",autoFitWidth:false,width:160},{name:\"CREATION_DATE\",autoFitWidth:false,width:142},{name:\"CREATION_USER\",autoFitWidth:false,width:140},{name:\"MODIFICATION_DATE\",autoFitWidth:false,width:150},{name:\"MODIFICATION_USER\",autoFitWidth:false,width:150},{name:\"PROCESSING_DATE\",visible:false,autoFitWidth:false,width:180}]",sort:"({fieldName:\"PREPARATION_START_DATE\",sortDir:\"ascending\",sortSpecifiers:[{property:\"PREPARATION_START_DATE\",direction:\"ascending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_BUFFER_CHANGES", "ALIAS" : "BUFFER_CHANGES" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 38, N'Y', N'N', N'N', N'Y', N'BUFFER_CHANGES_UNPROCESSED_EVENTS', NULL, NULL, N'N', N'StepsDetail', 1)
INSERT [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW], [DSVIEW], [JSON_SYSTEM_FILTER], [JSON_VIEW_CONF], [JSON_JOIN_TABLES], [CDINDICATOR], [MESSAGE], [CDSECTION], [IS_DEFAULT_VIEW], [IS_FAVORITE_VIEW], [IS_INITIAL_VIEW], [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL], [USER_ID]) VALUES (151, N'2_buffer_changes_processed_events', N'', N'({selected:"[]",field:"[{name:\"PROCESSING_DATE\",autoFitWidth:false,width:180},{name:\"EVENT\",autoFitWidth:false,width:120},{name:\"CHANGE_TYPE\",autoFitWidth:false,width:100},{name:\"REQUIRED_CHANGE\",autoFitWidth:false,width:150},{name:\"PREPARATION_START_DATE\",autoFitWidth:false,width:250},{name:\"PREPARATION_END_DATE\",autoFitWidth:false,width:250},{name:\"CHANGE_STEPS\",autoFitWidth:false,width:120},{name:\"EVENT_STARTING_DATE\",autoFitWidth:false,width:180},{name:\"EVENT_ENDING_DATE\",autoFitWidth:false,width:180},{name:\"MODE\",autoFitWidth:false,width:120},{name:\"FILTER\",autoFitWidth:false,width:180},{name:\"ATYPICAL_CONSUMPTION_STATUS\",autoFitWidth:false,width:200},{name:\"DAYS_BETWEEN_CHANGES\",autoFitWidth:false,width:160},{name:\"CREATION_DATE\",autoFitWidth:false,width:142},{name:\"CREATION_USER\",autoFitWidth:false,width:140},{name:\"MODIFICATION_DATE\",autoFitWidth:false,width:150},{name:\"MODIFICATION_USER\",autoFitWidth:false,width:150}]",sort:"({fieldName:\"PROCESSING_DATE\",sortDir:\"descending\",sortSpecifiers:[{property:\"PROCESSING_DATE\",direction:\"descending\"}]})",hilite:null,group:""})', N'{ "operator": "AND", "Tables": [ { "TABLA" : "TFSCM_CLI_BUFFER_CHANGES", "ALIAS" : "BUFFER_CHANGES" }], "joinTables": [ ],"constrainColumn": []}', NULL, NULL, 38, N'N', N'N', N'N', N'Y', N'BUFFER_CHANGES_PROCESSED_EVENTS', NULL, NULL, N'N', N'StepsDetail', 1)
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CAUSE_EARLY_RELEASE', N'table_production_orders_cause_early_release', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, CAUSE_TYPE DSTYPE FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''R''   AND IS_SYSTEM = ''N''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDDESTINATION', N'table_production_orders_cddestination', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDFAMILY', N'table_production_orders_cdfamily', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDORDER', N'table_production_orders_cdorder', N'order identifier in the production plant', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDORDER_TYPE', N'table_production_orders_cdorder_type', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'X', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ORDER_TYPE''', N'N', N'N', N'Y', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDPARENT_ORDER', N'table_production_orders_cdparent_order', N'', N'varchar', 50, N'601', N'N', N'O', N'Y', N'N', N'X', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDPLANT', N'table_production_orders_cdplant', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'Y', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CDWORKPLACE', N'table_production_orders_workplace', N'', N'varchar', 50, N'601', N'N', N'O', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CLEARENCE_BUFFER', N'table_production_orders_clearence_buffer', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CREATION_DATE', N'table_production_orders_creation_date', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'CREATOR_USER', N'table_production_orders_creator_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'DATE_INSERTION', N'table_production_orders_insertion_date', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'EXCHANGES_IN_QUARANTINE', N'table_production_orders_exchange_in_quarantine', N'', N'numeric', 8, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'FINALIZATION_DATE', N'table_production_orders_finalization_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'INITIAL_BUFFER', N'table_production_orders_initial_buffer', N'', N'numeric', 8, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'LAST_COLOR_UPDATE', N'table_production_orders_last_color_update', N'', N'datetime', NULL, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'MANAGED_ORDER', N'table_production_orders_managed_order', N'', N'boolean', 1, N'119', N'N', N'Y', N'Y', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'MODIFY_DATE', N'table_production_orders_modify_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'MODIFY_USER', N'table_production_orders_modify_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'ORDER_MODIFY_DATE', N'table_production_orders_erp_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'ORDER_NOTES', N'table_production_orders_order_notes', N'', N'varchar', 2000, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(40 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'ORDER_VALUE', N'table_production_orders_order_value', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'N', N'T', NULL, N'M', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PENDING_AMOUNT', N'table_production_orders_pending_amount', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PRIORITY', N'table_production_orders_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PRIORITY_COLOR', N'table_production_orders_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PRODUCTION_BUFFER', N'table_production_orders_production_buffer', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PRODUCTION_PROBLEM_CAUSE', N'table_production_orders_problem_cause', N'', N'varchar', 30, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''I''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PRODUCTION_PROBLEM_DATE', N'table_production_orders_problem_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PROGRESS_PERCENTAGE', N'table_production_orders_progress_percentage', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'P', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'PROMISED_DELIVERY_DATE', N'table_production_orders_promised_delivery_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'QUARANTINE_DATE', N'table_production_orders_quarantine_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'REAL_RELEASE_DATE', N'table_production_orders_real_release_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'RECOMMENDED_RELEASE_DATE', N'table_production_orders_recommended_release_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'RELEASE_PROBLEM', N'table_production_orders_release_problem', N'', N'varchar', 30, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''R''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'RELEASE_PROBLEM_DATE', N'table_production_orders_release_problem_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'RELEASE_STATUS', N'table_production_orders_release_status', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''RELEASE_STATUS''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'SKU', N'table_production_orders_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'TOTAL_AMOUNT', N'table_production_orders_total_amount', N' ', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (1, N'TOUCH_TIME', N'table_production_orders_touch_time', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'BUFFER', N'table_family_standard_buffer', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'CDFAMILY', N'table_family_cdfamily', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'CDLOCATION', N'table_family_standard_cdlocation', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION WHERE LOCATION_TYPE = ''PL''', N'N', N'N', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'DSFAMILY', N'table_family_dsfamily', N'', N'varchar', 50, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'IS_ACTIVE', N'table_family_isactive', N'Is Active', N'boolean', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'RED_ZONE_START', N'table_production_family_red_zone_start', N' ', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'STANDARD_TIME_DELIVERY', N'table_family_standard_time_delivery', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'TOUCH_TIME', N'table_production_family_touch_time', N'', N'numeric', 17, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (2, N'YELLOW_ZONE_START', N'table_production_family_yellow_zone_start', N' ', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'BUFFERS_LIMIT', N'table_licenses_bufferslimit', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'CRITICAL_RESOURCES_LIMIT', N'table_licenses_criticalresourceslimit', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'CUSTOMER_ADDRESS', N'table_licenses_customer_address', N'', N'varchar', 200, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'CUSTOMER_NAME', N'table_licenses_customername', N'', N'varchar', 100, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'DATABASE_LIMIT', N'table_licenses_databaselimit', N'', N'numeric', 4, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'END_DATE', N'table_licenses_end_date', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'IDLICENSE', N'table_licenses_idlicense', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'INDICATORS', N'table_licenses_indicators', N'', N'varchar', 500, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'LIFE_TIME', N'table_licenses_lifetime', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'NIT', N'table_licenses_nit', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'PHONE', N'table_licenses_phone', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'PRODUCTION_ORDERS_LIMIT', N'table_licenses_productionorderslimit', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'PURCHASE_ORDER_LIMIT', N'table_licenses_purchaseorderlimit', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'SERVER_CODE', N'table_licenses_servercode', N'', N'varchar', 4000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'START_DATE', N'table_licenses_startdate', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (3, N'USERS_LIMIT', N'table_licenses_userlimit', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'DSSTATISTIC', N'table_statistics_dsstatistic', N'description statistic', N'varchar', 30, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'END_TIME_EXE', N'table_statistics_end_time_exe', N'end time exe', N'datetime', NULL, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'IDJOB', N'table_statistics_idjob', N'id job', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'IDSTATISTIC', N'table_statistics_idstatistic', N'Id statistic', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'START_TIME_EXE', N'table_statistics_start_time_exe', N'start time exe', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'STATISTIC_DETAIL', N'table_statistics_statistic_detail', N'statistic detail', N'varchar', 500, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'STATUS', N'table_statistics_status', N'status', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (4, N'TOTAL_TIME_EXE', N'table_statistics_total_time_exe', N'total time exe', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (5, N'CDCALENDAR', N'table_location_calendar', N'location calendar', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'N', N'L', N'SELECT CDCALENDAR CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCALENDAR ELSE ''[''+ DSCALENDAR +'']'' END) DESCRIPTION,''C'' DSTYPE FROM TFSCM_CLI_CALENDAR', N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (5, N'CDLOCATION', N'table_location_cdlocation', N'cd location', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (5, N'IS_ACTIVE', N'table_location_isactive', N'Is Active', N'boolean', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (5, N'LOCATION_MODIFY_DATE', N'table_location_modify_date', N' ', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (5, N'LOCATION_TYPE', N'table_location_type', N'location type', N'varchar', 2, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (6, N'ENABLE', N'table_jobs_enable', N'', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (6, N'IDJOB', N'table_jobs_idjob', N'id job', N'numeric', 4, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (6, N'IS_SYSTEM', N'table_jobs_is_system', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (6, N'STATUS', N'table_jobs_status', N'status', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (6, N'TRIGGER_NAME', N'table_jobs_trigger_name', N'trigger name', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (7, N'CDCOMPONENT', N'table_params_cdcomponent', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'L', N'SELECT CDCOMPONENT CODE, DSCOMPONENT DESCRIPTION, ''I'' DSTYPE FROM TFSCM_COM_COMPONENT WHERE CDCOMPONENT <> 0', N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (7, N'CDPARAM', N'table_params_cdparam', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (7, N'DSPARAM', N'table_params_dsparam', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'L', N'SELECT DSPARAM CODE, DSPARAM DESCRIPTION, ''I'' DSTYPE FROM TFSCM_COM_PARAMS WHERE CDCOMPONENT <> 0', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (7, N'PARAM_TYPE', N'table_params_param_type', N'', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''PARAM_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (7, N'PARAM_VALUE', N'table_params_param_value', N'', N'varchar', 1000, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'CDCOLUMN', N'table_field_cdcolumn', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'CDTABLE', N'table_field_cdtable', N'', N'varchar', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CDTABLE+'''' CODE,DSTABLE DESCRIPTION,''E'' DSTYPE FROM TFSCM_COM_TABLES WHERE APPLY_CUSTOM_COL = ''Y''', N'N', N'Y', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'COLUMN_ACCURACY', N'table_field_column_accuracy', N'Decimal Scale', N'numeric', 2, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'COLUMN_SIZE', N'table_field_column_size', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'DSCOLUMN', N'table_field_dscolumn', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'DSNAME', N'table_field_dsname', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'DSTYPE', N'table_field_dstype', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_DSTYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_COLOR', N'table_field_is_color', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_EDITABLE', N'table_field_is_editable', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_NULLABLE', N'table_field_is_nullable', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_PRIMARY_KEY', N'table_field_is_primary_key', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_SYSTEM', N'table_field_is_system', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_UPGRADABLE', N'table_field_is_upgradable', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
GO
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'IS_USE_AS_PERMISSION', N'table_field_is_use_as_permission', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'SAVE_HISTORY', N'table_field_save_history', N' ', N'varchar', 1, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE'' ', N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'SQL_LIST', N'table_field_sql_list', N'', N'varchar', 2000, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'USE_AS_SERIE', N'table_field_use_as_serie', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''YES_NO_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'VIEW_COL_WIDTH', N'table_field_view_col_width', N'', N'numeric', 3, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'VIEW_FORMAT', N'table_field_view_format', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_FORMAT''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (8, N'VIEW_TYPE', N'table_field_view_type', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''FIELDS_VIEW_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (9, N'CAUSE_TYPE', N'table_causes_cause_type', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''CAUSE_TYPE''', N'N', N'N', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (9, N'CDCAUSE', N'table_causes_cdcause', N'', N'varchar', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (9, N'DSCAUSE', N'table_causes_dscause', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (9, N'IS_ACTIVE', N'table_causes_isactive', N'Is Active', N'boolean', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (9, N'IS_SYSTEM', N'table_causes_issystem', N'Is System', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'CDTYPE', N'table_log_cdtype', N'', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOG_TYPE''', N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'COLUMN_NAME', N'table_log_column_name', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT DISTINCT CDET.[CDTABLE] , CDET.[CDCOLUMN] CODE, CDET.[DSNAME]  DESCRIPTION, (CASE WHEN CDET.[IS_SYSTEM] = ''N'' THEN ''N'' ELSE ''I'' END) DSTYPE FROM [dbo].[TFSCM_DEX_INTERFACES] IHED JOIN [dbo].[TFSCM_COM_COL_TABLE] CDET   ON CDET.[CDTABLE] = IHED.[CDTABLE] AND [IHED].[CDINTERFACE] IN (1, 2, 3, 5, 6)', N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'DSLOG', N'table_log_dslog', N'', N'varchar', 8000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'ELEMENT_CODE', N'table_log_element_code', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'FILE_NAME', N'table_log_file_name', N'', N'varchar', 500, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'IDLOG', N'table_log_idlog', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'LOCATION_CODE', N'table_log_location_code', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'LOG_DETAIL', N'table_log_log_detail', N'', N'varchar', 500, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'LOG_TIME', N'table_log_log_time', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'RECORD_CONTENT', N'table_log_record_content', N'', N'varchar', 8000, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'ROW_NUMBER', N'table_log_row_number', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (10, N'UPDATE_DATE', N'table_log_update_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ADJUSTMENT_ACTION', N'table_buffer_adjustment_action', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_ACTION''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ADJUSTMENT_TYPE', N'table_buffer_adjustment_type', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ALLOWED_OVERSTOCKING', N'table_buffer_allowed_overstocking', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'APPROVED_BUFFER', N'table_buffer_approved_buffer', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'APPROVED_BUFFER_REPLENISH', N'table_buffer_approved_replenish', N'', N'numeric', 15, N'705', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ATYPICAL_CONSUMPTION_FREQUENCY', N'table_buffer_atypical_consumption_frequency', N'', N'numeric', 10, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(150 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'AVAILABLE_INVENTORY', N'table_buffer_available_inventory', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'AVERAGE_CONSUMPTION_FREQUENCY', N'table_buffer_average_consumption_frequency', N'', N'numeric', 12, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'BUFFER', N'table_buffer_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'BUFFER_INITIAL_DATE', N'table_buffer_initial_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'CDUNIT', N'table_buffer_units', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'L', N'SELECT CDUNIT CODE, (CASE IS_ACTIVE WHEN 1 THEN CDUNIT ELSE ''[''+ CDUNIT +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_UNITS', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'CONSOLIDATED_REPLENISHMENT', N'table_buffer_consolidated_replenishment', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'CONSUMPTION', N'table_buffer_consumption', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'CREATION_DATE', N'table_buffer_creation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'CREATOR_USER', N'table_buffer_creator_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'DAILY_AVERAGE_CONSUMPTION', N'table_buffer_daily_average_consumption', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(150 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'DAYS_SINCE_LAST_OUT', N'table_buffer_days_since_last_out', N'', N'numeric', 5, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'EFFECTIVE_BUFFER', N'table_buffer_effective_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'EXCLUDED_OUTS', N'table_buffer_excluded_outs', N'', N'numeric', 17, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'FAMILY', N'table_buffer_family', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INACTIVATION_DATE', N'table_buffer_inactivation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INACTIVE', N'table_buffer_inactive', N'', N'boolean', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INVENTORY_ON_CHAIN', N'table_buffer_inventory_on_chain', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INVENTORY_ON_PRODUCTION', N'table_buffer_inventory_on_production', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INVENTORY_ON_PURCHASING', N'table_buffer_inventory_on_purchasing', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INVENTORY_ON_SITE', N'table_buffer_inventory_on_site', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'INVENTORY_ON_TRANSIT', N'table_buffer_inventory_on_transit', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LAST_COLOR_CHANGE_DATE', N'table_buffer_last_color_change_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LAST_INCREASE_SUGGESTION_DATE', N'table_buffer_last_increase_suggestion_date', N'', N'datetime', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LAST_INVENTORY_ON_SITE', N'table_buffer_last_inventory_on_site', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LAST_TOTAL_INVENTORY_ON_SITE', N'table_buffer_last_total_inventory_on_site', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LAST_TOTAL_OUTS_MAX_SUM', N'table_buffer_last_total_outs_max_sum', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LOCATION', N'table_buffer_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'LOCATION_TYPE', N'table_buffer_location_type', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MANAGED', N'table_buffer_managed', N'', N'boolean', 1, N'706', N'N', N'Y', N'N', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MANAGED_RT', N'table_buffer_managed_rt', N'managed rt', N'boolean', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MINIMUM_BUFFER', N'table_buffer_minimum_buffer', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MINIMUM_REPLENISHMENT', N'table_buffer_minimum_replenishment', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MISSING_BUFFER_INVENTORY', N'table_buffer_missing_buffer_inventory', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MODIFY_DATE', N'table_buffer_modify_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'MODIFY_USER', N'table_buffer_modify_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NEGATIVE_ADJUSTMENTS', N'table_buffer_negative_adjustments', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NET_INVENTORY', N'table_buffer_net_inventory', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NET_PRIORITY', N'table_buffer_net_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NET_PRIORITY_COLOR', N'table_buffer_net_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'Y', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NEXT_BUFFER_ANALYSIS', N'table_buffer_next_buffer_analysis', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'NOTES', N'table_buffer_notes', N'', N'varchar', 2000, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(40 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'OPTIMIZED_PRIORITY', N'table_buffer_optimized_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(110 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'OPTIMIZED_PRIORITY_COLOR', N'table_buffer_optimized_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(110 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'OPTIMIZED_REPLENISHMENT', N'table_buffer_optimized_replenishment', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(110 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ORIGIN_BUFFER_FAMILY', N'table_buffer_origin_buffer_family', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ORIGIN_INVENTORY_ON_SITE', N'table_buffer_origin_inventory_on_site', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ORIGIN_LOCATION', N'table_buffer_origin_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'ORIGIN_NET_INVENTORY', N'table_buffer_origin_net_inventory', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'PACKAGING_UNIT', N'table_buffer_packaging_unit', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'PENDING_DEMAND', N'table_buffer_pending_demand', N'', N'numeric', 17, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'POSITIVE_ADJUSTMENTS', N'table_buffer_positive_adjustments', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'PROJECTED_INCREMENTS', N'table_buffer_projected_increments', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(150 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'PROTECTION_FACTOR', N'table_buffer_protection_factor', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'REPLENISHMENT_ACTION', N'table_buffer_replenishment_action', N'', N'varchar', 10, N'705', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ACTION''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'REPLENISHMENT_FREQUENCY', N'table_buffer_replenishment_frequency', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'Y', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'REPLENISHMENT_PRIORITY', N'table_buffer_replenishment_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'I', N'N', N'Y', N'Y', CAST(110 AS Numeric(3, 0)), N'Y', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'REPLENISHMENT_PROBLEM', N'table_buffer_replenishment_problem', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''B''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'REPLENISHMENT_TIME', N'table_buffer_replenishment_time', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'I', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'RESET_COUNT', N'table_buffer_reset_count', N'reset count', N'boolean', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'RT_ADJUSTMENT_TYPE', N'rt_adjustment_type', N'rt adj type', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''RT_ADJUSTMENT_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SBC_BUFFER_SIZE', N'table_buffer_sbc_buffer_size', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SECURITY_STOCK', N'table_buffer_security_stock', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SITE_PRIORITY', N'table_buffer_site_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SITE_PRIORITY_COLOR', N'table_buffer_site_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SKU', N'table_buffer_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTED_BUFFER', N'table_buffer_suggested_buffer', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTED_BUFFER_REPLENISH', N'table_buffer_suggested_buffer_replenish', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTION_ALERTS', N'table_buffer_suggestion_comments', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''SUGGESTION_ALERT_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTION_DATE', N'table_buffer_suggestion_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTION_EXPIRATION_DATE', N'table_buffer_suggestion_expiration_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
GO
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'SUGGESTION_REJECTION_CAUSE', N'table_buffer_suggestion_rejection_cause', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''S''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_CONSOLIDATED_INPUTS', N'table_buffer_total_consolidated_inputs', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_CONSOLIDATED_OUTPUTS', N'table_buffer_total_consolidated_outputs', N'', N'numeric', 15, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_INVENTORY_ON_PRODUCTION', N'table_buffer_total_inventory_on_production', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_INVENTORY_ON_PURCHASING', N'table_buffer_total_inventory_on_purchasing', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_INVENTORY_ON_SITE', N'table_buffer_total_inventory_on_site', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TOTAL_INVENTORY_ON_TRANSIT', N'table_buffer_total_inventory_on_transit', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'TVC', N'table_buffer_tvc', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'UNIT_PRICE', N'table_buffer_unit_price', N'', N'numeric', 15, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'M', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'UNIT_THROUGHPUT', N'table_buffer_unit_throughput', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'UPDATE_MOVEMENTS', N'table_buffer_update_movements', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (11, N'WORST_INVENTORY_ON_SITE', N'table_buffer_worst_inventory_on_site', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'ATYPICAL_CONSUMPTION_THRESHOLD', N'table_buffer_family_atypical_consumption_threshold', N'', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'BUFFER_ADJUSTMENT_MODE', N'table_buffer_buffer_adjustment_mode', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_MODE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'BUFFER_DECREASE_THRESHOLD', N'table_buffer_buffer_decrease_threshold', N'', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'BUFFER_INCREASE_THRESHOLD', N'table_buffer_buffer_increase_threshold', N'', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'CDBUFFER_FAMILY', N'table_buffer_family_cdbuffer_family', N' ', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'CONSECUTIVE_INCREMENTS_FOR_ALERT', N'table_buffer_family_consecutive_increments_alert', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'CONSECUTIVE_INCREMENTS_FOR_RECALCULATION', N'table_buffer_family_consecutive_increments_recalc', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'DAC_HORIZON', N'table_buffer_family_dac_horizon', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'DSBUFFER_FAMILY', N'table_buffer_family_dsbuffer_family', N' ', N'varchar', 50, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'INACTIVITY_WINDOW', N'table_buffer_inactivity_window', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'IS_ACTIVE', N'table_buffer_family_isactive', N'Is Active', N'boolean', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'LOWER_PROTECTION_FACTOR', N'table_buffer_family_lower_protection_factor', N'', N'numeric', 17, N'601', N'Y', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY', N'table_buffer_family_max_atypical_consumption_freq', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'MIDDLE_PROTECTION_FACTOR', N'table_buffer_family_middle_protection_factor', N'', N'numeric', 17, N'601', N'Y', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'MOVING_SUMS_FOR_RECALCULATIONS', N'table_buffer_moving_sums_for_recalculations', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'RED_ZONE_START', N'table_buffer_family_red_zone_start', N' ', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'REPLENISHMENT_MODE', N'table_buffer_family_replenishment_mode', N' ', N'varchar', 3, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_MODE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'REPLENISHMENT_ROUNDING_MODE', N'table_buffer_family_replenishment_rounding_mode', N' ', N'varchar', 3, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''REPLENISHMENT_ROUNDING_MODE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'TIME_BETWEEN_BUFFER_RECALCULATIONS', N'table_buffer_time_between_buffer_recalculations', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'UPPER_PROTECTION_FACTOR', N'table_buffer_family_upper_protection_factor', N'', N'numeric', 17, N'601', N'Y', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (12, N'YELLOW_ZONE_START', N'table_buffer_family_yellow_zone_start', N' ', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (13, N'CDUNIT', N'table_units_cdunit', N' ', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (13, N'DSUNIT', N'table_units_dsunit', N' ', N'varchar', 50, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (13, N'INVENTORY_ACCURACY', N'table_units_stock_accuracy', N' ', N'numeric', 3, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (13, N'IS_ACTIVE', N'table_units_isactive', N'Is Active', N'boolean', 1, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (13, N'IS_DEFAULT_UNIT', N'table_units_is_default_unit', N' ', N'boolean', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'C', NULL, N'N', N'N', N'N', N'Y', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'ALLOWED_OVERSTOCKING', N'table_buffer_allowed_overstocking', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'BAA_OUT_CLASSIFICATION', N'table_buffer_baa_out_classification', N'', N'varchar', 2, N'601', N'N', N'O', N'Y', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''BAA_OUT_CLASSIFICATION_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'BUFFER', N'table_buffer_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'CONSOLIDATED_CONSUMPTION', N'table_buffer_consumption', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'CONSOLIDATED_REPLENISHMENT', N'table_buffer_consolidated_replenishment', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'CREATION_DATE', N'table_buffer_creation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'DAILY_AVERAGE_CONSUMPTION', N'table_buffer_daily_average_consumption', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(150 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'DAYS_SINCE_LAST_OUT', N'table_buffer_days_since_last_out', N'', N'numeric', 5, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'EFFECTIVE_BUFFER', N'table_buffer_effective_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'EXCLUDED_OUTS', N'table_buffer_excluded_outs', N'', N'numeric', 17, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'FAMILY', N'table_buffer_family', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'INVENTORY_ON_CHAIN', N'table_buffer_inventory_on_chain', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'INVENTORY_ON_PRODUCTION', N'table_buffer_inventory_on_production', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'INVENTORY_ON_PURCHASING', N'table_buffer_inventory_on_purchasing', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'INVENTORY_ON_SITE', N'table_buffer_inventory_on_site', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'INVENTORY_ON_TRANSIT', N'table_buffer_inventory_on_transit', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'LAST_TOTAL_OUTS_MAX_SUM', N'table_buffer_last_total_outs_max_sum', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'LOCATION', N'table_buffer_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'LOCATION_TYPE', N'table_buffer_location_type', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'MEASUREMENT_UNIT', N'table_buffer_units', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'MINIMUM_BUFFER', N'table_buffer_minimum_buffer', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'MINIMUM_REPLENISHMENT', N'table_buffer_minimum_replenishment', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'NEGATIVE_ADJUST_CONSOLIDATED', N'table_buffer_negative_adjustments', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'NET_INVENTORY', N'table_buffer_net_inventory', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'NET_PRIORITY', N'table_buffer_net_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'Y', N'Y', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'NET_PRIORITY_COLOR', N'table_buffer_net_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'Y', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'ORIGIN_LOCATION', N'table_buffer_origin_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'Y', N'Y', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'PACKAGING_UNIT', N'table_buffer_packaging_unit', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'PENDING_DEMAND', N'table_buffer_pending_demand', N'', N'numeric', 17, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'Y', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'POSITIVE_ADJUST_CONSOLIDATED', N'table_buffer_positive_adjustments', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'PROTECTION_FACTOR', N'table_buffer_protection_factor', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'RED_ZONE_START', N'table_buffer_family_red_zone_start', N' ', N'numeric', 5, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'REPLENISHMENT_FREQUENCY', N'table_buffer_replenishment_frequency', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'Y', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'REPLENISHMENT_PRIORITY', N'table_buffer_replenishment_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'Y', N'Y', CAST(110 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'REPLENISHMENT_PROBLEM', N'table_buffer_replenishment_problem', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''B''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'REPLENISHMENT_TIME', N'table_buffer_replenishment_time', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'SECURITY_STOCK', N'table_buffer_security_stock', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'SITE_PRIORITY', N'table_buffer_site_priority', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'Y', N'Y', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'SITE_PRIORITY_COLOR', N'table_buffer_site_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'Y', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'SKU', N'table_buffer_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TOTAL_CONSOLIDATED_INPUTS', N'table_buffer_total_consolidated_inputs', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TOTAL_CONSOLIDATED_OUTPUTS', N'table_buffer_total_consolidated_outputs', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TOTAL_INVENTORY_ON_PRODUCTION', N'table_buffer_total_inventory_on_production', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TOTAL_INVENTORY_ON_PURCHASING', N'table_buffer_total_inventory_on_purchasing', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TOTAL_INVENTORY_ON_TRANSIT', N'table_buffer_total_inventory_on_transit', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'TVC', N'table_buffer_tvc', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'UNIT_PRICE', N'table_buffer_unit_price', N'', N'numeric', 15, N'601', N'N', N'O', N'Y', N'Y', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'UNIT_THROUGHPUT', N'table_buffer_unit_throughput', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'UPDATE_MOVEMENTS', N'table_buffer_update_movements', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'WORST_INVENTORY_ON_SITE', N'table_buffer_worst_inventory_on_site', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (14, N'YELLOW_ZONE_START', N'table_buffer_family_yellow_zone_start', N' ', N'numeric', 5, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'APPROVAL_DATE', N'r_buffer_approval_date', N'', N'datetime', NULL, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'Y', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'APPROVED_REPLENISHMENT', N'table_buffer_approved_replenish', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'APPROVER_USER', N'r_buffer_approver_user', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'Y', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'CDLOCATION', N'table_buffer_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'CDLOCATION_SOURCE', N'table_buffer_origin_location', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'EXPORTED', N'r_buffer_exported', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''EXPORTED_TYPE''', N'N', N'N', N'N', N'Y', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'LOCATION_TYPE', N'table_buffer_location_type', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'Y', N'Y', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'MISSING_INVENTORY', N'table_buffer_missing_buffer_inventory', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'NET_PRIORITY', N'table_buffer_net_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'Y', N'Y', N'T', NULL, N'P', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'SITE_PRIORITY', N'table_buffer_site_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'Y', N'Y', N'T', NULL, N'P', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'SKU', N'table_buffer_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
GO
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'SUGGESTED_REPLENISHMENT', N'table_buffer_suggested_buffer_replenish', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'SUGGESTED_TYPE', N'r_buffer_suggestion_type', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''SUGGESTION_TYPE''', N'N', N'N', N'N', N'Y', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (15, N'UNITS', N'table_buffer_units', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(200 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'ADJUSTMENT_ACTION', N'table_buffer_adjustment_action', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_ACTION'' AND CODE <> ''IGNORE''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'ADJUSTMENT_TYPE', N'table_buffer_adjustment_type', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''ADJUSTMENT_TYPE''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'APPROVED_BUFFER', N'table_buffer_approved_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'BUFFER', N'table_buffer_buffer', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'DATE_MANAGEMENT', N'table_buffer_date_management', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'FAMILY', N'table_buffer_family', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'Y', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'LAST_TOTAL_OUTS_MAX_SUM', N'table_buffer_last_outs_max_sum', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'LOCATION', N'table_buffer_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'Y', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'LOCATION_TYPE', N'table_buffer_location_type', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'Y', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'MANAGED_BY', N'table_buffer_managed_by', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'MINIMUM_BUFFER', N'table_buffer_minimum_buffer', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'ORIGIN_LOCATION', N'table_buffer_origin_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'Y', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'PROTECTION_FACTOR', N'table_buffer_protection_factor', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SKU', N'table_buffer_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SUGGESTED_BUFFER', N'table_buffer_suggested_buffer', N'', N'numeric', 15, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SUGGESTION_ALERTS', N'table_buffer_suggestion_alerts', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''SUGGESTION_ALERT_TYPE''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SUGGESTION_DATE', N'table_buffer_suggestion_date', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SUGGESTION_EXPIRATION_DATE', N'table_buffer_suggestion_expiration_date', N'', N'datetime', NULL, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (16, N'SUGGESTION_REJECTION_CAUSE', N'table_buffer_suggestion_rejection_cause', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CDCAUSE CODE, (CASE IS_ACTIVE WHEN 1 THEN DSCAUSE ELSE ''[''+DSCAUSE+'']'' END) DESCRIPTION, (CASE WHEN IS_SYSTEM = ''Y'' THEN ''I'' ELSE ''N'' END) DSTYPE   FROM TFSCM_CLI_CAUSES WHERE CAUSE_TYPE = ''S''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'ACTIVE', N'table_user_row_edit_active', NULL, N'numeric', 1, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'CD_COLUMN_NAME_ROW', N'table_user_row_edit_cd_column_name_row', NULL, N'varchar', 200, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'CD_ID', N'table_user_row_edit_cd_id', NULL, N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'CD_ROW', N'table_user_row_edit_cd_row', NULL, N'varchar', 200, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'CD_USER', N'table_user_row_edit_cd_user', NULL, N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'EDIT_DATE', N'table_user_row_edit_edit_date', NULL, N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (17, N'TABLE_NAME', N'table_user_row_edit_table_name', NULL, N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (18, N'ACTIVE', N'table_delete_history_active', N'', N'boolean', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'C', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (18, N'DAY_OF_WEEK', N'table_delete_history_day_of_week', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''DAY_OF_WEEK'' ORDER BY CODE', N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (18, N'DELETE_TYPE', N'table_delete_history_delete_type', N'', N'varchar', 4, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''DELETE_HISTORY_TYPE'' ORDER BY CODE', N'N', N'Y', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (18, N'HISTORY_DAYS', N'table_delete_history_days', N'', N'numeric', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (18, N'TIME_EXECUTION', N'table_delete_history_time_execution', N'', N'varchar', 5, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'CDPURCHASE_ORDER', N'table_purchase_orders_cdpurchase_order', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'COLOR_CHANGE_DATE', N'table_purchase_orders_color_change_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'CREATION_DATE', N'table_purchase_orders_creation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'CREATION_USER', N'table_purchase_orders_creation_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'DESTINATION', N'table_purchase_orders_destination', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'Y', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'EXCHANGES_IN_QUARANTINE', N'table_purchase_orders_exchange_in_quarantine', N'', N'numeric', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'FINALIZATION_DATE', N'table_purchase_orders_finalization_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'MANAGED', N'table_purchase_orders_managed', N'', N'boolean', 1, N'1003', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'MODIFICATION_DATE', N'table_purchase_orders_modification_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'MODIFICATION_USER', N'table_purchase_orders_modification_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'NECESSITY_DATE', N'table_purchase_orders_necessity_date', N'', N'datetime', 10, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'NECESSITY_DATETIME', N'table_purchase_orders_necessity_datetime', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'ORDER_CREATION_DATE', N'table_purchase_orders_order_creation_date', N'', N'datetime', 10, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'ORDER_CREATION_DATETIME', N'table_purchase_orders_order_creation_datetime', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'ORDER_VALUE', N'table_purchase_orders_order_value', N'', N'numeric', 17, N'601', N'N', N'O', N'Y', N'N', N'Y', N'T', NULL, N'M', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PENDING_QUANTITY', N'table_purchase_orders_pending_quantity', N'', N'numeric', 17, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PO_TYPE', N'table_purchase_orders_po_type', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'X', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''PURCHASE_ORDER_TYPE''', N'N', N'N', N'Y', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PRIORITY', N'table_purchase_orders_priority', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'T', NULL, N'P', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 2, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PRIORITY_COLOR', N'table_purchase_orders_priority_color', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'Y', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PROMISED_DELIVERY_DATE', N'table_purchase_orders_delivery_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PROMISED_DELIVERY_DATETIME', N'table_purchase_orders_promised_delivery_datetime', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'PURCHASE_NOTES', N'table_purchase_orders_notes', N'', N'varchar', 2000, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'QUARANTINE_DATE', N'table_purchase_orders_quarantine_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'T', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'SKU', N'table_purchase_orders_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'SUPPLIER', N'table_purchase_orders_supplier', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'Y', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'UNITS', N'table_purchase_orders_cdpurchase_units', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (19, N'UPDATE_DATE', N'table_purchase_orders_update_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'ATYPICAL_CONSUMPTION_STATUS', N'table_buffer_changes_atypical_consumption_status', N'', N'varchar', 1, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''BUFFER_CHANGES_STATUS_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'CHANGE_STEPS', N'table_buffer_changes_change_steps', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'I', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'CHANGE_TYPE', N'table_buffer_changes_change_type', N'', N'varchar', 1, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''CHANGE_TYPE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'CREATION_DATE', N'table_buffer_changes_creation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'CREATION_USER', N'table_buffer_changes_creation_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'DAYS_BETWEEN_CHANGES', N'table_buffer_changes_days_between_changes', N'', N'numeric', 12, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'EVENT', N'table_buffer_changes_event', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'EVENT_ENDING_DATE', N'table_buffer_changes_event_ending_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'EVENT_STARTING_DATE', N'table_buffer_changes_event_starting_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'FILTER', N'table_buffer_changes_filter', N'', N'varchar', 5000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'JSON_FILTER', N'table_buffer_changes_json_filter', N'', N'varchar', 5000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(180 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'LOCATION_CHG', N'table_buffer_changes_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'L', N'SELECT CDLOCATION CODE, (CASE IS_ACTIVE WHEN 1 THEN CDLOCATION ELSE ''[''+ CDLOCATION +'']'' END) DESCRIPTION, ''C'' DSTYPE FROM TFSCM_CLI_LOCATION WHERE LOCATION_TYPE IN (''WH'',''CL'',''PS'')', N'N', N'N', N'N', N'Y', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'MODE', N'table_buffer_changes_mode', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''CHANGE_MODE''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'MODIFICATION_DATE', N'table_buffer_changes_modification_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(90 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'MODIFICATION_USER', N'table_buffer_changes_modification_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'PREPARATION_END_DATE', N'table_buffer_changes_preparation_end_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'PREPARATION_START_DATE', N'table_buffer_changes_preparation_start_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'PROCESSING_DATE', N'table_buffer_changes_processing_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'REQUIRED_CHANGE', N'table_buffer_changes_required_change', N'', N'numeric', 12, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (20, N'SKU_CHG', N'table_buffer_changes_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'Y')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'BUFFER', N'table_buffer_buffer', N'', N'numeric', 15, N'601', N'N', N'O', N'N', N'N', N'X', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'FAMILY', N'table_buffer_family', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'X', N'L', N'SELECT CDBUFFER_FAMILY CODE, (CASE IS_ACTIVE WHEN 1 THEN CDBUFFER_FAMILY ELSE ''[''+ CDBUFFER_FAMILY +'']'' END) DESCRIPTION, ''N'' DSTYPE  FROM TFSCM_CLI_BUFFER_FAMILY', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'LOCATION', N'table_buffer_location', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'LOCATION_TYPE', N'table_buffer_location_type', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'X', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''LOCATION_TYPE''', N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'NET_PRIORITY', N'table_buffer_net_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'Y', N'X', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'NET_PRIORITY_COLOR', N'table_buffer_net_priority_color', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'Y', N'X', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'ORIGIN_LOCATION', N'table_buffer_origin_location', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'X', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'REPLENISHMENT_TIME', N'table_buffer_replenishment_time', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'N', N'X', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'SITE_PRIORITY', N'table_buffer_site_priority', N'', N'numeric', 10, N'601', N'N', N'O', N'N', N'Y', N'X', N'T', NULL, N'P', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'SITE_PRIORITY_COLOR', N'table_buffer_site_priority_color', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'Y', N'X', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''COLOR''', N'N', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (21, N'SKU', N'table_buffer_sku', N'', N'varchar', 50, N'601', N'N', N'O', N'N', N'N', N'X', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'BASE_BUFFER_DELTA', N'table_buffer_changes_steps_base_buffer_delta', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'DATE', N'table_buffer_changes_steps_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'D', N'N', N'N', N'N', CAST(120 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'DELTA', N'table_buffer_changes_steps_delta', N'', N'numeric', 17, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'F', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 5, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'EVENT', N'table_buffer_changes_steps_event', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'LOCATION', N'table_buffer_changes_steps_location', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'PROCESSING_DATE', N'table_buffer_changes_steps_processing_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'SKU', N'table_buffer_changes_steps_sku', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (22, N'STEP', N'table_buffer_changes_steps_step', N'', N'numeric', 10, N'601', N'N', N'Y', N'N', N'N', N'Y', N'T', NULL, N'I', N'N', N'N', N'N', CAST(50 AS Numeric(3, 0)), N'N', 0, N'N')
GO
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'CDRULE', N'table_automation_rules_cdrule', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'Y', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'CDSECTION', N'table_automation_rules_cdsection', N'', N'varchar', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT  I.[CDINTERFACE]+'''' CODE, [DSTABLE] DESCRIPTION,''E'' DSTYPE FROM [dbo].[TFSCM_DEX_INTERFACES] I JOIN [dbo].[TFSCM_COM_TABLES] T ON T.CDTABLE = I.CDTABLE AND I.CDINTERFACE IN (3)', N'N', N'Y', N'N', N'Y', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'CREATION_DATE', N'table_automation_rules_creation_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'CREATION_USER', N'table_automation_rules_creation_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'DESCRIPTION', N'table_automation_rules_description', N'', N'varchar', 50, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'FILTER', N'table_automation_rules_filter', N'', N'varchar', 5000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'IS_ACTIVE', N'table_automation_rules_is_active', N'', N'varchar', 1, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CODE CODE,DESCRIPTION DESCRIPTION,DSTYPE DSTYPE FROM TFSCM_CLI_COLUMN_LIST WHERE LIST_TYPE = ''RULE_STATUS''', N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'JSON_FILTER', N'table_automation_rules_json_filter', N'', N'varchar', 5000, N'601', N'N', N'Y', N'N', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'MODIFICATION_DATE', N'table_automation_rules_modification_date', N'', N'datetime', 10, N'601', N'N', N'Y', N'Y', N'N', N'Y', N'T', NULL, N'T', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'MODIFICATION_USER', N'table_automation_rules_modification_user', N'', N'varchar', 50, N'601', N'N', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'SEQUENCE', N'table_automation_rules_sequence', N'', N'numeric', 10, N'601', N'Y', N'Y', N'N', N'N', N'N', N'T', NULL, N'I', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'TARGET_FIELD', N'table_automation_rules_target_field', N'', N'varchar', 50, N'601', N'Y', N'Y', N'N', N'N', N'N', N'L', N'SELECT CDET.[CDCOLUMN] CODE, CDET.[DSNAME]  DESCRIPTION, (CASE WHEN CDET.[IS_SYSTEM] = ''N'' THEN ''N'' ELSE ''I'' END) DSTYPE FROM [dbo].[TFSCM_DEX_INTERFACES] IHED JOIN [dbo].[TFSCM_COM_COL_TABLE] CDET  ON CDET.[CDTABLE] = IHED.[CDTABLE] AND CDET.[CDCOLUMN] NOT IN (''SKU'', ''UPDATE_MOVEMENTS'') AND CDET.[IS_UPGRADABLE] = ''Y'' AND IHED.[CDINTERFACE] = 3 ', N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN], [DSNAME], [DSCOLUMN], [DSTYPE], [COLUMN_SIZE], [CDPERMISSION_EDIT], [IS_EDITABLE], [IS_SYSTEM], [IS_NULLABLE], [IS_COLOR], [IS_UPGRADABLE], [VIEW_TYPE], [SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [USE_AS_SERIE], [IS_USE_AS_PERMISSION], [VIEW_COL_WIDTH], [SAVE_HISTORY], [COLUMN_ACCURACY], [IS_FOREIGN_KEY]) VALUES (23, N'TARGET_VALUE', N'table_automation_rules_target_value', N'', N'varchar', 200, N'601', N'Y', N'Y', N'Y', N'N', N'N', N'T', NULL, N'N', N'N', N'N', N'N', CAST(100 AS Numeric(3, 0)), N'N', 0, N'N')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (0, N'component_system')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (1, N'component_license')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (2, N'component_dataexchange')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (3, N'component_notification')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (4, N'component_security')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (5, N'component_export')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (6, N'component_general')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (7, N'component_production_orders')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (8, N'component_purchasing_orders')
INSERT [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT], [DSCOMPONENT]) VALUES (9, N'component_inventory_buffers')
INSERT [dbo].[TFSCM_COM_DATABASES] ([JNDI], [DATABASE_NAME]) VALUES (N'jdbc/FocussDefault', N'databaseNewName')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'01PO', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'02BF', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'03IH', 0, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'04ST', 60, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'05LG', 30, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'06NT', 30, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'07VO', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'08PE', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'09DC', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'10LA', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'11DC', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'12BH', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'13BR', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'14BA', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'15PU', 365, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'16VA', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'17VI', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_DELETE_HISTORY] ([DELETE_TYPE], [HISTORY_DAYS], [ACTIVE], [DAY_OF_WEEK], [TIME_EXECUTION]) VALUES (N'18ES', 3650, 1, N'1', N'20:00')
INSERT [dbo].[TFSCM_COM_HISTORY_TABLES] ([CDTABLE], [HISTORY_TABLE_NAME]) VALUES (N'11', N'TFSCM_CLI_BUFFER_HISTORY')
INSERT [dbo].[TFSCM_COM_HISTORY_TABLES] ([CDTABLE], [HISTORY_TABLE_NAME]) VALUES (N'11', N'TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY')
INSERT [dbo].[TFSCM_COM_HISTORY_TABLES] ([CDTABLE], [HISTORY_TABLE_NAME]) VALUES (N'5', N'TFSCM_CLI_BUFFER_HISTORY')
INSERT [dbo].[TFSCM_COM_HISTORY_TABLES] ([CDTABLE], [HISTORY_TABLE_NAME]) VALUES (N'5', N'TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY')
SET IDENTITY_INSERT [dbo].[TFSCM_COM_JOBS] ON 

INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Verificar_Expiracion_Licencia', CAST(1 AS Numeric(2, 0)), CAST(N'2013-12-15T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'3', N'?', N'MON,TUE,WED,THU,FRI,SAT,SUN', N'Y', N'Y', N'C', CAST(15 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Verificar Notificaciones', CAST(5 AS Numeric(2, 0)), CAST(N'2013-12-16T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'4', N'?', N'MON,TUE,WED,THU,FRI,SAT,SUN', N'Y', N'Y', N'C', CAST(16 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Ordenes_Produccion', CAST(7 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(17 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Amortiguadores', CAST(8 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(18 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicadores_Huerfanos', CAST(9 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(19 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Registros_Estadisticas', CAST(10 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(20 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Registros_Intercambios', CAST(11 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(21 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Notificaciones', CAST(12 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(22 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_VOA', CAST(13 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(23 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_PET', CAST(14 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(24 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_DCOPS', CAST(15 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(25 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_LAA', CAST(16 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(26 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_DCA', CAST(17 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(27 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Amortiguadores_Historial', CAST(18 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(28 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Amortiguadores_Sugerencias_Reabastecimiento', CAST(19 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(29 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Amortiguadores_Sugerencias_Ajustes', CAST(20 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(30 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Ordenes_Compra', CAST(21 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(31 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_VA', CAST(24 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(48 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_VI', CAST(25 AS Numeric(2, 0)), CAST(N'2015-01-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(49 AS Numeric(10, 0)))
INSERT [dbo].[TFSCM_COM_JOBS] ([TRIGGER_NAME], [JOB_TYPE], [START_TIME], [END_TIME], [TIME_ZONE], [CRON_EXP_MIN], [CRON_EXP_HOURS], [CRON_EXP_DAY_OF_MONTH], [CRON_EXP_DAY_OF_WEEK], [IS_SYSTEM], [ENABLE], [STATUS], [IDJOB]) VALUES (N'Borrado_Historial_Indicador_ESAA', CAST(26 AS Numeric(2, 0)), CAST(N'2016-12-01T00:00:00.000' AS DateTime), NULL, N'GMT-5:00', N'0', N'20', N'?', N'1', N'Y', N'Y', N'P', CAST(50 AS Numeric(10, 0)))
SET IDENTITY_INSERT [dbo].[TFSCM_COM_JOBS] OFF
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ADJUST_SUGGESTS_ALERTS', N'en', N'Alerts managing adjustment suggestions')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ADJUST_SUGGESTS_ALERTS', N'es', N'Alertas al gestionar sugerencias de ajuste')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ADJUST_SUGGESTS_ERRORS', N'en', N'Error managing adjustment suggestions')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ADJUST_SUGGESTS_ERRORS', N'es', N'Errores al gestionar sugerencias de ajuste')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_ERROR', N'en', N'Error: buffer changes: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_ERROR', N'es', N'Error: cambios de amortiguadores: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_SUCESS', N'en', N'Buffer changes applied successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_SUCESS', N'es', N'Cambios de amortiguadores aplicados correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED', N'en', N'Alert: buffer changes: pending buffer adjustment suggestions expired because of scheduled buffer change.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED', N'es', N'Alerta: cambios de amortiguadores: sugerencias pendientes de ajuste de amortiguador expiradas por cambio programado de amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'AUTO_ACCEPTED_AMOUNT', N'en', N'Buffer adjustments accepted automatically.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'AUTO_ACCEPTED_AMOUNT', N'es', N'Ajustes de amortiguador aceptados automaticamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'AUTO_EXPIRED_AMOUNT', N'en', N'Buffer adjustments expired automatically.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'AUTO_EXPIRED_AMOUNT', N'es', N'Ajustes de amortiguador expirados automaticamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT', N'en', N'Error: buffers: minimum replenishment is not multiple of packaging unit.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT', N'es', N'Error: amortiguadores: reabastecimiento mínimo no es múltiplo de la unidad de empaque.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_AMOUNT_DAYS_ERROR', N'en', N'Error: average zone calculation: not enough data in the history table.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_AMOUNT_DAYS_ERROR', N'es', N'Error: cálculo de zona promedio: no hay suficientes datos en el historial.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR', N'en', N'Error: average zone calculation: buffer not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR', N'es', N'Error: cálculo de zona promedio: el amortiguador no se encontró.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_NO_DATA_FOUND_ALERT', N'en', N'Alert: average zone calculation: no data was found for the calculation.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_NO_DATA_FOUND_ALERT', N'es', N'Alerta: cálculo de zona promedio: no se encontraron datos para el cálculo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_SUCCESSFUL', N'en', N'Average zone calculated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_SUCCESSFUL', N'es', N'Zona promedio calculada correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_UNEXPECTED_ERROR', N'en', N'Error: average zone calculation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_AVG_ZONE_UNEXPECTED_ERROR', N'es', N'Error: cálculo de zona promedio: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR', N'en', N'Error: outs'' maximum moving sum calculation: buffer not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR', N'es', N'Error: cálculo de máxima suma móvil de salidas: amortiguador no encontrado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_NO_DATA_ERROR', N'en', N'Warning: not enough data for moving sums calculation.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_NO_DATA_ERROR', N'es', N'Alerta: datos insuficientes para cálculo de sumas móviles.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_PROCESS_SUCCESS', N'en', N'Max outs moving sum calculated Successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_PROCESS_SUCCESS', N'es', N'Máxima suma móvil de salidas calculada correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_UNEXPECTED_ERROR', N'en', N'Error: outs'' maximum moving sum calculation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MAX_SUM_UNEXPECTED_ERROR', N'es', N'Error: cálculo de máxima suma móvil de salidas: error inesperado')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_AVERAGE_DAYS_LT_0', N'en', N'Error: consumption moving average calculation: days for average are less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_AVERAGE_DAYS_LT_0', N'es', N'Error: cálculo de promedio móvil de consumos: días para promedio es un valor menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_BUFFER_NOT_FOUND_HISTORY', N'en', N'Error: consumption moving average calculation: buffer not found in history.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_BUFFER_NOT_FOUND_HISTORY', N'es', N'Error: cálculo de promedio móvil de consumos: amortiguador no encontrado en historial.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_HISTORY_LT_AVERAGE_DAYS', N'en', N'Error: consumption moving average calculation: buffer history less than requested average days.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_HISTORY_LT_AVERAGE_DAYS', N'es', N'Error: cálculo de promedio móvil de consumos: historial del amortiguador menor que días solicitados para promedio.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_UNEXPECTED_ERROR', N'en', N'Error: consumption moving average calculation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALC_MOVING_AVERAGE_UNEXPECTED_ERROR', N'es', N'Error: cálculo de promedio móvil de consumos: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALENDAR_NOT_FOUND', N'en', N'Error: locations: calendar not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'CALENDAR_NOT_FOUND', N'es', N'Error: ubicaciones: calendario inexistente o inactivo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0', N'en', N'Error: buffers: inventory on production empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0', N'es', N'Error: amortiguadores: inventario en producción vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0', N'en', N'Error: buffers: inventory on purchasing empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0', N'es', N'Error: amortiguadores: inventario en compras vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0', N'en', N'Error: buffers: inventory on transit empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0', N'es', N'Error: amortiguadores: inventario en tránsito vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO', N'en', N'Info: buffers: the rule RRRR was applied to the buffer')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO', N'es', N'Info: amortiguadores: la regla RRRR fue aplicada al amortiguador')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_LOG_FILENAME', N'en', N'Automation Rule ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_LOG_FILENAME', N'es', N'Regla de Automatización ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_DUPLICATED', N'en', N'Error: buffers: duplicate sku and location; duplicates not loaded: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFER_DUPLICATED', N'es', N'Error: amortiguadores: sku y ubicación duplicado; duplicados no cargados: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED', N'en', N'Alert: buffers: pending buffer adjustment suggestions expired because of buffer size change.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED', N'es', N'Alerta: amortiguadores: sugerencias pendientes de ajuste de amortiguador expiradas por cambio de tamaño de amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_LT_0', N'en', N'Error: buffers: buffer size less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_LT_0', N'es', N'Error: amortiguadores: tamaño de amortiguador menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST', N'en', N'Error: buffers: trying to create existing buffer.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST', N'es', N'Error: amortiguadores: intenta crear un amortiguador existente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND', N'en', N'Error: buffers: location calendar not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND', N'es', N'Error: amortiguadores: el calendario de la ubicación no existe o está inactivo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0', N'en', N'Error: buffers: consolidated replenishments empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0', N'es', N'Error: amortiguadores: reabastecimientos consolidados vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0', N'en', N'Error: buffers: consolidated consumptions empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0', N'es', N'Error: amortiguadores: consumos consolidados vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_COUNT_DUPLICATED', N'en', N'Duplicate SKUs and locations (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_COUNT_DUPLICATED', N'es', N'SKUs y ubicaciones duplicados (no cargados)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ERROR', N'en', N'Buffers with errors (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ERROR', N'es', N'Amortiguadores con errores (no cargados)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0', N'en', N'Error: buffers: excluded outs empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0', N'es', N'Error: amortiguadores: salidas excluidas vacías o menores a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_FAMILY_NOT_FOUND', N'en', N'Error: buffers: family is empty, not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_FAMILY_NOT_FOUND', N'es', N'Error: amortiguadores: familia vacía, no encontrada o está inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS', N'en', N'Interface with buffer update movements')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS', N'es', N'Interfaz con fecha de actualización de movimientos')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND', N'en', N'Error: buffers: location not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND', N'es', N'Error: amortiguadores: ubicación no encontrada o inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID', N'en', N'Error: buffers: invalid location type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID', N'es', N'Error: amortiguadores: tipo de ubicación inválida.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED', N'en', N'Alert: buffers: pending buffer adjustment suggestions expired because of minimum buffer size change.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED', N'es', N'Alerta: amortiguadores: sugerencias pendientes de ajuste de amortiguador expiradas por cambio de tamaño mínimo de amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER', N'en', N'Error: buffers: minimum buffer greater than buffer size.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER', N'es', N'Error: amortiguadores: amortiguador mínimo mayor que tamaño de amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0', N'en', N'Error: buffers: minimum buffer less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0', N'es', N'Error: amortiguadores: amortiguador mínimo menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0', N'en', N'Error: buffers: minimum replenishment less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0', N'es', N'Error: amortiguadores: reabastecimiento mínimo menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0', N'en', N'Error: buffers: negative adjustments empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0', N'es', N'Error: amortiguadores: ajustes negativos vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR', N'en', N'Error: buffers: origin location should not be equal to location.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR', N'es', N'Error: amortiguadores: la ubicación de origen no puede ser igual a la ubicación.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND', N'en', N'Error: buffers: origin location not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND', N'es', N'Error: amortiguadores: ubicación origen no encontrada o inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0', N'en', N'Error: buffers: packaging unit empty, less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0', N'es', N'Error: amortiguadores: unidad de empaque vacía o es menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0', N'en', N'Error: buffers: pending demand empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0', N'es', N'Error: amortiguadores: demanda pendiente vacía o menor a cero.')
GO
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0', N'en', N'Error: buffers: positive adjustments empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0', N'es', N'Error: amortiguadores: ajustes positivos vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME', N'en', N'Error: buffers: replenishment frequency greater than or equal to replenishment time.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME', N'es', N'Error: amortiguadores: frecuencia de reabastecimiento mayor o igual al tiempo de reabastecimiento.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0', N'en', N'Error: buffers: replenishment frequency less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0', N'es', N'Error: amortiguadores: frecuencia de reabastecimiento menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0', N'en', N'Error: buffers: replenishment priority less than or equal to zero, or empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0', N'es', N'Error: amortiguadores: prioridad de reabastecimiento menor o igual a cero, o vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0', N'en', N'Error: buffers: replenishment time less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0', N'es', N'Error: amortiguadores: tiempo de reabastecimiento menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0', N'en', N'Error: buffers: safety stock less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0', N'es', N'Error: amortiguadores: inventario de seguridad menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR', N'en', N'Error: buffers: empty SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR', N'es', N'Error: amortiguadores: SKU vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SUCESSFUL', N'en', N'Loaded buffers')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_SUCESSFUL', N'es', N'Amortiguadores cargados')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF', N'en', N'Alert: buffers: previous inventory on site doesn''t match value reported in the interface.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF', N'es', N'Alerta: amortiguadores: el inventario en sitio anterior no corresponde al nuevo valor reportado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0', N'en', N'Error: buffers: inventory on site less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0', N'es', N'Error: amortiguadores: inventario en sitio menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TVC_LT_0', N'en', N'Error: buffers: TVC empty or less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_TVC_LT_0', N'es', N'Error: amortiguadores: CTV vacío o menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR', N'en', N'Error: buffers: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR', N'es', N'Error: amortiguadores: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNIT_MINOR_ERROR', N'en', N'Error: buffers: measurement unit  has less inventory precision than the current one.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNIT_MINOR_ERROR', N'es', N'Error: amortiguadores: la unidad de medida tiene precisión menor a la actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0', N'en', N'Error: buffers: unit price less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0', N'es', N'Error: amortiguadores: precio unitario menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND', N'en', N'Error: buffers: measurement unit empty, not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND', N'es', N'Error: amortiguadores: unidad de medición vacía, no encontrada o inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW', N'en', N'Error: buffers: movements date must be less than or equal to current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW', N'es', N'Error: amortiguadores: fecha de movimientos debe ser menor o igual que fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DELETE_HISTORY_SUCESSFUL', N'en', N'Successful history deletion.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DELETE_HISTORY_SUCESSFUL', N'es', N'Historial eliminado correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DELETE_HISTORY_UNEXPECTED_ERROR', N'en', N'Error: delete history: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DELETE_HISTORY_UNEXPECTED_ERROR', N'es', N'Error: eliminar historial: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DUPLICATED_RECORD', N'en', N'Error: duplicated record; duplicates not loaded: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_DUPLICATED_RECORD', N'es', N'Error: registro duplicado; duplicados no cargados: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR', N'en', N'Error: replenishment suggestions generation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR', N'es', N'Error: generar sugerencias de reabastecimiento: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS', N'en', N'successful replenishment suggestions generation.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS', N'es', N'generación correcta de sugerencias de reabastecimiento.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR', N'en', N'Error: adjustment suggestions history generation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR', N'es', N'Error: generar historial de sugerencias de ajuste: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS', N'en', N'Adjustment suggestions history generated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS', N'es', N'Generación de historial de ajustes de amortiguadores correcto.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR', N'en', N'Error: replenishment suggestions history generation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR', N'es', N'Error: generar historial de sugerencias de reabastecimiento: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS', N'en', N'successful replenishment suggestions history generation.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS', N'es', N'generación de historial de sugerencias de reabastecimiento exitosa.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_LOCATION_MODIFY_DATE', N'en', N'Interface with location update date')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_LOCATION_MODIFY_DATE', N'es', N'Interfaz con fecha actualización de la ubicación')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW', N'en', N'Error: locations: update date must be less than or equal to current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW', N'es', N'Error: ubicaciones: fecha de actualización debe ser menor o igual que fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR', N'en', N'Error: buffers: minimum replenishment greater than the sum of buffer and safety stock.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR', N'es', N'Error: amortiguadores: reabastecimiento mínimo mayor que amortiguador más inventario de seguridad.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT', N'en', N'Error: production orders: order update date greater than current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT', N'es', N'Error: órdenes de producción: fecha de actualización mayor que fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD', N'en', N'Error: production orders: order update date earlier than last update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD', N'es', N'Error: órdenes de producción: fecha de actualización anterior a la última fecha de actualización.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL', N'en', N'Error: production orders: empty order update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL', N'es', N'Error: órdenes de producción: fecha de actualización de la orden vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL', N'en', N'Error: production orders: empty destination.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL', N'es', N'Error: órdenes de producción: destino vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND', N'en', N'Error: production orders: family not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND', N'es', N'Error: órdenes de producción: familia no encontrada.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED', N'en', N'Error: production orders: duplicate order code; duplicates not loaded: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED', N'es', N'Error: órdenes de producción: código de orden duplicado; duplicados no cargados: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED', N'en', N'Error: production orders: the order is finished.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED', N'es', N'Error: órdenes de producción: la orden está finalizada.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_TYPE_INVAL', N'en', N'Error: production orders: invalid order type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_TYPE_INVAL', N'es', N'Error: órdenes de producción: tipo de orden inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_NOT_FOUND', N'en', N'Error: production orders: parent order not found or could not be created.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_NOT_FOUND', N'es', N'Error: órdenes de producción: no se encontró o no se pudo crear la orden padre.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL', N'en', N'Error: production orders: plant code is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL', N'es', N'Error: órdenes de producción: código de planta está vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY', N'en', N'Alert: production orders: the family has changed.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY', N'es', N'Alerta: órdenes de producción: la familia ha cambiado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPL', N'en', N'Duplicate production orders (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPL', N'es', N'Órdenes de producción duplicadas (no cargadas)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND', N'en', N'Error: production orders: destination not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND', N'es', N'Error: órdenes de producción: destino no encontrado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS', N'en', N'Orphan production orders (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS', N'es', N'Órdenes de producción huérfanas (no cargadas)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS', N'en', N'Production orders with errors (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS', N'es', N'Órdenes de producción con errores (no cargadas)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED', N'en', N'Production orders that failed finishing')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED', N'es', N'Órdenes de producción con errores de finalización')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GT_NOW', N'en', N'Error: production orders: update date is greater than current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GT_NOW', N'es', N'Error: órdenes de producción: fecha de actualización mayor que fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE', N'en', N'Interface with order update date')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE', N'es', N'Interfaz con fecha de actualización de la orden')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LT_0', N'en', N'Error: production orders: order value is less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LT_0', N'es', N'Error: órdenes de producción: valor de la orden menor que cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS', N'en', N'Error: production orders: orphan production orders.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS', N'es', N'Error: órdenes de producción: órdenes de producción huérfanas.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PARENT_CHILD_ERROR', N'en', N'Error: production orders: order should not be parent and child.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PARENT_CHILD_ERROR', N'es', N'Error: órdenes de producción: orden no puede ser padre e hija.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT', N'en', N'Alert: production orders: sum of quantity left of the buffer''s orders is different to the buffer''s inventory on production.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT', N'es', N'Alerta: órdenes de producción: la suma de las cantidades pendientes de las órdenes del amortiguador es diferente al inventario en producción del amortiguador.')
GO
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LE0', N'en', N'Error: production orders: quantity left is less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LE0', N'es', N'Error: órdenes de producción: cantidad pendiente menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NOWD', N'en', N'Error: production orders: promised due date is a non working day.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NOWD', N'es', N'Error: órdenes de producción: fecha prometida de entrega cae en día no laboral.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NULL', N'en', N'Error: production orders: promised due date is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NULL', N'es', N'Error: órdenes de producción: fecha prometida de entrega vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL', N'en', N'Error: production orders: associated buffer not found (SKU + destination).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL', N'es', N'Error: órdenes de producción: amortiguador asociado no encontrado (SKU + destino).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL', N'en', N'Error: production orders: empty SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL', N'es', N'Error: órdenes de producción: SKU vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED', N'en', N'Finished production orders')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED', N'es', N'Órdenes de producción finalizadas')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS', N'en', N'Loaded production orders')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS', N'es', N'Órdenes de producción cargadas')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LE0', N'en', N'Error: production orders: total quantity less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LE0', N'es', N'Error: órdenes de producción: cantidad total menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR', N'en', N'Error: production orders: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR', N'es', N'Error: órdenes de producción: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR', N'en', N'Error: production orders: progress % is less than 0 or greater than 100.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR', N'es', N'Error: órdenes de producción: % de avance es menor a cero o mayor a 100.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED', N'en', N'Purchase orders that failed finishing.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED', N'es', N'Órdenes de compra con errores de finalización.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE', N'en', N'Interface with order update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE', N'es', N'Interfaz con fecha de actualización de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED', N'en', N'Finished purchase orders.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED', N'es', N'Órdenes de compra finalizadas.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS', N'en', N'Production orders in quarantine.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS', N'es', N'Órdenes de producción en cuarentena.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED', N'en', N'No production orders sent to quarantine.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED', N'es', N'Ninguna orden de producción puesta en cuarentena.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL', N'en', N'Quarantine production orders generated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL', N'es', N'Órdenes de producción en cuarentena generadas correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW', N'en', N'Error: production orders: actual release date is greater than current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW', N'es', N'Error: órdenes de producción: fecha real de liberación mayor que fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED', N'en', N'Stock orders priorities calculated successfully')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED', N'es', N'Prioridad de órdenes de inventario calculada correctamente')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL', N'en', N'Stock purchase order priorities calculated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL', N'es', N'Prioridad de órdenes de compra tipo inventario calculada correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR', N'en', N'Error calculating consolidated inputs and outputs.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR', N'es', N'Error calculando entradas y salidas consolidadas.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCESS', N'en', N'consolidated inputs and outputs calculated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCESS', N'es', N'entradas y salidas consolidadas calculadas correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEFAULT_CALENDAR_NOT_FOUND', N'en', N'Error: locations: default calendar not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEFAULT_CALENDAR_NOT_FOUND', N'es', N'Error: ubicaciones: No existe un calendario por defecto.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_HISTORY_COLUMN_NOT_FOUND', N'en', N'Error: history deletion: history date column not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_HISTORY_COLUMN_NOT_FOUND', N'es', N'Error: borrado de historiales: no se encontró la columna de la fecha del historial.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_SUCCESSFUL', N'en', N'History deleted successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_SUCCESSFUL', N'es', N'Borrado de historial ejecutado correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR', N'en', N'Error: history deletion: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR', N'es', N'Error: borrado de historiales: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE', N'en', N'Error: buffers: movements date earlier than last movements date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE', N'es', N'Error: amortiguadores: fecha de movimientos menor a la última fecha de movimientos.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST', N'en', N'Error: buffers: movements date earlier than last reported movements date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST', N'es', N'Error: amortiguadores: fecha de movimientos es menor que la última fecha de movimientos reportada.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_GENERATE_REPLENISHMENT_SUGGESTIONS', N'en', N'Buffer replenishment suggestions generation and management procedure')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_GENERATE_REPLENISHMENT_SUGGESTIONS', N'es', N'Procedimiento generar y gestionar sugerencias de reabastecimiento de amortiguadores')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR', N'en', N'Error: buffers: minimum replenishment greater than the sum of buffer and safety stock.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR', N'es', N'Error: amortiguadores: reabastecimiento mínimo mayor que amortiguador más inventario de seguridad.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY', N'en', N'Buffer history update procedure')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY', N'es', N'Procedimiento actualizar historial de amortiguadores')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_ERROR', N'en', N'Error during buffer history execution.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_ERROR', N'es', N'Error ejecutando el historial de amortiguadores.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL', N'en', N'Buffer history updated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL', N'es', N'Historial de amortiguadores actualizado correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA', N'en', N'Consolidated inputs and outputs calculation procedure')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA', N'es', N'Procedimiento calcular entradas y salidas consolidadas')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_TOTAL_INVENTORY_ON_PRODUCTION_DIFF', N'en', N'Alert: buffers: inventory on production reported differs from calculated value.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_BUFFERS_TOTAL_INVENTORY_ON_PRODUCTION_DIFF', N'es', N'Alerta: amortiguadores: inventario en producción reportado difiere del calculado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_BIG_REPLENISHMENT_TIME', N'en', N'Alert: buffer changes: replenishment time too large relative to the event length and preparation mode.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_BIG_REPLENISHMENT_TIME', N'es', N'Alert: cambios de amortiguadores: tiempo de reabastecimiento muy grande respecto a la duración y modo de preparación del evento.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_BUFFER_NOT_FOUND', N'en', N'Error: buffer changes: buffer not found (SKU + location).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_BUFFER_NOT_FOUND', N'es', N'Error: cambios de amortiguadores: amortiguador no encontrado (SKU + destino).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CDCALENDAR_NOT_FOUND', N'en', N'Error: buffer changes: location calendar not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CDCALENDAR_NOT_FOUND', N'es', N'Error: cambios de amortiguadores: el calendario de la ubicación no existe o está inactivo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_STEPS_INVALID', N'en', N'Error: buffer changes: change steps less than or equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_STEPS_INVALID', N'es', N'Error: cambios de amortiguadores: pasos de cambio menor o igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_STEPS_IS_NULL', N'en', N'Error: buffer changes: value required for steps.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_STEPS_IS_NULL', N'es', N'Error: cambios de amortiguadores: se requiere un valor para pasos.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_TYPE_NOT_FOUND', N'en', N'Error: buffer changes: invalid change type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_CHANGE_TYPE_NOT_FOUND', N'es', N'Error: cambios de amortiguadores: tipo de cambio inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_COUNT_EVENT_DUPL ', N'en', N'Times duplicated')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_COUNT_EVENT_DUPL ', N'es', N'Número de veces que se repite')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_ERROR_EVENTS', N'en', N'Events with errors')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_ERROR_EVENTS', N'es', N'Eventos con errores')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_DUPLICATED', N'en', N'Error: buffer changes: duplicated event; duplicates not loaded: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_DUPLICATED', N'es', N'Error: cambios de amortiguadores: evento duplicado; duplicados no cargados: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_END_DATE_ERROR', N'en', N'Error: buffer changes: event ending date earlier than event starting date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_END_DATE_ERROR', N'es', N'Error: cambios de amortiguadores: fecha de fin del evento anterior a fecha de inicio del evento.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_IS_NULL', N'en', N'Error: buffer changes: empty event.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_IS_NULL', N'es', N'Error: cambios de amortiguadores: evento vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_PROCESSED', N'en', N'Error: buffer changes: event already processed.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_PROCESSED', N'es', N'Error: cambios de amortiguadores: evento ya procesado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_START_DATE_ERROR', N'en', N'Error: buffer changes: event starting date earlier than preparation end date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_START_DATE_ERROR', N'es', N'Error: cambios de amortiguadores: fecha de inicio del evento anterior a fecha de fin de preparación.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_START_DATE_NULL', N'en', N'Error: buffer changes: empty event start date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_START_DATE_NULL', N'es', N'Error: cambios de amortiguadores: fecha de inicio del evento vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_STARTED', N'en', N'Error: buffer changes: the event has started and can''t be modified.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_EVENT_STARTED', N'es', N'Error: cambios de amortiguadores: el evento ha iniciado y no puede ser modificado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_CHANGES', N'en', N'Buffer changes: filter column was modified as a result of the update of the location.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_CHANGES', N'es', N'Cambios de amortiguadores: el campo filtro fue modificado como resultado de la actualización de la ubicación.')
GO
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_NOT_FOUND', N'en', N'Error: buffer changes: location not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_NOT_FOUND', N'es', N'Error: cambios de amortiguadores: ubicación no encontrada o inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_TYPE_INVALID', N'en', N'Error: buffer changes: invalid location type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_LOCATION_TYPE_INVALID', N'es', N'Error: cambios de amortiguadores: tipo de ubicación inválida.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_MODE_IS_NULL', N'en', N'Error: buffer changes: empty or invalid mode.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_MODE_IS_NULL', N'es', N'Error: cambios de amortiguadores: modo vacío o inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_OVERLAPPED_EVENTS_ERROR', N'en', N'Error: buffer changes: there are active overlapped events for the same buffer.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_OVERLAPPED_EVENTS_ERROR', N'es', N'Error: cambios de amortiguadores: hay eventos activos para el mismo amortiguador que se traslapan.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_DATE_INVALID', N'en', N'Error: buffer changes: preparation start date less than current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_DATE_INVALID', N'es', N'Error: cambios de amortiguadores: fecha de inicio de preparación menor a la fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_DATE_IS_NULL', N'en', N'Error: buffer changes: empty preparation start date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_DATE_IS_NULL', N'es', N'Error: cambios de amortiguadores: fecha de inicio de preparación vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_END_DATE_IS_NULL', N'en', N'Error: buffer changes: empty preparation end date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_END_DATE_IS_NULL', N'es', N'Error: cambios de amortiguadores: fecha de fin de preparación vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_END_ERROR', N'en', N'Error: buffer changes: preparation end date earlier than preparation start date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_END_ERROR', N'es', N'Error: cambios de amortiguadores: fecha de fin de preparación anterior a fecha de inicio de preparación.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_REAL_END_ERROR', N'en', N'Error: buffer changes: preparation time could not be enough for the buffer size.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_PREP_REAL_END_ERROR', N'es', N'Error: cambios de amortiguadores: tiempo de preparación puede no ser suficiente para el tamaño de amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REDU_EVENT_MODE_ERROR', N'en', N'Error: buffer changes: preparation mode can''t be ''Total'' for reduction events (those with a negative required change).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REDU_EVENT_MODE_ERROR', N'es', N'Error: cambios de amortiguadores: el modo de preparación no puede ser ''Total'' para eventos de reducción (aquellos con un cambio requerido negativo).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_A_INVALID', N'en', N'Error: buffer changes: required change plus buffer size is less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_A_INVALID', N'es', N'Error: cambios de amortiguadores: cambio requerido más tamaño de amortiguador menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_INVALID', N'en', N'Error: buffer changes: required change equal to zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_INVALID', N'es', N'Error: cambios de amortiguadores: cambio requerido igual a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_IS_NULL', N'en', N'Error: buffer changes: empty required change.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_IS_NULL', N'es', N'Error: cambios de amortiguadores: cambio requerido vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_P_INVALID', N'en', N'Error: buffer changes: required change less than -1.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_P_INVALID', N'es', N'Error: cambios de amortiguadores: cambio requerido menor a -1.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_R_INVALID', N'en', N'Error: buffer changes: required change less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_R_INVALID', N'es', N'Error: cambios de amortiguadores: cambio requerido menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_TYPE_ALERT', N'en', N'Alert: buffer changes: the buffer will be set to the minimum buffer size as a result of applying the SBC ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_REQ_CHANGE_TYPE_ALERT', N'es', N'Alerta: cambios de amortiguadores: el amortiguador tomará el valor del tamaño mínimo de amortiguador como resultado de aplicar el CPA ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SKU_CHANGES', N'en', N'Buffer changes: filter column was modified as a result of the update of the SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SKU_CHANGES', N'es', N'Cambios de amortiguadores: el campo filtro fue modificado como resultado de la actualización del SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SKU_IS_NULL', N'en', N'Error: buffer changes: empty SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SKU_IS_NULL', N'es', N'Error: cambios de amortiguadores: SKU vacío.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR', N'en', N'Error: buffer changes: the quantity of days in the preparation window is less than the quantity of defined steps.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR', N'es', N'Error: cambios de amortiguadores: la cantidad de días en la ventana de preparación es menor que la cantidad de pasos definidos.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SUCESSFUL_EVENTS', N'en', N'Events loaded successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_SUCESSFUL_EVENTS', N'es', N'Eventos cargados correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_UNEXPECTED_ERROR', N'en', N'Error: buffer changes: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_CHANGES_UNEXPECTED_ERROR', N'es', N'Error: cambios de amortiguadores: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND', N'en', N'Error: production orders: calendar not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND', N'es', N'Error: órdenes de producción: calendario no encontrado o inactivo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND', N'en', N'Error: production orders: family location not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND', N'es', N'Error: órdenes de producción: ubicación de la familia no encontrada o inactiva.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDCALENDAR_NOT_FOUND', N'en', N'Error: purchase orders: location calendar not found or inactive.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDCALENDAR_NOT_FOUND', N'es', N'Error: órdenes de compra: el calendario de la ubicación no existe o está inactivo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED', N'en', N'Error: purchase orders: duplicate purchase order code; duplicates not loaded: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED', N'es', N'Error: órdenes de compra: código de orden de compra duplicado; duplicados no cargados: ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED', N'en', N'Error: purchase orders: the purchase order is finished.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED', N'es', N'Error: órdenes de compra: la orden de compra está finalizada.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL', N'en', N'Duplicate purchase orders (not loaded)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL', N'es', N'Órdenes de compra duplicadas (no cargadas)')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_DESTINATION_NOT_FOUND', N'en', N'Error: purchase orders: destination location not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_DESTINATION_NOT_FOUND', N'es', N'Error: órdenes de compra: ubicación de destino no encontrado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ERROR_ORDERS', N'en', N'Purchase orders with errors (not loaded).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ERROR_ORDERS', N'es', N'Órdenes de compra con errores (no cargadas).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL', N'en', N'Error: purchase orders: invalid location type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL', N'es', N'Error: órdenes de compra: tipo de ubicación de destino inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND', N'en', N'Error: purchase orders: supplier not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND', N'es', N'Error: órdenes de compra: proveedor no encontrado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL', N'en', N'Error: purchase orders: invalid supplier location type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL', N'es', N'Error: órdenes de compra: tipo de ubicación del proveedor inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_IS_NULL', N'en', N'Error: purchase orders: need date is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_IS_NULL', N'es', N'Error: órdenes de compra: la fecha de necesidad está vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE', N'en', N'Error: purchase orders: need date earlier than order creation date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE', N'es', N'Error: órdenes de compra: la fecha de necesidad es anterior a la fecha de creación de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME', N'en', N'Error: purchase orders: need date earlier than order creation date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME', N'es', N'Error: órdenes de compra: la fecha de necesidad es anterior a la fecha de creación de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE', N'en', N'Error: purchase orders: need date earlier than update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE', N'es', N'Error: órdenes de compra: la fecha de necesidad es anterior a la fecha de actualización de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_NOWD', N'en', N'Error: purchase orders: need date is a non working day.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_NECESSITY_DATE_NOWD', N'es', N'Error: órdenes de compra: la fecha de necesidad cae en día no laboral.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE', N'en', N'Error: purchase orders: order creation date later than update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE', N'es', N'Error: órdenes de compra: la fecha de creación de la orden es posterior a la fecha de actualización.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL', N'en', N'Error: purchase orders: order creation date is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL', N'es', N'Error: órdenes de compra: la fecha de creación de la orden esta vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_NOWD', N'en', N'Error: purchase orders: order creation date is a non working day.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_CREATION_DATE_NOWD', N'es', N'Error: órdenes de compra: la fecha de creación de la orden es día no laboral.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_VALUE_LT_0', N'en', N'Error: purchase orders: order value is less than zero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_ORDER_VALUE_LT_0', N'es', N'Error: órdenes de compra: valor de la orden es menor a cero.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PENDING_QUANTITY_ALERT', N'en', N'Alert: purchase orders: sum of quantity left of the buffer''s orders is different to the buffer''s inventory on purchasing.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PENDING_QUANTITY_ALERT', N'es', N'Alerta: órdenes de compra: la suma de las cantidades pendientes de las órdenes del amortiguador es diferente al inventario en compras del amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PENDING_QUANTITY_INVAL', N'en', N'Error: purchase orders: invalid pending quantity.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PENDING_QUANTITY_INVAL', N'es', N'Error: órdenes de compra: cantidad pendiente inválida.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL', N'en', N'Error: purchase orders: promised due date is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL', N'es', N'Error: órdenes de compra: la fecha prometida de entrega esta vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE', N'en', N'Error: purchase orders: promised due date earlier than or equal to order creation date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE', N'es', N'Error: órdenes de compra: la fecha prometida de entrega es anterior o igual a la fecha de creación de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME', N'en', N'Error: purchase orders: promised due date earlier than or equal to order creation date. ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME', N'es', N'Error: órdenes de compra: la fecha prometida de entrega es anterior o igual a la fecha de creación de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE', N'en', N'Error: purchase orders: promised due date earlier than update date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE', N'es', N'Error: órdenes de compra: la fecha prometida de entrega es anterior a la fecha de actulización de la orden.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD', N'en', N'Error: purchase orders: promised due date is a non working day.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD', N'es', N'Error: órdenes de compra: la fecha prometida de entrega es día no laboral.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS', N'en', N'Error: purchase orders: associated buffer not found (SKU + destination).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS', N'es', N'Error: órdenes de compra: amortiguador asociado no encontrado (SKU + destino).')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SKU_NULL', N'en', N'Error: purchase orders: empty SKU.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SKU_NULL', N'es', N'Error: órdenes de compra: SKU vacío.')
GO
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SUCESSFUL_ORDERS', N'en', N'Purchase orders loaded.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_SUCESSFUL_ORDERS', N'es', N'Órdenes de compras cargadas.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_TYPE_INVAL', N'en', N'Error: purchase orders: invalid purchase order type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_TYPE_INVAL', N'es', N'Error: órdenes de compra: tipo de orden de compra inválido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNEXPECTED_ERROR', N'en', N'Error: purchase orders: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNEXPECTED_ERROR', N'es', N'Error: órdenes de compra: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNITS_IS_NULL', N'en', N'Error: purchase orders: measurement unit empty or not found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNITS_IS_NULL', N'es', N'Error: órdenes de compra: la unidad de medición está vacía o no fue encontrada.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNITS_LT_UNITS_OLD', N'en', N'Error: purchase orders: the new measurement unit''s inventory precision must be greater than or equals to the old one.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UNITS_LT_UNITS_OLD', N'es', N'Error: órdenes de compra: la precisión del inventario de la nueva unidad de medición deben ser mayor o igual a la anterior.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_GT_NOW', N'en', N'Error: purchase orders: update date must be earlier than or equal to the current date.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_GT_NOW', N'es', N'Error: órdenes de compra: la fecha de actualización debe ser anterior o igual a la fecha actual.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD', N'en', N'Error: purchase orders: the new update date must be equal or later than the one previously reported.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD', N'es', N'Error: órdenes de compra: la nueva fecha de actualización debe igual o posterior a la reportada anteriormente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_NULL', N'en', N'Error: purchase orders: update date is empty.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DEX_PURCHASE_UPDATE_DATE_NULL', N'es', N'Error: órdenes de compra: la fecha de actualización está vacía.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DISTRIBUTE_AVAILABLE_QUANTITY_ERROR', N'en', N'Error: available quantity distribution: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'DISTRIBUTE_AVAILABLE_QUANTITY_ERROR', N'es', N'Error: distribuir cantidad disponible: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ERROR_LOCATION_DATA_EXCHANGE', N'en', N'Locations errors')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'ERROR_LOCATION_DATA_EXCHANGE', N'es', N'Errores de ubicaciones')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR', N'en', N'Invalid Filter. No active buffers found.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR', N'es', N'Filtro inválido. No se encontró ningún amortiguador activo.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_ERROR', N'en', N'Invalid Filter. Overlapping events.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_ERROR', N'es', N'Filtro inválido. Los eventos se traslapan.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR', N'en', N'The SQL filter structure is not well built. Please contact the administrator.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR', N'es', N'La estructura SQL del filtro no está bien construida. Por favor contacte al administrador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_ERROR', N'en', N'Error: buffer adjustment suggestion generation: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_ERROR', N'es', N'Error: generación de sugerencias de ajuste de amortiguador: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_NOTIFICATION', N'en', N'As a result of some suggestions rejection, Focuss SCM analyzed the affected buffers again and generated new suggestions, which are already available in the buffers adjustment view.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_NOTIFICATION', N'es', N'Como resultado del rechazo de algunas sugerencias, Focuss SCM analizó nuevamente los amortiguadores afectados y generó nuevas sugerencias, que puede ver en la vista ajuste de amortiguadores.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_SUCCESS', N'en', N'Buffer adjustment suggestions generated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GEN_ADJUSTMENT_SUGGESTS_SUCCESS', N'es', N'Sugerencias de ajuste de amortiguadores generadas correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_CALCULATE_PRIORITY_ERROR', N'en', N'Error: production order priority: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_CALCULATE_PRIORITY_ERROR', N'es', N'Error: prioridad de órdenes de producción: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_CALCULATE_PRIORITY_SUCESS', N'en', N'Priorities calculated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_CALCULATE_PRIORITY_SUCESS', N'es', N'Prioridades calculadas correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_PURCHASE_PRIORITY_ERROR', N'en', N'Error: purchase order priority: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_PURCHASE_PRIORITY_ERROR', N'es', N'Error: prioridad de órdenes de compra: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_PURCHASE_PRIORITY_SUCCESS', N'en', N'Error: purchase order priority: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_PURCHASE_PRIORITY_SUCCESS', N'es', N'Error: prioridad de órdenes de compra: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_STOCK_PURCHASE_PRIORITY_ERROR', N'en', N'Error: stock purchase order priority: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_STOCK_PURCHASE_PRIORITY_ERROR', N'es', N'Error: prioridad de órdenes de compra tipo inventario: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_STOCK_PURCHASE_PRIORITY_SUCCESS', N'en', N'Error: stock purchase order priority: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'GET_STOCK_PURCHASE_PRIORITY_SUCCESS', N'es', N'Error: prioridad de órdenes de compra tipo inventario: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'LOCATION_TYPE_CAN_NOT_CHANGED', N'en', N'Error: locations: location type isn''t updatable.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'LOCATION_TYPE_CAN_NOT_CHANGED', N'es', N'Error: ubicaciones: tipo de ubicación no es actualizable.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'LOCATION_TYPE_NOT_FOUND', N'en', N'Error: locations: invalid location type.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'LOCATION_TYPE_NOT_FOUND', N'es', N'Error: unicaciones: tipo de ubicación no válido.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR', N'en', N'Error: buffer adjustment suggestion management: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR', N'es', N'Error: gestión de sugerencias de ajuste de amortiguador: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS', N'en', N'Buffer adjustment suggestions managed successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS', N'es', N'Sugerencias de ajuste de amortiguadores gestionadas correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGED_BUFFER_AMOUNT', N'en', N'Managed buffers.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'MANAGED_BUFFER_AMOUNT', N'es', N'Amortiguadores gestionados.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'NON_POSITIVE_CONVERSION_FACTOR_ERROR', N'en', N'Invalid factor for buffer.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'NON_POSITIVE_CONVERSION_FACTOR_ERROR', N'es', N'Factor inválido para el amortiguador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZATION_ALERTS', N'en', N'Alerts optimizing buffers')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZATION_ALERTS', N'es', N'Alertas al optimizar amortiguadores')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_AUTOMATICALLY_ERROR', N'en', N'Error: automatic suggestions optimization: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_AUTOMATICALLY_ERROR', N'es', N'Error: optimización automática de sugerencias: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_MANUALLY_ERROR', N'en', N'Error: manual suggestions optimization: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_MANUALLY_ERROR', N'es', N'Error: optimización manual de sugerencias: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_NON_REQUIRED', N'en', N'Optimization is not necessary: the required quantity is equal to the target value.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZE_SUGGESTIONS_NON_REQUIRED', N'es', N'No es necesario optimizar: la cantidad objetivo es igual a la cantidad disponible.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZED_BUFFERS_TITLE', N'en', N'Origin Buffer&nbsp;&nbsp;&nbsp;&nbsp;Site Inventory&nbsp;&nbsp;&nbsp;&nbsp;Optimized Buffers</br></br>')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'OPTIMIZED_BUFFERS_TITLE', N'es', N'Amortiguador de Origen&nbsp;&nbsp;&nbsp;&nbsp;Inventario Sitio&nbsp;&nbsp;&nbsp;&nbsp;Amortiguadores Optimizados</br></br>')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PROCESS_PENDING_BUFFER_CHANGES_FAILED', N'en', N'Error: pending buffer changes processing: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PROCESS_PENDING_BUFFER_CHANGES_FAILED', N'es', N'Error: procesamiento de cambios de amortiguadores pendientes: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PROCESS_PENDING_BUFFER_CHANGES_SUCCEED', N'en', N'Pending buffer changes processed successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PROCESS_PENDING_BUFFER_CHANGES_SUCCEED', N'es', N'Cambios de amortiguadores pendientes procesados correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PRODUCTION_BUFFER_TOUCH_TIME_VALIDATION', N'en', N'The Priority and color were not updated: touch time equal to production buffer.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PRODUCTION_BUFFER_TOUCH_TIME_VALIDATION', N'es', N'La prioridad y color no se actualizaron: tiempo de toque igual al amortiguador de producción.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PRODUCTION_ORDERS_ORPHANS', N'en', N'Orphan production orders')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'PRODUCTION_ORDERS_ORPHANS', N'es', N'Órdenes de producción huérfanas')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_ERRORS', N'en', N'Error: quarantine purchasing orders: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_ERRORS', N'es', N'Error: órdenes de compra en cuarentena: error inesperado.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED', N'en', N'No purchasing orders quarantined.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED', N'es', N'No se pusieron órdenes de compra en cuarentena. ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_SUCESSFUL', N'en', N'Purchasing orders quarantined successfully')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'QUARANTINE_PURCHASE_ORDERS_SUCESSFUL', N'es', N'Órdenes de compra puestas en cuarentena correctamente')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RECORDS_FOR_BUFFER_ANALYSIS_MESSAGE', N'en', N'The number of records analyzed for buffer adjustment has been limited to')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RECORDS_FOR_BUFFER_ANALYSIS_MESSAGE', N'es', N'La cantidad de registros analizados para ajuste de amortiguadores se ha limitado a')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_NON_USED_INDICATORS_ERROR', N'en', N'Error deleting unused indicators.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_NON_USED_INDICATORS_ERROR', N'es', N'Error borrando indicadores en desuso.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_NON_USED_INDICATORS_SUCCESS', N'en', N'Indicators deleted successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_NON_USED_INDICATORS_SUCCESS', N'es', N'Indicadores borrados correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_VIEW_INDICATOR_ERROR', N'en', N'Error Deleting the view indicator')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_VIEW_INDICATOR_ERROR', N'es', N'Error borrando el indicador de la vista')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_VIEW_INDICATOR_SUCCESS', N'en', N'Indicator deleted successfully')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'REMOVE_VIEW_INDICATOR_SUCCESS', N'es', N'Indicador borrado correctamente')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RESET_BUFFER_DEFAULT_VALUES_ERROR', N'en', N'Error reseting buffer default values. Please contact the administrator.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RESET_BUFFER_DEFAULT_VALUES_ERROR', N'es', N'Error reiniciando los valores por defecto del amortiguador. Por favor contacte al administrador.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RESET_BUFFER_DEFAULT_VALUES_SUCCESFULLY', N'en', N'Successfull buffer default values reset. ')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'RESET_BUFFER_DEFAULT_VALUES_SUCCESFULLY', N'es', N'Se reiniciaron los valores del amortiguador correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'SUCESSFULL_LOCATION_DATA_EXCHANGE', N'en', N'Locations loaded successfully')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'SUCESSFULL_LOCATION_DATA_EXCHANGE', N'es', N'Ubicaciones cargadas correctamente')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_HISTORY_SUCCESS', N'en', N'Buffer History inserted successfully')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_HISTORY_SUCCESS', N'es', N'Historial de amortiguadores insertado exitosamente')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS', N'en', N'Error: update buffer orders: unexpected error.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS', N'es', N'Error: actualizar órdenes del amortiguador: error inesperado.')
GO
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL', N'en', N'Orders priority updated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL', N'es', N'Prioridad de las órdenes actualizada correctamente.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'VALIDATE_CUSTOM_FIELDS_USED_IN_BUFFER_IND_ERROR', N'en', N'Error validating custom fields used in buffer indicators.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'VALIDATE_CUSTOM_FIELDS_USED_IN_BUFFER_IND_ERROR', N'es', N'Error validando los campos personalizados usados en los  indicadores de amortiguadores.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'VALIDATE_CUSTOM_FIELDS_USED_IN_BUFFER_IND_SUCCESS', N'en', N'Custom fields used in buffer indicators validated successfully.')
INSERT [dbo].[TFSCM_COM_MESSAGE] ([CDMESSAGE], [LANGUAGE], [TEXT]) VALUES (N'VALIDATE_CUSTOM_FIELDS_USED_IN_BUFFER_IND_SUCCESS', N'es', N'Campos personalizados usados en indicadores de amortiguadores validados satisfactoriamente.')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340259322')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340316316')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340350137')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340259322')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340316316')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340350137')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340259322')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340316316')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340350137')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340259322')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340316316')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1428340350137')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1462461419120')
INSERT [dbo].[TFSCM_COM_NOTIFICATION_DATA_EXCHANGE_USERS] ([CDUSER], [CREATION_DATE]) VALUES (N'admin', N'1462461431620')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (0, N'DEBUG_MODE', N'debug_mode', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (1, N'LICENSE_EXPIRATION_ALERT_DAYS', N'license_expiration_alert_days', N'30', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (1, N'LICENSE_PATH', N'license_path', N'D:/Focuss/Folders/Empresa/License', N'P')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'END_POINT_DATA_EXCHANGE_SERVICE', N'end_point_data_exchange_service', N'https://servidor.focuss.co:puerto/DataExchangeServiceService/DataExchangeService', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'END_POINT_JOB_SERVICE', N'end_point_job_service', N'https://servidor.focuss.co:puerto/JobServiceService/JobService', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'HISTORY', N'history', N'D:/Focuss/Folders/Empresa/History', N'P')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'INPUT', N'input', N'D:/Focuss/Folders/Empresa/Input', N'P')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'MESSAGES_AFTER_DATAEXCHANGE', N'messages_after_data_exchange', N'Y', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'MINUTES_TO_DATA_EXCHANGE', N'minutes_to_data_exchange', N'10', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'OUTPUT', N'output', N'D:/Focuss/Folders/Empresa/Output', N'P')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (2, N'TIMER_TO_DATA_EXCHANGE', N'timer_to_data_exchange', N'2', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'DATA_EXCHANGE_TO', N'data_exchange_to', N'soporte@simplesolutions.com.co', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'EMAIL_ADMIN_USER', N'email_admin_user', N'soporte@simplesolutions.com.co', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'SMTP_HOST', N'smtp_host', N'mail.simplesolutions.com.co', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'SMTP_PASSWORD', N'smtp_password', N'12345', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'SMTP_PORT', N'smtp_port', N'587', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (3, N'SMTP_USER', N'smtp_user', N'soporte@simplesolutions.com.co', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'IDLE_TIME', N'idle_time', N'20', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'PASSWORD_MIN_LENGHT', N'password_min_lenght', N'8', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'PASSWORD_REQUIERES_FIRST_CHANGE', N'password_requires_first_change', N'Y', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'PASSWORD_VALIDITY_TIME', N'password_validity_time', N'30', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'SPECIAL_CHARS', N'special_chars', N'=,_,@,$,%,#,&,.,?,Â¿,!,Â¡', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (4, N'USERNAME_MIN_LENGHT', N'username_min_lenght', N'8', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_CDPERMISSION_NO_LIMIT', N'export_cdpermission_no_limit', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_DECIMAL_SEPARATOR', N'export_decimal_separator', N'.', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_LIMIT_MAX', N'export_limit_max', N'5000', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_PATH', N'export_path', N'D:/Focuss/Folders/Empresa/Export', N'P')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_THOUSAND_SEPARATOR', N'export_thousand_separator', N',', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (5, N'EXPORT_URL_CHART', N'export_url_chart', N'https://servidor.focuss.co:puerto/highcharts-export-web/', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'DATABASES_BACKUP_PATH', N'databases_backup_path', N'D:/Focuss/Folders/Empresa/Backups', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'DATABASES_BACKUP_PATH_FILES', N'databases_backup_path_files', N'D:/Focuss/Folders/Empresa/Backups', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'DATABASES_BACKUP_PATH_TMP', N'databases_backup_path_tmp', N'D:/MSSQL DBs/', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'DEFAULT_LANGUAGE', N'default_language', N'en', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'GENERAL_GROUP_BY_MAX', N'general_group_by_max', N'7000', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'IS_LARGE_IMPLEMENTATION', N'is_large_implementation', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'MAX_ROWS', N'max_rows', N'10000', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (6, N'TIME_ZONE', N'time_zone', N'-05:00', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (7, N'DAYS_TO_KEEP_PRODUCTION_ORDERS_IN_QUARANTINE', N'days_to_keep_po_in_quarantine', N'0', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (8, N'DAYS_TO_KEEP_PURCHASING_ORDERS_IN_QUARANTINE', N'days_to_keep_pu_in_quarantine', N'0', N'N')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (9, N'ENABLE_DELETING_PHYSICAL_BUFFERS', N'enable_deleting_physical_buffers', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (9, N'ENABLE_MANUAL_DATA_MANAGEMENT_BUFFERS', N'enable_manual_data_management_buffers', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (9, N'MANDATORY_ENTRY_ADJUSTMENT_REJECTION_CAUSE', N'mandatory_entry_adjustment_rejection_cause', N'Y', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (9, N'USE_INVENTORY_ON_HAND_AUTO_REPLENISH_OPTIMIZATIONS', N'use_inventory_on_hand_auto_replenish_optimizations', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PARAMS] ([CDCOMPONENT], [CDPARAM], [DSPARAM], [PARAM_VALUE], [PARAM_TYPE]) VALUES (9, N'USES_REPLENISHMENT_OPTIMIZER', N'uses_replenishment_optimizer', N'N', N'S')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'100', N'show_production_module', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1000', N'show_purchases_module', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1001', N'show_section_purchases_a_manage_orders', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1002', N'purchases_notes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1003', N'purchases_mark_as_managed_color_changes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1004', N'purchases_edit_custom_fields', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'1005', N'purchases_can_remove_quarantine_orders', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'101', N'show_section_pdn_a_manage_orders', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'102', N'show_section_pdn_b_value_orders_overdue', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'103', N'show_section_pdn_c_perc_deliv_in_time', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'104', N'show_section_pdn_j_color_distribution', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'105', N'show_section_pdn_d_early_overd_releases', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'106', N'show_section_pdn_e_production_family', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'107', N'show_section_pdn_f_location', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'108', N'show_section_pdn_g_custom_field', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'109', N'show_section_pdn_h_frequent_causes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'110', N'show_section_pdn_i_calendar', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'111', N'create_section_pdn_b_value_orders_overdue', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'112', N'create_section_pdn_c_perc_deliv_in_time', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'113', N'create_section_pdn_j_color_distribution', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'114', N'create_section_pdn_d_early_overd_releases', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'115', N'order_notes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'118', N'productionorders_edit_custom_fields', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'119', N'productionorders_mark_as_managed_color_changes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'12', N'add_cli_production_family', N'G', N'Y', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'120', N'productionorders_assign_production_problem_cause', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'121', N'productionorders_modify_order_progress_percentage', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'122', N'productionorders_can_remove_quarantine_orders', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'123', N'productionorders_assign_release_problem_cause', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'200', N'show_management_module', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'201', N'show_section_mng_a_statistics', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'202', N'show_section_mng_b_log', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'203', N'show_section_mng_c_params', N'G', N'N', N'Y')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'204', N'show_section_mng_d_licence_load', N'G', N'N', N'Y')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'205', N'show_section_mng_e_interfaces', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'206', N'show_section_mng_f_databases', N'G', N'N', N'Y')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'207', N'show_section_mng_g_jobs', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'208', N'show_section_mng_h_users', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'209', N'show_section_mng_i_delete_history', N'G', N'N', N'Y')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'300', N'show_users_module', N'G', N'Y', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'301', N'show_section_hlp_preferences', N'G', N'Y', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'400', N'show_section_lic_create_license', N'G', N'Y', N'Y')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'501', N'can_manage_rows', N'G', N'Y', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'502', N'cannot_manage_rows', N'G', N'Y', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'601', N'field_appears_enabled', N'F', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'602', N'field_appears_disabled', N'F', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'700', N'export_no_limit', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'701', N'buffers_edit_custom_fields', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'702', N'manage_buffers_data', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'703', N'edit_buffers_size', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'704', N'buffer_notes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'705', N'buffers_replenishment_action', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'706', N'buffers_mark_as_managed_color_changes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'707', N'buffers_replenishment_problem_action', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'800', N'show_stock_module', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'801', N'show_section_stk_a_buffer_family', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'802', N'show_section_stk_b_units', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'803', N'show_section_stk_a_report', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'804', N'buffers_adjustment_suggestion', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'805', N'reboot_days_without_outs_count', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'806', N'manage_adjustment_suggestions_tr', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'807', N'show_section_manage_buffer_changes', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'808', N'show_buffer_history', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'809', N'show_section_automation_rules', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'901', N'show_buffer_c_indicator_dca', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'902', N'create_buffer_c_indicator_dca', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'903', N'show_buffer_a_indicator_va', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'904', N'create_buffer_a_indicator_va', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'905', N'show_buffer_b_indicator_vi', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'906', N'create_buffer_b_indicator_vi', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'907', N'show_buffer_d_indicator_esaa', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION], [DSPERMISSION], [CDTYPE], [IS_SYSTEM], [IS_SUPER_USER]) VALUES (N'908', N'create_buffer_d_indicator_esaa', N'G', N'N', N'N')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (1, N'ADMINISTRATOR')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (2, N'SUPERUSER')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (3, N'PRODUCTION VISUALIZATION')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (4, N'PRODUCTION PROGRAMMING')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (5, N'PRODUCTION SETTINGS')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (6, N'INVENTORIES VISUALIZATION')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (7, N'INVENTORIES PROGRAMMING')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (8, N'INVENTORIES SETTINGS')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (9, N'PURCHASING VISUALIZATION')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (10, N'PURCHASING PROGRAMMING')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (11, N'PURCHASING SETTINGS')
INSERT [dbo].[TFSCM_COM_ROL] ([CDROL], [DSROL]) VALUES (12, N'DATA EXCHANGE')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'100')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1000')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1001')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1002')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1003')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1004')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'1005')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'101')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'102')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'103')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'104')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'105')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'106')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'107')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'108')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'109')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'110')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'111')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'112')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'113')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'114')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'115')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'118')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'119')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'120')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'121')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'122')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'123')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'200')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'201')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'202')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'203')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'204')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'205')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'206')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'207')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'208')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'209')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'700')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'701')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'702')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'703')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'704')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'705')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'706')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'707')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'800')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'801')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'802')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'803')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'804')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'805')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'806')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'807')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'808')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'809')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'901')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'902')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'903')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'904')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'905')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'906')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'907')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (1, N'908')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'100')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1000')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1001')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1002')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1003')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1004')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'1005')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'101')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'102')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'103')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'104')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'105')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'106')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'107')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'108')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'109')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'110')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'111')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'112')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'113')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'114')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'115')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'118')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'119')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'120')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'121')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'122')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'123')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'200')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'201')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'202')
GO
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'205')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'207')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'208')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'700')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'701')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'702')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'703')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'704')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'705')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'706')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'707')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'800')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'801')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'802')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'803')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'804')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'805')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'806')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'807')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'808')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'809')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'901')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'902')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'903')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'904')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'905')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'906')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'907')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (2, N'908')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'100')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'101')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'102')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'103')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'104')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'105')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (3, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'111')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'112')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'113')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'114')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'115')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'118')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'119')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'120')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'121')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'122')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (4, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'106')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'107')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'108')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'109')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'110')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (5, N'802')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'800')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'803')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'808')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'901')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'903')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'905')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (6, N'907')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'400')
GO
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'701')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'704')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'705')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'706')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'707')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'804')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'805')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'806')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'902')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'904')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'906')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (7, N'908')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'107')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'108')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'109')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'110')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'702')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'703')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'801')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'802')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'807')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (8, N'809')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'1000')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'1001')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (9, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'1002')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'1003')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'1004')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'1005')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (10, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'107')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'108')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'110')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'602')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (11, N'802')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'12')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'200')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'202')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'207')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'300')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'301')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'400')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'501')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'502')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'601')
INSERT [dbo].[TFSCM_COM_ROL_PERM] ([CDROL], [CDPERMISSION]) VALUES (12, N'602')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (1, N'table_production_orders', N'TFSCM_CLI_PRODUCTION_ORDERS', N'TFSCM_CLI_PRODUCTION_ORDERS_TEMP', N'502', N'502', N'Y', CAST(N'1901-01-01T00:00:00.000' AS DateTime), N'ORDER_MODIFY_DATE', N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (2, N'table_production_family', N'TFSCM_CLI_PRODUCTION_FAMILY', N'', N'501', N'501', N'N', NULL, NULL, N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (3, N'table_licenses', N'TFSCM_LIC_LICENSES_VIEW', NULL, N'501', N'501', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (4, N'table_statistics', N'TFSCM_COM_STATISTICS', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (5, N'table_location', N'TFSCM_CLI_LOCATION', N'TFSCM_CLI_LOCATION_TEMP', N'501', N'501', N'Y', CAST(N'1901-01-01T00:00:00.000' AS DateTime), N'LOCATION_MODIFY_DATE', N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (6, N'table_jobs', N'TFSCM_COM_JOBS', NULL, N'501', N'501', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (7, N'table_params', N'TFSCM_COM_PARAMS', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (8, N'table_custom_field', N'TFSCM_COM_COL_TABLE', NULL, N'501', N'501', N'N', NULL, NULL, N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (9, N'table_frequent_causes', N'TFSCM_CLI_CAUSES', NULL, N'501', N'501', N'N', NULL, NULL, N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (10, N'table_log', N'TFSCM_COM_LOG', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (11, N'table_buffer', N'TFSCM_CLI_BUFFER', N'TFSCM_CLI_BUFFER_TEMP', N'502', N'502', N'Y', CAST(N'1901-01-01T00:00:00.000' AS DateTime), N'UPDATE_MOVEMENTS', N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (12, N'table_buffer_family', N'TFSCM_CLI_BUFFER_FAMILY', NULL, N'501', N'501', N'N', NULL, NULL, N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (13, N'table_units', N'TFSCM_CLI_UNITS', NULL, N'501', N'501', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (14, N'table_buffer_history', N'TFSCM_CLI_BUFFER_HISTORY', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (15, N'table_buffer_replenishment_history', N'TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (16, N'table_buffer_adj_replenishment_history', N'TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY', N'NULL', N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (17, N'table_user_row_edit', N'TFSCM_COM_USER_ROW_EDIT', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (18, N'table_delete_history', N'TFSCM_COM_DELETE_HISTORY', NULL, N'501', N'501', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (19, N'table_purchase_orders', N'TFSCM_CLI_PURCHASE_ORDERS', N'TFSCM_CLI_PURCHASE_ORDERS_TEMP', N'502', N'502', N'Y', CAST(N'1901-01-01T00:00:00.000' AS DateTime), N'UPDATE_DATE', N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (20, N'table_buffer_changes', N'TFSCM_CLI_BUFFER_CHANGES', N'TFSCM_CLI_BUFFER_CHANGES_TEMP', N'501', N'501', N'N', CAST(N'1901-01-01T00:00:00.000' AS DateTime), N'PREPARATION_START_DATE', N'Y')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (21, N'table_export_buffers', N'TFSCM_CLI_BUFFER', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (22, N'table_buffer_changes_steps', N'TFSCM_CLI_BUFFER_CHANGES_STEPS', NULL, N'502', N'502', N'N', NULL, NULL, N'N')
INSERT [dbo].[TFSCM_COM_TABLES] ([CDTABLE], [DSTABLE], [TABLE_NAME], [TABLE_NAME_TEMP], [CDPERMISSION_ADD], [CDPERMISSION_DELETE], [APPLY_CUSTOM_COL], [UPGRADE_TABLE_DATE], [ERP_DATE_COLUMN], [USED_IN_PERMISSION]) VALUES (23, N'table_automation_rules', N'TFSCM_CLI_AUTOMATION_RULES', NULL, N'501', N'501', N'N', NULL, NULL, N'Y')
INSERT [dbo].[TFSCM_COM_USER_ROL] ([CDROL], [USER_ID]) VALUES (1, 1)
SET IDENTITY_INSERT [dbo].[TFSCM_COM_USERS] ON 

INSERT [dbo].[TFSCM_COM_USERS] ([USERNAME], [PASSWORD], [DSEMAIL], [WINDOW_OPEN_MODE], [IS_SUPER_USER], [DEFAULT_LANG], [LAST_PASSWORD_CHANGE], [USER_ID]) VALUES (N'admin', N'TTJUV1Y0UnhKUmVqbEJoajVjVDNXTXhsTmFrMTIwd3M=', N'admin@simplesolutions.com.co', N'S', N'Y', N'en', CAST(N'2014-10-10T10:16:14.673' AS DateTime), 1)
SET IDENTITY_INSERT [dbo].[TFSCM_COM_USERS] OFF
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'CDDESTINATION', N'destination', N'destination', N'Y', 4, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'CDFAMILY', N'cd family', N'cd family', N'Y', 7, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'CDORDER', N'OP Code', N'OP Code', N'X', 1, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'CDORDER_TYPE', N'order type', N'order type', N'X', 2, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'ORDER_MODIFY_DATE', N'modify date', N'modify date', N'Y', 10, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'PENDING_AMOUNT', N'pending amount', N'pending amount', N'Y', 9, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'PROMISED_DELIVERY_DATE', N'promised delivery', N'promised delivery', N'Y', 5, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'REAL_RELEASE_DATE', N'real release', N'real release', N'Y', 6, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'SKU', N'sku2', N'sku2', N'Y', 3, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (1, N'TOTAL_AMOUNT', N'Total_Amount', N'Total_Amount', N'Y', 8, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (2, N'CDLOCATION', N'cdlocationER', N'Location''s code', N'X', 1, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (2, N'LOCATION_MODIFY_DATE', N'Location''s Modify Date', N'Modify_Date', N'Y', 3, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (2, N'LOCATION_TYPE', N'location typeER', N'location typeER', N'X', 2, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'BUFFER', N'BUFFER', N'buffer', N'N', 6, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'CONSOLIDATED_REPLENISHMENT', N'CONSOLIDATED_REPLENISHMENT', N'consolidated_replenishment', N'Y', 7, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'CONSUMPTION', N'CONSUMPTION', N'consumption', N'Y', 8, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'FAMILY', N'FAMILY', N'family', N'Y', 3, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'LOCATION', N'LOCATION', N'location', N'X', 2, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'ORIGIN_LOCATION', N'ORIGIN_LOCATION', N'originLocation', N'Y', 4, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'REPLENISHMENT_TIME', N'REPLENISHMENT_TIME', N'replenishmentTime', N'Y', 5, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'SKU', N'SKU', N'sku', N'X', 1, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'TOTAL_INVENTORY_ON_PRODUCTION', N'TOTAL_INVENTORY_ON_PRODUCTION', N'totalInventoryOnProduction', N'Y', 12, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'TOTAL_INVENTORY_ON_PURCHASING', N'TOTAL_INVENTORY_ON_PURCHASING', N'totalInventoryOnPurchasing', N'Y', 11, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'TOTAL_INVENTORY_ON_SITE', N'TOTAL_INVENTORY_ON_SITE', N'totalInventoryOnSite', N'Y', 9, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'TOTAL_INVENTORY_ON_TRANSIT', N'TOTAL_INVENTORY_ON_TRANSIT', N'totalInventoryOnTransit', N'Y', 10, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (3, N'UPDATE_MOVEMENTS', N'UPDATE_MOVEMENTS', N'updateMovements', N'Y', 13, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (4, N'APPROVED_REPLENISHMENT', N'APPROVED_REPLENISHMENT', N'APPROVED_REPLENISHMENT', N'X', 3, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (4, N'CDLOCATION', N'CDLOCATION', N'location', N'X', 2, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (4, N'SKU', N'SKU', N'sku', N'X', 1, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'CDPURCHASE_ORDER', N'PO Code', N'PO Code', N'X', 1, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'DESTINATION', N'Destination', N'Destination', N'Y', 4, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'PENDING_QUANTITY', N'pending amount', N'pending amount', N'Y', 7, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'PO_TYPE', N'Type', N'Type', N'X', 2, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'PROMISED_DELIVERY_DATE', N'promised delivery', N'promised delivery', N'Y', 6, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'SKU', N'SKU ', N'SKU ', N'Y', 3, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'SUPPLIER', N'Supplier', N'Supplier', N'X', 5, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (5, N'UPDATE_DATE', N'Update date', N'Update date', N'Y', 8, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'CHANGE_STEPS', N'Steps', N'Steps', N'Y', 6, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'CHANGE_TYPE', N'Type', N'Type', N'Y', 4, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'EVENT', N'Event', N'Event', N'X', 1, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'EVENT_ENDING_DATE', N'Event Ending Date', N'Event Ending Date', N'Y', 10, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'EVENT_STARTING_DATE', N'Event Starting Date', N'Event Starting Date', N'Y', 9, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'LOCATION_CHG', N'Location', N'Location', N'Y', 3, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'MODE', N'Mode', N'Mode', N'Y', 11, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'PREPARATION_END_DATE', N'Preparation End Date', N'Preparation End Date', N'Y', 8, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'PREPARATION_START_DATE', N'Preparation Start Date.', N'Preparation Start Date.', N'Y', 7, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'REQUIRED_CHANGE', N' Required Change', N' Required Change', N'Y', 5, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (6, N'SKU_CHG', N'SKU', N'SKU', N'Y', 2, N'Y', N'')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (7, N'LOCATION', N'LOCATION', N'LOCATION', N'X', 2, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (7, N'SKU', N'SKU', N'SKU', N'X', 1, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'BUFFER', N'BUFFER', N'buffer', N'N', 6, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'CONSOLIDATED_REPLENISHMENT', N'CONSOLIDATED_REPLENISHMENT', N'consolidated_replenishment', N'Y', 7, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'CONSUMPTION', N'CONSUMPTION', N'consumption', N'Y', 8, N'Y', N' ')
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'FAMILY', N'FAMILY', N'family', N'Y', 3, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'LOCATION', N'LOCATION', N'location', N'X', 2, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'ORIGIN_LOCATION', N'ORIGIN_LOCATION', N'originLocation', N'Y', 4, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'REPLENISHMENT_TIME', N'REPLENISHMENT_TIME', N'replenishmentTime', N'Y', 5, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'SKU', N'SKU', N'sku', N'X', 1, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'TOTAL_INVENTORY_ON_PRODUCTION', N'TOTAL_INVENTORY_ON_PRODUCTION', N'totalInventoryOnProduction', N'Y', 12, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'TOTAL_INVENTORY_ON_PURCHASING', N'TOTAL_INVENTORY_ON_PURCHASING', N'totalInventoryOnPurchasing', N'Y', 11, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'TOTAL_INVENTORY_ON_SITE', N'TOTAL_INVENTORY_ON_SITE', N'totalInventoryOnSite', N'Y', 9, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'TOTAL_INVENTORY_ON_TRANSIT', N'TOTAL_INVENTORY_ON_TRANSIT', N'totalInventoryOnTransit', N'Y', 10, N'Y', NULL)
INSERT [dbo].[TFSCM_DEX_INT_DETAIL] ([CDINTERFACE], [CDFIELD], [DSFIELD], [ERP_NAME], [IS_UPGRADEABLE], [NMPOSITION], [IS_SYSTEM_REQUIRED], [DATE_FORMAT]) VALUES (99, N'UPDATE_MOVEMENTS', N'UPDATE_MOVEMENTS', N'updateMovements', N'Y', 13, N'Y', N'dd/MM/yyyy')
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (1, CAST(1 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (1, CAST(2 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (1, CAST(3 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (1, CAST(4 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (3, CAST(5 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (3, CAST(6 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (3, CAST(7 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INT_IND_TYPE] ([CDINTERFACE], [CDINDICATOR_TYPE]) VALUES (3, CAST(8 AS Numeric(4, 0)))
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (1, N'PRODUCTION_ORDERS', N';', N'Y', N'I', 1, 3, NULL, NULL, NULL, N'interface_production_orders_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (2, N'LOCATIONS', N';', N'Y', N'M', 5, 1, NULL, NULL, NULL, N'interface_locations_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (3, N'BUFFERS', N';', N'Y', N'I', 11, 2, NULL, NULL, NULL, N'interface_buffers_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (4, N'REPLENISHMENT', N';', N'Y', N'O', 15, 6, N'CSV', N'L', N'SUGGESTED_TYPE', N'interface_replenishment_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (5, N'PURCHASE_ORDERS', N';', N'Y', N'I', 19, 4, NULL, NULL, NULL, N'interface_purchase_orders_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (6, N'BUFFER_CHANGES', N';', N'Y', N'M', 20, 5, NULL, NULL, NULL, N'interface_buffer_changes_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (7, N'EXPORT_BUFFERS', N';', N'Y', N'O', 21, 7, N'CSV', N'S', N'LOCATION', N'interface_export_buffers_label')
INSERT [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE], [FILE_PREFIX], [COLUMN_SEPARATOR], [HAS_HEADER], [CDTYPE], [CDTABLE], [NMORDER], [FILE_FORMAT], [PROCESSING_TYPE], [GROUP_FIELD], [INTERFACE_NAME]) VALUES (99, N'BUFFERS', N';', N'Y', N'S', 11, 99, NULL, NULL, NULL, N'interface_buffers_label')
SET IDENTITY_INSERT [dbo].[TFSCM_LOG_DATABASE] ON 

INSERT [dbo].[TFSCM_LOG_DATABASE] ([IDDBLOG], [CURRENT_SCRIPT_FILE], [CURRENT_VERSION], [PRIOR_SCRIPT_FILE], [PRIOR_VERSION], [EXECUTION_DATE], [EXECUTION_USER]) VALUES (CAST(0 AS Numeric(17, 0)), N'Create_SCM_5.4.0.sql', N'5.4.0', NULL, NULL, CAST(N'2021-04-05T18:22:55.720' AS DateTime), N'FOCUSSSCM')
SET IDENTITY_INSERT [dbo].[TFSCM_LOG_DATABASE] OFF
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_TFSCM_CLI_BUFFER_EXCHANGE_BUFF]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IDX_TFSCM_CLI_BUFFER_EXCHANGE_BUFF] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[LOCATION] ASC,
	[FAMILY] ASC,
	[INACTIVE] ASC
)
INCLUDE ( 	[BUFFER],
	[SECURITY_STOCK],
	[MINIMUM_REPLENISHMENT],
	[PACKAGING_UNIT],
	[INVENTORY_ON_CHAIN],
	[NET_PRIORITY_COLOR],
	[MISSING_BUFFER_INVENTORY],
	[SUGGESTED_BUFFER_REPLENISH],
	[APPROVED_BUFFER_REPLENISH],
	[REPLENISHMENT_ACTION],
	[ADJUSTMENT_ACTION],
	[NET_INVENTORY]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_AdjustmentAction]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_AdjustmentAction] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[ADJUSTMENT_ACTION] ASC
)
INCLUDE ( 	[SKU],
	[LOCATION],
	[UPDATE_MOVEMENTS],
	[NEXT_BUFFER_ANALYSIS]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_Inactive_compound]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_Inactive_compound] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[INACTIVE] ASC,
	[BUFFER] ASC
)
INCLUDE ( 	[SITE_PRIORITY],
	[NET_PRIORITY]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_INADATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_INADATE] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[INACTIVATION_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_Location_Inactive]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_Location_Inactive] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[LOCATION] DESC,
	[INACTIVE] ASC
)
INCLUDE ( 	[SKU],
	[BUFFER_INITIAL_DATE],
	[UPDATE_MOVEMENTS],
	[CONSOLIDATED_REPLENISHMENT],
	[POSITIVE_ADJUSTMENTS],
	[CONSUMPTION],
	[NEGATIVE_ADJUSTMENTS],
	[INVENTORY_ON_SITE],
	[TOTAL_CONSOLIDATED_INPUTS],
	[TOTAL_CONSOLIDATED_OUTPUTS],
	[WORST_INVENTORY_ON_SITE],
	[LAST_INVENTORY_ON_SITE],
	[DAYS_SINCE_LAST_OUT],
	[FAMILY],
	[ORIGIN_LOCATION],
	[REPLENISHMENT_TIME],
	[BUFFER],
	[TOTAL_INVENTORY_ON_SITE],
	[TOTAL_INVENTORY_ON_TRANSIT],
	[TOTAL_INVENTORY_ON_PURCHASING],
	[TOTAL_INVENTORY_ON_PRODUCTION],
	[MINIMUM_BUFFER],
	[SECURITY_STOCK],
	[MINIMUM_REPLENISHMENT],
	[PACKAGING_UNIT],
	[UNIT_PRICE],
	[TVC],
	[LOCATION_TYPE],
	[UNIT_THROUGHPUT],
	[CREATION_DATE],
	[ALLOWED_OVERSTOCKING],
	[EFFECTIVE_BUFFER],
	[INVENTORY_ON_TRANSIT],
	[INVENTORY_ON_PURCHASING],
	[INVENTORY_ON_PRODUCTION],
	[INVENTORY_ON_CHAIN],
	[SITE_PRIORITY],
	[SITE_PRIORITY_COLOR],
	[NET_PRIORITY],
	[NET_PRIORITY_COLOR],
	[CDUNIT],
	[LAST_TOTAL_OUTS_MAX_SUM],
	[PROTECTION_FACTOR],
	[REPLENISHMENT_PROBLEM],
	[MISSING_BUFFER_INVENTORY],
	[SUGGESTED_BUFFER_REPLENISH],
	[APPROVED_BUFFER_REPLENISH],
	[REPLENISHMENT_ACTION],
	[NET_INVENTORY],
	[PENDING_DEMAND],
	[REPLENISHMENT_PRIORITY],
	[EXCLUDED_OUTS],
	[REPLENISHMENT_FREQUENCY],
	[ADJUSTMENT_ACTION]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_REPLENISHMENT_ACTION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_REPLENISHMENT_ACTION] ON [dbo].[TFSCM_CLI_BUFFER]
(
	[REPLENISHMENT_ACTION] ASC
)
INCLUDE ( 	[ORIGIN_LOCATION]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_CHANGES_STEPS_EVENT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_CHANGES_STEPS_EVENT] ON [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]
(
	[EVENT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_CHANGES_STEPS_PDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_CHANGES_STEPS_PDATE] ON [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]
(
	[PROCESSING_DATE] DESC
)
INCLUDE ( 	[SKU],
	[LOCATION],
	[DATE],
	[DELTA],
	[BASE_BUFFER_DELTA]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
/****** Object:  Index [IDX_TFSCM_CLI_BUFFER_HISTORY_ALLOWED_OVERSTOCKING]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IDX_TFSCM_CLI_BUFFER_HISTORY_ALLOWED_OVERSTOCKING] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[ALLOWED_OVERSTOCKING] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_CLI_BUFFER_HISTORY_NET_PRIORITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CLI_BUFFER_HISTORY_NET_PRIORITY] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[NET_PRIORITY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CREATION_DATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CREATION_DATE] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[CREATION_DATE] DESC
)
INCLUDE ( 	[SKU],
	[LOCATION],
	[FAMILY],
	[ORIGIN_LOCATION],
	[BUFFER],
	[SECURITY_STOCK],
	[MINIMUM_REPLENISHMENT],
	[TVC],
	[LOCATION_TYPE],
	[UPDATE_MOVEMENTS],
	[ALLOWED_OVERSTOCKING],
	[EFFECTIVE_BUFFER],
	[INVENTORY_ON_SITE],
	[INVENTORY_ON_CHAIN]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_SKU_LOC_BUFFUPD_INVSITE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_SKU_LOC_BUFFUPD_INVSITE] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[SKU] ASC,
	[LOCATION] ASC,
	[UPDATE_MOVEMENTS] ASC,
	[INVENTORY_ON_SITE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_HISTORY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_HISTORY] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[UPDATE_MOVEMENTS] DESC,
	[SITE_PRIORITY_COLOR] ASC
)
INCLUDE ( 	[SKU],
	[LOCATION],
	[SITE_PRIORITY],
	[REPLENISHMENT_PROBLEM]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_HISTORY_UNIT_THROUGHPUT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_HISTORY_UNIT_THROUGHPUT] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[LOCATION] ASC,
	[BUFFER] ASC,
	[UNIT_THROUGHPUT] ASC
)
INCLUDE ( 	[SKU],
	[UPDATE_MOVEMENTS],
	[CREATION_DATE],
	[WORST_INVENTORY_ON_SITE]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_HISTORY_UPDDATE_NPRIORITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_HISTORY_UPDDATE_NPRIORITY] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[UPDATE_MOVEMENTS] DESC,
	[NET_PRIORITY] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_HISTORY_UPDDATE_SPRIORITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_HISTORY_UPDDATE_SPRIORITY] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[UPDATE_MOVEMENTS] DESC,
	[SITE_PRIORITY] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_CLI_BUFFER_HISTORY_Worst_inventory]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_BUFFER_HISTORY_Worst_inventory] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[BUFFER] ASC,
	[UNIT_THROUGHPUT] ASC,
	[WORST_INVENTORY_ON_SITE] ASC
)
INCLUDE ( 	[SKU],
	[LOCATION],
	[FAMILY],
	[UPDATE_MOVEMENTS],
	[CREATION_DATE]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_WORSTINV_UNITTHRPT_BUFFER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_WORSTINV_UNITTHRPT_BUFFER] ON [dbo].[TFSCM_CLI_BUFFER_HISTORY]
(
	[WORST_INVENTORY_ON_SITE] ASC,
	[UNIT_THROUGHPUT] ASC,
	[BUFFER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Index [IX_IDEXCHANGE_ID]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_IDEXCHANGE_ID] ON [dbo].[TFSCM_CLI_BUFFER_TEMP]
(
	[IDEXCHANGE] ASC,
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_UPDMOV_LOCAT_SKU]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_UPDMOV_LOCAT_SKU] ON [dbo].[TFSCM_CLI_BUFFER_TEMP]
(
	[UPDATE_MOVEMENTS] ASC,
	[LOCATION] ASC,
	[SKU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_LOCATION_TEMP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_LOCATION_TEMP] ON [dbo].[TFSCM_CLI_LOCATION_TEMP]
(
	[IDEXCHANGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_MESSAGESNOTIFICATIONS_DETAIL_FK]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_MESSAGESNOTIFICATIONS_DETAIL_FK] ON [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL]
(
	[ID_MESSAGESNOTIFICATIONS] ASC
)
INCLUDE ( 	[MESSAGES]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CLI_PRODUCTION_ORDERS_PARENT_FINDATE_RELDATE_OT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CLI_PRODUCTION_ORDERS_PARENT_FINDATE_RELDATE_OT] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[CDPARENT_ORDER] ASC,
	[FINALIZATION_DATE] ASC,
	[REAL_RELEASE_DATE] ASC,
	[CDORDER_TYPE] ASC
)
INCLUDE ( 	[PRIORITY_COLOR],
	[ORDER_MODIFY_DATE]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PDN_ORDERS_PRIORCOL_PDNPRODATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_PDN_ORDERS_PRIORCOL_PDNPRODATE] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[PRIORITY_COLOR] ASC,
	[PRODUCTION_PROBLEM_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PRUEBA_2]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PRUEBA_2] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[FINALIZATION_DATE] ASC,
	[CDORDER] ASC,
	[CDPARENT_ORDER] ASC,
	[PROMISED_DELIVERY_DATE] ASC,
	[CDFAMILY] ASC,
	[PRODUCTION_BUFFER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_SKU_CDDES_FINDATE_CDORDTYP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_SKU_CDDES_FINDATE_CDORDTYP] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[SKU] ASC,
	[CDDESTINATION] ASC,
	[FINALIZATION_DATE] ASC,
	[CDORDER_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_PRODUCTION_ORDERS_FD_EXCHANGES_IN_QUARANTINE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_PRODUCTION_ORDERS_FD_EXCHANGES_IN_QUARANTINE] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[FINALIZATION_DATE] DESC,
	[EXCHANGES_IN_QUARANTINE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TFSCM_CLI_PRODUCTION_ORDERS_cdfa]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [TFSCM_CLI_PRODUCTION_ORDERS_cdfa] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[CDFAMILY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TFSCM_ORDERS_CURSOR_INDX]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [TFSCM_ORDERS_CURSOR_INDX] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[CDORDER] ASC,
	[PROMISED_DELIVERY_DATE] ASC,
	[PRODUCTION_BUFFER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TFSCM_ORDERS_PARENT_IDX]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [TFSCM_ORDERS_PARENT_IDX] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
(
	[CDPARENT_ORDER] ASC,
	[CDORDER_TYPE] ASC,
	[PROMISED_DELIVERY_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 85) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [CURSOR_TFSCM_PROD_ORDERS_TEMP_NO_CDPARENT_ORDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [CURSOR_TFSCM_PROD_ORDERS_TEMP_NO_CDPARENT_ORDER] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]
(
	[CDORDER] ASC,
	[CDORDER_TYPE] ASC,
	[CDDESTINATION] ASC,
	[CDFAMILY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_SUBQUERY_PRUEBA]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_SUBQUERY_PRUEBA] ON [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]
(
	[IDEXCHANGE] ASC,
	[ORDER_MODIFY_DATE] ASC
)
INCLUDE ( 	[CDORDER]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_DESTINATION_FINALDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_DESTINATION_FINALDATE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[DESTINATION] ASC,
	[FINALIZATION_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_FINALDATE_ORDER_PROMISEDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_FINALDATE_ORDER_PROMISEDATE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[FINALIZATION_DATE] ASC,
	[CDPURCHASE_ORDER] ASC,
	[SUPPLIER] ASC,
	[PROMISED_DELIVERY_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ORDER_PROMISEDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ORDER_PROMISEDATE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[CDPURCHASE_ORDER] ASC,
	[SUPPLIER] ASC,
	[PROMISED_DELIVERY_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
/****** Object:  Index [IX_PURCHASE_ORDERS_FINALDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_PURCHASE_ORDERS_FINALDATE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[FINALIZATION_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PURCHASE_ORDERS_TYPE_PROMISEDATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PURCHASE_ORDERS_TYPE_PROMISEDATE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[CDPURCHASE_ORDER] ASC,
	[SUPPLIER] ASC,
	[PO_TYPE] ASC,
	[PROMISED_DELIVERY_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_SKU_DESTI_FINDATE_POTYPE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_SKU_DESTI_FINDATE_POTYPE] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[SKU] ASC,
	[DESTINATION] ASC,
	[FINALIZATION_DATE] ASC,
	[PO_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_SKU_DESTI_POTYPE_PROMISEDT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_SKU_DESTI_POTYPE_PROMISEDT] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
(
	[SKU] ASC,
	[DESTINATION] ASC,
	[PO_TYPE] ASC,
	[PROMISED_DELIVERY_DATETIME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CURSOR_PURCHASE_ORDERS_TEMP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CURSOR_PURCHASE_ORDERS_TEMP] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP]
(
	[CDPURCHASE_ORDER] ASC,
	[SUPPLIER] ASC,
	[PO_TYPE] ASC,
	[DESTINATION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PURCHASE_TEMP_IDEX_UPDATE_ID]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PURCHASE_TEMP_IDEX_UPDATE_ID] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP]
(
	[IDEXCHANGE] ASC,
	[UPDATE_DATE] ASC,
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_PURCHASE_TEMP_IDEX_UPDATE_STATUS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_PURCHASE_TEMP_IDEX_UPDATE_STATUS] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP]
(
	[IDEXCHANGE] ASC,
	[UPDATE_DATE] ASC,
	[STATUS] ASC
)
INCLUDE ( 	[CDPURCHASE_ORDER],
	[SUPPLIER]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_PURCHASE_ORDERS_TEMP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_PURCHASE_ORDERS_TEMP] ON [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP]
(
	[IDEXCHANGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY_COMP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY_COMP] ON [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY]
(
	[ADJUSTMENT_ACTION] ASC,
	[SUGGESTION_REJECTION_CAUSE] ASC,
	[DATE_MANAGEMENT] ASC
)
INCLUDE ( 	[SKU],
	[LOCATION]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
GO
/****** Object:  Index [IX_CLI_VIEWS_CDSECTION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CLI_VIEWS_CDSECTION] ON [dbo].[TFSCM_CLI_VIEWS]
(
	[CDSECTION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_CLI_VIEWS_CDUSER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_CLI_VIEWS_CDUSER] ON [dbo].[TFSCM_CLI_VIEWS]
(
	[IS_INITIAL_VIEW] ASC,
	[USER_ID] ASC
)
INCLUDE ( 	[CDSECTION]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_CLI_VIEWS_CDINDICATOR]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_CLI_VIEWS_CDINDICATOR] ON [dbo].[TFSCM_CLI_VIEWS]
(
	[CDINDICATOR] ASC
)
INCLUDE ( 	[CDVIEW]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
/****** Object:  Index [IX_TFSCM_COM_LOG_TIME]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE NONCLUSTERED INDEX [IX_TFSCM_COM_LOG_TIME] ON [dbo].[TFSCM_COM_LOG]
(
	[LOG_TIME] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_TFSCM_COM_USERS_AK]    Script Date: 5/04/2021 6:23:08 p. m. ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_TFSCM_COM_USERS_AK] ON [dbo].[TFSCM_COM_USERS]
(
	[USERNAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[archivo] ADD  DEFAULT (NULL) FOR [RECORD_ID]
GO
ALTER TABLE [dbo].[archivo] ADD  DEFAULT (NULL) FOR [VALUE]
GO
ALTER TABLE [dbo].[archivo] ADD  DEFAULT (NULL) FOR [DATE_1]
GO
ALTER TABLE [dbo].[archivo] ADD  DEFAULT (NULL) FOR [DESCRIPCION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [MISSING_BUFFER_INVENTORY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ('false') FOR [MANAGED_RT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ('false') FOR [RESET_COUNT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [PENDING_DEMAND]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_PRIORITY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [OPTIMIZED_REPLENISHMENT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ('White') FOR [OPTIMIZED_PRIORITY_COLOR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [EXCLUDED_OUTS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_FREQUENCY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [SBC_BUFFER_SIZE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ADD  DEFAULT ((0)) FOR [AVAILABLE_INVENTORY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES] ADD  DEFAULT ((0)) FOR [DAYS_BETWEEN_CHANGES]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES] ADD  DEFAULT ('') FOR [JSON_FILTER]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES] ADD  DEFAULT ('1901-01-01 00:00') FOR [PROCESSING_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES] ADD  DEFAULT ('N') FOR [ATYPICAL_CONSUMPTION_STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] ADD  DEFAULT ('0') FOR [STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] ADD  DEFAULT ('1901-01-01 00:00') FOR [PROCESSING_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] ADD  DEFAULT ('N') FOR [ATYPICAL_CONSUMPTION_STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  CONSTRAINT [IS_ACTIVE_BF_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ('M') FOR [BUFFER_ADJUSTMENT_MODE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((25)) FOR [BUFFER_DECREASE_THRESHOLD]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((25)) FOR [BUFFER_INCREASE_THRESHOLD]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((30)) FOR [MOVING_SUMS_FOR_RECALCULATIONS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((30)) FOR [INACTIVITY_WINDOW]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((7)) FOR [TIME_BETWEEN_BUFFER_RECALCULATIONS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((1.50)) FOR [LOWER_PROTECTION_FACTOR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((1.75)) FOR [MIDDLE_PROTECTION_FACTOR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((2.00)) FOR [UPPER_PROTECTION_FACTOR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((0)) FOR [ATYPICAL_CONSUMPTION_THRESHOLD]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((0)) FOR [CONSECUTIVE_INCREMENTS_FOR_ALERT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((10000)) FOR [MAXIMUM_ATYPICAL_CONSUMPTION_FREQUENCY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((10000)) FOR [CONSECUTIVE_INCREMENTS_FOR_RECALCULATION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ADD  DEFAULT ((30)) FOR [DAC_HORIZON]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ADD  DEFAULT ((0)) FOR [PENDING_DEMAND]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_PRIORITY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ADD  DEFAULT ((0)) FOR [EXCLUDED_OUTS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_FREQUENCY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [MINIMUM_BUFFER]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [SECURITY_STOCK]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((-999999)) FOR [MINIMUM_REPLENISHMENT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((-999999)) FOR [PACKAGING_UNIT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [TVC]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [POSITIVE_ADJUSTMENTS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [NEGATIVE_ADJUSTMENTS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT (' ') FOR [CDUNIT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [IS_CREATION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((-999999)) FOR [CONSUMPTION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((-999999)) FOR [CONSOLIDATED_REPLENISHMENT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [PENDING_DEMAND]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_PRIORITY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((0)) FOR [EXCLUDED_OUTS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_TEMP] ADD  DEFAULT ((1)) FOR [REPLENISHMENT_FREQUENCY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_CALENDAR] ADD  CONSTRAINT [IS_ACTIVE_CL_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_CAUSES] ADD  CONSTRAINT [IS_ACTIVE_FC_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_CAUSES] ADD  DEFAULT ('N') FOR [IS_SYSTEM]
GO
ALTER TABLE [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION] ADD  DEFAULT ((0)) FOR [BLUE_ORDERS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION] ADD  DEFAULT ((0)) FOR [PERCENTAGE_BLUE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION] ADD  DEFAULT (getdate()) FOR [LOCATION_MODIFY_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION] ADD  CONSTRAINT [IS_ACTIVE_LC_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ADD  CONSTRAINT [IS_ACTIVE_PF_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ADD  DEFAULT ((33.33)) FOR [YELLOW_ZONE_START]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ADD  DEFAULT ((66.67)) FOR [RED_ZONE_START]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ADD  DEFAULT ((0)) FOR [TOUCH_TIME]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] ADD  DEFAULT ((0)) FOR [TOTAL_AMOUNT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] ADD  DEFAULT ((0)) FOR [TOTAL_AMOUNT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] ADD  DEFAULT ((0)) FOR [STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ((0)) FOR [ORDER_VALUE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ('1901-01-01 00:00') FOR [FINALIZATION_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ('1901-01-01 00:00') FOR [COLOR_CHANGE_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ((1)) FOR [MANAGED]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ((0)) FOR [EXCHANGES_IN_QUARANTINE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] ADD  DEFAULT ('1901-01-01 00:00:00') FOR [QUARANTINE_DATE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] ADD  DEFAULT ((0)) FOR [STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_UNITS] ADD  CONSTRAINT [DF_TFSCM_CLI_UNITS_IS_DEFAULT_UNIT]  DEFAULT ((0)) FOR [IS_DEFAULT_UNIT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_UNITS] ADD  CONSTRAINT [IS_ACTIVE_UM_DEFAULT]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_SERIES] ADD  CONSTRAINT [DF_TFSCM_CLI_USER_SERIES_IS_ACTIVE]  DEFAULT ('Y') FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_SERIES] ADD  DEFAULT ('BUFFERS') FOR [SERIES_TYPE]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_CDPERMISSION_EDIT]  DEFAULT ((601)) FOR [CDPERMISSION_EDIT]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_IS_SYSTEM]  DEFAULT ('N') FOR [IS_SYSTEM]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_IS_COLOR]  DEFAULT ('N') FOR [IS_COLOR]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_IS_UPGRADABLE]  DEFAULT ('Y') FOR [IS_UPGRADABLE]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_VIEW_TYPE]  DEFAULT ('T') FOR [VIEW_TYPE]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_VIEW_FORMAT]  DEFAULT ('N') FOR [VIEW_FORMAT]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_IS_PRIMARY_KEY]  DEFAULT ('N') FOR [IS_PRIMARY_KEY]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_USE_AS_SERIE]  DEFAULT ('N') FOR [USE_AS_SERIE]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_IS_USE_AS_PERMISSION]  DEFAULT ('N') FOR [IS_USE_AS_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [DF_TFSCM_COM_COL_TABLE_VIEW_COL_WIDTH]  DEFAULT ((120)) FOR [VIEW_COL_WIDTH]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  DEFAULT ('N') FOR [SAVE_HISTORY]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  CONSTRAINT [ACCURACY_CF_DEFAULT]  DEFAULT ((0)) FOR [COLUMN_ACCURACY]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ADD  DEFAULT ('N') FOR [IS_FOREIGN_KEY]
GO
ALTER TABLE [dbo].[TFSCM_COM_NOTIFICATIONS] ADD  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TFSCM_COM_PERMISSION] ADD  DEFAULT ('N') FOR [IS_SYSTEM]
GO
ALTER TABLE [dbo].[TFSCM_COM_PERMISSION] ADD  DEFAULT ('N') FOR [IS_SUPER_USER]
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES] ADD  CONSTRAINT [DF_TFSCM_COM_TABLES_APPLY_CUSTOM_COL]  DEFAULT ('N') FOR [APPLY_CUSTOM_COL]
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES] ADD  DEFAULT ('N') FOR [USED_IN_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_LOG_DATABASE] ADD  CONSTRAINT [DF_TFSCM_LOG_DATABASE_EXEC_DATE]  DEFAULT (getdate()) FOR [EXECUTION_DATE]
GO
ALTER TABLE [dbo].[TFSCM_LOG_DATABASE] ADD  CONSTRAINT [DF_TFSCM_LOG_DATABASE_EXEC_USER]  DEFAULT (suser_sname()) FOR [EXECUTION_USER]
GO
ALTER TABLE [dbo].[TFSCM_CLI_ANTI_OVERD_RELEASES]  WITH CHECK ADD  CONSTRAINT [FK_REL_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_ANTI_OVERD_RELEASES] CHECK CONSTRAINT [FK_REL_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_BF_REJECTION_CAUSE] FOREIGN KEY([SUGGESTION_REJECTION_CAUSE])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_BF_REJECTION_CAUSE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_BF_REPLENISHMENT_PROBLEM] FOREIGN KEY([REPLENISHMENT_PROBLEM])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_BF_REPLENISHMENT_PROBLEM]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_BUFFER_LOCATION] FOREIGN KEY([LOCATION])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_BUFFER_LOCATION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_BUFFER_LOCATION_SR] FOREIGN KEY([ORIGIN_LOCATION])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_BUFFER_LOCATION_SR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_CLI_BUFFER_CLI_BUFFER_GROUPS] FOREIGN KEY([CDGROUP])
REFERENCES [dbo].[TFSCM_CLI_BUFFER_GROUPS] ([CDGROUP])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_CLI_BUFFER_CLI_BUFFER_GROUPS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_CLI_BUFFER_FAMILY] FOREIGN KEY([FAMILY])
REFERENCES [dbo].[TFSCM_CLI_BUFFER_FAMILY] ([CDBUFFER_FAMILY])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_TFSCM_CLI_BUFFER_FAMILY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_CLI_BUFFER_UNITS] FOREIGN KEY([CDUNIT])
REFERENCES [dbo].[TFSCM_CLI_UNITS] ([CDUNIT])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] CHECK CONSTRAINT [FK_TFSCM_CLI_BUFFER_UNITS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS]  WITH CHECK ADD  CONSTRAINT [FK_BUFFER_ADJ_SUGGESTIONS_STATUS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS] CHECK CONSTRAINT [FK_BUFFER_ADJ_SUGGESTIONS_STATUS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  WITH CHECK ADD  CONSTRAINT [FK_BC_EVENT] FOREIGN KEY([EVENT])
REFERENCES [dbo].[TFSCM_CLI_BUFFER_CHANGES] ([EVENT])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS] CHECK CONSTRAINT [FK_BC_EVENT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION]  WITH CHECK ADD  CONSTRAINT [FK_SDCOPS_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION] CHECK CONSTRAINT [FK_SDCOPS_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE]  WITH CHECK ADD  CONSTRAINT [FK_STOCK_VALUE_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE] CHECK CONSTRAINT [FK_STOCK_VALUE_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_STOCKOUT_VALUE]  WITH CHECK ADD  CONSTRAINT [FK_STOCKOUT_VALUE_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_STOCKOUT_VALUE] CHECK CONSTRAINT [FK_STOCKOUT_VALUE_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_COL_TABLE]  WITH CHECK ADD  CONSTRAINT [FK_CCTAB_TFSCM_CLI_VIEWS] FOREIGN KEY([CDVIEW])
REFERENCES [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW])
GO
ALTER TABLE [dbo].[TFSCM_CLI_COL_TABLE] CHECK CONSTRAINT [FK_CCTAB_TFSCM_CLI_VIEWS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_COL_TABLE]  WITH CHECK ADD  CONSTRAINT [FK_CCTAB_TFSCM_COM_COL_TABLE] FOREIGN KEY([CDTABLE], [CDCOLUMN])
REFERENCES [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN])
GO
ALTER TABLE [dbo].[TFSCM_CLI_COL_TABLE] CHECK CONSTRAINT [FK_CCTAB_TFSCM_COM_COL_TABLE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION]  WITH CHECK ADD  CONSTRAINT [FK_COLOR_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_COLOR_DISTRIBUTION] CHECK CONSTRAINT [FK_COLOR_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_DET_CALENDAR]  WITH CHECK ADD  CONSTRAINT [FK_DETCAL_TFSCM_CLI_CALENDAR] FOREIGN KEY([CDCALENDAR])
REFERENCES [dbo].[TFSCM_CLI_CALENDAR] ([CDCALENDAR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_DET_CALENDAR] CHECK CONSTRAINT [FK_DETCAL_TFSCM_CLI_CALENDAR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_INDICATORS]  WITH CHECK ADD  CONSTRAINT [FK_IND_TFSCM_CLI_INDICATORS_TYPE] FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_INDICATORS] CHECK CONSTRAINT [FK_IND_TFSCM_CLI_INDICATORS_TYPE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION]  WITH CHECK ADD  CONSTRAINT [FK_LOC_TFSCM_CLI_CALENDAR] FOREIGN KEY([CDCALENDAR])
REFERENCES [dbo].[TFSCM_CLI_CALENDAR] ([CDCALENDAR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION] CHECK CONSTRAINT [FK_LOC_TFSCM_CLI_CALENDAR]
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL]  WITH CHECK ADD  CONSTRAINT [FK_DETAIL_ID_MESSAGESNOTIFICATIONS] FOREIGN KEY([ID_MESSAGESNOTIFICATIONS])
REFERENCES [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS] ([ID_MESSAGESNOTIFICATIONS])
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL] CHECK CONSTRAINT [FK_DETAIL_ID_MESSAGESNOTIFICATIONS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_CDVIEW] FOREIGN KEY([CDVIEW])
REFERENCES [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW])
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS] CHECK CONSTRAINT [FK_CDVIEW]
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_ID_MESSAGESNOTIFICATIONS] FOREIGN KEY([ID_MESSAGESNOTIFICATIONS])
REFERENCES [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS] ([ID_MESSAGESNOTIFICATIONS])
GO
ALTER TABLE [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS] CHECK CONSTRAINT [FK_ID_MESSAGESNOTIFICATIONS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_MODULE]  WITH CHECK ADD  CONSTRAINT [FK_TMOD_TFSCM_COM_PERMISSION] FOREIGN KEY([CDPERMISSION])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_MODULE] CHECK CONSTRAINT [FK_TMOD_TFSCM_COM_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PERC_DELIV_IN_TIME]  WITH CHECK ADD  CONSTRAINT [FK_PERCD_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PERC_DELIV_IN_TIME] CHECK CONSTRAINT [FK_PERCD_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PORTLET_PANEL]  WITH CHECK ADD  CONSTRAINT [FK_PORTLET_PANEL_TFSCM_CLI_VIEWS] FOREIGN KEY([CDVIEW])
REFERENCES [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PORTLET_PANEL] CHECK CONSTRAINT [FK_PORTLET_PANEL_TFSCM_CLI_VIEWS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_CLI_FAMILY_TFSCM_CLI_LOCATION] FOREIGN KEY([CDLOCATION])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] CHECK CONSTRAINT [FK_TFSCM_CLI_FAMILY_TFSCM_CLI_LOCATION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_OP_CAUSE_EARLY_RELEASE] FOREIGN KEY([CAUSE_EARLY_RELEASE])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] CHECK CONSTRAINT [FK_OP_CAUSE_EARLY_RELEASE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_OP_PROBLEM_CAUSE] FOREIGN KEY([PRODUCTION_PROBLEM_CAUSE])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] CHECK CONSTRAINT [FK_OP_PROBLEM_CAUSE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_OP_RELEASE_PROBLEM_CAUSE] FOREIGN KEY([RELEASE_PROBLEM])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] CHECK CONSTRAINT [FK_OP_RELEASE_PROBLEM_CAUSE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_PORDERS_TFSCM_CLI_FAMILY] FOREIGN KEY([CDFAMILY])
REFERENCES [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ([CDFAMILY])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] CHECK CONSTRAINT [FK_PORDERS_TFSCM_CLI_FAMILY]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_PORDERS_TFSCM_CLI_PLANT] FOREIGN KEY([CDPLANT])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS] CHECK CONSTRAINT [FK_PORDERS_TFSCM_CLI_PLANT]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_DESTINATION] FOREIGN KEY([DESTINATION])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] CHECK CONSTRAINT [FK_DESTINATION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS]  WITH CHECK ADD  CONSTRAINT [FK_SUPPLIER] FOREIGN KEY([SUPPLIER])
REFERENCES [dbo].[TFSCM_CLI_LOCATION] ([CDLOCATION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_PURCHASE_ORDERS] CHECK CONSTRAINT [FK_SUPPLIER]
GO
ALTER TABLE [dbo].[TFSCM_CLI_SECTION]  WITH CHECK ADD  CONSTRAINT [FK_SECTION_TFSCM_CLI_MODULE] FOREIGN KEY([CDMODULE])
REFERENCES [dbo].[TFSCM_CLI_MODULE] ([CDMODULE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_SECTION] CHECK CONSTRAINT [FK_SECTION_TFSCM_CLI_MODULE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_SECTION]  WITH CHECK ADD  CONSTRAINT [FK_TSEC_TFSCM_COM_PERMISSION] FOREIGN KEY([CDPERMISSION])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_SECTION] CHECK CONSTRAINT [FK_TSEC_TFSCM_COM_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY]  WITH CHECK ADD  CONSTRAINT [FK_BAH_REJECTION_CAUSE] FOREIGN KEY([SUGGESTION_REJECTION_CAUSE])
REFERENCES [dbo].[TFSCM_CLI_CAUSES] ([CDCAUSE])
GO
ALTER TABLE [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY] CHECK CONSTRAINT [FK_BAH_REJECTION_CAUSE]
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_FILTER]  WITH CHECK ADD  CONSTRAINT [FK_USERF_TFSCM_CLI_VIEWS] FOREIGN KEY([CDVIEW])
REFERENCES [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW])
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_FILTER] CHECK CONSTRAINT [FK_USERF_TFSCM_CLI_VIEWS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_SERIES]  WITH CHECK ADD  CONSTRAINT [FK_USER_TFSCM_CLI_USER_SERIES] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[TFSCM_COM_USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[TFSCM_CLI_USER_SERIES] CHECK CONSTRAINT [FK_USER_TFSCM_CLI_USER_SERIES]
GO
ALTER TABLE [dbo].[TFSCM_CLI_VALUE_ORDERS_OVERDUE]  WITH CHECK ADD  CONSTRAINT [FK_VALUE_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VALUE_ORDERS_OVERDUE] CHECK CONSTRAINT [FK_VALUE_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_VIEWS_TFSCM_CLI_INDICATORS] FOREIGN KEY([CDINDICATOR])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS] ([CDINDICATOR])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS] CHECK CONSTRAINT [FK_VIEWS_TFSCM_CLI_INDICATORS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_VIEWS_TFSCM_CLI_SECTION] FOREIGN KEY([CDSECTION])
REFERENCES [dbo].[TFSCM_CLI_SECTION] ([CDSECTION])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS] CHECK CONSTRAINT [FK_VIEWS_TFSCM_CLI_SECTION]
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_VIEWS_TFSCM_COM_USERS] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[TFSCM_COM_USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS] CHECK CONSTRAINT [FK_VIEWS_TFSCM_COM_USERS]
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS]  WITH CHECK ADD FOREIGN KEY([CDVIEW])
REFERENCES [dbo].[TFSCM_CLI_VIEWS] ([CDVIEW])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS]  WITH CHECK ADD FOREIGN KEY([ID_MESSAGESNOTIFICATIONS])
REFERENCES [dbo].[TFSCM_CLI_MESSAGESNOTIFICATIONS] ([ID_MESSAGESNOTIFICATIONS])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS]  WITH CHECK ADD  CONSTRAINT [FK_VIEWS_SHARED_TO_USERS_TFSCM_COM_USERS] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[TFSCM_COM_USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS_SHARED_TO_USERS] CHECK CONSTRAINT [FK_VIEWS_SHARED_TO_USERS_TFSCM_COM_USERS]
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE]  WITH CHECK ADD  CONSTRAINT [FK_CTAB_TFSCM_COM_PERMISSION] FOREIGN KEY([CDPERMISSION_EDIT])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] CHECK CONSTRAINT [FK_CTAB_TFSCM_COM_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_COM_JOB_INTERFACES]  WITH CHECK ADD  CONSTRAINT [FK_JOBINTERFACES_COM_JOBS] FOREIGN KEY([IDJOB])
REFERENCES [dbo].[TFSCM_COM_JOBS] ([IDJOB])
GO
ALTER TABLE [dbo].[TFSCM_COM_JOB_INTERFACES] CHECK CONSTRAINT [FK_JOBINTERFACES_COM_JOBS]
GO
ALTER TABLE [dbo].[TFSCM_COM_JOB_INTERFACES]  WITH CHECK ADD  CONSTRAINT [FK_JOBINTERFACES_DEX_INTERFACES] FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_COM_JOB_INTERFACES] CHECK CONSTRAINT [FK_JOBINTERFACES_DEX_INTERFACES]
GO
ALTER TABLE [dbo].[TFSCM_COM_PARAMS]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_COM_COMPONENT] FOREIGN KEY([CDCOMPONENT])
REFERENCES [dbo].[TFSCM_COM_COMPONENT] ([CDCOMPONENT])
GO
ALTER TABLE [dbo].[TFSCM_COM_PARAMS] CHECK CONSTRAINT [FK_TFSCM_COM_COMPONENT]
GO
ALTER TABLE [dbo].[TFSCM_COM_PERMISSION_VAL]  WITH CHECK ADD  CONSTRAINT [FK_PVAL_TFSCM_COM_COL_TABLE] FOREIGN KEY([CDTABLE], [CDCOLUMN])
REFERENCES [dbo].[TFSCM_COM_COL_TABLE] ([CDTABLE], [CDCOLUMN])
GO
ALTER TABLE [dbo].[TFSCM_COM_PERMISSION_VAL] CHECK CONSTRAINT [FK_PVAL_TFSCM_COM_COL_TABLE]
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL_PERM]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_COM_PERMISSION] FOREIGN KEY([CDPERMISSION])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL_PERM] CHECK CONSTRAINT [FK_TFSCM_COM_PERMISSION]
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL_PERM]  WITH CHECK ADD  CONSTRAINT [FK_TFSCM_COM_ROL] FOREIGN KEY([CDROL])
REFERENCES [dbo].[TFSCM_COM_ROL] ([CDROL])
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL_PERM] CHECK CONSTRAINT [FK_TFSCM_COM_ROL]
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES]  WITH CHECK ADD  CONSTRAINT [FK_CDPERMISSION_ADD] FOREIGN KEY([CDPERMISSION_ADD])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES] CHECK CONSTRAINT [FK_CDPERMISSION_ADD]
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES]  WITH CHECK ADD  CONSTRAINT [FK_CDPERMISSION_DELETE] FOREIGN KEY([CDPERMISSION_DELETE])
REFERENCES [dbo].[TFSCM_COM_PERMISSION] ([CDPERMISSION])
GO
ALTER TABLE [dbo].[TFSCM_COM_TABLES] CHECK CONSTRAINT [FK_CDPERMISSION_DELETE]
GO
ALTER TABLE [dbo].[TFSCM_COM_USER_ROL]  WITH CHECK ADD  CONSTRAINT [FK_USER_ROL_TFSCM_CLI_USER] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[TFSCM_COM_USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[TFSCM_COM_USER_ROL] CHECK CONSTRAINT [FK_USER_ROL_TFSCM_CLI_USER]
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_DETAIL]  WITH CHECK ADD  CONSTRAINT [FK_DEX_TFSCM_DEX_INTERFACES] FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_DETAIL] CHECK CONSTRAINT [FK_DEX_TFSCM_DEX_INTERFACES]
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_IND_TYPE]  WITH CHECK ADD FOREIGN KEY([CDINTERFACE])
REFERENCES [dbo].[TFSCM_DEX_INTERFACES] ([CDINTERFACE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INTERFACES]  WITH CHECK ADD  CONSTRAINT [FK_INT_TFSCM_COM_TABLES] FOREIGN KEY([CDTABLE])
REFERENCES [dbo].[TFSCM_COM_TABLES] ([CDTABLE])
GO
ALTER TABLE [dbo].[TFSCM_DEX_INTERFACES] CHECK CONSTRAINT [FK_INT_TFSCM_COM_TABLES]
GO
ALTER TABLE [dbo].[TFSCM_JOB_INDICATORS]  WITH CHECK ADD  CONSTRAINT [FK_JOBIND_TFSCM_CLI_INDICATORS_TYPE] FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_JOB_INDICATORS] CHECK CONSTRAINT [FK_JOBIND_TFSCM_CLI_INDICATORS_TYPE]
GO
ALTER TABLE [dbo].[TFSCM_JOB_INDICATORS]  WITH CHECK ADD  CONSTRAINT [FK_JOBIND_TFSCM_COM_JOBS] FOREIGN KEY([IDJOB])
REFERENCES [dbo].[TFSCM_COM_JOBS] ([IDJOB])
GO
ALTER TABLE [dbo].[TFSCM_JOB_INDICATORS] CHECK CONSTRAINT [FK_JOBIND_TFSCM_COM_JOBS]
GO
ALTER TABLE [dbo].[TFSCM_LIC_INDICATORS]  WITH CHECK ADD  CONSTRAINT [FK_LICIND_TFSCM_CLI_INDICATORS_TYPE] FOREIGN KEY([CDINDICATOR_TYPE])
REFERENCES [dbo].[TFSCM_CLI_INDICATORS_TYPE] ([CDINDICATOR_TYPE])
GO
ALTER TABLE [dbo].[TFSCM_LIC_INDICATORS] CHECK CONSTRAINT [FK_LICIND_TFSCM_CLI_INDICATORS_TYPE]
GO
ALTER TABLE [dbo].[TFSCM_LIC_INDICATORS]  WITH CHECK ADD  CONSTRAINT [FK_LICIND_TFSCM_LIC_LICENSES] FOREIGN KEY([IDLICENSE])
REFERENCES [dbo].[TFSCM_LIC_LICENSES] ([IDLICENSE])
GO
ALTER TABLE [dbo].[TFSCM_LIC_INDICATORS] CHECK CONSTRAINT [FK_LICIND_TFSCM_LIC_LICENSES]
GO
/****** Object:  StoredProcedure [dbo].[AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/06/2017
-- Description : Select column PENDING_DEMAND used in priority calculation.
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Hernán Londoño Ospina
-- Modify date: 26/10/2015 
-- Description:	Change the way of finish orders (Not in Quarantine)
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Create date: 23/04/2015
-- Description:	Execute actions after finished purchase orders
-- ===========================================================================================
CREATE PROCEDURE [dbo].[AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS]
	/* Input Parameters */
	@vDATE_CALCULATION DATETIME,
    /* Output Parameters */
    @ovaResult         VARCHAR(1)    OUTPUT,
    @ovaMessage        NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
DECLARE @vTrace                    NVARCHAR(MAX); 
DECLARE @ovaPriority               NUMERIC(17,2);
DECLARE @ovaPriorityColor          VARCHAR(50);
DECLARE @ovaPriorityResul          VARCHAR(1);
DECLARE @ovaPriorityMessage        NVARCHAR(max);
DECLARE @skuBefore                 VARCHAR(50);
DECLARE @cdDestinationBefore       VARCHAR(50);
DECLARE @sumPurchaseStock          NUMERIC(38,5);
DECLARE @sumTofinishPurchaseStock  NUMERIC(38,5);
DECLARE @vCOMMIT_COUNT             NUMERIC(4) = 0;
DECLARE @purchaseOrderNotFinalized DATETIME;
DECLARE @serverDate                DATE     = GETDATE(); 
DECLARE @calculationDate           DATETIME = GETDATE();
BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		SET @ovaResult = '0';
		SET @ovaMessage = '';
				  
		SET @vTrace = 'getting the table name';
		SET @skuBefore= '';
		SET @cdDestinationBefore ='';	
		SET @purchaseOrderNotFinalized = '1901-01-01' ;		
		
		----------------------------------------------------------------------
		-- MESSAGES 
		----------------------------------------------------------------------
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL AS NVARCHAR(MAX); 
		
		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE  
			  FROM  TFSCM_COM_PARAMS 
			 WHERE CDPARAM = 'DEFAULT_LANGUAGE';
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
				'DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL', @vLanguage, '', '', '', 
				@vMSG_DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL OUTPUT;
		
		END TRY  
		BEGIN CATCH 
			SET @vMSG_DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL = 'DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL';
		END CATCH 
		
		----------------------------------------------------------------------
		-- FIELDS
		----------------------------------------------------------------------
		DECLARE @PRIORITY_COLOR               VARCHAR(50);
		DECLARE @MANAGED_ORDER                BIT; 
		
		DECLARE @NON_WORKING_DAYS             NUMERIC(10,2); 
		DECLARE @CDORDER                      VARCHAR(50); 
		DECLARE @SUPPLIER                     VARCHAR(50); 
		DECLARE @CDORDER_TYPE                 VARCHAR(1); 
		DECLARE @PRIORITY                     NUMERIC(17,2); 
		DECLARE @PRIORITY_COLOR_OLD           VARCHAR(50); 
		DECLARE @SKU                          VARCHAR(50); 
		DECLARE @CDDESTINATION                VARCHAR(50); 
		DECLARE @PENDING_AMOUNT               NUMERIC(19,2); 
		DECLARE @PROMISED_DELIVERY_DATETIME   DATETIME; 
		DECLARE @COLOR_CHANGE_DATE            DATETIME; 
		DECLARE @UPDATE_DATE                  DATETIME; 
		DECLARE @FINALIZATION_DATE            DATETIME; 
		DECLARE @BUFFER                       NUMERIC(17,5); 
		DECLARE @SECURITY_STOCK               NUMERIC(17,5); 
		DECLARE @INVENTORY_ON_SITE            NUMERIC(17,5); 
		DECLARE @INVENTORY_ON_TRANSIT         NUMERIC(17,5); 
		DECLARE @INVENTORY_ON_PRODUCTION      NUMERIC(17,5); 
		DECLARE @PENDING_DEMAND               NUMERIC(17,5); 
		DECLARE @YELLOW_ZONE_START            NUMERIC(5,2); 
		DECLARE @RED_ZONE_START               NUMERIC(5,2); 
		DECLARE @EXCHANGES_IN_QUARANTINE      NUMERIC(10,0); 
		DECLARE @QUARANTINE_DATE              DATETIME; 
		DECLARE @SHIPPING_TIME                VARCHAR(5); 
		DECLARE @CDCALENDAR                   NUMERIC(4,0); 
		DECLARE @ORDER_CREATION_DATE          DATETIME; 
		DECLARE @NECESSITY_DATETIME           DATETIME;
		
		DECLARE cCdPurchaseOrderCursor CURSOR FAST_FORWARD FOR				
		 SELECT CPO.CDPURCHASE_ORDER, CPO.SUPPLIER, CPO.PO_TYPE, CPO.PRIORITY, CPO.PRIORITY_COLOR, CPO.SKU, 
				CPO.DESTINATION, CPO.PENDING_QUANTITY, CPO.PROMISED_DELIVERY_DATETIME, CPO.COLOR_CHANGE_DATE, 
				CPO.UPDATE_DATE, CPO.FINALIZATION_DATE, BUFFER.BUFFER, BUFFER.SECURITY_STOCK, BUFFER.INVENTORY_ON_SITE, 
				BUFFER.INVENTORY_ON_TRANSIT, BUFFER.INVENTORY_ON_PRODUCTION, BF.YELLOW_ZONE_START, BF.RED_ZONE_START, 
			    CPO.EXCHANGES_IN_QUARANTINE, CPO.QUARANTINE_DATE, CC.SHIPPING_TIME, CC.CDCALENDAR,
			    CPO.ORDER_CREATION_DATE, CPO.NECESSITY_DATETIME, BUFFER.PENDING_DEMAND
           FROM TFSCM_CLI_PURCHASE_ORDERS CPO
		        LEFT JOIN TFSCM_CLI_BUFFER BUFFER    ON (BUFFER.SKU = CPO.SKU AND BUFFER.LOCATION = CPO.DESTINATION)
			    LEFT JOIN TFSCM_CLI_BUFFER_FAMILY BF ON (BUFFER.FAMILY = BF.CDBUFFER_FAMILY)			    
				INNER JOIN TFSCM_CLI_LOCATION CL     ON (CL.CDLOCATION = CPO.DESTINATION)
				INNER JOIN TFSCM_CLI_CALENDAR CC     ON (CC.CDCALENDAR = CL.CDCALENDAR)
	      WHERE ((CPO.FINALIZATION_DATE = @purchaseOrderNotFinalized AND EXCHANGES_IN_QUARANTINE = 0) OR
				 (CONVERT(DATETIME,CONVERT(VARCHAR,CPO.FINALIZATION_DATE, 103),103) = CONVERT(DATETIME,CONVERT(VARCHAR,@vDATE_CALCULATION, 103),103)))
          ORDER BY CPO.SKU,CPO.DESTINATION, CPO.PROMISED_DELIVERY_DATETIME;
		
		OPEN cCdPurchaseOrderCursor;
		FETCH NEXT FROM cCdPurchaseOrderCursor 
		 INTO @CDORDER, @SUPPLIER, @CDORDER_TYPE, @PRIORITY, @PRIORITY_COLOR_OLD, @SKU, @CDDESTINATION,
		      @PENDING_AMOUNT, @PROMISED_DELIVERY_DATETIME, @COLOR_CHANGE_DATE, @UPDATE_DATE, @FINALIZATION_DATE, 
		      @BUFFER, @SECURITY_STOCK, @INVENTORY_ON_SITE, @INVENTORY_ON_TRANSIT, @INVENTORY_ON_PRODUCTION,
		      @YELLOW_ZONE_START, @RED_ZONE_START, @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE,
		      @SHIPPING_TIME, @CDCALENDAR, @ORDER_CREATION_DATE, @NECESSITY_DATETIME, @PENDING_DEMAND;
		      
		WHILE (@@FETCH_STATUS = 0) 
		BEGIN	
			--SET @RECOMMENDED_RELEASE_DATE = NULL;	
			SET @MANAGED_ORDER = NULL; 
			
			IF (@UPDATE_DATE < @serverDate) 
			BEGIN 
				SET @calculationDate = dbo.ADD_TIME_TO_DATE(@UPDATE_DATE, @SHIPPING_TIME);
			END 
			ELSE IF (@UPDATE_DATE = @serverDate) 
			BEGIN 
				SET @calculationDate = GETDATE();
			END 
			
			IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@calculationDate, @CDCALENDAR)) > 0) 
			BEGIN 
				SET @calculationDate = dbo.GET_PREVIOUS_WORK_DAY(@calculationDate, @CDCALENDAR);
			END 
				
			IF (@CDORDER_TYPE <> 'S' AND @FINALIZATION_DATE = @purchaseOrderNotFinalized)
			BEGIN			
				EXEC SP_GET_PURCHASE_PRIORITY_VALUES 
					@calculationDate,
					@ORDER_CREATION_DATE,
					@PROMISED_DELIVERY_DATETIME,
					@NECESSITY_DATETIME,
					@CDCALENDAR,
					@ovaPriority        OUTPUT,
					@ovaPriorityColor   OUTPUT, 
					@ovaPriorityResul   OUTPUT,
					@ovaPriorityMessage OUTPUT;
				
				SET @PRIORITY          = @ovaPriority;
				SET @PRIORITY_COLOR    = @ovaPriorityColor;					
 				SET @COLOR_CHANGE_DATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@COLOR_CHANGE_DATE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @UPDATE_DATE, @CDORDER, 1);
				SET @MANAGED_ORDER     = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);				
				
				UPDATE TFSCM_CLI_PURCHASE_ORDERS
				   SET PRIORITY		     = @PRIORITY,
					   PRIORITY_COLOR    = @PRIORITY_COLOR,
					   COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE,
					   MANAGED           = @MANAGED_ORDER
				 WHERE CDPURCHASE_ORDER = @CDORDER 
				   AND SUPPLIER         = @SUPPLIER;
			END
				
			IF (@CDORDER_TYPE='S')
			BEGIN 										
				IF(@SKU != @skuBefore OR @CDDESTINATION != @cdDestinationBefore)
				BEGIN
					SET @sumPurchaseStock = 0;
					SET @sumTofinishPurchaseStock = 0;
				END
			
				IF(@sumPurchaseStock IS NULL)
				BEGIN
					SET @sumPurchaseStock = 0;
				END 
				
				IF(@sumTofinishPurchaseStock IS NULL)
				BEGIN
					SET @sumTofinishPurchaseStock = 0;
				END			
			
				IF(@FINALIZATION_DATE <> @purchaseOrderNotFinalized)
				BEGIN					
					EXEC SP_GET_STOCK_PURCHASE_PRIORITY_VALUES 
						@YELLOW_ZONE_START,
						@RED_ZONE_START,
						@BUFFER,
						@SECURITY_STOCK,
						@INVENTORY_ON_SITE,
						@INVENTORY_ON_TRANSIT,
						@INVENTORY_ON_PRODUCTION,
						@sumTofinishPurchaseStock,
						@PENDING_DEMAND,
						@ovaPriority        OUTPUT,
						@ovaPriorityColor   OUTPUT,
						@ovaPriorityResul   OUTPUT,
						@ovaPriorityMessage OUTPUT;
					
					IF(@ovaPriorityResul = '1')
					BEGIN
						SET @ovaResult = '1';
						SET @ovaMessage = @ovaPriorityMessage;
					END
					
					SET @PRIORITY            = @ovaPriority;
					SET @PRIORITY_COLOR      = @ovaPriorityColor;
					SET @COLOR_CHANGE_DATE   = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@COLOR_CHANGE_DATE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @UPDATE_DATE, @CDORDER, 1);
					SET @MANAGED_ORDER       = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);
					SET @skuBefore           = @SKU;
					SET @cdDestinationBefore = @CDDESTINATION;
				END
				ELSE
				BEGIN		 
					EXEC SP_GET_STOCK_PURCHASE_PRIORITY_VALUES 
						@YELLOW_ZONE_START,
						@RED_ZONE_START,
						@BUFFER, 
						@SECURITY_STOCK,
						@INVENTORY_ON_SITE,
						@INVENTORY_ON_TRANSIT,
						@INVENTORY_ON_PRODUCTION,
						@sumPurchaseStock,
						@PENDING_DEMAND,
						@ovaPriority        OUTPUT,
						@ovaPriorityColor   OUTPUT,
						@ovaPriorityResul   OUTPUT,
						@ovaPriorityMessage OUTPUT;

					IF(@ovaPriorityResul = '1')
					BEGIN
						SET @ovaResult = '1';
						SET @ovaMessage = @ovaPriorityMessage;
					END 
					SET @PRIORITY            = @ovaPriority
					SET @PRIORITY_COLOR      = @ovaPriorityColor;					
					SET @COLOR_CHANGE_DATE   = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@COLOR_CHANGE_DATE, @PRIORITY_COLOR_OLD,@PRIORITY_COLOR, @UPDATE_DATE, @CDORDER, 1);
					SET @MANAGED_ORDER       = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);
					SET @skuBefore           = @SKU;
					SET @cdDestinationBefore = @CDDESTINATION;
					/*WHEN AN ORDER IS OPEN THEN ADD PENDING AMOUNT INTO
						@sumPurchaseStock*/										
					SET @sumPurchaseStock = @sumPurchaseStock + @PENDING_AMOUNT;
				END
			
				/*WHETHER AN ORDER IS OR NOT FINISHED THEN ADD PENDING AMOUNT INTO sumTofinishPurchaseStock*/
				SET @sumTofinishPurchaseStock = @sumTofinishPurchaseStock+@PENDING_AMOUNT;			
				--PRINT 'VA A ACTUALIZAR'
				UPDATE TFSCM_CLI_PURCHASE_ORDERS
				   SET PRIORITY		     = @PRIORITY,
					   PRIORITY_COLOR    = @PRIORITY_COLOR,
					   COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE,
					   MANAGED           = @MANAGED_ORDER
				 WHERE CDPURCHASE_ORDER =  @CDORDER 
				   AND SUPPLIER         = @SUPPLIER;
			END
					
			SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;
			IF(@vCOMMIT_COUNT = 10)
			BEGIN 
				COMMIT;
				SET @vCOMMIT_COUNT = 0;
			END
			
			FETCH NEXT FROM cCdPurchaseOrderCursor 
			 INTO @CDORDER, @SUPPLIER, @CDORDER_TYPE, @PRIORITY, @PRIORITY_COLOR_OLD, @SKU, @CDDESTINATION,
			      @PENDING_AMOUNT, @PROMISED_DELIVERY_DATETIME, @COLOR_CHANGE_DATE, @UPDATE_DATE, @FINALIZATION_DATE,
		          @BUFFER, @SECURITY_STOCK, @INVENTORY_ON_SITE, @INVENTORY_ON_TRANSIT, @INVENTORY_ON_PRODUCTION,
		          @YELLOW_ZONE_START, @RED_ZONE_START, @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE,
		          @SHIPPING_TIME, @CDCALENDAR, @ORDER_CREATION_DATE, @NECESSITY_DATETIME, @PENDING_DEMAND;
		END
		CLOSE cCdPurchaseOrderCursor;
		DEALLOCATE cCdPurchaseOrderCursor;
		
		SET @ovaMessage =  @ovaMessage+'<br>'+'(' + @vMSG_DATA_EXCHANGE_STOCK_PURCHASE_PRIORITY_SUCESSFUL+ ')';		
		SET @vTrace = 'End of AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS';
		--Procedure result
	    --PRINT	@vTrace		
	END TRY	
	BEGIN CATCH	
		IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderCursor')) IN (0,1))
			BEGIN
				CLOSE cCdPurchaseOrderCursor;  		
			END
			DEALLOCATE cCdPurchaseOrderCursor;  
		END	
	
		--PRINT	@vTrace	
		SET @ovaResult = '1';		
		SET @ovaMessage = ''	
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[BACKUP_DATABASE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Ricardo Osorio Loaiza
-- Create date: 08/10/2013
-- Description:	Procedure to backup database
-- =============================================
CREATE PROCEDURE [dbo].[BACKUP_DATABASE]
	/* Input Parameters */
    @ivaDatabase VARCHAR(200),
    @ivaBackupPath VARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMsg VARCHAR(MAX) OUTPUT

AS
	
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--alter database FocussSCMtest set offline with rollback immediate ;

	BACKUP DATABASE @ivaDatabase  TO DISK = @ivaBackupPath 
	WITH FORMAT, MEDIANAME = 'Z_Default', NAME = 'Full Backup of ';

	SET @ovaResult = '0';
	SET @ovaMsg = 'Successful Backup';

END
GO
/****** Object:  StoredProcedure [dbo].[BUFFER_CHANGES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[BUFFER_CHANGES] 
	@ivaIdExchange          NUMERIC(10), 
	@ivaTempLoadDate        DATE , 
	@ivaCreatorOrModifyUser NVARCHAR(MAX), 
	@ivaErrorValidations	NUMERIC(10), 
	@ovaResult              VARCHAR(1) OUTPUT, 
	@ovaMessage             NVARCHAR(MAX) OUTPUT, 
	@ovaHasProcessed        VARCHAR(1) OUTPUT 
AS 
DECLARE @vTrace                   NVARCHAR(MAX); 
DECLARE @countEvent               INT; 
DECLARE @ovaOverlapped            VARCHAR(1); 
DECLARE @ovaCheckResult           VARCHAR(1); 
DECLARE @ovaCheckMessage          NVARCHAR(MAX); 
DECLARE @preparationRealEndDate   DATE; 
DECLARE @differenceDays           NUMERIC(14,4); 
DECLARE @stepsAverage             INT; 
DECLARE @charIndex                INT; 
DECLARE @skuOld                   VARCHAR(50); 
DECLARE @skuNew                   VARCHAR(50); 
DECLARE @locationOld              VARCHAR(50); 
DECLARE @locationNew              VARCHAR(50); 

DECLARE @vDuplicatedEventCountTemp  INT = 0; 
DECLARE @vErrorsBufferChangesCount  INT = 0; 
DECLARE @vProcessBufferChangesCount INT = 0; 
DECLARE @ovaResultFinished          VARCHAR(1); 
DECLARE @ovaMessageFinished         NVARCHAR(MAX); 
DECLARE @ovaMessageFinishedTotal    NVARCHAR(MAX) = ''; 
DECLARE @vPassesValidations         SMALLINT = 1; 
DECLARE @vCountIntTmp               INT = 0; 
DECLARE @NON_WORKING_DAYS           NUMERIC(10,2); 
DECLARE @DATE_SERVER_NO_TIME        DATE; 
DECLARE @DATE_CALCULATION           DATETIME; 
DECLARE @vCOMMIT_COUNT              NUMERIC(4) = 0; 
DECLARE @CDUNIT_DEFAULT             VARCHAR(50); 
DECLARE @INVENTORY_ACCURACY_DEFAULT NUMERIC(3,0); 
DECLARE @ovaResultAfthetF           VARCHAR(1);
DECLARE @ovaMessageAfthetF          VARCHAR(MAX);
DECLARE @vDummy                     VARCHAR(10) = ''; 
DECLARE @ovaResultRemoveViewNot	   VARCHAR(1); 
DECLARE @ovaMessageRemoveViewNot	   VARCHAR(MAX); 
DECLARE @ovaResultAddViewNot		   VARCHAR(1); 
DECLARE @ovaMessageAddViewNot	   VARCHAR(MAX); 
DECLARE @vTotalErrorsBufferChanges  NUMERIC(8) = 0; 
DECLARE @vMessagesAfterDataExchange VARCHAR = 'N'; 
DECLARE @cursor_buffer_change_sql   NVARCHAR(MAX);
DECLARE @sql_cursor				   NVARCHAR(MAX);
DECLARE @actualFilter			   NVARCHAR(MAX);
DECLARE @vPreparationStartDate	   DATE;
DECLARE @vEventDate				   DATE;
DECLARE @vOtherEvent				   VARCHAR(50);
DECLARE @twoApostrophe			   CHAR(2) = '''''';
DECLARE @oneApostrophe			   CHAR(1) = '''';
DECLARE @NewBufferSize              NUMERIC(17,5) = 0;
DECLARE @PreparationWindow          NUMERIC(10,0) = 0;

DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( 
	SKU VARCHAR(50), LOCATION VARCHAR(50), 
	PRIMARY KEY (SKU, LOCATION) 
) 


BEGIN 

BEGIN TRY 
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements. 
	SET NOCOUNT ON; 
	SET @ovaResult       = '0';
	SET @ovaMessage      = '';
	SET @ovaHasProcessed = '0';
	SET @vTrace          = 'Setting the cursor cDataTempCursor  ';
	SET @DATE_SERVER_NO_TIME = GETDATE(); 
	SET @DATE_CALCULATION    = GETDATE(); 
	SELECT @CDUNIT_DEFAULT = CDUNIT, @INVENTORY_ACCURACY_DEFAULT = INVENTORY_ACCURACY FROM TFSCM_CLI_UNITS WHERE (IS_DEFAULT_UNIT = 1 AND IS_ACTIVE = 1); 

 DECLARE @CHANGE_STEPS AS NUMERIC(10,0) , @CHANGE_TYPE AS VARCHAR(1) , @EVENT AS VARCHAR(50) , @EVENT_ENDING_DATE AS DATETIME , @EVENT_STARTING_DATE AS DATETIME , @LOCATION_CHG AS VARCHAR(50) , @MODE AS VARCHAR(50) , @PREPARATION_END_DATE AS DATETIME , @PREPARATION_START_DATE AS DATETIME , @REQUIRED_CHANGE AS NUMERIC(17,5) , @SKU_CHG AS VARCHAR(50) ;
 DECLARE @BUFFER_SKU                  VARCHAR(50),
         @LOCATION_IS_ACTIVE          BIT,
         @LOCATION_TYPE               VARCHAR(50),
         @CDCALENDAR_DEST             NUMERIC(4,0),
         @SHIPPING_TIME_DEST          VARCHAR(5),
         @BUFFER                      NUMERIC(17,5),
         @REPLENISHMENT_TIME          INT,
         @MINIMUM_BUFFER              NUMERIC(17,5),
         @existChangeType             VARCHAR(50),
         @existChangeMode             VARCHAR(50),
         -- Buffer Changes computed fields 
         @CREATION_DATE               DATETIME,
         @CREATION_USER               VARCHAR(50)   = 'FOCUSSSCM',
         @DAYS_BETWEEN_CHANGES        NUMERIC(17,5) = 0,
         @FILTER                      VARCHAR(MAX)  = NULL,
         @JSON_FILTER                 VARCHAR(MAX)  = NULL,
         @MODIFICATION_DATE           DATETIME      = '1901-01-01 00:00:00',
         @MODIFICATION_USER           VARCHAR(50)   = 'FOCUSSSCM',
         @PROCESSING_DATE             DATETIME      = '1901-01-01 00:00:00',
         @ATYPICAL_CONSUMPTION_STATUS VARCHAR(1)    = 'N'
        ,@REQUIRED_CHANGE_STR                                    AS VARCHAR(50)
        ,@PREPARATION_START_DATE_STR                             AS VARCHAR(50)
        ,@EVENT_STARTING_DATE_STR                                AS VARCHAR(50)
        ,@EVENT_ENDING_DATE_STR                                  AS VARCHAR(50)
        ,@CHANGE_STEPS_STR                                       AS VARCHAR(50)
        ,@PREPARATION_END_DATE_STR                               AS VARCHAR(50)
        ,@PROCESSING_DATE_STR                                    AS VARCHAR(50);
 DECLARE @EVENT_OLD                       VARCHAR(50),
         @SKU_OLD                         VARCHAR(50),
         @BUFFER_NOT_UPGRADEABLE          VARCHAR(50),
         @CHANGE_TYPE_OLD                 VARCHAR(1),
         @LOCATION_OLD                    VARCHAR(50),
         @LOCATION_IS_ACTIVE_OLD          BIT,
         @LOCATION_TYPE_OLD               VARCHAR(50),
         @CDCALENDAR_DEST_OLD             NUMERIC(4,0),
         @SHIPPING_TIME_DEST_OLD          VARCHAR(5),
         @REQUIRED_CHANGE_OLD             NUMERIC(17,5),
         @PREPARATION_START_DATE_OLD      DATE,
         @EVENT_STARTING_DATE_OLD         DATE,
         @EVENT_ENDING_DATE_OLD           DATE,
         @CHANGE_STEPS_OLD                NUMERIC(10,0),
         @PREPARATION_END_DATE_OLD        DATE,
         @MODE_OLD                        VARCHAR(50),
         @FILTER_OLD                      VARCHAR(MAX),
         @JSON_FILTER_OLD                 VARCHAR(MAX),
         @CREATION_DATE_OLD               DATETIME,
         @CREATION_USER_OLD               VARCHAR(50),
         @DAYS_BETWEEN_CHANGES_OLD        NUMERIC(17,5),
         @MODIFICATION_DATE_OLD           DATETIME,
         @MODIFICATION_USER_OLD           VARCHAR(50),
         @PROCESSING_DATE_OLD             DATETIME,
         @ATYPICAL_CONSUMPTION_STATUS_OLD VARCHAR(1),
         @ID_TEMP                     INT;

	BEGIN TRY 

		-- -----------------------------------------------------------------------------------
		-- MESSAGES 
		-- -----------------------------------------------------------------------------------
		DECLARE @vLanguage                                 VARCHAR(2) = 'es';
		DECLARE @vCodErrorResultMessages                   VARCHAR(1);

		DECLARE @vMessageErrorResultMessages               NVARCHAR(MAX);
		SELECT @vLanguage = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P] 
		 WHERE [P].[CDPARAM] = 'DEFAULT_LANGUAGE';

		DECLARE @MSG_DEX_CHANGES_EVENT_DUPLICATED         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_COUNT_EVENT_DUPL         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_IS_NULL            NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_SKU_NULL                 NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_BUFFER_NOT_FOUND         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_LOCATION_NOT_FOUND       NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_SKU_IS_NULL              NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL       NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND     NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_INVALID       NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID     NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL     NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID     NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR  NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_PREP_DATE_IS_NULL        NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_PREP_DATE_INVALID        NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_PREP_END_ERROR           NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_PREP_REAL_END_ERROR      NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR     NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_MODE_IS_NULL             NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME   NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_SKU_CHANGES              NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_LOCATION_CHANGES         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_START_DATE_NULL    NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR   NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR  NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_STARTED			  NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_SUCESSFUL_EVENTS         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_ERROR_EVENTS             NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_UNEXPECTED_ERROR         NVARCHAR(MAX);
		DECLARE @MSG_DEX_CHANGES_EVENT_PROCESSED          NVARCHAR(MAX);

		SET @MSG_DEX_CHANGES_EVENT_DUPLICATED        = 'DEX_CHANGES_EVENT_DUPLICATED';
		SET @MSG_DEX_CHANGES_COUNT_EVENT_DUPL        = 'DEX_CHANGES_COUNT_EVENT_DUPL';
		SET @MSG_DEX_CHANGES_EVENT_IS_NULL           = 'DEX_CHANGES_EVENT_IS_NULL';
		SET @MSG_DEX_CHANGES_SKU_NULL                = 'DEX_CHANGES_SKU_NULL';
		SET @MSG_DEX_CHANGES_BUFFER_NOT_FOUND        = 'DEX_CHANGES_BUFFER_NOT_FOUND';
		SET @MSG_DEX_CHANGES_LOCATION_NOT_FOUND      = 'DEX_CHANGES_LOCATION_NOT_FOUND';
		SET @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID   = 'DEX_CHANGES_LOCATION_TYPE_INVALID';
		SET @MSG_DEX_CHANGES_SKU_IS_NULL             = 'DEX_CHANGES_SKU_IS_NULL';
		SET @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND   = 'DEX_CHANGES_CHANGE_TYPE_NOT_FOUND';
		SET @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL      = 'DEX_CHANGES_REQ_CHANGE_IS_NULL';
		SET @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND    = 'DEX_CHANGES_CDCALENDAR_NOT_FOUND';
		SET @MSG_DEX_CHANGES_REQ_CHANGE_INVALID      = 'DEX_CHANGES_REQ_CHANGE_INVALID';
		SET @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID    = 'DEX_CHANGES_REQ_CHANGE_P_INVALID';
		SET @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT   = 'DEX_CHANGES_REQ_CHANGE_TYPE_ALERT';
		SET @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL    = 'DEX_CHANGES_CHANGE_STEPS_IS_NULL';
		SET @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID    = 'DEX_CHANGES_CHANGE_STEPS_INVALID';
		SET @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR = 'DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR';
		SET @MSG_DEX_CHANGES_PREP_DATE_IS_NULL       = 'DEX_CHANGES_PREP_DATE_IS_NULL';
		SET @MSG_DEX_CHANGES_PREP_DATE_INVALID       = 'DEX_CHANGES_PREP_DATE_INVALID';
		SET @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL   = 'DEX_CHANGES_PREP_END_DATE_IS_NULL';
		SET @MSG_DEX_CHANGES_PREP_END_ERROR          = 'DEX_CHANGES_PREP_END_ERROR';
		SET @MSG_DEX_CHANGES_PREP_REAL_END_ERROR     = 'DEX_CHANGES_PREP_REAL_END_ERROR';
		SET @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR    = 'DEX_CHANGES_EVENT_END_DATE_ERROR';
		SET @MSG_DEX_CHANGES_MODE_IS_NULL            = 'DEX_CHANGES_MODE_IS_NULL';
		SET @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR   = 'DEX_CHANGES_REDU_EVENT_MODE_ERROR';
		SET @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME  = 'DEX_CHANGES_BIG_REPLENISHMENT_TIME';
		SET @MSG_DEX_CHANGES_SKU_CHANGES             = 'DEX_CHANGES_SKU_CHANGES';
		SET @MSG_DEX_CHANGES_LOCATION_CHANGES        = 'DEX_CHANGES_LOCATION_CHANGES';
		SET @MSG_DEX_CHANGES_EVENT_START_DATE_NULL   = 'DEX_CHANGES_EVENT_START_DATE_NULL';
		SET @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR  = 'DEX_CHANGES_EVENT_START_DATE_ERROR';
		SET @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR = 'DEX_CHANGES_OVERLAPPED_EVENTS_ERROR';
		SET @MSG_DEX_CHANGES_EVENT_STARTED           = 'DEX_CHANGES_EVENT_STARTED';
		SET @MSG_DEX_CHANGES_SUCESSFUL_EVENTS        = 'DEX_CHANGES_SUCESSFUL_EVENTS';
		SET @MSG_DEX_CHANGES_ERROR_EVENTS            = 'DEX_CHANGES_ERROR_EVENTS';
		SET @MSG_DEX_CHANGES_UNEXPECTED_ERROR        = 'DEX_CHANGES_UNEXPECTED_ERROR';

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_DUPLICATED', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_DUPLICATED OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_COUNT_EVENT_DUPL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_COUNT_EVENT_DUPL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DEX_CHANGES_SKU_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_SKU_NULL OUTPUT

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DEX_CHANGES_BUFFER_NOT_FOUND', @vLanguage, '', '', '', @MSG_DEX_CHANGES_BUFFER_NOT_FOUND OUTPUT

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_LOCATION_NOT_FOUND', @vLanguage, '', '', '', @MSG_DEX_CHANGES_LOCATION_NOT_FOUND OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_LOCATION_TYPE_INVALID', @vLanguage, '', '', '', @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_SKU_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_SKU_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_CHANGE_TYPE_NOT_FOUND', @vLanguage, '', '', '', @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_REQ_CHANGE_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_CDCALENDAR_NOT_FOUND', @vLanguage, '', '', '', @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_REQ_CHANGE_INVALID', @vLanguage, '', '', '', @MSG_DEX_CHANGES_REQ_CHANGE_INVALID OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_REQ_CHANGE_P_INVALID', @vLanguage, '', '', '', @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_CHANGE_STEPS_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_CHANGE_STEPS_INVALID', @vLanguage, '', '', '', @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_PREP_DATE_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_PREP_DATE_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_PREP_DATE_INVALID', @vLanguage, '', '', '', @MSG_DEX_CHANGES_PREP_DATE_INVALID OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_PREP_END_DATE_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_PREP_END_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_PREP_END_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_PREP_REAL_END_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_PREP_REAL_END_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_END_DATE_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_MODE_IS_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_MODE_IS_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_BIG_REPLENISHMENT_TIME', @vLanguage, '', '', '', @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_SKU_CHANGES', @vLanguage, '', '', '', @MSG_DEX_CHANGES_SKU_CHANGES OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_LOCATION_CHANGES', @vLanguage, '', '', '', @MSG_DEX_CHANGES_LOCATION_CHANGES OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_START_DATE_NULL', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_START_DATE_NULL OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_START_DATE_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_OVERLAPPED_EVENTS_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_EVENT_STARTED', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_STARTED OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_SUCESSFUL_EVENTS', @vLanguage, '', '', '', @MSG_DEX_CHANGES_SUCESSFUL_EVENTS OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_ERROR_EVENTS', @vLanguage, '', '', '', @MSG_DEX_CHANGES_ERROR_EVENTS OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_CHANGES_UNEXPECTED_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_UNEXPECTED_ERROR OUTPUT 
		-- -----------------------------------------------------------------------------------


		DECLARE @PK_EVENT_ERROR_LOG AS VARCHAR(50); 
		DECLARE @FILE_NAME AS VARCHAR(500); 
		DECLARE @FILE_ROW_NUMBER AS INT; 

		-- ----------------------------------------------------------------------------------- 
		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  
		-- ---------------------------------------------------------------------------------- 
		IF OBJECT_ID('tempdb..#DuplicateChangesTemp') IS NOT NULL  
			DROP TABLE #DuplicateChangesTemp; 

		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  INTO #DuplicateChangesTemp 
		  FROM [dbo].[TFSCM_COM_LOG] 
		 WHERE 1 = 2; 

		INSERT INTO #DuplicateChangesTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT [BCTDUP].[COUNTER1], @MSG_DEX_CHANGES_EVENT_DUPLICATED + CAST([BCTDUP].[COUNTER1] AS VARCHAR) + '.', NULL, 'E', GETDATE(), [BCT].[SKU_CHG], [BCT].[LOCATION_CHG],
			   [BCT].[EVENT], [BCT].[FILE_ROW_NUMBER], 'EVENT', [BCT].[FILE_NAME], @ivaTempLoadDate 
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [BCT] 
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[EVENT], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
				  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]             = @ivaIdExchange 
				   AND [TMP].[PREPARATION_START_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[EVENT]  
				HAVING COUNT(1) > 1) AS [BCTDUP] 
			ON ([BCT].[IDEXCHANGE]             = @ivaIdExchange 
			AND [BCT].[PREPARATION_START_DATE] = @ivaTempLoadDate 
			AND [BCTDUP].[EVENT]               = [BCT].[EVENT] 
			AND [BCT].[FILE_ROW_NUMBER]        = [BCTDUP].[FILE_ROW_NUMBER]); 

		SELECT @vDuplicatedEventCountTemp = SUM(COUNTER1) FROM #DuplicateChangesTemp;
		SET @vErrorsBufferChangesCount    = @vErrorsBufferChangesCount + ISNULL(@vDuplicatedEventCountTemp, 0);

		-- Counting repeated events 
		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  FROM #DuplicateChangesTemp; 

		DELETE [BCT] 
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [BCT] 
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[EVENT] 
				  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]             = @ivaIdExchange 
				   AND [TMP].[PREPARATION_START_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[EVENT]  
				HAVING COUNT(1) > 1) AS [BCTDUP] 
			ON ([BCT].[IDEXCHANGE]             = @ivaIdExchange 
			AND [BCT].[PREPARATION_START_DATE] = @ivaTempLoadDate 
			AND [BCTDUP].[EVENT]               = [BCT].[EVENT]); 

		/*DECLARE cErrorLogCursor CURSOR FAST_FORWARD FOR
		SELECT TEMPO.COUNTER1, TEMPO.EVENT, TEMPO.FILE_NAME, TEMPO.FILE_ROW_NUMBER 
		  FROM (  SELECT COUNT(1) AS COUNTER1, TMP.EVENT, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER 
					FROM TFSCM_CLI_BUFFER_CHANGES_TEMP TMP 
				   WHERE TMP.IDEXCHANGE             = @ivaIdExchange 
					 AND TMP.PREPARATION_START_DATE = @ivaTempLoadDate
				   GROUP BY TMP.EVENT, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER 
				) TEMPO 
		 WHERE TEMPO.COUNTER1 > 1 

		OPEN cErrorLogCursor;
		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedEventCountTemp, @PK_EVENT_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER;

		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
									  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
			VALUES (@MSG_DEX_CHANGES_EVENT_DUPLICATED, NULL, 'E', GETDATE(), @PK_EVENT_ERROR_LOG, NULL,
				    @PK_EVENT_ERROR_LOG, @FILE_ROW_NUMBER, 'EVENT', @FILE_NAME, @ivaTempLoadDate );

			SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + @vDuplicatedEventCountTemp;
			SET @ovaResult = '1'; 

			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedEventCountTemp, @PK_EVENT_ERROR_LOG;
		END 
		CLOSE cErrorLogCursor;
		DEALLOCATE cErrorLogCursor;*/
	END TRY 
	BEGIN CATCH 
	END CATCH 

    -- -------------------------------------------------------------------------------
    -- Method to get all programmed buffer changes in order to performance improvement
    -- -------------------------------------------------------------------------------
	BEGIN TRY	
		--declare temporal table
		DECLARE @tempSKUBuffer AS tempSKUBuffer;
		-- tener en cuenta el evento
		SET @cursor_buffer_change_sql = N'DECLARE c_event_buffer_change CURSOR FAST_FORWARD FOR ';
		SET @sql_cursor = N' SELECT CH.EVENT, CH.PREPARATION_START_DATE,'+
						   '        CASE WHEN CH.EVENT_ENDING_DATE IS NULL OR CH.EVENT_ENDING_DATE = '''' OR CH.EVENT_ENDING_DATE = ''1901-01-01'' '+
						   '             THEN CH.EVENT_STARTING_DATE '+
						   '        ELSE CH.EVENT_ENDING_DATE END AS EVENT_DATE, CH.FILTER '+
						   '	FROM TFSCM_CLI_BUFFER_CHANGES CH '+
						   '  WHERE CH.PROCESSING_DATE = ''1901-01-01 00:00''';

			EXEC(@cursor_buffer_change_sql + @sql_cursor);
			OPEN c_event_buffer_change;
			FETCH NEXT FROM c_event_buffer_change INTO @vOtherEvent, @vPreparationStartDate, @vEventDate, @actualFilter;

			WHILE(@@FETCH_STATUS = 0)
			BEGIN	
				SET @actualFilter = REPLACE(@actualFilter, @twoApostrophe, @oneApostrophe);
				
				
				DECLARE @sqlSKUBuffer AS NVARCHAR(MAX) =  N'SELECT BUFFER.SKU, BUFFER.LOCATION, '''+@vOtherEvent+''', '''+CAST(@vPreparationStartDate AS VARCHAR)+''','''+CAST(@vEventDate AS VARCHAR)+''''+
														   '  FROM TFSCM_CLI_BUFFER BUFFER '+
														   '       INNER JOIN TFSCM_CLI_LOCATION LOCATION '+
														   '          ON LOCATION.CDLOCATION = BUFFER.LOCATION '+
														   ' WHERE BUFFER.INACTIVE = 0 AND '+@actualFilter;

				INSERT INTO @tempSKUBuffer EXECUTE (@sqlSKUBuffer);

			FETCH NEXT FROM c_event_buffer_change INTO @vOtherEvent, @vPreparationStartDate, @vEventDate, @actualFilter;
			END 
			CLOSE c_event_buffer_change;
			DEALLOCATE c_event_buffer_change;
	END TRY
	BEGIN CATCH  
   	
		IF ((SELECT CURSOR_STATUS('global','c_event_buffer_change')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','c_event_buffer_change')) IN (0,1))
			BEGIN
				CLOSE c_event_buffer_change;  		
			END
			DEALLOCATE c_event_buffer_change;  
		END			
	END CATCH

	-- Cursor for reading all events loaded to the temporal 
	DECLARE cDataTempCursor CURSOR FAST_FORWARD 
	FOR 
	SELECT TMP.CHANGE_STEPS,TMP.CHANGE_TYPE,TMP.EVENT,TMP.EVENT_ENDING_DATE,TMP.EVENT_STARTING_DATE,TMP.LOCATION_CHG,TMP.MODE,TMP.PREPARATION_END_DATE,TMP.PREPARATION_START_DATE,TMP.REQUIRED_CHANGE,TMP.SKU_CHG, BCHOLD.EVENT, BCHOLD.SKU_CHG, BCHOLD.CHANGE_TYPE, BCHOLD.LOCATION_CHG, LDESTOLD.IS_ACTIVE, LDESTOLD.LOCATION_TYPE, CAL_DEST_OLD.CDCALENDAR, CAL_DEST_OLD.SHIPPING_TIME, BCHOLD.REQUIRED_CHANGE, BCHOLD.PREPARATION_START_DATE, BCHOLD.EVENT_STARTING_DATE, BCHOLD.EVENT_ENDING_DATE, BCHOLD.CHANGE_STEPS, BCHOLD.PREPARATION_END_DATE, BCHOLD.MODE, BCHOLD.FILTER, BCHOLD.JSON_FILTER, BCHOLD.CREATION_DATE, BCHOLD.CREATION_USER, BCHOLD.DAYS_BETWEEN_CHANGES, BCHOLD.MODIFICATION_DATE, BCHOLD.MODIFICATION_USER, BCHOLD.PROCESSING_DATE, BCHOLD.ATYPICAL_CONSUMPTION_STATUS, TMP.ID, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER, B.SKU AS BUFFER_SKU, LDEST.IS_ACTIVE, LDEST.LOCATION_TYPE, CAL_DEST.CDCALENDAR, CAL_DEST.SHIPPING_TIME, B.BUFFER, B.REPLENISHMENT_TIME, B.MINIMUM_BUFFER, CHANGE_TYPES.CODE, CHANGE_MODES.CODE, TMP.REQUIRED_CHANGE_STR, TMP.PREPARATION_START_DATE_STR, TMP.EVENT_STARTING_DATE_STR, TMP.EVENT_ENDING_DATE_STR, TMP.CHANGE_STEPS_STR, TMP.PREPARATION_END_DATE_STR, TMP.PROCESSING_DATE_STR
	  FROM TFSCM_CLI_BUFFER_CHANGES_TEMP TMP 
	  LEFT OUTER JOIN TFSCM_CLI_BUFFER_CHANGES BCHOLD ON (BCHOLD.EVENT = TMP.EVENT) 
	  LEFT OUTER JOIN TFSCM_CLI_BUFFER B ON (B.SKU = TMP.SKU_CHG AND B.LOCATION = TMP.LOCATION_CHG AND B.INACTIVE = 0)  
	  LEFT OUTER JOIN TFSCM_CLI_LOCATION LDEST ON (LDEST.CDLOCATION = TMP.LOCATION_CHG) 
	  LEFT OUTER JOIN TFSCM_CLI_LOCATION LDESTOLD ON (LDESTOLD.CDLOCATION = BCHOLD.LOCATION_CHG) 
	  LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST ON (CAL_DEST.CDCALENDAR = LDEST.CDCALENDAR AND CAL_DEST.IS_ACTIVE = 1) 
	  LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST_OLD ON (CAL_DEST_OLD.CDCALENDAR = LDESTOLD.CDCALENDAR AND CAL_DEST_OLD.IS_ACTIVE = 1) 
	  LEFT OUTER JOIN TFSCM_CLI_COLUMN_LIST CHANGE_TYPES ON (CHANGE_TYPES.CODE = TMP.CHANGE_TYPE AND CHANGE_TYPES.LIST_TYPE = 'CHANGE_TYPE') 
	  LEFT OUTER JOIN TFSCM_CLI_COLUMN_LIST CHANGE_MODES ON (CHANGE_MODES.CODE = TMP.MODE AND CHANGE_MODES.LIST_TYPE = 'CHANGE_MODE') 

	 WHERE TMP.IDEXCHANGE = @ivaIdExchange 
	   AND TMP.ID IN 
		( 
		  SELECT TEMPO.ID 
			FROM 
				( SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID 
					FROM TFSCM_CLI_BUFFER_CHANGES_TEMP TMPAUX 
				   WHERE TMPAUX.IDEXCHANGE             = @ivaIdExchange 
					 AND TMPAUX.PREPARATION_START_DATE = @ivaTempLoadDate
				   GROUP BY TMPAUX.EVENT 
				) TEMPO 
		   WHERE TEMPO.COUNTER1 = 1 
		) 
	 ORDER BY TMP.EVENT 

	OPEN cDataTempCursor;
	FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;

	SET @vTrace = 'go inside the cursor cDataTempCursor';

	WHILE (@@FETCH_STATUS = 0 ) 
	BEGIN 
		BEGIN TRY 
			-- If the event exists 
			IF (@EVENT_OLD IS NOT NULL) 
			BEGIN 
				SET @vDummy      = ''; 
				SET @FILTER      = @FILTER_OLD;
				SET @JSON_FILTER = @JSON_FILTER_OLD;

				-- If the event already started, it is not possible to modify it
			END

			SET @vPassesValidations = 1; 

			-- Validate if event is empty
			IF (@vPassesValidations != 0 AND @EVENT IS NULL)
			BEGIN
				SET @vPassesValidations = 0;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_EVENT_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, 
					    @EVENT, @FILE_ROW_NUMBER, 'EVENT', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 

			SELECT @countEvent = COUNT(1) 
			  FROM TFSCM_CLI_BUFFER_CHANGES 
			 WHERE EVENT = @EVENT;

			-- -------------------------------------------------------------------------------
			-- OHLO 20200521: Since v5.1.0, check if the event is already processed. 
			-- -------------------------------------------------------------------------------
			IF (@vPassesValidations != 0 AND @EVENT_OLD IS NOT NULL AND @PROCESSING_DATE_OLD IS NOT NULL AND @PROCESSING_DATE_OLD != '1901-01-01 00:00')
			BEGIN
				SET @vPassesValidations = 0;

				EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
					'DEX_CHANGES_EVENT_PROCESSED', @vLanguage, '', '', '', @MSG_DEX_CHANGES_EVENT_PROCESSED OUTPUT 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_EVENT_PROCESSED, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, 
						@EVENT_OLD, @FILE_ROW_NUMBER, 'EVENT', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END  
			-- -------------------------------------------------------------------------------

			-- Validate if sku is empty
			IF (@vPassesValidations != 0 AND @SKU_CHG IS NULL)
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_SKU_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, 
					    @SKU_CHG, @FILE_ROW_NUMBER, 'SKU_CHG', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END

			-- Validate if location is empty or inactive
			IF (@vPassesValidations != 0 AND (@LOCATION_CHG IS NULL OR @LOCATION_IS_ACTIVE IS NULL OR @LOCATION_IS_ACTIVE = 0) )
			BEGIN
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@MSG_DEX_CHANGES_LOCATION_NOT_FOUND, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, 'LOCATION_CHG', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE;
			END

			-- Validate if location has a valid type
			IF (@vPassesValidations != 0 AND ( @LOCATION_TYPE IS NULL OR (@LOCATION_TYPE != 'WH' AND @LOCATION_TYPE != 'CL' AND @LOCATION_TYPE != 'PS') ) )
			BEGIN
				SET @vPassesValidations = 0;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_LOCATION_TYPE_INVALID, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, 'LOCATION_CHG', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE;
			END

			-- Validate if the calendar related to the location is empty or inactive
			IF (@vPassesValidations != 0 AND @CDCALENDAR_DEST IS NULL)
			BEGIN
				SET @vPassesValidations = 0;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, 'LOCATION_CHG', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE;
			END

			-- Validate if buffer is empty or inactive
			IF (@vPassesValidations != 0 AND (@BUFFER_SKU IS NULL))  
			BEGIN
				SET @vPassesValidations = 0;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_CHANGES_BUFFER_NOT_FOUND, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @SKU_CHG + '; ' + @LOCATION_CHG, 105), @FILE_ROW_NUMBER, 'SKU_CHG', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE;
			END

			-- Validate if change type is empty or invalid
			IF (@vPassesValidations != 0 AND (@CHANGE_TYPE IS NULL OR @existChangeType IS NULL))  
			BEGIN  
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER,  COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_TYPE, 105), @FILE_ROW_NUMBER, 'CHANGE_TYPE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END
			
			-- Validate if required change is empty
			IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE_STR, 105), @FILE_ROW_NUMBER, 'REQUIRED_CHANGE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE 
			BEGIN 
				-- Depending on the change type, validate the required change value
				DECLARE @changeTypeMsg VARCHAR(MAX) = ''; 
				IF (@vPassesValidations != 0 AND @CHANGE_TYPE = 'P' AND @REQUIRED_CHANGE < -1) 
				BEGIN 
					SET @vPassesValidations = 0; 
					SET @changeTypeMsg = @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID;
				END 
				ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE = 0) 
				BEGIN 
					SET @vPassesValidations = 0; 
					SET @changeTypeMsg = @MSG_DEX_CHANGES_REQ_CHANGE_INVALID;
				END 
				ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE < 0)
				BEGIN 
					IF (@CHANGE_TYPE = 'P') 
					BEGIN 
						SET @NewBufferSize = (1 + @REQUIRED_CHANGE) * @BUFFER; 
					END 
					ELSE IF (@CHANGE_TYPE = 'A') 
					BEGIN 
						SET @NewBufferSize = @REQUIRED_CHANGE + @BUFFER; 
					END 

					IF (@NewBufferSize <= @MINIMUM_BUFFER) 					BEGIN 
						EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
							'DEX_CHANGES_REQ_CHANGE_TYPE_ALERT', @vLanguage, '', '', '', @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT OUTPUT 

						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
						VALUES (@MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT + @EVENT + '.', NULL, 'A', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE_STR, 105), @FILE_ROW_NUMBER, 'REQUIRED_CHANGE', @FILE_NAME, @ivaTempLoadDate) 
					END 
				END 
				IF (@vPassesValidations = 0) 
				BEGIN 
					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@changeTypeMsg, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE_STR, 105), @FILE_ROW_NUMBER, 'REQUIRED_CHANGE', @FILE_NAME, @ivaTempLoadDate);

					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
					SET @ovaResult = '1'; 

					FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
					CONTINUE; 
				END 
			END 

			-- Validate if preparation start date is empty, else, if it has a value less than current date
			IF (@vPassesValidations != 0 AND @PREPARATION_START_DATE IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_PREP_DATE_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_START_DATE_STR, 105), @FILE_ROW_NUMBER, 'PREPARATION_START_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @PREPARATION_START_DATE < @DATE_SERVER_NO_TIME) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_PREP_DATE_INVALID, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_START_DATE_STR, 105), @FILE_ROW_NUMBER, 'PREPARATION_START_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 

			-- Validate if preparation start date is empty, else, if it has a value less than preparation start date
			IF (@vPassesValidations != 0 AND @PREPARATION_END_DATE IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_END_DATE_STR, 105), @FILE_ROW_NUMBER, 'PREPARATION_END_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @PREPARATION_END_DATE < @PREPARATION_START_DATE ) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_PREP_END_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_END_DATE_STR, 105), @FILE_ROW_NUMBER, 'PREPARATION_END_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			

			-- Validate if steps is empty, else, if it has a value less than or equal to zero
			IF (@vPassesValidations != 0 AND @CHANGE_STEPS IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS_STR, 105), @FILE_ROW_NUMBER, 'CHANGE_STEPS', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @CHANGE_STEPS <= 0) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_CHANGE_STEPS_INVALID, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS_STR, 105), @FILE_ROW_NUMBER, 'CHANGE_STEPS', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE  IF (@vPassesValidations != 0) 
			BEGIN 
				SET @PreparationWindow = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PREPARATION_END_DATE, @PREPARATION_START_DATE) + 1; 

				IF (@CHANGE_STEPS > @PreparationWindow) 
				BEGIN 
					SET @vPassesValidations = 0; 

					EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
						'DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR OUTPUT 

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS_STR, 105), @FILE_ROW_NUMBER, 'CHANGE_STEPS', @FILE_NAME, @ivaTempLoadDate);

					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
					SET @ovaResult = '1'; 

					FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
					CONTINUE; 
				END 
			END 

			-- Validate if event starting date is empty, else, if it has a value less than preparation end date
			IF (@vPassesValidations != 0 AND @EVENT_STARTING_DATE IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_EVENT_START_DATE_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_STARTING_DATE_STR, 105), @FILE_ROW_NUMBER, 'EVENT_STARTING_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @EVENT_STARTING_DATE < @PREPARATION_END_DATE) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_EVENT_START_DATE_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_STARTING_DATE_STR, 105), @FILE_ROW_NUMBER, 'EVENT_STARTING_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 

			-- If event ending date is empty, set it to 1901-01-01, else, validate if it has a value less than event starting date
			IF (@EVENT_ENDING_DATE IS NULL) 
			BEGIN 
				SET @EVENT_ENDING_DATE = '1901/01/01'; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @EVENT_ENDING_DATE <> '1901/01/01' AND @EVENT_ENDING_DATE < @EVENT_STARTING_DATE ) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_EVENT_END_DATE_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE_STR, 105), @FILE_ROW_NUMBER, 'EVENT_ENDING_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 

			-- Validate if mode is empty or has an invalid value
			IF (@vPassesValidations != 0 AND (@MODE IS NULL OR @existChangeMode IS NULL)) 
			BEGIN 
				-- If event ending date is empty, assigne mode NONE by default
				IF (@EVENT_ENDING_DATE = '1901/01/01') 
				BEGIN
					SET @MODE = 'NONE'; 
				END
				ELSE
				BEGIN
					SET @vPassesValidations = 0; 

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@MSG_DEX_CHANGES_MODE_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @MODE, 105), @FILE_ROW_NUMBER, 'MODE', @FILE_NAME, @ivaTempLoadDate);

					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
					SET @ovaResult = '1'; 

					FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
					CONTINUE; 
				END
			END 

			-- If event ending date is not empty and the mode is nor Partial or Total
			IF (@vPassesValidations != 0 AND @EVENT_ENDING_DATE <> '1901/01/01' AND (@MODE <> 'PARTIAL' AND @MODE <> 'TOTAL')) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_MODE_IS_NULL, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE_STR, 105), @FILE_ROW_NUMBER, 'EVENT_ENDING_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END 
			ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE < 0 AND @MODE = 'TOTAL') 
			BEGIN 
				EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
					'DEX_CHANGES_REDU_EVENT_MODE_ERROR', @vLanguage, '', '', '', @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR OUTPUT 

				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @MODE, 105), @FILE_ROW_NUMBER, 'MODE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END  
			-- If event ending date is not empty and the mode is equal to Partial, validate if replenishment time is too big
			ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE > 0 AND @EVENT_ENDING_DATE <> '1901/01/01' AND @MODE = 'PARTIAL') 
			BEGIN 
				SET @differenceDays  = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@EVENT_ENDING_DATE, @EVENT_STARTING_DATE);

				IF (@vPassesValidations != 0 AND @differenceDays < @REPLENISHMENT_TIME ) 
				BEGIN 
					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
					VALUES (@MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME, NULL, 'A', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REPLENISHMENT_TIME, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_TIME', @FILE_NAME, @ivaTempLoadDate);
				END 
			END 

			-- If event already exists, check if sku and/or location have changed
			-- in order to change the column Filter
			IF (@EVENT_OLD IS NOT NULL AND LTRIM(RTRIM(@EVENT_OLD)) <> '') 
			BEGIN
				SET @skuOld      = @SKU_CHG;
				SET @skuNew      = @SKU_CHG;

				IF (@SKU_OLD IS NOT NULL AND LTRIM(RTRIM(@SKU_OLD)) <> '') 
				BEGIN
					IF(@SKU_OLD <> @SKU_CHG) 
					BEGIN
						SET @skuOld = @SKU_OLD;

						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
						VALUES (@MSG_DEX_CHANGES_SKU_CHANGES, NULL, 'I', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @SKU_OLD, 105), @FILE_ROW_NUMBER, 'SKU_CHG', @FILE_NAME, @ivaTempLoadDate);
					END
				END  

				SET @locationOld = @LOCATION_CHG;
				SET @locationNew = @LOCATION_CHG;

				IF (@LOCATION_OLD IS NOT NULL AND LTRIM(RTRIM(@LOCATION_OLD)) <> '') 
				BEGIN
					IF(@LOCATION_OLD <> @LOCATION_CHG) 
					BEGIN
						SET @locationOld = @LOCATION_OLD;

						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
						VALUES (@MSG_DEX_CHANGES_LOCATION_CHANGES, NULL, 'I', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_OLD, 105), @FILE_ROW_NUMBER, 'LOCATION_CHG', @FILE_NAME, @ivaTempLoadDate);
					END
				END 

			END 
			ELSE 
			BEGIN
				SET @skuNew      = @SKU_CHG;
				SET @locationNew = @LOCATION_CHG;
			END 
           
			SET @FILTER      = '(   BUFFER.SKU ='''+REPLACE(@skuNew, '''','''''')+'''  AND BUFFER.LOCATION ='''+REPLACE(@locationNew, '''','''''')+'''  ) ';
			SET @JSON_FILTER = '{    "_constructor":"AdvancedCriteria",' +
							   '     "operator":"and",' +
							   '     "criteria":['+
							   '        {            "operator":"iEquals",             "fieldName":"SKU",             "value":"'+@skuNew+'"        },'+
							   '        {            "operator":"iEquals",             "fieldName":"LOCATION",             "value":"'+@locationNew+'"        }'+
							   '    ]}'; 

			-- Validate if the buffer exists 
			DECLARE @EVENT_DATE DATE; 
			SET @EVENT_DATE = @EVENT_ENDING_DATE;

			IF (@EVENT_ENDING_DATE IS NULL OR @EVENT_ENDING_DATE = '1901/01/01') 
			BEGIN 
				SET @EVENT_DATE = @EVENT_STARTING_DATE;
			END
           
			EXEC dbo.VALIDATE_EVENT_BUFFER_CHANGE @tempSKUBuffer, @FILTER, @PREPARATION_START_DATE, 
				@EVENT_DATE, @EVENT, @vLanguage, @ovaCheckResult OUTPUT, 
				@ovaCheckMessage OUTPUT ;

			IF (@ovaCheckResult = 1) 
			BEGIN 
				SET @vPassesValidations = 0; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@ovaCheckMessage, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE_STR, 105), @FILE_ROW_NUMBER, 'EVENT_ENDING_DATE', @FILE_NAME, @ivaTempLoadDate);

				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
				CONTINUE; 
			END

			IF (@vPassesValidations != 0) 
			BEGIN 
				SET @differenceDays = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PREPARATION_END_DATE, @PREPARATION_START_DATE) + 1; 
				SET @DAYS_BETWEEN_CHANGES  = (@differenceDays / @CHANGE_STEPS);  
			END


			-- If validations pass, then update or insert the event
			IF(@vPassesValidations = 1) 
			BEGIN 
				IF (@EVENT_OLD IS NOT NULL) 
				BEGIN 
					SET @vDummy = ''; 
					-- Set inicial values for computed columns
					SET @CREATION_DATE               = @CREATION_DATE_OLD;
					SET @CREATION_USER               = @CREATION_USER_OLD;
					SET @DAYS_BETWEEN_CHANGES        = @DAYS_BETWEEN_CHANGES_OLD;
					--SET @FILTER                    = @FILTER_OLD;
					--SET @JSON_FILTER               = @JSON_FILTER_OLD;
					SET @MODIFICATION_DATE           = GETDATE() ;
					SET @MODIFICATION_USER           = 'FOCUSSSCM'; 
					SET @PROCESSING_DATE             = @PROCESSING_DATE_OLD; 
					SET @ATYPICAL_CONSUMPTION_STATUS = @ATYPICAL_CONSUMPTION_STATUS_OLD; 
				END
				ELSE 
				BEGIN 
					SET @CREATION_DATE        = GETDATE();
					SET @CREATION_USER        = 'FOCUSSSCM';
					SET @MODIFICATION_DATE    = GETDATE() ;
					SET @MODIFICATION_USER    = 'FOCUSSSCM'; 
				END

				-- If event does not exist, insert it, else, update it
				IF @EVENT_OLD IS NULL
				BEGIN
					INSERT INTO TFSCM_CLI_BUFFER_CHANGES(CHANGE_STEPS,CHANGE_TYPE,EVENT,EVENT_ENDING_DATE,EVENT_STARTING_DATE,LOCATION_CHG,MODE,PREPARATION_END_DATE,PREPARATION_START_DATE,REQUIRED_CHANGE,SKU_CHG, CREATION_DATE, CREATION_USER, DAYS_BETWEEN_CHANGES, FILTER, JSON_FILTER, MODIFICATION_DATE, MODIFICATION_USER, PROCESSING_DATE, ATYPICAL_CONSUMPTION_STATUS)
					VALUES(@CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @CREATION_DATE, @CREATION_USER, @DAYS_BETWEEN_CHANGES, @FILTER, @JSON_FILTER, @MODIFICATION_DATE, @MODIFICATION_USER, @PROCESSING_DATE, @ATYPICAL_CONSUMPTION_STATUS);
				END
				ELSE 
				BEGIN 
					UPDATE TFSCM_CLI_BUFFER_CHANGES
					   SET CHANGE_STEPS           = @CHANGE_STEPS,
						   CHANGE_TYPE            = @CHANGE_TYPE,
						   EVENT_ENDING_DATE      = @EVENT_ENDING_DATE,
						   EVENT_STARTING_DATE    = @EVENT_STARTING_DATE,
						   LOCATION_CHG           = @LOCATION_CHG,
						   MODE                   = @MODE,
						   PREPARATION_END_DATE   = @PREPARATION_END_DATE,
						   PREPARATION_START_DATE = @PREPARATION_START_DATE,
						   REQUIRED_CHANGE        = @REQUIRED_CHANGE,
						   SKU_CHG                = @SKU_CHG,
						   DAYS_BETWEEN_CHANGES        = @DAYS_BETWEEN_CHANGES,
						   FILTER                      = @FILTER,
						   JSON_FILTER                 = @JSON_FILTER,
						   MODIFICATION_DATE           = GETDATE(),
						   MODIFICATION_USER           = @MODIFICATION_USER,
						   PROCESSING_DATE             = @PROCESSING_DATE,
						   ATYPICAL_CONSUMPTION_STATUS = @ATYPICAL_CONSUMPTION_STATUS
					 WHERE EVENT = @EVENT;
				END 

				SET @ovaHasProcessed = '1';

				UPDATE TFSCM_CLI_BUFFER_CHANGES_TEMP
				   SET STATUS = 1 
				 WHERE ID = @ID_TEMP; 

				SET @vProcessBufferChangesCount = @vProcessBufferChangesCount + 1;
			END 
		END TRY
		BEGIN CATCH 
			SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;
			SET @ovaResult = '1';
			SET @ovaMessage = ' ERROR_MESSAGE: '+ERROR_MESSAGE(); 
			
			BEGIN TRY 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@MSG_DEX_CHANGES_UNEXPECTED_ERROR, NULL, 'E', GETDATE(), @SKU_CHG, @LOCATION_CHG, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @ivaTempLoadDate);
			END TRY 
			BEGIN CATCH 
			END CATCH 
		END CATCH 
		
		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;
		IF(@vCOMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @vCOMMIT_COUNT = 0;
		END
		
		FETCH NEXT FROM cDataTempCursor INTO @CHANGE_STEPS, @CHANGE_TYPE, @EVENT, @EVENT_ENDING_DATE, @EVENT_STARTING_DATE, @LOCATION_CHG, @MODE, @PREPARATION_END_DATE, @PREPARATION_START_DATE, @REQUIRED_CHANGE, @SKU_CHG, @EVENT_OLD, @SKU_OLD, @CHANGE_TYPE_OLD, @LOCATION_OLD, @LOCATION_IS_ACTIVE_OLD, @LOCATION_TYPE_OLD, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST_OLD, @REQUIRED_CHANGE_OLD, @PREPARATION_START_DATE_OLD, @EVENT_STARTING_DATE_OLD, @EVENT_ENDING_DATE_OLD, @CHANGE_STEPS_OLD, @PREPARATION_END_DATE_OLD, @MODE_OLD, @FILTER_OLD, @JSON_FILTER_OLD, @CREATION_DATE_OLD, @CREATION_USER_OLD, @DAYS_BETWEEN_CHANGES_OLD, @MODIFICATION_DATE_OLD, @MODIFICATION_USER_OLD, @PROCESSING_DATE_OLD, @ATYPICAL_CONSUMPTION_STATUS_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @BUFFER_SKU, @LOCATION_IS_ACTIVE, @LOCATION_TYPE, @CDCALENDAR_DEST, @SHIPPING_TIME_DEST, @BUFFER, @REPLENISHMENT_TIME, @MINIMUM_BUFFER, @existChangeType, @existChangeMode, @REQUIRED_CHANGE_STR, @PREPARATION_START_DATE_STR, @EVENT_STARTING_DATE_STR, @EVENT_ENDING_DATE_STR, @CHANGE_STEPS_STR, @PREPARATION_END_DATE_STR, @PROCESSING_DATE_STR;
	END


	CLOSE cDataTempCursor
	DEALLOCATE cDataTempCursor
	SET @vTrace = 'go inside the cursor cDataTempCursor';


	IF(@ovaHasProcessed = '1')
	BEGIN 
		UPDATE TBL 
		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		  FROM TFSCM_COM_TABLES TBL 
		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		   AND INTER.CDINTERFACE = 6;
	END 

	SET @ovaMessage = @MSG_DEX_CHANGES_SUCESSFUL_EVENTS+': ' + CAST ( @vProcessBufferChangesCount AS varchar ) + ', '+ @MSG_DEX_CHANGES_ERROR_EVENTS+': ' + CAST ( @vErrorsBufferChangesCount AS varchar );
	SET @vTotalErrorsBufferChanges = (@vErrorsBufferChangesCount + @ivaErrorValidations)
	SELECT @vMessagesAfterDataExchange = PARAM_VALUE FROM   TFSCM_COM_PARAMS
		WHERE CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE'
	IF( @vTotalErrorsBufferChanges > 0 AND @vMessagesAfterDataExchange = 'Y')
	BEGIN
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'CDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsBufferChanges, 'CDE', 'BUFFER_CHANGES_UNPROCESSED_EVENTS', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT
	END	
	IF(@vTotalErrorsBufferChanges = 0 AND @vMessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
	BEGIN
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'CDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
	END

END TRY 
BEGIN CATCH 
	SET @ovaResult = '1';
	SET @ovaMessage =  'BUFFER_CHANGES: ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE();

	IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1)) 
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1)) 
		BEGIN 
			CLOSE cDataTempCursor; 
		END 
		DEALLOCATE cDataTempCursor; 
	END 
END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[BUFFERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[BUFFERS] 
	@ivaIdExchange NUMERIC(10), 
	@ivaTempLoadDate DATE ,
	@ivaCreatorOrModifyUser NVARCHAR(MAX), 
	@ivaIsDataExchangeForScreen SMALLINT, 
	@ivaCdViewIfDataExchangeForScreen INT, 
	@ivaErrorValidations NUMERIC(10), 
	@ovaResult VARCHAR(1) OUTPUT, 
	@ovaMessage NVARCHAR(MAX) OUTPUT, 
	@ovaMessageTableErrors NVARCHAR(MAX) OUTPUT, 
	@locationsListTempOnlyWorkDay AS NVARCHAR(MAX)  OUTPUT, 
	@ovaHasProcessed VARCHAR(1) OUTPUT 
AS 
DECLARE @Trace 						AS NVARCHAR(MAX); 
DECLARE @DuplicatedBuffersCountTemp 	AS INT = 0; 
DECLARE @ErrorsBuffersCount 			AS INT = 0; 
DECLARE @ProcessBuffersCount 		AS INT = 0; 
DECLARE @ovaResultPseudocodes 		AS VARCHAR(1); 
DECLARE @ovaMessagePseudocodes 		AS NVARCHAR(MAX); 
DECLARE @ovaMessagePseudocodesTotal 	AS NVARCHAR(MAX) = ''; 
DECLARE @PassesValidations 			AS SMALLINT = 1; 
DECLARE @CountIntTmp 				AS INT = 0; 
DECLARE @CountNumericTmp 			AS NUMERIC(17,5) = 0; 
DECLARE @locationsListTemp 			AS NVARCHAR(MAX) = ''; 
DECLARE @locationTemp 				AS VARCHAR(50) = ''; 
DECLARE @locationTempOnlyWorkDay 	AS VARCHAR(50) = ''; 
DECLARE @locationTempNoWorkDay 		AS VARCHAR(50) = ''; 
DECLARE @DelimiterForLocations	   AS CHAR(1) = '|'; 
DECLARE @DATE_SERVER_NO_TIME   	   AS DATE; 
DECLARE @CDUNIT_DEFAULT 		  	   AS VARCHAR(50); 
DECLARE @INVENTORY_ACCURACY_DEFAULT AS NUMERIC(3,0); 
DECLARE @FORMULA_INVENTORY_ACCURACY_DEFAULT AS NUMERIC(6,5); 
DECLARE @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT AS NUMERIC(17,5); 
DECLARE @TempTOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5); 
DECLARE @ID_MESSAGESNOTIFICATIONS AS NUMERIC(18,0) = 0; 
DECLARE @TableTempID_MESSAGESNOTIFICATIONS TABLE (ID NUMERIC(18,0)); 
DECLARE @MessageTableErrors AS VARCHAR(4000) = ''; 
DECLARE @Dummy AS VARCHAR(10) = ''; 
DECLARE @ovaResultRemoveViewNot    AS VARCHAR(1);
DECLARE @ovaMessageRemoveViewNot   AS VARCHAR(MAX);
DECLARE @ovaResultAddViewNot       AS VARCHAR(1);
DECLARE @ovaMessageAddViewNot      AS VARCHAR(MAX);
DECLARE @TotalErrorsBuffers        AS NUMERIC(8) = 0;
DECLARE @MessagesAfterDataExchange AS VARCHAR = 'N';
DECLARE @DelimiterForRecords       AS VARCHAR(1)    = '|';
DECLARE @DelimeterPk               AS VARCHAR(1)    = ';';
DECLARE @BufferList                AS NVARCHAR(MAX) = '';
DECLARE @AdjustmentActionExpire    AS VARCHAR(10)   = 'EXPIRE';
DECLARE @AdjustmentActionAnalyze   AS VARCHAR(10)   = 'ANALYZE';
DECLARE @IsBufferChanged           AS NUMERIC(1)    = 0;
-- -------------------------------------------------------------------------------------------
-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. 
-- -------------------------------------------------------------------------------------------
DECLARE @IsOrigin                  AS INT           = 0;
-- -------------------------------------------------------------------------------------------
-- OHLO 20190613: Since v4.13.0, in order to recalculate buffers related OC and OP 
--                priorities, check if columns involved in the calculation have changed. 
-- -------------------------------------------------------------------------------------------
DECLARE @IsSecurityStockChanged         NUMERIC(1) = 0;
DECLARE @IsInventoryOnSiteChanged       NUMERIC(1) = 0;
DECLARE @IsInventoryOnTransitChanged    NUMERIC(1) = 0;
DECLARE @IsInventoryOnProductionChanged NUMERIC(1) = 0;
DECLARE @IsPendingDemandChanged         NUMERIC(1) = 0;

-- -------------------------------------------------------------------------------------------
-- OHLO 20191212: Since v4.14.0, in order to update "UPDATE_MOVEMENTS" date column,
--                it is necessary to check if the movements columns have been changed.  
-- -------------------------------------------------------------------------------------------
DECLARE @IsConsolidatedReplenishmentChanged NUMERIC(1) = 0;
DECLARE @IsPositiveAdjustmentsChanged       NUMERIC(1) = 0;
DECLARE @IsConsumptionChanged               NUMERIC(1) = 0;
DECLARE @IsNegativeAdjustmentsChanged       NUMERIC(1) = 0;
DECLARE @IsExcludedOutsChanged              NUMERIC(1) = 0;
DECLARE @IsInventoryOnPurchasingChanged     NUMERIC(1) = 0;
DECLARE @AreMovementsColumnsChanged         NUMERIC(1) = 0;
-- -------------------------------------------------------------------------------
DECLARE @ExpiredSuggestionCause		VARCHAR(50)   = '';
DECLARE @ManagementWay				VARCHAR(1)    = 'A';
DECLARE @ovaGBASResult				VARCHAR(1)    = '';
DECLARE @ovaGBASMessage				NVARCHAR(MAX) = '';
DECLARE @TmpTableAlertNotifications	TABLE (ID NUMERIC(18,0));
DECLARE @AlertNotificationsId		NUMERIC(18,0) = 0;
DECLARE @IsMinBufferChanged			NUMERIC(1)    = 0;
DECLARE @ExpiredMinBufferChange		VARCHAR(50)   = '';
DECLARE @HasRulesChanges				NUMERIC(1)    = 0;


BEGIN 
BEGIN TRY 
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements. 
	SET NOCOUNT ON; 
	SET @ovaResult = '0';
	SET @ovaMessage = '';
	SET @ovaMessageTableErrors = '';
	SET @locationsListTempOnlyWorkDay = ''; 
	SET @ovaHasProcessed = '0';
	SET @Trace = 'Setting the cursor cDataTempCursor  '
	SET @DATE_SERVER_NO_TIME = GETDATE(); 
	SELECT @CDUNIT_DEFAULT = CDUNIT, @INVENTORY_ACCURACY_DEFAULT = INVENTORY_ACCURACY FROM TFSCM_CLI_UNITS WHERE (IS_DEFAULT_UNIT = 1 AND IS_ACTIVE = 1); 
	SET @FORMULA_INVENTORY_ACCURACY_DEFAULT = CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,@INVENTORY_ACCURACY_DEFAULT)) AS NUMERIC(6,5)); 

 DECLARE @BUFFER AS NUMERIC(20,5) , @CONSOLIDATED_REPLENISHMENT AS NUMERIC(20,5) , @CONSUMPTION AS NUMERIC(20,5) , @FAMILY AS VARCHAR(50) , @LOCATION AS VARCHAR(50) , @ORIGIN_LOCATION AS VARCHAR(50) , @REPLENISHMENT_TIME AS NUMERIC(10,0) , @SKU AS VARCHAR(50) , @TOTAL_INVENTORY_ON_PRODUCTION AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_PURCHASING AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_SITE AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_TRANSIT AS NUMERIC(20,5) , @UPDATE_MOVEMENTS AS DATETIME ;
 DECLARE  @ID AS NUMERIC(18,0)
, @LOCATION_TEMP AS VARCHAR(50)
, @IS_CREATION AS BIT
, @LOCATION_TYPE AS VARCHAR(2)
, @CDBUFFER_FAMILY_DB AS VARCHAR(50)
, @CDLOCATION_ORIGIN_DB AS VARCHAR(50)
, @INVENTORY_ACCURACY AS NUMERIC(3,0)
, @FORMULA_INVENTORY_ACCURACY AS NUMERIC(6,5)
, @UNIT_THROUGHPUT AS NUMERIC(17,2)
, @INACTIVE AS BIT
, @INACTIVATION_DATE AS DATE
, @SECURITY_STOCK AS NUMERIC(17,5)
, @MINIMUM_REPLENISHMENT AS NUMERIC(17,5)
, @MINIMUM_BUFFER AS NUMERIC(20,5)
, @PACKAGING_UNIT AS NUMERIC(20,5)
, @POSITIVE_ADJUSTMENTS AS NUMERIC(20,5)
, @NEGATIVE_ADJUSTMENTS AS NUMERIC(20,5)
, @UNIT_PRICE AS NUMERIC(20,2)
, @PENDING_DEMAND AS NUMERIC(17,5)
, @EXCLUDED_OUTS AS NUMERIC(17,5)
, @REPLENISHMENT_PRIORITY AS INT 
, @REPLENISHMENT_FREQUENCY AS INT 
, @TVC AS NUMERIC(17,2)
, @CDUNIT AS VARCHAR(50) 
, @INVENTORY_ON_SITE AS NUMERIC(17,5)
, @INVENTORY_ON_TRANSIT AS NUMERIC(17,5)
, @INVENTORY_ON_PURCHASING AS NUMERIC(17,5)
, @INVENTORY_ON_PRODUCTION AS NUMERIC(17,5)
, @INVENTORY_ON_CHAIN AS NUMERIC(17,5)
, @NET_INVENTORY AS NUMERIC(17,5)
, @REPLENISHMENT_ROUNDING_MODE AS VARCHAR(3)
, @ALLOWED_OVERSTOCKING AS NUMERIC(17,5)
, @EFFECTIVE_BUFFER AS NUMERIC(17,5)
, @SITE_PRIORITY AS NUMERIC(17,2)
, @YELLOW_ZONE_START AS NUMERIC(5,2)
, @RED_ZONE_START AS NUMERIC(5,2)
, @SITE_PRIORITY_COLOR AS VARCHAR(50)
, @NET_PRIORITY AS NUMERIC(17,2)
, @NET_PRIORITY_COLOR AS VARCHAR(50)
, @TOTAL_CONSOLIDATED_INPUTS AS NUMERIC(17,5)
, @TOTAL_CONSOLIDATED_OUTPUTS AS NUMERIC(17,5)
, @LAST_TOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5)
, @LAST_TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)
, @LAST_COLOR_CHANGE_DATE AS DATE
, @MANAGED AS BIT
, @CDGROUP AS NUMERIC(2,0)
, @CDCALENDAR AS NUMERIC(4,0)
, @COMMIT_COUNT AS NUMERIC(4) = 0
, @WORST_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @LAST_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @DAYS_SINCE_LAST_OUT AS NUMERIC(5)
, @LAST_TOTAL_OUTS_MAX_SUM AS NUMERIC(15,5)
, @PROTECTION_FACTOR AS NUMERIC(17,2)
, @ADJUSTMENT_TYPE AS VARCHAR(50)
, @RT_ADJUSTMENT_TYPE AS VARCHAR(50)
, @SUGGESTED_BUFFER AS NUMERIC(15,5)
, @APPROVED_BUFFER AS NUMERIC(15,5)
, @ADJUSTMENT_ACTION AS VARCHAR(50)
, @SUGGESTION_DATE AS DATETIME
, @SUGGESTION_REJECTION_CAUSE AS VARCHAR(50)
, @REPLENISHMENT_PROBLEM AS VARCHAR(50)
, @REPLENISHMENT_PROBLEM_OLD AS VARCHAR(50)
, @CD_NONE_CAUSE AS VARCHAR(10)
, @SUGGESTION_EXPIRATION_DATE AS DATETIME
, @SUGGESTION_ALERTS AS VARCHAR(50)
, @NEXT_BUFFER_ANALYSIS AS DATETIME
, @RT_NEXT_BUFFER_ANALYSIS AS DATETIME
, @MIDDLE_PROTECTION_FACTOR AS NUMERIC(17,2)
, @TIME_BETWEEN_BUFFER_RECALCULATIONS AS NUMERIC(10,0)
, @RESTART AS VARCHAR(1)
, @SBC_BUFFER_SIZE AS NUMERIC(17,5)
, @SBC_BUFFER_SIZE_OLD AS NUMERIC(17,5)
-- -------------------------------------------------------------------------------------------
-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated column  
-- -------------------------------------------------------------------------------------------
, @DAILY_AVERAGE_CONSUMPTION AS NUMERIC(17,5)
-- -------------------------------------------------------------------------------------------
-- OHLO 20200820: Since v5.2.0, add Available Inventory column  
-- -------------------------------------------------------------------------------------------
, @AVAILABLE_INVENTORY AS NUMERIC(15,5)
-- -------------------------------------------------------------------------------------------
-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory and Origin Buffer family  columns  
-- -------------------------------------------------------------------------------------------
, @ORIGIN_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @ORIGIN_NET_INVENTORY AS NUMERIC(15,5)
, @ORIGIN_BUFFER_FAMILY AS VARCHAR(50)

, @REPLENISHMENT_TIME_STR                                 AS VARCHAR(50)
, @BUFFER_STR                                             AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_SITE_STR                            AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_TRANSIT_STR                         AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_PURCHASING_STR                      AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_PRODUCTION_STR                      AS VARCHAR(50)
, @UPDATE_MOVEMENTS_STR                                   AS VARCHAR(50)
, @MINIMUM_BUFFER_STR                                     AS VARCHAR(50)
, @SECURITY_STOCK_STR                                     AS VARCHAR(50)
, @MINIMUM_REPLENISHMENT_STR                              AS VARCHAR(50)
, @PACKAGING_UNIT_STR                                     AS VARCHAR(50)
, @UNIT_PRICE_STR                                         AS VARCHAR(50)
, @TVC_STR                                                AS VARCHAR(50)
, @POSITIVE_ADJUSTMENTS_STR                               AS VARCHAR(50)
, @NEGATIVE_ADJUSTMENTS_STR                               AS VARCHAR(50)
, @CONSUMPTION_STR                                        AS VARCHAR(50)
, @CONSOLIDATED_REPLENISHMENT_STR                         AS VARCHAR(50)
, @PENDING_DEMAND_STR                                     AS VARCHAR(50)
, @REPLENISHMENT_PRIORITY_STR                             AS VARCHAR(50)
, @EXCLUDED_OUTS_STR                                      AS VARCHAR(50)
, @REPLENISHMENT_FREQUENCY_STR                            AS VARCHAR(50);
 DECLARE  @SKU_OLD AS VARCHAR(50)
, @LOCATION_OLD AS VARCHAR(50)
, @INACTIVE_OLD AS BIT
, @TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)
, @BUFFER_INITIAL_DATE_OLD AS DATE
, @NEXT_BUFFER_ANALYSIS_OLD AS DATETIME
, @UPDATE_MOVEMENTS_OLD AS DATE
, @CONSOLIDATED_REPLENISHMENT_OLD AS NUMERIC(17,5)
, @SITE_PRIORITY_COLOR_OLD VARCHAR(50)
, @LAST_COLOR_CHANGE_DATE_OLD AS DATE
, @FAMILY_OLD AS VARCHAR(50)
, @ORIGIN_LOCATION_OLD AS VARCHAR(50)
, @CDUNIT_OLD AS VARCHAR(50)
, @REPLENISHMENT_TIME_OLD AS int
, @BUFFER_OLD AS NUMERIC(17,5)
, @MINIMUM_BUFFER_OLD AS NUMERIC(17,5)
, @SECURITY_STOCK_OLD AS NUMERIC(17,5)
, @MINIMUM_REPLENISHMENT_OLD AS NUMERIC (15,5)
, @PACKAGING_UNIT_OLD AS NUMERIC(17,5)
, @UNIT_PRICE_OLD AS NUMERIC(17,2)
, @TVC_OLD AS NUMERIC(17,2)
, @POSITIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)
, @CONSUMPTION_OLD AS NUMERIC(17,5)
, @NEGATIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_TRANSIT_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_PURCHASING_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_PRODUCTION_OLD AS NUMERIC(17,5)
, @REPLENISHMENT_ROUNDING_MODE_OLD AS VARCHAR(3)
, @YELLOW_ZONE_START_OLD AS NUMERIC(5,2)
, @RED_ZONE_START_OLD AS NUMERIC(5,2)
, @INVENTORY_ACCURACY_OLD AS NUMERIC(3,0)
, @FORMULA_INVENTORY_ACCURACY_OLD AS NUMERIC(6,5)
, @PENDING_DEMAND_OLD AS NUMERIC(17,5)
, @EXCLUDED_OUTS_OLD AS NUMERIC(17,5)
, @REPLENISHMENT_PRIORITY_OLD AS INT 
, @REPLENISHMENT_FREQUENCY_OLD AS INT 
;

	BEGIN TRY 

		---------- MESSAGES ---------------------------------------- 
		DECLARE @Language AS VARCHAR(2) = 'es';  
		DECLARE @CodErrorResultMessages AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFERS_TOTAL_INVENTORY_ON_PRODUCTION_DIFF AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ERROR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 AS NVARCHAR(MAX);
		-- -------------------------------------------------------------------------
		-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to location
		-- -------------------------------------------------------------------------
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR AS NVARCHAR(MAX);
		-- -------------------------------------------------------------------------
		-- OHLO 20181212: Since v4.10.0, add Replenishment Frequency column messages  
		-- -------------------------------------------------------------------------
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME AS NVARCHAR(MAX);

		SELECT @Language = P.PARAM_VALUE  
		  FROM  TFSCM_COM_PARAMS P 
		 WHERE P.CDPARAM = 'DEFAULT_LANGUAGE' 

		SELECT TOP(1) @CD_NONE_CAUSE = C.CDCAUSE FROM TFSCM_CLI_CAUSES C WHERE C.IS_SYSTEM = 'Y' AND C.CAUSE_TYPE = 'B'
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190607: Since v4.13.0, execute automation rules process           
		-- -----------------------------------------------------------------------------------
		EXEC USP_EXECUTE_AUTOMATION_RULES 3, @ivaTempLoadDate, 
										  @ivaIsDataExchangeForScreen, @ovaResult OUTPUT, @ovaMessage OUTPUT 

		-- If there is an error, then raise it.
		IF (@ovaResult = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessage, 11, 1);
		END

		IF (@ivaIsDataExchangeForScreen = 1)
		BEGIN
			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_manual_buffer_changing');

			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_manual_min_buffer_changing');
		END
		ELSE
		BEGIN
			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE
						  					 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_buffer_changing_through_interface');

			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_min_buffer_changing_through_interface');
		END

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR OUTPUT;

		----------------------------------------------------------- 

		IF (@ivaIsDataExchangeForScreen = 1) 
		BEGIN 
			/* Message Notifications for Alerts */
			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE)
			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TableTempID_MESSAGESNOTIFICATIONS
			VALUES('');

			SELECT @ID_MESSAGESNOTIFICATIONS = ID FROM @TableTempID_MESSAGESNOTIFICATIONS;

			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)
			VALUES (@ivaCdViewIfDataExchangeForScreen, @ID_MESSAGESNOTIFICATIONS);

			/* Message Notifications for Alerts */
			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE, NOTIFICATION_TYPE)
			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TmpTableAlertNotifications
			VALUES('', 'A');

 			SELECT @AlertNotificationsId = ID FROM @TmpTableAlertNotifications;

			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)
			VALUES (@ivaCdViewIfDataExchangeForScreen, @AlertNotificationsId);
		END 
		----------------------------------------------------------- 

		DECLARE @PK1_ERROR_LOG AS VARCHAR(50); 
		DECLARE @PK2_ERROR_LOG AS VARCHAR(50); 
		DECLARE @FILE_NAME AS VARCHAR(500); 
		DECLARE @FILE_ROW_NUMBER AS INT; 
		DECLARE @UPDATE_MOVEMENTS_ERROR_LOG AS DATE; 

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFER_DUPLICATED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED OUTPUT; 

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFERS_COUNT_DUPLICATED', @Language, '', '', '', @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED OUTPUT;

		DECLARE cErrorLogCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY  FOR 
		 SELECT [BTDUP].[COUNTER1], [BT].[SKU], [BT].[LOCATION], @ivaTempLoadDate UPDATE_MOVEMENTS, [BT].[FILE_NAME], [BT].[FILE_ROW_NUMBER] 
		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  
		   JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
		 		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] 
		 		  WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange 
		 		    AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
		 		  GROUP BY [TMP].[SKU], [TMP].[LOCATION]  
		 		 HAVING COUNT(1) > 1) AS [BTDUP] 
		 	ON ([BT].[IDEXCHANGE]       = @ivaIdExchange 
		 	AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
		 	AND [BTDUP].[SKU]           = [BT].[SKU] 
		 	AND [BTDUP].[LOCATION]      = [BT].[LOCATION] 
			AND [BT].[FILE_ROW_NUMBER]  = [BTDUP].[FILE_ROW_NUMBER]); 

		/*SELECT tempo.COUNTER1, tempo.SKU, tempo.LOCATION, tempo.UPDATE_MOVEMENTS, tempo.FILE_NAME, tempo.FILE_ROW_NUMBER 
		FROM (
	  		SELECT COUNT(1) AS COUNTER1, TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER
	  		  FROM TFSCM_CLI_BUFFER_TEMP TMP 
	  		 WHERE TMP.IDEXCHANGE       = @ivaIdExchange 
     		   AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate 
	  		 GROUP BY TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER
		) tempo 
		WHERE tempo.COUNTER1 >1 */

		OPEN cErrorLogCursor 
		FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER

		WHILE (@@FETCH_STATUS = 0) 
		BEGIN 
			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
								      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
			VALUES (@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED + CONVERT(VARCHAR, @DuplicatedBuffersCountTemp, 105) + '.', NULL, 'E', GETDATE(), @PK1_ERROR_LOG, @PK2_ERROR_LOG, 
				    NULL,  @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS_ERROR_LOG );

			SET @ErrorsBuffersCount = @ErrorsBuffersCount + @DuplicatedBuffersCountTemp 
			SET @ovaResult = '1'; 

			IF (@ivaIsDataExchangeForScreen = 1) 
			BEGIN 
				SET @MessageTableErrors = '<tr><td>'+@PK2_ERROR_LOG+'</td><td>'+@PK1_ERROR_LOG+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED+'</td></tr>'; 
				SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

				INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
				VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
			END 
			FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER
		END 

	   DELETE [BT]  
	     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  
	     JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
	 		     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] 
	 		    WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange 
	 		      AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
	 		    GROUP BY [TMP].[SKU], [TMP].[LOCATION]  
	 		   HAVING COUNT(1) > 1) AS [BTDUP] 
	 	   ON ([BT].[IDEXCHANGE]       = @ivaIdExchange 
	 	   AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
	 	   AND [BTDUP].[SKU]           = [BT].[SKU] 
	 	   AND [BTDUP].[LOCATION]      = [BT].[LOCATION]); 

		CLOSE cErrorLogCursor 
		DEALLOCATE cErrorLogCursor 
	END TRY 
	BEGIN CATCH 

		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT 

		SET @ErMessage = ERROR_MESSAGE() 
		SET @ErSeverity = ERROR_SEVERITY() 
		SET @ErState = ERROR_STATE() 

		RAISERROR (@ErMessage, @ErSeverity, @ErState) 
	END CATCH 

	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use in Inputs and 
	--                Outs Update. 
	-- --------------------------------------------------------------------------------------- 
	IF OBJECT_ID('BUFFER_DATES_TEMP') IS NOT NULL  
		DROP TABLE BUFFER_DATES_TEMP; 

	SELECT [SKU], [T].[LOCATION],  [T].[UPDATE_MOVEMENTS], [T].[MODIFY_DATE] [UPDATE_MOVEMENTS_OLD] 
	  INTO BUFFER_DATES_TEMP 
	  FROM [dbo].[TFSCM_CLI_BUFFER] [T] 
	 WHERE 1 = 2; 
	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.  
	-- --------------------------------------------------------------------------------------- 
	IF OBJECT_ID('tempdb..#OriginBuffersTemp') IS NOT NULL  
		DROP TABLE #OriginBuffersTemp; 

	SELECT SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY 
	  INTO #OriginBuffersTemp 
	  FROM [dbo].[TFSCM_CLI_BUFFER] 
	 WHERE 1 = 2; 
	-- ---------------------------------------------------------------------------------------  

	DECLARE cDataTempCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY	FOR 
	 SELECT (SELECT COUNT(1)
			   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] [O]
			  WHERE [O].[SKU]             = [TMP].[SKU]
				AND [O].[ORIGIN_LOCATION] = [TMP].[LOCATION]) IS_ORIGIN, 
			TMP.BUFFER, TMP.CONSOLIDATED_REPLENISHMENT, TMP.CONSUMPTION, TMP.FAMILY, TMP.LOCATION, TMP.ORIGIN_LOCATION, TMP.REPLENISHMENT_TIME, TMP.SKU, TMP.TOTAL_INVENTORY_ON_PRODUCTION, TMP.TOTAL_INVENTORY_ON_PURCHASING, TMP.TOTAL_INVENTORY_ON_SITE, TMP.TOTAL_INVENTORY_ON_TRANSIT, TMP.UPDATE_MOVEMENTS, TMP.ID, TMP.LOCATION, TMP.IS_CREATION, CL.LOCATION_TYPE, CBF.CDBUFFER_FAMILY, CLO.CDLOCATION, @INVENTORY_ACCURACY_DEFAULT, @FORMULA_INVENTORY_ACCURACY_DEFAULT, CBF.REPLENISHMENT_ROUNDING_MODE, CBF.YELLOW_ZONE_START, CBF.RED_ZONE_START, CBF.MIDDLE_PROTECTION_FACTOR, CBF.TIME_BETWEEN_BUFFER_RECALCULATIONS, CC.CDCALENDAR, BOLD.SKU, BOLD.LOCATION, BOLD.INACTIVE, BOLD.TOTAL_INVENTORY_ON_SITE, BOLD.LAST_TOTAL_INVENTORY_ON_SITE, BOLD.UPDATE_MOVEMENTS, BOLD.CONSOLIDATED_REPLENISHMENT, BOLD.SITE_PRIORITY_COLOR, BOLD.FAMILY, BOLD.ORIGIN_LOCATION, BOLD.CDUNIT, BOLD.REPLENISHMENT_TIME, BOLD.BUFFER, BOLD.MINIMUM_BUFFER, BOLD.SECURITY_STOCK, BOLD.MINIMUM_REPLENISHMENT, BOLD.PACKAGING_UNIT, BOLD.UNIT_PRICE, BOLD.TVC, BOLD.POSITIVE_ADJUSTMENTS, BOLD.CONSUMPTION, BOLD.NEGATIVE_ADJUSTMENTS, BOLD.TOTAL_INVENTORY_ON_TRANSIT, BOLD.TOTAL_INVENTORY_ON_PURCHASING, BOLD.TOTAL_INVENTORY_ON_PRODUCTION, CBFOLD.REPLENISHMENT_ROUNDING_MODE, CBFOLD.YELLOW_ZONE_START, CBFOLD.RED_ZONE_START, CUOLD.INVENTORY_ACCURACY, CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,CUOLD.INVENTORY_ACCURACY)) AS NUMERIC(6,5)), BOLD.BUFFER_INITIAL_DATE, BOLD.NEXT_BUFFER_ANALYSIS, BOLD.REPLENISHMENT_PROBLEM, BOLD.PENDING_DEMAND, BOLD.EXCLUDED_OUTS, BOLD.REPLENISHMENT_PRIORITY, BOLD.REPLENISHMENT_FREQUENCY, BOLD.SBC_BUFFER_SIZE, OBUFFER.INVENTORY_ON_SITE, OBUFFER.NET_INVENTORY, OBUFFER.FAMILY, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER, TMP.CDUNIT, TMP.EXCLUDED_OUTS, TMP.MINIMUM_BUFFER, TMP.MINIMUM_REPLENISHMENT, TMP.NEGATIVE_ADJUSTMENTS, TMP.PACKAGING_UNIT, TMP.PENDING_DEMAND, TMP.POSITIVE_ADJUSTMENTS, TMP.REPLENISHMENT_FREQUENCY, TMP.REPLENISHMENT_PRIORITY, TMP.SECURITY_STOCK, TMP.TVC, TMP.UNIT_PRICE, REPLENISHMENT_TIME_STR, BUFFER_STR, TOTAL_INVENTORY_ON_SITE_STR, TOTAL_INVENTORY_ON_TRANSIT_STR, TOTAL_INVENTORY_ON_PURCHASING_STR, TOTAL_INVENTORY_ON_PRODUCTION_STR, UPDATE_MOVEMENTS_STR, MINIMUM_BUFFER_STR, SECURITY_STOCK_STR, MINIMUM_REPLENISHMENT_STR, PACKAGING_UNIT_STR, UNIT_PRICE_STR, TVC_STR, POSITIVE_ADJUSTMENTS_STR, NEGATIVE_ADJUSTMENTS_STR, CONSUMPTION_STR, CONSOLIDATED_REPLENISHMENT_STR, PENDING_DEMAND_STR, REPLENISHMENT_PRIORITY_STR, EXCLUDED_OUTS_STR, REPLENISHMENT_FREQUENCY_STR
	   FROM TFSCM_CLI_BUFFER_TEMP TMP 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER BOLD ON (TMP.SKU = BOLD.SKU AND TMP.LOCATION = BOLD.LOCATION) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER        OBUFFER ON (TMP.SKU = OBUFFER.SKU AND TMP.ORIGIN_LOCATION = OBUFFER.LOCATION AND OBUFFER.INACTIVE = 0) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBF     ON (CBF.CDBUFFER_FAMILY = TMP.FAMILY AND CBF.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBFOLD  ON (CBFOLD.CDBUFFER_FAMILY = BOLD.FAMILY) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CL      ON (CL.CDLOCATION = TMP.LOCATION AND CL.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CLO     ON (CLO.CDLOCATION = TMP.ORIGIN_LOCATION AND CLO.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_UNITS CUOLD ON (CUOLD.CDUNIT = BOLD.CDUNIT) 
	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CC ON (CC.CDCALENDAR = CL.CDCALENDAR AND CC.IS_ACTIVE = 1) 
	  WHERE TMP.IDEXCHANGE = @ivaIdExchange 
		AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate 
		AND TMP.ID IN 
	        ( 
	          SELECT TEMPO.ID 
	          FROM ( 
	        	  SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID 
	        	    FROM TFSCM_CLI_BUFFER_TEMP TMPAUX 
	        	   WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange 
	        	     AND TMPAUX.UPDATE_MOVEMENTS = @ivaTempLoadDate 
	        	   GROUP BY TMPAUX.SKU, TMPAUX.LOCATION, TMPAUX.UPDATE_MOVEMENTS 
	               ) TEMPO 
	          WHERE TEMPO.COUNTER1 =1 
	        ) 
	  ORDER BY TMP.UPDATE_MOVEMENTS,TMP.LOCATION,TMP.SKU 

	OPEN cDataTempCursor 
	FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
	SET @Trace = 'go inside the cursor cDataTempCursor  '

	WHILE (@@FETCH_STATUS = 0) 
	BEGIN 
		BEGIN TRY 

			IF (@SKU_OLD IS NOT NULL) 
			BEGIN 
				SET @REPLENISHMENT_PROBLEM = @REPLENISHMENT_PROBLEM_OLD
				IF (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 1) 
				BEGIN   
					SET  @INACTIVE = 0; 
					SET  @INACTIVATION_DATE = NULL; 

					-- OHLO 20180405: Update Movements date must be reseted with server (current) date 
					IF (@ivaIsDataExchangeForScreen = 1) 
					BEGIN 
						SET @UPDATE_MOVEMENTS = GETDATE(); 
					END  
				END  
				ELSE 
				BEGIN   
					SET  @INACTIVE = 0; 
				END  
			END  
			ELSE  
			BEGIN  
				SET @Dummy = ''; 
			END  


			SET @IsConsolidatedReplenishmentChanged = 0;
			SET @IsPositiveAdjustmentsChanged = 0;
			SET @IsConsumptionChanged = 0;
			SET @IsNegativeAdjustmentsChanged = 0;
			SET @IsExcludedOutsChanged = 0;
			SET @IsInventoryOnSiteChanged = 0;
			SET @IsInventoryOnTransitChanged = 0;
			SET @IsInventoryOnProductionChanged = 0;
			SET @IsInventoryOnPurchasingChanged = 0;
			SET @IsPendingDemandChanged = 0;
			SET @IsSecurityStockChanged = 0;
			SET @AreMovementsColumnsChanged = 0;

			/* If any column is not upgradable (This column is marked as not upgradable on the interface), 
			   then set its value with the one it currently has (instead of the one sent in the file, 
			   unless this is a change from Focuss or a rule has changed its value) */

				-- --------------------------------------------------------------------------- 
				-- OHLO 20190620: Since v4.13.0, if there is any rule that changes this buffer,
				--                then avoid setting old values 
				-- --------------------------------------------------------------------------- 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for FAMILY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.FAMILY = @FAMILY_OLD)  
													  OR (BUFFER.FAMILY IS NULL AND @FAMILY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @FAMILY_OLD must be NULL  
					IF (@FAMILY_OLD IS NULL) 
					BEGIN 
						-- If the new @FAMILY has a value, then mark it as "changed" 
						IF (@FAMILY IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						IF (@FAMILY IS NOT NULL AND @FAMILY <> @FAMILY_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					-- @CDBUFFER_FAMILY_DB = @FAMILY_OLD -- if IS_ACTIVE is validated 
					SET @FAMILY = @FAMILY_OLD; 
					SET @REPLENISHMENT_ROUNDING_MODE = @REPLENISHMENT_ROUNDING_MODE_OLD; 
					SET @YELLOW_ZONE_START = @YELLOW_ZONE_START_OLD; 
					SET @RED_ZONE_START = @RED_ZONE_START_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for ORIGIN_LOCATION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.ORIGIN_LOCATION = @ORIGIN_LOCATION_OLD)  
													  OR (BUFFER.ORIGIN_LOCATION IS NULL AND @ORIGIN_LOCATION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @ORIGIN_LOCATION_OLD must be NULL  
					IF (@ORIGIN_LOCATION_OLD IS NULL) 
					BEGIN 
						-- If the new @ORIGIN_LOCATION has a value, then mark it as "changed" 
						IF (@ORIGIN_LOCATION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @ORIGIN_LOCATION has a value and it is different than the old @ORIGIN_LOCATION_OLD, then mark it as "changed" 
						IF (@ORIGIN_LOCATION IS NOT NULL AND @ORIGIN_LOCATION <> @ORIGIN_LOCATION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @ORIGIN_LOCATION      = @ORIGIN_LOCATION_OLD; 
					SET @CDLOCATION_ORIGIN_DB = @ORIGIN_LOCATION_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CDUNIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CDUNIT = @CDUNIT_OLD)  
													  OR (BUFFER.CDUNIT IS NULL AND @CDUNIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CDUNIT_OLD must be NULL  
					IF (@CDUNIT_OLD IS NULL) 
					BEGIN 
						-- If new @CDUNIT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @CDUNIT has not a value, then set it with its default value 
						IF (@CDUNIT IS NULL) 
						BEGIN 
							SET @CDUNIT                     = @CDUNIT_DEFAULT; -- default 
							SET @INVENTORY_ACCURACY         = @INVENTORY_ACCURACY_DEFAULT;
							SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_DEFAULT; 
						END 
					END 
					ELSE 
					BEGIN 
						SET @CDUNIT = @CDUNIT_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CDUNIT = @CDUNIT_OLD; 
					SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD; 
					SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.CDUNIT <> @CDUNIT) 
					BEGIN 
						SET @CDUNIT = (SELECT BUFFER.CDUNIT 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				SET @INVENTORY_ACCURACY         = @INVENTORY_ACCURACY_DEFAULT;
				SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_DEFAULT; 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_TIME column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD)  
													  OR (BUFFER.REPLENISHMENT_TIME IS NULL AND @REPLENISHMENT_TIME_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_TIME_OLD must be NULL  
					IF (@REPLENISHMENT_TIME_OLD IS NULL) 
					BEGIN 
						-- If the new @REPLENISHMENT_TIME has a value, then mark it as "changed" 
						IF (@REPLENISHMENT_TIME IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @REPLENISHMENT_TIME has a value and it is different than the old @REPLENISHMENT_TIME_OLD, then mark it as "changed" 
						IF (@REPLENISHMENT_TIME IS NOT NULL AND @REPLENISHMENT_TIME <> @REPLENISHMENT_TIME_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for BUFFER column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.BUFFER = @BUFFER_OLD)  
													  OR (BUFFER.BUFFER IS NULL AND @BUFFER_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @BUFFER_OLD must be NULL  
					IF (@BUFFER_OLD IS NULL) 
					BEGIN 
						-- If the new @BUFFER has a value, then mark it as "changed" 
						IF (@BUFFER IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						SET @BUFFER = @BUFFER_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @BUFFER = @BUFFER_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.BUFFER <> @BUFFER) 
					BEGIN 
						SET @BUFFER = (SELECT BUFFER.BUFFER 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for MINIMUM_BUFFER column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD)  
													  OR (BUFFER.MINIMUM_BUFFER IS NULL AND @MINIMUM_BUFFER_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @MINIMUM_BUFFER_OLD must be NULL  
					IF (@MINIMUM_BUFFER_OLD IS NULL) 
					BEGIN 
						-- If new @MINIMUM_BUFFER has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @MINIMUM_BUFFER has not a value, then set it with its default value 
						IF (@MINIMUM_BUFFER IS NULL) 
						BEGIN 
							SET @MINIMUM_BUFFER = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.MINIMUM_BUFFER <> @MINIMUM_BUFFER) 
					BEGIN 
						SET @MINIMUM_BUFFER = (SELECT BUFFER.MINIMUM_BUFFER 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for SECURITY_STOCK column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.SECURITY_STOCK = @SECURITY_STOCK_OLD)  
													  OR (BUFFER.SECURITY_STOCK IS NULL AND @SECURITY_STOCK_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @SECURITY_STOCK_OLD must be NULL  
					IF (@SECURITY_STOCK_OLD IS NULL) 
					BEGIN 
						-- If new @SECURITY_STOCK has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @SECURITY_STOCK has not a value, then set it with its default value 
						IF (@SECURITY_STOCK IS NULL) 
						BEGIN 
							SET @SECURITY_STOCK = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @SECURITY_STOCK = @SECURITY_STOCK_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @SECURITY_STOCK = @SECURITY_STOCK_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsSecurityStockChanged = 1; 

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.SECURITY_STOCK <> @SECURITY_STOCK) 
					BEGIN 
						SET @SECURITY_STOCK = (SELECT BUFFER.SECURITY_STOCK 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for MINIMUM_REPLENISHMENT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD)  
													  OR (BUFFER.MINIMUM_REPLENISHMENT IS NULL AND @MINIMUM_REPLENISHMENT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @MINIMUM_REPLENISHMENT_OLD must be NULL  
					IF (@MINIMUM_REPLENISHMENT_OLD IS NULL) 
					BEGIN 
						-- If new @MINIMUM_REPLENISHMENT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @MINIMUM_REPLENISHMENT has not a value, then set it with its default value 
						IF (@MINIMUM_REPLENISHMENT IS NULL OR @MINIMUM_REPLENISHMENT = -999999) 
						BEGIN 
							SET @MINIMUM_REPLENISHMENT = @FORMULA_INVENTORY_ACCURACY; 
						END 
					END 
					ELSE 
					BEGIN 
						SET @MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.MINIMUM_REPLENISHMENT <> @MINIMUM_REPLENISHMENT) 
					BEGIN 
						SET @MINIMUM_REPLENISHMENT = (SELECT BUFFER.MINIMUM_REPLENISHMENT 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for PACKAGING_UNIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PACKAGING_UNIT = @PACKAGING_UNIT_OLD)  
													  OR (BUFFER.PACKAGING_UNIT IS NULL AND @PACKAGING_UNIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @PACKAGING_UNIT_OLD must be NULL  
					IF (@PACKAGING_UNIT_OLD IS NULL) 
					BEGIN 
						-- If new @PACKAGING_UNIT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @PACKAGING_UNIT has not a value, then set it with its default value 
						IF (@PACKAGING_UNIT IS NULL OR @PACKAGING_UNIT = -999999) 
						BEGIN 
							SET @PACKAGING_UNIT = @FORMULA_INVENTORY_ACCURACY; 
						END 
					END 
					ELSE 
					BEGIN 
						SET @PACKAGING_UNIT = @PACKAGING_UNIT_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @PACKAGING_UNIT = @PACKAGING_UNIT_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.PACKAGING_UNIT <> @PACKAGING_UNIT) 
					BEGIN 
						SET @PACKAGING_UNIT = (SELECT BUFFER.PACKAGING_UNIT 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for UNIT_PRICE column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.UNIT_PRICE = @UNIT_PRICE_OLD)  
												  OR (BUFFER.UNIT_PRICE IS NULL AND @UNIT_PRICE_OLD IS NULL))  
												THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @UNIT_PRICE_OLD must be NULL  
					IF (@UNIT_PRICE_OLD IS NULL) 
					BEGIN 
						-- If new @UNIT_PRICE has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @UNIT_PRICE has not a value, then set it with its default value 
						IF (@UNIT_PRICE IS NULL) 
						BEGIN 
							SET @UNIT_PRICE = NULL; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @UNIT_PRICE = @UNIT_PRICE_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @UNIT_PRICE = @UNIT_PRICE_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.UNIT_PRICE <> @UNIT_PRICE) 
					BEGIN 
						SET @UNIT_PRICE = (SELECT BUFFER.UNIT_PRICE 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TVC column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TVC = @TVC_OLD)  
												  OR (BUFFER.TVC IS NULL AND @TVC_OLD IS NULL))  
												THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TVC_OLD must be NULL  
					IF (@TVC_OLD IS NULL) 
					BEGIN 
						-- If new @TVC has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @TVC has not a value, then set it with its default value 
						IF (@TVC IS NULL) 
						BEGIN 
							SET @TVC = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @TVC = @TVC_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TVC = @TVC_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.TVC <> @TVC) 
					BEGIN 
						SET @TVC = (SELECT BUFFER.TVC 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CONSOLIDATED_REPLENISHMENT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD)  
													  OR (BUFFER.CONSOLIDATED_REPLENISHMENT IS NULL AND @CONSOLIDATED_REPLENISHMENT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CONSOLIDATED_REPLENISHMENT_OLD must be NULL  
					IF (@CONSOLIDATED_REPLENISHMENT_OLD IS NULL) 
					BEGIN 
						-- If the new @CONSOLIDATED_REPLENISHMENT has a value, then mark it as "changed" 
						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @CONSOLIDATED_REPLENISHMENT has a value and it is different than the old @CONSOLIDATED_REPLENISHMENT_OLD, then mark it as "changed" 
						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL AND @CONSOLIDATED_REPLENISHMENT <> @CONSOLIDATED_REPLENISHMENT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsConsolidatedReplenishmentChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for POSITIVE_ADJUSTMENTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD)  
													  OR (BUFFER.POSITIVE_ADJUSTMENTS IS NULL AND @POSITIVE_ADJUSTMENTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @POSITIVE_ADJUSTMENTS_OLD must be NULL  
					IF (@POSITIVE_ADJUSTMENTS_OLD IS NULL) 
					BEGIN 
						-- If new @POSITIVE_ADJUSTMENTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @POSITIVE_ADJUSTMENTS has not a value, then set it with its default value 
						IF (@POSITIVE_ADJUSTMENTS IS NULL) 
						BEGIN 
							SET @POSITIVE_ADJUSTMENTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsPositiveAdjustmentsChanged = 1; 

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.POSITIVE_ADJUSTMENTS <> @POSITIVE_ADJUSTMENTS) 
					BEGIN 
						SET @POSITIVE_ADJUSTMENTS = (SELECT BUFFER.POSITIVE_ADJUSTMENTS 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CONSUMPTION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSUMPTION = @CONSUMPTION_OLD)  
													  OR (BUFFER.CONSUMPTION IS NULL AND @CONSUMPTION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CONSUMPTION_OLD must be NULL  
					IF (@CONSUMPTION_OLD IS NULL) 
					BEGIN 
						-- If the new @CONSUMPTION has a value, then mark it as "changed" 
						IF (@CONSUMPTION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @CONSUMPTION has a value and it is different than the old @CONSUMPTION_OLD, then mark it as "changed" 
						IF (@CONSUMPTION IS NOT NULL AND @CONSUMPTION <> @CONSUMPTION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CONSUMPTION = @CONSUMPTION_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsConsumptionChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for NEGATIVE_ADJUSTMENTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD)  
													  OR (BUFFER.NEGATIVE_ADJUSTMENTS IS NULL AND @NEGATIVE_ADJUSTMENTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @NEGATIVE_ADJUSTMENTS_OLD must be NULL  
					IF (@NEGATIVE_ADJUSTMENTS_OLD IS NULL) 
					BEGIN 
						-- If new @NEGATIVE_ADJUSTMENTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @NEGATIVE_ADJUSTMENTS has not a value, then set it with its default value 
						IF (@NEGATIVE_ADJUSTMENTS IS NULL) 
						BEGIN 
							SET @NEGATIVE_ADJUSTMENTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsNegativeAdjustmentsChanged = 1; 

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.NEGATIVE_ADJUSTMENTS <> @NEGATIVE_ADJUSTMENTS) 
					BEGIN 
						SET @NEGATIVE_ADJUSTMENTS = (SELECT BUFFER.NEGATIVE_ADJUSTMENTS 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_SITE column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_SITE IS NULL AND @TOTAL_INVENTORY_ON_SITE_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_SITE_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_SITE_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_SITE has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_SITE has a value and it is different than the old @TOTAL_INVENTORY_ON_SITE_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL AND @TOTAL_INVENTORY_ON_SITE <> @TOTAL_INVENTORY_ON_SITE_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnSiteChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_TRANSIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_TRANSIT IS NULL AND @TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_TRANSIT_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value and it is different than the old @TOTAL_INVENTORY_ON_TRANSIT_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL AND @TOTAL_INVENTORY_ON_TRANSIT <> @TOTAL_INVENTORY_ON_TRANSIT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnTransitChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_PURCHASING column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_PURCHASING IS NULL AND @TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_PURCHASING_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value and it is different than the old @TOTAL_INVENTORY_ON_PURCHASING_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL AND @TOTAL_INVENTORY_ON_PURCHASING <> @TOTAL_INVENTORY_ON_PURCHASING_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnPurchasingChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_PRODUCTION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_PRODUCTION IS NULL AND @TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_PRODUCTION_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value and it is different than the old @TOTAL_INVENTORY_ON_PRODUCTION_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL AND @TOTAL_INVENTORY_ON_PRODUCTION <> @TOTAL_INVENTORY_ON_PRODUCTION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnProductionChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for PENDING_DEMAND column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PENDING_DEMAND = @PENDING_DEMAND_OLD)  
													  OR (BUFFER.PENDING_DEMAND IS NULL AND @PENDING_DEMAND_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER 
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @PENDING_DEMAND_OLD must be NULL  
					IF (@PENDING_DEMAND_OLD IS NULL) 
					BEGIN 
						-- If new @PENDING_DEMAND has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @PENDING_DEMAND has not a value, then set it with its default value 
						IF (@PENDING_DEMAND IS NULL) 
						BEGIN 
							SET @PENDING_DEMAND = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @PENDING_DEMAND = @PENDING_DEMAND_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @PENDING_DEMAND = @PENDING_DEMAND_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsPendingDemandChanged = 1; 

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.PENDING_DEMAND <> @PENDING_DEMAND) 
					BEGIN 
						SET @PENDING_DEMAND = (SELECT BUFFER.PENDING_DEMAND 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for EXCLUDED_OUTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD)  
													  OR (BUFFER.EXCLUDED_OUTS IS NULL AND @EXCLUDED_OUTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @EXCLUDED_OUTS_OLD must be NULL  
					IF (@EXCLUDED_OUTS_OLD IS NULL) 
					BEGIN 
						-- If new @EXCLUDED_OUTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @EXCLUDED_OUTS has not a value, then set it with its default value 
						IF (@EXCLUDED_OUTS IS NULL) 
						BEGIN 
							SET @EXCLUDED_OUTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsExcludedOutsChanged = 1; 

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.EXCLUDED_OUTS <> @EXCLUDED_OUTS) 
					BEGIN 
						SET @EXCLUDED_OUTS = (SELECT BUFFER.EXCLUDED_OUTS 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_PRIORITY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD)  
													  OR (BUFFER.REPLENISHMENT_PRIORITY IS NULL AND @REPLENISHMENT_PRIORITY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_PRIORITY_OLD must be NULL  
					IF (@REPLENISHMENT_PRIORITY_OLD IS NULL) 
					BEGIN 
						-- If new @REPLENISHMENT_PRIORITY has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @REPLENISHMENT_PRIORITY has not a value, then set it with its default value 
						IF (@REPLENISHMENT_PRIORITY IS NULL) 
						BEGIN 
							SET @REPLENISHMENT_PRIORITY = 1; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.REPLENISHMENT_PRIORITY <> @REPLENISHMENT_PRIORITY) 
					BEGIN 
						SET @REPLENISHMENT_PRIORITY = (SELECT BUFFER.REPLENISHMENT_PRIORITY 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_FREQUENCY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD)  
													  OR (BUFFER.REPLENISHMENT_FREQUENCY IS NULL AND @REPLENISHMENT_FREQUENCY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_FREQUENCY_OLD must be NULL  
					IF (@REPLENISHMENT_FREQUENCY_OLD IS NULL) 
					BEGIN 
						-- If new @REPLENISHMENT_FREQUENCY has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @REPLENISHMENT_FREQUENCY has not a value, then set it with its default value 
						IF (@REPLENISHMENT_FREQUENCY IS NULL) 
						BEGIN 
							SET @REPLENISHMENT_FREQUENCY = 1; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						SET @REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.REPLENISHMENT_FREQUENCY <> @REPLENISHMENT_FREQUENCY) 
					BEGIN 
						SET @REPLENISHMENT_FREQUENCY = (SELECT BUFFER.REPLENISHMENT_FREQUENCY 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

			SET @UNIT_THROUGHPUT = @UNIT_PRICE - @TVC; 

			-- -------------------------------------------------------------------------------
			-- OHLO 20170405: If buffer changes, then log the alert and also expire pending
			--	  		      suggestions 
			-- -------------------------------------------------------------------------------
			SET @IsBufferChanged = 0; 
			IF (@BUFFER IS NOT NULL AND @BUFFER_OLD IS NOT NULL AND @BUFFER != @BUFFER_OLD)
			BEGIN
				SET @IsBufferChanged = 1; 
			END

			-- -------------------------------------------------------------------------------
			-- OHLO 20201026: Since v5.2.1, move the code for changing UPDATE_MOVEMENTS column. 
			-- ------------------------------------------------------------------------------- 
			-- OHLO 20191212: Since v4.14.0, UPDATE_MOVEMENTS date column is modified, only 
			--				  when at least one of movements columns has changes. If it is a 
			--  			  DataExchange process, assummed it as changed. 
			-- ------------------------------------------------------------------------------- 
			SET @AreMovementsColumnsChanged = 1; 

			IF (@AreMovementsColumnsChanged = 0) 
			BEGIN 
				SET @UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS_OLD; 
			END 


			-- ----------------------------------------------------------------------------------- 
			-- OHLO 20201019: Since v5.2.1, fix the Previous Inventory on Site calculation. 
			-- ----------------------------------------------------------------------------------- 
			IF (@SKU_OLD IS NOT NULL) 
			BEGIN 
				SET @LAST_TOTAL_INVENTORY_ON_SITE = (CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
													 	@TOTAL_INVENTORY_ON_SITE_OLD 
													 ELSE 
													 	@LAST_TOTAL_INVENTORY_ON_SITE_OLD 
													 END); 
			END 

			SET @PassesValidations = 1 

			IF (@PassesValidations!=0 AND @LOCATION IS NULL) 
			BEGIN 
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND OUTPUT; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION_TEMP,
					    CONVERT(VARCHAR, @LOCATION_TEMP, 105), @FILE_ROW_NUMBER, 'LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; 
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -------------------------------------------------------------------------------
			-- OHLO 20201119: Since v5.3.0, avoid this validation if it's a reactivation. 
			-- -------------------------------------------------------------------------------
			IF ((@PassesValidations != 0 AND @ivaIsDataExchangeForScreen = 1 AND @IS_CREATION = 1) 
			AND (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    NULL, @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

 			--IF (@ivaIsDataExchangeForScreen = 1) 
				--BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				--END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@SKU IS NULL OR LTRIM(RTRIM(replace(@SKU, ' ', ''))) = ''))
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@LOCATION_TYPE IS NULL OR (@LOCATION_TYPE != 'WH' AND @LOCATION_TYPE != 'CL' AND @LOCATION_TYPE != 'PS'))) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @LOCATION, 105), @FILE_ROW_NUMBER, 'LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS); 

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDBUFFER_FAMILY_DB IS NULL) 
			BEGIN 
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'DATA_EXCHANGE_BUFFERS_FAMILY_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND OUTPUT; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @FAMILY, 105), @FILE_ROW_NUMBER, 'FAMILY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; 
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDLOCATION_ORIGIN_DB IS NULL) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, 'ORIGIN_LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------
			-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to   
			--				  location 
			-- ------------------------------------------------------------------------
			IF (@PassesValidations!=0 AND @ORIGIN_LOCATION = @LOCATION) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, 'ORIGIN_LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDCALENDAR IS NULL) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CDCALENDAR, 105), @FILE_ROW_NUMBER, 'CDCALENDAR', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CDUNIT IS NULL OR @INVENTORY_ACCURACY IS NULL))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, 'CDUNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDUNIT IS NOT NULL AND @CDUNIT_OLD IS NOT NULL)  
			BEGIN  		
				IF (@INVENTORY_ACCURACY_OLD > @INVENTORY_ACCURACY) 
				BEGIN
					SET @PassesValidations = 0;
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
						'DATA_EXCHANGE_BUFFERS_UNIT_MINOR_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										 	  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
						    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, 'CDUNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

					SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1
					SET @ovaResult = '1';

					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN 
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR+'</td></tr>';
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
					END 

					DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

					FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
					CONTINUE; 
				END
			END	

			IF (@PassesValidations!=0 AND (@REPLENISHMENT_TIME IS NULL OR @REPLENISHMENT_TIME <= 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_TIME_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_TIME', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER) < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_BUFFER_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @BUFFER_STR, 105), @FILE_ROW_NUMBER, 'BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@MINIMUM_BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_BUFFER_STR, 105),  @FILE_ROW_NUMBER, 'MINIMUM_BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 
			IF (@PassesValidations!=0 AND (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)))   
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
 			VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER, NULL, 'E', GETDATE(), @SKU, @LOCATION, 
					     CONVERT(VARCHAR, @MINIMUM_BUFFER_STR, 105), @FILE_ROW_NUMBER,  'MINIMUM_BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@SECURITY_STOCK IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @SECURITY_STOCK_STR, 105),  @FILE_ROW_NUMBER, 'SECURITY_STOCK', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@PACKAGING_UNIT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT) <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @PACKAGING_UNIT_STR, 105), @FILE_ROW_NUMBER, 'PACKAGING_UNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@MINIMUM_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT) <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
                     CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 


			IF (@PassesValidations!=0) 
			BEGIN 

				SET @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) % (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@FORMULA_INVENTORY_ACCURACY_DEFAULT)); 

			END 

			IF (@PassesValidations!=0 AND @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT != 0)  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT', @Language, '', '', '', @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @REPLENISHMENT_ROUNDING_MODE = 'MS' AND ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)) + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK))))
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR', @Language, '', '', '', @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------------- 
			-- OHLO 20200428: Since v5.0.0, remove the unnecessary accuracy rounding  
			-- ------------------------------------------------------------------------------- 
			IF (@PassesValidations!=0 AND (@UNIT_PRICE IS NOT NULL AND @UNIT_PRICE <= 0)) 
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UNIT_PRICE_STR, 105), @FILE_ROW_NUMBER, 'UNIT_PRICE', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TVC IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TVC) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_TVC_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TVC_STR, 105), @FILE_ROW_NUMBER, 'TVC', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CONSOLIDATED_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CONSOLIDATED_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'CONSOLIDATED_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@POSITIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @POSITIVE_ADJUSTMENTS_STR, 105), @FILE_ROW_NUMBER, 'POSITIVE_ADJUSTMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CONSUMPTION IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CONSUMPTION_STR, 105), @FILE_ROW_NUMBER, 'CONSUMPTION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@NEGATIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @NEGATIVE_ADJUSTMENTS_STR, 105), @FILE_ROW_NUMBER, 'NEGATIVE_ADJUSTMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its   
			--				  validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@PENDING_DEMAND IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @PENDING_DEMAND_STR, 105), @FILE_ROW_NUMBER, 'PENDING_DEMAND', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its    
			--				  validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@EXCLUDED_OUTS IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @EXCLUDED_OUTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
						CONVERT(VARCHAR, @EXCLUDED_OUTS_STR, 105), @FILE_ROW_NUMBER, 'EXCLUDED_OUTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority   
			--				  and its validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@REPLENISHMENT_PRIORITY IS NOT NULL AND  @REPLENISHMENT_PRIORITY <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_PRIORITY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_PRIORITY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency 
			--				  and its validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY IS NULL OR @REPLENISHMENT_FREQUENCY <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_FREQUENCY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 


			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY >= @REPLENISHMENT_TIME))  
			BEGIN 
		 		SET @PassesValidations = 0;
		 		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		 			'DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
		 		VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_FREQUENCY', @FILE_NAME, @UPDATE_MOVEMENTS)

		 		SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1
		 		SET @ovaResult = '1';

		 		IF (@ivaIsDataExchangeForScreen = 1)
		 		BEGIN 
		 			SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME+'</td></tr>';
		 			SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

		 			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
		 			VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
		 		END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

		 		FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
		 		CONTINUE; 
			END	


			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_SITE IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_SITE', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------------- 
			-- OHLO 20201019: Since v5.2.1, fix Previous Inventory on Site calculation. 
			-- ------------------------------------------------------------------------------- 
			IF (@PassesValidations!=0 AND @LAST_TOTAL_INVENTORY_ON_SITE IS NOT NULL) 
			BEGIN 
				SET @TempTOTAL_INVENTORY_ON_SITE = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE)) 
                                                 + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)) 
                                                 - (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)) 
				IF ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TempTOTAL_INVENTORY_ON_SITE)) != (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE))) 
				BEGIN 
					--SET @PassesValidations = 0;
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						   CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_SITE', @FILE_NAME, @UPDATE_MOVEMENTS)

					--SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
					--SET @ovaResult = '1';

					IF (@ivaIsDataExchangeForScreen = 1) 
					BEGIN 
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
					END 
				END 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_TRANSIT IS NULL OR @TOTAL_INVENTORY_ON_TRANSIT < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_TRANSIT_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_TRANSIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PURCHASING IS NULL OR @TOTAL_INVENTORY_ON_PURCHASING < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PURCHASING_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_PURCHASING', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PRODUCTION IS NULL OR @TOTAL_INVENTORY_ON_PRODUCTION < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_PRODUCTION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@UPDATE_MOVEMENTS IS NULL OR @UPDATE_MOVEMENTS > @DATE_SERVER_NO_TIME)) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST', @Language, '', '', '', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -------------------------------------------------------------------------------
			-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by Update 
			--                     Movements column  
			-- -------------------------------------------------------------------------------
			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE', @Language, '', '', '', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations = 1) 
			BEGIN 

				SET @BUFFER = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)
				SET @TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) 
				SET @TOTAL_INVENTORY_ON_TRANSIT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_TRANSIT)  
				SET @TOTAL_INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PURCHASING)
				SET @TOTAL_INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PRODUCTION) 
				SET @LAST_TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE) 

				SET @SBC_BUFFER_SIZE = NULL; 

				IF (@IsBufferChanged = 1) 
				BEGIN 
					SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); 
				END 

				IF (@SBC_BUFFER_SIZE IS NULL) 
				BEGIN 
					IF (@SBC_BUFFER_SIZE_OLD IS NULL) 
					BEGIN 
						SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); 
					END 
					ELSE 
					BEGIN 
						SET @SBC_BUFFER_SIZE = @SBC_BUFFER_SIZE_OLD; 
					END 
				END 

				SET @CONSOLIDATED_REPLENISHMENT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)
				SET @CONSUMPTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)

				IF (@REPLENISHMENT_ROUNDING_MODE = 'MS') 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = 0 
				END 
				ELSE IF (@REPLENISHMENT_ROUNDING_MODE = 'MA') 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @MINIMUM_REPLENISHMENT) 
											  - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY) 
				END 
				ELSE 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = 0 
				END 

				-- ---------------------------------------------------------------------------
				-- OHLO 20170623: Since v4.7.0, the Pending demand is added to the Allowed    
				--                Overstocking 
				-- ---------------------------------------------------------------------------
				SET @ALLOWED_OVERSTOCKING = @ALLOWED_OVERSTOCKING 
					+ dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) 

				SET @EFFECTIVE_BUFFER        = dbo.GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER(@INVENTORY_ACCURACY, @BUFFER, @SECURITY_STOCK, @ALLOWED_OVERSTOCKING)
				SET @INVENTORY_ON_SITE       = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_SITE)
				SET @INVENTORY_ON_TRANSIT    = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_TRANSIT)
				SET @INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PURCHASING)
				SET @INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PRODUCTION)
				SET @INVENTORY_ON_CHAIN      = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_TRANSIT) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PURCHASING) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PRODUCTION) 
				-- ---------------------------------------------------------------------------
				-- JEBE 20200824: Since v5.2.0, Net Inventory formula is modified 
				-- ---------------------------------------------------------------------------
				-- OHLO 20170623: Since v4.7.0, Calculate the Net Inventori   
				-- ---------------------------------------------------------------------------
				SET @NET_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_CHAIN) 
				                   - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND); 
				SET @SITE_PRIORITY       = dbo.GET_CALCULATE_BUFFER_SITE_PRIORITY(@BUFFER, @SECURITY_STOCK, @INVENTORY_ON_SITE);
				SET @SITE_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@SITE_PRIORITY, @INVENTORY_ON_SITE, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); 

				SET @NET_PRIORITY       = dbo.GET_CALCULATE_BUFFER_NET_PRIORITY(@BUFFER, @SECURITY_STOCK, @NET_INVENTORY);
				SET @NET_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@NET_PRIORITY, @INVENTORY_ON_CHAIN, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); 

				-- ---------------------------------------------------------------------------
				-- OHLO 20200820: Since v5.2.0, add Available Inventory calculated column 
				-- ---------------------------------------------------------------------------
				SET @AVAILABLE_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) 
				                   		 - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND);
				-- ---------------------------------------------------------------------------
				-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory, and Origin Buffer Family calculated columns 
				-- ---------------------------------------------------------------------------
				/*SET @ORIGIN_INVENTORY_ON_SITE = ORIGIN_INVENTORY_ON_SITE;
				SET @ORIGIN_NET_INVENTORY = SELECT NET_INVENTORY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;
				SET @ORIGIN_BUFFER_FAMILY = SELECT FAMILY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;*/
				-- ---------------------------------------------------------------------------


				SET @TOTAL_CONSOLIDATED_INPUTS = 0; 

				-- ---------------------------------------------------------------------------
				-- OHLO 20170112: Restart value for Replenishment Problem 
				-- 				  If Site Priority Color is neither anymore blue, nor red,    
				-- 				  nor black, it is because the problem already passed and     
				-- 				  the field is restarted to its default value.                
				-- 				                                                              
				-- 				  Or if the color changes from 'Blue' to 'Red'/'Black'  
				-- 				  or vice versa.											  
				-- ---------------------------------------------------------------------------
				SET @RESTART = dbo.FN_GET_RESTART_REPLENISHMENT_PROBLEM_VALUE(@SITE_PRIORITY_COLOR_OLD, 
																			  @SITE_PRIORITY_COLOR); 
				IF (@RESTART = 'Y') 
				BEGIN  
					SET @REPLENISHMENT_PROBLEM = @CD_NONE_CAUSE; 
				END  

				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)
				BEGIN 
					SET @LAST_COLOR_CHANGE_DATE = NULL 
					SET @MANAGED = 1 
				END 
				ELSE 
				BEGIN 
					SET @LAST_COLOR_CHANGE_DATE = dbo.BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE(@LAST_COLOR_CHANGE_DATE_OLD,@SITE_PRIORITY_COLOR_OLD,@SITE_PRIORITY_COLOR, @UPDATE_MOVEMENTS) 
					SET @MANAGED = dbo.BUFFER_GET_CALCULATE_MANAGED(@SITE_PRIORITY_COLOR_OLD, @SITE_PRIORITY_COLOR) 
				END 

				SET @CDGROUP = dbo.BUFFER_GET_CDGROUP() 

  			-- Computed columns 2.2.1
				IF (@SKU_OLD IS NULL)
				BEGIN
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200409: Since v5.0.0, set the first value for Worst Inventory on 
					--                site with the current Inventory on Site value            
					-- ----------------------------------------------------------------------- 
					SET @WORST_INVENTORY_ON_SITE    = @INVENTORY_ON_SITE;
					SET @LAST_INVENTORY_ON_SITE     = NULL;
					SET @DAYS_SINCE_LAST_OUT        = NULL;
					SET @LAST_TOTAL_OUTS_MAX_SUM    = NULL;
					SET @PROTECTION_FACTOR          = @MIDDLE_PROTECTION_FACTOR;
					SET @ADJUSTMENT_TYPE            = 'EMPTY';
					SET @RT_ADJUSTMENT_TYPE         = 'EMPTY';
					SET @SUGGESTED_BUFFER           = NULL;
					SET @APPROVED_BUFFER            = NULL;
					SET @ADJUSTMENT_ACTION          = 'IGNORE';
					SET @SUGGESTION_DATE            = NULL;
					SET @SUGGESTION_REJECTION_CAUSE = NULL;
					SET @SUGGESTION_EXPIRATION_DATE = NULL;
					SET @SUGGESTION_ALERTS          = NULL;

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated  
					--                column 
					-- ----------------------------------------------------------------------- 
					SET @DAILY_AVERAGE_CONSUMPTION  = NULL;

					IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)
					BEGIN					
						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @UPDATE_MOVEMENTS);
					END
					ELSE
					BEGIN
						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @UPDATE_MOVEMENTS);
					END				
				END

				IF (@SKU_OLD IS NOT NULL)
				BEGIN
					SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD;
					-- ---------------------------------------------------------------------- 
					-- It is not possible that the field @REPLENISHMENT_TIME_OLD is null when 
					-- the field @SKU_OLD is not empty
					-- ---------------------------------------------------------------------- 
					IF (@REPLENISHMENT_TIME > @REPLENISHMENT_TIME_OLD)
					BEGIN
						IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)
						BEGIN
							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @BUFFER_INITIAL_DATE_OLD)
						END
						ELSE
						BEGIN
							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @BUFFER_INITIAL_DATE_OLD)
						END
						IF (@NEXT_BUFFER_ANALYSIS_OLD > @RT_NEXT_BUFFER_ANALYSIS)
						BEGIN
							SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD
						END
						ELSE
						BEGIN
							SET @NEXT_BUFFER_ANALYSIS = @RT_NEXT_BUFFER_ANALYSIS
						END
					END
				END

				-- --------------------------------------------------------------------------- 
				-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use   
				--                in Inputs and Outs Update. 
				-- --------------------------------------------------------------------------- 
				INSERT INTO BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS], [UPDATE_MOVEMENTS_OLD]) 
				VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @UPDATE_MOVEMENTS_OLD); 

				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)
				BEGIN 
					INSERT INTO TFSCM_CLI_BUFFER(BUFFER, CONSOLIDATED_REPLENISHMENT, CONSUMPTION, FAMILY, LOCATION, ORIGIN_LOCATION, REPLENISHMENT_TIME, SKU, TOTAL_INVENTORY_ON_PRODUCTION, TOTAL_INVENTORY_ON_PURCHASING, TOTAL_INVENTORY_ON_SITE, TOTAL_INVENTORY_ON_TRANSIT, UPDATE_MOVEMENTS,CREATION_DATE,CREATOR_USER,MODIFY_DATE,MODIFY_USER,CDUNIT,MINIMUM_BUFFER,SECURITY_STOCK,MINIMUM_REPLENISHMENT,PACKAGING_UNIT,UNIT_PRICE,TVC,POSITIVE_ADJUSTMENTS,NEGATIVE_ADJUSTMENTS,PENDING_DEMAND,EXCLUDED_OUTS,REPLENISHMENT_PRIORITY,REPLENISHMENT_FREQUENCY,BUFFER_INITIAL_DATE,LOCATION_TYPE,UNIT_THROUGHPUT,INACTIVE,INACTIVATION_DATE,INVENTORY_ON_SITE,INVENTORY_ON_TRANSIT,INVENTORY_ON_PURCHASING,INVENTORY_ON_PRODUCTION,INVENTORY_ON_CHAIN,ALLOWED_OVERSTOCKING,EFFECTIVE_BUFFER,SITE_PRIORITY,SITE_PRIORITY_COLOR,NET_PRIORITY,NET_PRIORITY_COLOR,TOTAL_CONSOLIDATED_INPUTS,TOTAL_CONSOLIDATED_OUTPUTS,LAST_TOTAL_INVENTORY_ON_SITE,LAST_COLOR_CHANGE_DATE,MANAGED,CDGROUP,WORST_INVENTORY_ON_SITE,LAST_INVENTORY_ON_SITE,DAYS_SINCE_LAST_OUT,LAST_TOTAL_OUTS_MAX_SUM,PROTECTION_FACTOR,ADJUSTMENT_TYPE,RT_ADJUSTMENT_TYPE,SUGGESTED_BUFFER,APPROVED_BUFFER,ADJUSTMENT_ACTION,SUGGESTION_DATE,SUGGESTION_REJECTION_CAUSE,SUGGESTION_EXPIRATION_DATE,SUGGESTION_ALERTS,NEXT_BUFFER_ANALYSIS,REPLENISHMENT_PROBLEM,NET_INVENTORY,SBC_BUFFER_SIZE,DAILY_AVERAGE_CONSUMPTION,AVAILABLE_INVENTORY,ORIGIN_INVENTORY_ON_SITE,ORIGIN_NET_INVENTORY,ORIGIN_BUFFER_FAMILY)
					VALUES(@BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, GETDATE(), @ivaCreatorOrModifyUser, GETDATE(), @ivaCreatorOrModifyUser,@CDUNIT_DEFAULT,0,@SECURITY_STOCK,@MINIMUM_REPLENISHMENT,@FORMULA_INVENTORY_ACCURACY_DEFAULT,@UNIT_PRICE,@TVC,0,0,@PENDING_DEMAND,@EXCLUDED_OUTS,@REPLENISHMENT_PRIORITY,@REPLENISHMENT_FREQUENCY,@UPDATE_MOVEMENTS,@LOCATION_TYPE,@UNIT_THROUGHPUT,0,NULL,@INVENTORY_ON_SITE,@INVENTORY_ON_TRANSIT,@INVENTORY_ON_PURCHASING,@INVENTORY_ON_PRODUCTION,@INVENTORY_ON_CHAIN,@ALLOWED_OVERSTOCKING,@EFFECTIVE_BUFFER,@SITE_PRIORITY,@SITE_PRIORITY_COLOR,@NET_PRIORITY,@NET_PRIORITY_COLOR,0,0,NULL,@LAST_COLOR_CHANGE_DATE,@MANAGED,@CDGROUP,@WORST_INVENTORY_ON_SITE,@LAST_INVENTORY_ON_SITE,@DAYS_SINCE_LAST_OUT,@LAST_TOTAL_OUTS_MAX_SUM,@PROTECTION_FACTOR,@ADJUSTMENT_TYPE,@RT_ADJUSTMENT_TYPE,@SUGGESTED_BUFFER,@APPROVED_BUFFER,@ADJUSTMENT_ACTION,@SUGGESTION_DATE,@SUGGESTION_REJECTION_CAUSE,@SUGGESTION_EXPIRATION_DATE,@SUGGESTION_ALERTS,@NEXT_BUFFER_ANALYSIS,@CD_NONE_CAUSE,@NET_INVENTORY,@SBC_BUFFER_SIZE,@DAILY_AVERAGE_CONSUMPTION,@AVAILABLE_INVENTORY,@ORIGIN_INVENTORY_ON_SITE,@ORIGIN_NET_INVENTORY,@ORIGIN_BUFFER_FAMILY)
				END 
				ELSE 
				BEGIN 
					-- -----------------------------------------------------------------------
					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by 
					--                     Update Movements column  
					-- -----------------------------------------------------------------------
					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					   SET [REPLENISHMENT_PROBLEM] = @REPLENISHMENT_PROBLEM_OLD
					 WHERE [SKU]              = @SKU 
					   AND [LOCATION]         = @LOCATION
					   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS_OLD

					IF (@ivaIsDataExchangeForScreen=0) 
					BEGIN 
						UPDATE TFSCM_CLI_BUFFER
						   SET CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT,
							   CONSUMPTION = @CONSUMPTION,
							   FAMILY = @FAMILY,
							   ORIGIN_LOCATION = @ORIGIN_LOCATION,
							   REPLENISHMENT_TIME = @REPLENISHMENT_TIME,
							   TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION,
							   TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING,
							   TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE,
							   TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT,
							   UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS,
							   CDUNIT = @CDUNIT, 
							   BUFFER = @BUFFER, 
							   MINIMUM_BUFFER = @MINIMUM_BUFFER, 
							   SECURITY_STOCK = @SECURITY_STOCK, 
							   MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT, 
							   PACKAGING_UNIT = @PACKAGING_UNIT, 
							   UNIT_PRICE = @UNIT_PRICE, 
							   TVC = @TVC, 
							   POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS, 
							   NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS, 
							   PENDING_DEMAND = @PENDING_DEMAND, 
							   EXCLUDED_OUTS = @EXCLUDED_OUTS, 
							   REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY, 
							   REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY, 

							   MODIFY_DATE             = GETDATE()
							  ,MODIFY_USER             = @ivaCreatorOrModifyUser
							  ,LOCATION_TYPE           = @LOCATION_TYPE
							  ,UNIT_THROUGHPUT         = @UNIT_THROUGHPUT
							  ,INACTIVE                = @INACTIVE
							  ,INACTIVATION_DATE       = @INACTIVATION_DATE
							  ,INVENTORY_ON_SITE       = @INVENTORY_ON_SITE
							  ,INVENTORY_ON_TRANSIT    = @INVENTORY_ON_TRANSIT
							  ,INVENTORY_ON_PURCHASING = @INVENTORY_ON_PURCHASING
							  ,INVENTORY_ON_PRODUCTION = @INVENTORY_ON_PRODUCTION
							  ,INVENTORY_ON_CHAIN      = @INVENTORY_ON_CHAIN
							  ,ALLOWED_OVERSTOCKING    = @ALLOWED_OVERSTOCKING
							  ,EFFECTIVE_BUFFER        = @EFFECTIVE_BUFFER
							  ,SITE_PRIORITY           = @SITE_PRIORITY
							  ,SITE_PRIORITY_COLOR     = @SITE_PRIORITY_COLOR
							  ,NET_PRIORITY            = @NET_PRIORITY
							  ,NET_PRIORITY_COLOR      = @NET_PRIORITY_COLOR
							  ,LAST_TOTAL_INVENTORY_ON_SITE = 
							  	CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
							  		@TOTAL_INVENTORY_ON_SITE_OLD
							  	ELSE 
							  		LAST_TOTAL_INVENTORY_ON_SITE
							  	END	
							  ,LAST_COLOR_CHANGE_DATE  = @LAST_COLOR_CHANGE_DATE
							  ,MANAGED                 = @MANAGED
							  ,NEXT_BUFFER_ANALYSIS    = @NEXT_BUFFER_ANALYSIS
							  ,REPLENISHMENT_PROBLEM   = @REPLENISHMENT_PROBLEM
							  ,NET_INVENTORY           = @NET_INVENTORY
							  ,SBC_BUFFER_SIZE         = @SBC_BUFFER_SIZE
							  ,AVAILABLE_INVENTORY     = @AVAILABLE_INVENTORY
							  ,ORIGIN_INVENTORY_ON_SITE = @ORIGIN_INVENTORY_ON_SITE
							  ,ORIGIN_NET_INVENTORY     = @ORIGIN_NET_INVENTORY
							  ,ORIGIN_BUFFER_FAMILY     = @ORIGIN_BUFFER_FAMILY

						WHERE SKU = @SKU AND LOCATION = @LOCATION
					END 
					ELSE
					BEGIN 
						UPDATE TFSCM_CLI_BUFFER
						   SET BUFFER = @BUFFER,
							   CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT,
							   CONSUMPTION = @CONSUMPTION,
							   FAMILY = @FAMILY,
							   LOCATION = @LOCATION,
							   ORIGIN_LOCATION = @ORIGIN_LOCATION,
							   REPLENISHMENT_TIME = @REPLENISHMENT_TIME,
							   SKU = @SKU,
							   TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION,
							   TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING,
							   TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE,
							   TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT,
							   UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS,

							   MODIFY_DATE             = GETDATE()
							  ,MODIFY_USER             = @ivaCreatorOrModifyUser
							  ,LOCATION_TYPE           = @LOCATION_TYPE
							  ,UNIT_THROUGHPUT         = @UNIT_THROUGHPUT
							  ,INACTIVE                = @INACTIVE
							  ,INACTIVATION_DATE       = @INACTIVATION_DATE
							  ,INVENTORY_ON_SITE       = @INVENTORY_ON_SITE
							  ,INVENTORY_ON_TRANSIT    = @INVENTORY_ON_TRANSIT
							  ,INVENTORY_ON_PURCHASING = @INVENTORY_ON_PURCHASING
							  ,INVENTORY_ON_PRODUCTION = @INVENTORY_ON_PRODUCTION
							  ,INVENTORY_ON_CHAIN      = @INVENTORY_ON_CHAIN
							  ,ALLOWED_OVERSTOCKING    = @ALLOWED_OVERSTOCKING
							  ,EFFECTIVE_BUFFER        = @EFFECTIVE_BUFFER
							  ,SITE_PRIORITY           = @SITE_PRIORITY
							  ,SITE_PRIORITY_COLOR     = @SITE_PRIORITY_COLOR
							  ,NET_PRIORITY            = @NET_PRIORITY
							  ,NET_PRIORITY_COLOR      = @NET_PRIORITY_COLOR
							  ,LAST_TOTAL_INVENTORY_ON_SITE = 
							  	CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
							  		@TOTAL_INVENTORY_ON_SITE_OLD
							  	ELSE 
							  		LAST_TOTAL_INVENTORY_ON_SITE
							  	END	
							  ,LAST_COLOR_CHANGE_DATE  = @LAST_COLOR_CHANGE_DATE
							  ,MANAGED                 = @MANAGED
							  ,NEXT_BUFFER_ANALYSIS    = @NEXT_BUFFER_ANALYSIS
							  ,REPLENISHMENT_PROBLEM   = @REPLENISHMENT_PROBLEM
							  ,NET_INVENTORY           = @NET_INVENTORY
							  ,SBC_BUFFER_SIZE         = @SBC_BUFFER_SIZE
							  ,AVAILABLE_INVENTORY     = @AVAILABLE_INVENTORY
							  ,ORIGIN_INVENTORY_ON_SITE = @ORIGIN_INVENTORY_ON_SITE
							  ,ORIGIN_NET_INVENTORY     = @ORIGIN_NET_INVENTORY
							  ,ORIGIN_BUFFER_FAMILY     = @ORIGIN_BUFFER_FAMILY

						WHERE SKU = @SKU AND LOCATION = @LOCATION
					END 
				END 
				

				-- If buffer value changes, the buffer related orders priority have to be updated 
				--IF (@BUFFER <> @BUFFER_OLD)
				--BEGIN
				IF (@IsBufferChanged = 1)
				BEGIN
					/* OHLO 20170405: Alert user and Expire non-managed suggestions */	
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);
					/* In order to manage the expired sku-location, add it to the list */
					IF (@BufferList <> '')
					BEGIN
						SET @BufferList = @BufferList + @DelimiterForRecords;
					END 

					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; 

					/* Expire any prior non-managed suggestion */
					UPDATE TFSCM_CLI_BUFFER
					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,
						   SUGGESTION_REJECTION_CAUSE = @ExpiredSuggestionCause,
						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP
					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze
					   AND SKU               = @SKU
					   AND LOCATION          = @LOCATION;

					/* If it is a dataexchange from Master window */
					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@AlertNotificationsId, @MessageTableErrors);
					END
					-- -----------------------------------------------------------------------
				END

				-- ---------------------------------------------------------------------------
				-- OHLO 20190613: Since v4.13.0, if columns involved in the calculation 
				-- 					   have changed, then recalculate buffers related OC and 
				--                     OP priorities
				-- ---------------------------------------------------------------------------
				IF (@IsBufferChanged = 1 
				 OR @IsSecurityStockChanged = 1 
				 OR @IsInventoryOnSiteChanged = 1 
				 OR @IsInventoryOnTransitChanged = 1 
				 OR @IsInventoryOnProductionChanged = 1 
				 OR @IsPendingDemandChanged = 1) 
				BEGIN
					DECLARE @recalcPriorityResult  VARCHAR(1);
					DECLARE @recalcPriorityMessage NVARCHAR(max);
					-- -----------------------------------------------------------------------
					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by 
					--                     Update Movements column  
					-- -----------------------------------------------------------------------
					EXEC USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY @SKU, @LOCATION, @UPDATE_MOVEMENTS,
						@recalcPriorityResult OUTPUT, @recalcPriorityMessage OUTPUT;

					-- If there is an error recalculating the priority, then raise it.
					IF (@recalcPriorityResult = '1')
					BEGIN
						SET @ovaResult = '1';
						-- (@ErMessage, @ErSeverity, @ErState)
						RAISERROR (@recalcPriorityMessage, 10, 1);
					END
				END
				-- ---------------------------------------------------------------------------


				IF (@IsMinBufferChanged = 1)
				BEGIN
					/* OHLO 20170523: Alert user and Expire non-managed suggestions */	
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);

					/* In order to manage the expired sku-location, add it to the list */
					IF (@BufferList <> '')
					BEGIN
						SET @BufferList = @BufferList + @DelimiterForRecords;
					END 

					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; 

					/* Expire any prior non-managed suggestion */
					UPDATE TFSCM_CLI_BUFFER
					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,
						   SUGGESTION_REJECTION_CAUSE = @ExpiredMinBufferChange,
						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP
					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze
					   AND SKU               = @SKU
					   AND LOCATION          = @LOCATION
					   AND SUGGESTED_BUFFER  < MINIMUM_BUFFER;

					/* If it is a dataexchange from Master window */
					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@AlertNotificationsId, @MessageTableErrors);
					END
					-- -----------------------------------------------------------------------
				END


				-- ---------------------------------------------------------------------------
				-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. 
				-- ---------------------------------------------------------------------------
				IF (@IsOrigin > 0)
				BEGIN
					INSERT INTO #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY)
					VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @INVENTORY_ON_SITE, @NET_INVENTORY, @FAMILY); 
				END
				-- ---------------------------------------------------------------------------

				IF (@LOCATION != @locationTemp) 
				BEGIN 
					SET @locationsListTemp = @locationsListTemp + @LOCATION + @DelimiterForLocations; 
					SET @locationTemp = @LOCATION; 
				END 

				IF (@LOCATION != @locationTempOnlyWorkDay AND @LOCATION != @locationTempNoWorkDay) 
				BEGIN 
					IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@UPDATE_MOVEMENTS, @CDCALENDAR)) = 0) 
					BEGIN  
						SET @locationsListTempOnlyWorkDay = @locationsListTempOnlyWorkDay + @LOCATION + @DelimiterForLocations; 
						SET @locationTempOnlyWorkDay = @LOCATION; 
					END 
					ELSE 
					BEGIN  
						SET @locationTempNoWorkDay = @LOCATION; 
					END 
				END  

				SET @ovaHasProcessed = '1';
				SET @ProcessBuffersCount = @ProcessBuffersCount + 1 
			END 
		END TRY
		BEGIN CATCH 
			SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
			SET @ovaResult = '1';
			SET @ovaMessage = ' ERROR_MESSAGE: '+ERROR_MESSAGE(); 

			BEGIN TRY 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR + '<br><br>' + @ovaMessage, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

			END TRY 
			BEGIN CATCH 
			END CATCH 
		END CATCH 

		SET @COMMIT_COUNT = @COMMIT_COUNT + 1

		-- -----------------------------------------------------------------------------------
		-- OHLO 20200106: Since v4.14.0, the commit batch is set to 10 instead of 100 
		-- -----------------------------------------------------------------------------------
		IF (@COMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @COMMIT_COUNT = 0;
		END

		FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @FAMILY, @LOCATION, @ORIGIN_LOCATION, @REPLENISHMENT_TIME, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @CDUNIT, @EXCLUDED_OUTS, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @SECURITY_STOCK, @TVC, @UNIT_PRICE, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
	END 

	-- ---------------------------------------------------------------------------------------
	-- OHLO 20200106: Since v4.14.0, close cursor right after its usage 
	-- ---------------------------------------------------------------------------------------
	CLOSE cDataTempCursor;
	DEALLOCATE cDataTempCursor;

	CREATE INDEX IDX_BUFFER_DATES_TEMP ON BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS]);

	-- ---------------------------------------------------------------------------------------
	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.
	-- ---------------------------------------------------------------------------------------
	CREATE INDEX IDX_OriginBuffersTemp ON #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS);

	UPDATE [BUFFER]
	   SET [BUFFER].[ORIGIN_INVENTORY_ON_SITE] = [OBUFFER].[INVENTORY_ON_SITE], 
		   [BUFFER].[ORIGIN_NET_INVENTORY]     = [OBUFFER].[NET_INVENTORY], 
		   [BUFFER].[ORIGIN_BUFFER_FAMILY]     = [OBUFFER].[FAMILY]
	  FROM [dbo].[TFSCM_CLI_BUFFER] AS [BUFFER]
	  JOIN #OriginBuffersTemp AS [OBUFFER] ON ([OBUFFER].[SKU]              = [BUFFER].[SKU]
										   AND [OBUFFER].[LOCATION]         = [BUFFER].[ORIGIN_LOCATION]
										   AND [OBUFFER].[UPDATE_MOVEMENTS] = [BUFFER].[UPDATE_MOVEMENTS]);
	-- ---------------------------------------------------------------------------------------

	/* Manage the expired suggestions */
	IF (@BufferList <> '')
	BEGIN
		EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferList, @ivaCreatorOrModifyUser, @ManagementWay,
												  @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;
		SET @ovaResult  = @ovaGBASResult;
		SET @ovaMessage = @ovaGBASMessage;
	END

	-- USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS: 
	IF (LEN(@locationsListTemp) > 0) 
	BEGIN 
		SET @locationsListTemp = SUBSTRING (@locationsListTemp, 1, LEN(@locationsListTemp)-LEN(@DelimiterForLocations)) 
	END 
	IF (LEN(@locationsListTempOnlyWorkDay) > 0) 
	BEGIN 
		SET @locationsListTempOnlyWorkDay = SUBSTRING (@locationsListTempOnlyWorkDay, 1, LEN(@locationsListTempOnlyWorkDay)-LEN(@DelimiterForLocations)) 
	END 

	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20200404: Since v5.0.0, send the variable @ManagementWay  
	-- --------------------------------------------------------------------------------------- 
	SET @ManagementWay = 'A'

	EXEC USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS 
		@locationsListTemp, @DelimiterForLocations, @ivaTempLoadDate, @ivaCreatorOrModifyUser, @ManagementWay, 
		@ovaResultPseudocodes OUTPUT, @ovaMessagePseudocodes OUTPUT 

	SET @ovaMessagePseudocodesTotal = @ovaMessagePseudocodesTotal + ', ' + @ovaMessagePseudocodes; 
	IF @ovaResultPseudocodes = '1' 
	BEGIN 
		SET @ovaResult = '1' 
	END 

	SET @Trace = 'go inside the cursor cDataTempCursor  '

	IF (@ovaHasProcessed = '1')
	BEGIN 
		UPDATE TBL 
		SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		FROM TFSCM_COM_TABLES TBL 
		JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		AND INTER.CDINTERFACE = 3
	END 

	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		'DATA_EXCHANGE_BUFFERS_SUCESSFUL', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL OUTPUT;

	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		'DATA_EXCHANGE_BUFFERS_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ERROR OUTPUT;

	SET @ovaMessage =  @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL+':' + CAST (@ProcessBuffersCount AS varchar) + ', '+ @MSG_DATA_EXCHANGE_BUFFERS_ERROR+':' + CAST (@ErrorsBuffersCount AS varchar) + @ovaMessagePseudocodesTotal 
	IF (@ivaIsDataExchangeForScreen = 1) 
	BEGIN 
		UPDATE TFSCM_CLI_MESSAGESNOTIFICATIONS SET MESSAGE = @ovaMessage WHERE ID_MESSAGESNOTIFICATIONS = @ID_MESSAGESNOTIFICATIONS ; 
	END 

	SET @TotalErrorsBuffers = (@ErrorsBuffersCount + @ivaErrorValidations)
	SELECT @MessagesAfterDataExchange = P.PARAM_VALUE FROM TFSCM_COM_PARAMS P 
		WHERE P.CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE'
	IF (@TotalErrorsBuffers > 0 AND @MessagesAfterDataExchange = 'Y')
	BEGIN
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'BDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultRemoveViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);
		END

		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @TotalErrorsBuffers, 'BDE', 'BUFFER_GENERAL_PRIORIZATION', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultAddViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageAddViewNot, 11, 1);
		END
	END	

	IF (@TotalErrorsBuffers = 0 AND @MessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
	BEGIN 
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'BDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultRemoveViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);
		END
	END

END TRY 
BEGIN CATCH 
	SET @ovaResult = '1';
	SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
		+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
		+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[BUFFERS]') 
		+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR) 
		+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE(); 

	IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1))
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1)) 
		BEGIN 
			CLOSE cDataTempCursor; 
		END 
		DEALLOCATE cDataTempCursor; 
	END 
END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[BUFFERS_MANUAL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[BUFFERS_MANUAL] 
	@ivaIdExchange NUMERIC(10), 
	@ivaTempLoadDate DATE ,
	@ivaCreatorOrModifyUser NVARCHAR(MAX), 
	@ivaIsDataExchangeForScreen SMALLINT, 
	@ivaCdViewIfDataExchangeForScreen INT, 
	@ivaErrorValidations NUMERIC(10), 
	@ovaResult VARCHAR(1) OUTPUT, 
	@ovaMessage NVARCHAR(MAX) OUTPUT, 
	@ovaMessageTableErrors NVARCHAR(MAX) OUTPUT, 
	@locationsListTempOnlyWorkDay AS NVARCHAR(MAX)  OUTPUT, 
	@ovaHasProcessed VARCHAR(1) OUTPUT 
AS 
DECLARE @Trace 						AS NVARCHAR(MAX); 
DECLARE @DuplicatedBuffersCountTemp 	AS INT = 0; 
DECLARE @ErrorsBuffersCount 			AS INT = 0; 
DECLARE @ProcessBuffersCount 		AS INT = 0; 
DECLARE @ovaResultPseudocodes 		AS VARCHAR(1); 
DECLARE @ovaMessagePseudocodes 		AS NVARCHAR(MAX); 
DECLARE @ovaMessagePseudocodesTotal 	AS NVARCHAR(MAX) = ''; 
DECLARE @PassesValidations 			AS SMALLINT = 1; 
DECLARE @CountIntTmp 				AS INT = 0; 
DECLARE @CountNumericTmp 			AS NUMERIC(17,5) = 0; 
DECLARE @locationsListTemp 			AS NVARCHAR(MAX) = ''; 
DECLARE @locationTemp 				AS VARCHAR(50) = ''; 
DECLARE @locationTempOnlyWorkDay 	AS VARCHAR(50) = ''; 
DECLARE @locationTempNoWorkDay 		AS VARCHAR(50) = ''; 
DECLARE @DelimiterForLocations	   AS CHAR(1) = '|'; 
DECLARE @DATE_SERVER_NO_TIME   	   AS DATE; 
DECLARE @CDUNIT_DEFAULT 		  	   AS VARCHAR(50); 
DECLARE @INVENTORY_ACCURACY_DEFAULT AS NUMERIC(3,0); 
DECLARE @FORMULA_INVENTORY_ACCURACY_DEFAULT AS NUMERIC(6,5); 
DECLARE @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT AS NUMERIC(17,5); 
DECLARE @TempTOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5); 
DECLARE @ID_MESSAGESNOTIFICATIONS AS NUMERIC(18,0) = 0; 
DECLARE @TableTempID_MESSAGESNOTIFICATIONS TABLE (ID NUMERIC(18,0)); 
DECLARE @MessageTableErrors AS VARCHAR(4000) = ''; 
DECLARE @Dummy AS VARCHAR(10) = ''; 
DECLARE @ovaResultRemoveViewNot    AS VARCHAR(1);
DECLARE @ovaMessageRemoveViewNot   AS VARCHAR(MAX);
DECLARE @ovaResultAddViewNot       AS VARCHAR(1);
DECLARE @ovaMessageAddViewNot      AS VARCHAR(MAX);
DECLARE @TotalErrorsBuffers        AS NUMERIC(8) = 0;
DECLARE @MessagesAfterDataExchange AS VARCHAR = 'N';
DECLARE @DelimiterForRecords       AS VARCHAR(1)    = '|';
DECLARE @DelimeterPk               AS VARCHAR(1)    = ';';
DECLARE @BufferList                AS NVARCHAR(MAX) = '';
DECLARE @AdjustmentActionExpire    AS VARCHAR(10)   = 'EXPIRE';
DECLARE @AdjustmentActionAnalyze   AS VARCHAR(10)   = 'ANALYZE';
DECLARE @IsBufferChanged           AS NUMERIC(1)    = 0;
-- -------------------------------------------------------------------------------------------
-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. 
-- -------------------------------------------------------------------------------------------
DECLARE @IsOrigin                  AS INT           = 0;
-- -------------------------------------------------------------------------------------------
-- OHLO 20190613: Since v4.13.0, in order to recalculate buffers related OC and OP 
--                priorities, check if columns involved in the calculation have changed. 
-- -------------------------------------------------------------------------------------------
DECLARE @IsSecurityStockChanged         NUMERIC(1) = 0;
DECLARE @IsInventoryOnSiteChanged       NUMERIC(1) = 0;
DECLARE @IsInventoryOnTransitChanged    NUMERIC(1) = 0;
DECLARE @IsInventoryOnProductionChanged NUMERIC(1) = 0;
DECLARE @IsPendingDemandChanged         NUMERIC(1) = 0;

-- -------------------------------------------------------------------------------------------
-- OHLO 20191212: Since v4.14.0, in order to update "UPDATE_MOVEMENTS" date column,
--                it is necessary to check if the movements columns have been changed.  
-- -------------------------------------------------------------------------------------------
DECLARE @IsConsolidatedReplenishmentChanged NUMERIC(1) = 0;
DECLARE @IsPositiveAdjustmentsChanged       NUMERIC(1) = 0;
DECLARE @IsConsumptionChanged               NUMERIC(1) = 0;
DECLARE @IsNegativeAdjustmentsChanged       NUMERIC(1) = 0;
DECLARE @IsExcludedOutsChanged              NUMERIC(1) = 0;
DECLARE @IsInventoryOnPurchasingChanged     NUMERIC(1) = 0;
DECLARE @AreMovementsColumnsChanged         NUMERIC(1) = 0;
-- -------------------------------------------------------------------------------
DECLARE @ExpiredSuggestionCause		VARCHAR(50)   = '';
DECLARE @ManagementWay				VARCHAR(1)    = 'A';
DECLARE @ovaGBASResult				VARCHAR(1)    = '';
DECLARE @ovaGBASMessage				NVARCHAR(MAX) = '';
DECLARE @TmpTableAlertNotifications	TABLE (ID NUMERIC(18,0));
DECLARE @AlertNotificationsId		NUMERIC(18,0) = 0;
DECLARE @IsMinBufferChanged			NUMERIC(1)    = 0;
DECLARE @ExpiredMinBufferChange		VARCHAR(50)   = '';
DECLARE @HasRulesChanges				NUMERIC(1)    = 0;


BEGIN 
BEGIN TRY 
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements. 
	SET NOCOUNT ON; 
	SET @ovaResult = '0';
	SET @ovaMessage = '';
	SET @ovaMessageTableErrors = '';
	SET @locationsListTempOnlyWorkDay = ''; 
	SET @ovaHasProcessed = '0';
	SET @Trace = 'Setting the cursor cDataTempCursor  '
	SET @DATE_SERVER_NO_TIME = GETDATE(); 
	SELECT @CDUNIT_DEFAULT = CDUNIT, @INVENTORY_ACCURACY_DEFAULT = INVENTORY_ACCURACY FROM TFSCM_CLI_UNITS WHERE (IS_DEFAULT_UNIT = 1 AND IS_ACTIVE = 1); 
	SET @FORMULA_INVENTORY_ACCURACY_DEFAULT = CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,@INVENTORY_ACCURACY_DEFAULT)) AS NUMERIC(6,5)); 

 DECLARE @BUFFER AS NUMERIC(20,5) , @CDUNIT AS VARCHAR(50) , @CONSOLIDATED_REPLENISHMENT AS NUMERIC(20,5) , @CONSUMPTION AS NUMERIC(20,5) , @EXCLUDED_OUTS AS NUMERIC(22,5) , @FAMILY AS VARCHAR(50) , @LOCATION AS VARCHAR(50) , @MINIMUM_BUFFER AS NUMERIC(20,5) , @MINIMUM_REPLENISHMENT AS NUMERIC(20,5) , @NEGATIVE_ADJUSTMENTS AS NUMERIC(20,5) , @ORIGIN_LOCATION AS VARCHAR(50) , @PACKAGING_UNIT AS NUMERIC(20,5) , @PENDING_DEMAND AS NUMERIC(22,5) , @POSITIVE_ADJUSTMENTS AS NUMERIC(20,5) , @REPLENISHMENT_FREQUENCY AS NUMERIC(10,0) , @REPLENISHMENT_PRIORITY AS NUMERIC(10,0) , @REPLENISHMENT_TIME AS NUMERIC(10,0) , @SECURITY_STOCK AS NUMERIC(20,5) , @SKU AS VARCHAR(50) , @TOTAL_INVENTORY_ON_PRODUCTION AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_PURCHASING AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_SITE AS NUMERIC(20,5) , @TOTAL_INVENTORY_ON_TRANSIT AS NUMERIC(20,5) , @TVC AS NUMERIC(20,5) , @UNIT_PRICE AS NUMERIC(20,5) , @UPDATE_MOVEMENTS AS DATETIME ;
 DECLARE  @ID AS NUMERIC(18,0)
, @LOCATION_TEMP AS VARCHAR(50)
, @IS_CREATION AS BIT
, @LOCATION_TYPE AS VARCHAR(2)
, @CDBUFFER_FAMILY_DB AS VARCHAR(50)
, @CDLOCATION_ORIGIN_DB AS VARCHAR(50)
, @INVENTORY_ACCURACY AS NUMERIC(3,0)
, @FORMULA_INVENTORY_ACCURACY AS NUMERIC(6,5)
, @UNIT_THROUGHPUT AS NUMERIC(17,2)
, @INACTIVE AS BIT
, @INACTIVATION_DATE AS DATE
, @INVENTORY_ON_SITE AS NUMERIC(17,5)
, @INVENTORY_ON_TRANSIT AS NUMERIC(17,5)
, @INVENTORY_ON_PURCHASING AS NUMERIC(17,5)
, @INVENTORY_ON_PRODUCTION AS NUMERIC(17,5)
, @INVENTORY_ON_CHAIN AS NUMERIC(17,5)
, @NET_INVENTORY AS NUMERIC(17,5)
, @REPLENISHMENT_ROUNDING_MODE AS VARCHAR(3)
, @ALLOWED_OVERSTOCKING AS NUMERIC(17,5)
, @EFFECTIVE_BUFFER AS NUMERIC(17,5)
, @SITE_PRIORITY AS NUMERIC(17,2)
, @YELLOW_ZONE_START AS NUMERIC(5,2)
, @RED_ZONE_START AS NUMERIC(5,2)
, @SITE_PRIORITY_COLOR AS VARCHAR(50)
, @NET_PRIORITY AS NUMERIC(17,2)
, @NET_PRIORITY_COLOR AS VARCHAR(50)
, @TOTAL_CONSOLIDATED_INPUTS AS NUMERIC(17,5)
, @TOTAL_CONSOLIDATED_OUTPUTS AS NUMERIC(17,5)
, @LAST_TOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5)
, @LAST_TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)
, @LAST_COLOR_CHANGE_DATE AS DATE
, @MANAGED AS BIT
, @CDGROUP AS NUMERIC(2,0)
, @CDCALENDAR AS NUMERIC(4,0)
, @COMMIT_COUNT AS NUMERIC(4) = 0
, @WORST_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @LAST_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @DAYS_SINCE_LAST_OUT AS NUMERIC(5)
, @LAST_TOTAL_OUTS_MAX_SUM AS NUMERIC(15,5)
, @PROTECTION_FACTOR AS NUMERIC(17,2)
, @ADJUSTMENT_TYPE AS VARCHAR(50)
, @RT_ADJUSTMENT_TYPE AS VARCHAR(50)
, @SUGGESTED_BUFFER AS NUMERIC(15,5)
, @APPROVED_BUFFER AS NUMERIC(15,5)
, @ADJUSTMENT_ACTION AS VARCHAR(50)
, @SUGGESTION_DATE AS DATETIME
, @SUGGESTION_REJECTION_CAUSE AS VARCHAR(50)
, @REPLENISHMENT_PROBLEM AS VARCHAR(50)
, @REPLENISHMENT_PROBLEM_OLD AS VARCHAR(50)
, @CD_NONE_CAUSE AS VARCHAR(10)
, @SUGGESTION_EXPIRATION_DATE AS DATETIME
, @SUGGESTION_ALERTS AS VARCHAR(50)
, @NEXT_BUFFER_ANALYSIS AS DATETIME
, @RT_NEXT_BUFFER_ANALYSIS AS DATETIME
, @MIDDLE_PROTECTION_FACTOR AS NUMERIC(17,2)
, @TIME_BETWEEN_BUFFER_RECALCULATIONS AS NUMERIC(10,0)
, @RESTART AS VARCHAR(1)
, @SBC_BUFFER_SIZE AS NUMERIC(17,5)
, @SBC_BUFFER_SIZE_OLD AS NUMERIC(17,5)
-- -------------------------------------------------------------------------------------------
-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated column  
-- -------------------------------------------------------------------------------------------
, @DAILY_AVERAGE_CONSUMPTION AS NUMERIC(17,5)
-- -------------------------------------------------------------------------------------------
-- OHLO 20200820: Since v5.2.0, add Available Inventory column  
-- -------------------------------------------------------------------------------------------
, @AVAILABLE_INVENTORY AS NUMERIC(15,5)
-- -------------------------------------------------------------------------------------------
-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory and Origin Buffer family  columns  
-- -------------------------------------------------------------------------------------------
, @ORIGIN_INVENTORY_ON_SITE AS NUMERIC(15,5)
, @ORIGIN_NET_INVENTORY AS NUMERIC(15,5)
, @ORIGIN_BUFFER_FAMILY AS VARCHAR(50)

, @REPLENISHMENT_TIME_STR                                 AS VARCHAR(50)
, @BUFFER_STR                                             AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_SITE_STR                            AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_TRANSIT_STR                         AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_PURCHASING_STR                      AS VARCHAR(50)
, @TOTAL_INVENTORY_ON_PRODUCTION_STR                      AS VARCHAR(50)
, @UPDATE_MOVEMENTS_STR                                   AS VARCHAR(50)
, @MINIMUM_BUFFER_STR                                     AS VARCHAR(50)
, @SECURITY_STOCK_STR                                     AS VARCHAR(50)
, @MINIMUM_REPLENISHMENT_STR                              AS VARCHAR(50)
, @PACKAGING_UNIT_STR                                     AS VARCHAR(50)
, @UNIT_PRICE_STR                                         AS VARCHAR(50)
, @TVC_STR                                                AS VARCHAR(50)
, @POSITIVE_ADJUSTMENTS_STR                               AS VARCHAR(50)
, @NEGATIVE_ADJUSTMENTS_STR                               AS VARCHAR(50)
, @CONSUMPTION_STR                                        AS VARCHAR(50)
, @CONSOLIDATED_REPLENISHMENT_STR                         AS VARCHAR(50)
, @PENDING_DEMAND_STR                                     AS VARCHAR(50)
, @REPLENISHMENT_PRIORITY_STR                             AS VARCHAR(50)
, @EXCLUDED_OUTS_STR                                      AS VARCHAR(50)
, @REPLENISHMENT_FREQUENCY_STR                            AS VARCHAR(50);
 DECLARE  @SKU_OLD AS VARCHAR(50)
, @LOCATION_OLD AS VARCHAR(50)
, @INACTIVE_OLD AS BIT
, @TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)
, @BUFFER_INITIAL_DATE_OLD AS DATE
, @NEXT_BUFFER_ANALYSIS_OLD AS DATETIME
, @UPDATE_MOVEMENTS_OLD AS DATE
, @CONSOLIDATED_REPLENISHMENT_OLD AS NUMERIC(17,5)
, @SITE_PRIORITY_COLOR_OLD VARCHAR(50)
, @LAST_COLOR_CHANGE_DATE_OLD AS DATE
, @FAMILY_OLD AS VARCHAR(50)
, @ORIGIN_LOCATION_OLD AS VARCHAR(50)
, @CDUNIT_OLD AS VARCHAR(50)
, @REPLENISHMENT_TIME_OLD AS int
, @BUFFER_OLD AS NUMERIC(17,5)
, @MINIMUM_BUFFER_OLD AS NUMERIC(17,5)
, @SECURITY_STOCK_OLD AS NUMERIC(17,5)
, @MINIMUM_REPLENISHMENT_OLD AS NUMERIC (15,5)
, @PACKAGING_UNIT_OLD AS NUMERIC(17,5)
, @UNIT_PRICE_OLD AS NUMERIC(17,2)
, @TVC_OLD AS NUMERIC(17,2)
, @POSITIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)
, @CONSUMPTION_OLD AS NUMERIC(17,5)
, @NEGATIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_TRANSIT_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_PURCHASING_OLD AS NUMERIC(17,5)
, @TOTAL_INVENTORY_ON_PRODUCTION_OLD AS NUMERIC(17,5)
, @REPLENISHMENT_ROUNDING_MODE_OLD AS VARCHAR(3)
, @YELLOW_ZONE_START_OLD AS NUMERIC(5,2)
, @RED_ZONE_START_OLD AS NUMERIC(5,2)
, @INVENTORY_ACCURACY_OLD AS NUMERIC(3,0)
, @FORMULA_INVENTORY_ACCURACY_OLD AS NUMERIC(6,5)
, @PENDING_DEMAND_OLD AS NUMERIC(17,5)
, @EXCLUDED_OUTS_OLD AS NUMERIC(17,5)
, @REPLENISHMENT_PRIORITY_OLD AS INT 
, @REPLENISHMENT_FREQUENCY_OLD AS INT 
;

	BEGIN TRY 

		---------- MESSAGES ---------------------------------------- 
		DECLARE @Language AS VARCHAR(2) = 'es';  
		DECLARE @CodErrorResultMessages AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE AS NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFERS_TOTAL_INVENTORY_ON_PRODUCTION_DIFF AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ERROR AS NVARCHAR(MAX); 
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 AS NVARCHAR(MAX);
		-- -------------------------------------------------------------------------
		-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to location
		-- -------------------------------------------------------------------------
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR AS NVARCHAR(MAX);
		-- -------------------------------------------------------------------------
		-- OHLO 20181212: Since v4.10.0, add Replenishment Frequency column messages  
		-- -------------------------------------------------------------------------
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 AS NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME AS NVARCHAR(MAX);

		SELECT @Language = P.PARAM_VALUE  
		  FROM  TFSCM_COM_PARAMS P 
		 WHERE P.CDPARAM = 'DEFAULT_LANGUAGE' 

		SELECT TOP(1) @CD_NONE_CAUSE = C.CDCAUSE FROM TFSCM_CLI_CAUSES C WHERE C.IS_SYSTEM = 'Y' AND C.CAUSE_TYPE = 'B'
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190607: Since v4.13.0, execute automation rules process           
		-- -----------------------------------------------------------------------------------
		EXEC USP_EXECUTE_AUTOMATION_RULES 3, @ivaTempLoadDate, 
										  @ivaIsDataExchangeForScreen, @ovaResult OUTPUT, @ovaMessage OUTPUT 

		-- If there is an error, then raise it.
		IF (@ovaResult = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessage, 11, 1);
		END

		IF (@ivaIsDataExchangeForScreen = 1)
		BEGIN
			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_manual_buffer_changing');

			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_manual_min_buffer_changing');
		END
		ELSE
		BEGIN
			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE
						  					 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_buffer_changing_through_interface');

			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE
											 FROM TFSCM_CLI_CAUSES C 
						 					WHERE C.DSCAUSE = 'cause_min_buffer_changing_through_interface');
		END

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR OUTPUT;

		----------------------------------------------------------- 

		IF (@ivaIsDataExchangeForScreen = 1) 
		BEGIN 
			/* Message Notifications for Alerts */
			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE)
			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TableTempID_MESSAGESNOTIFICATIONS
			VALUES('');

			SELECT @ID_MESSAGESNOTIFICATIONS = ID FROM @TableTempID_MESSAGESNOTIFICATIONS;

			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)
			VALUES (@ivaCdViewIfDataExchangeForScreen, @ID_MESSAGESNOTIFICATIONS);

			/* Message Notifications for Alerts */
			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE, NOTIFICATION_TYPE)
			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TmpTableAlertNotifications
			VALUES('', 'A');

 			SELECT @AlertNotificationsId = ID FROM @TmpTableAlertNotifications;

			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)
			VALUES (@ivaCdViewIfDataExchangeForScreen, @AlertNotificationsId);
		END 
		----------------------------------------------------------- 

		DECLARE @PK1_ERROR_LOG AS VARCHAR(50); 
		DECLARE @PK2_ERROR_LOG AS VARCHAR(50); 
		DECLARE @FILE_NAME AS VARCHAR(500); 
		DECLARE @FILE_ROW_NUMBER AS INT; 
		DECLARE @UPDATE_MOVEMENTS_ERROR_LOG AS DATE; 

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFER_DUPLICATED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED OUTPUT; 

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFERS_COUNT_DUPLICATED', @Language, '', '', '', @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED OUTPUT;

		DECLARE cErrorLogCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY  FOR 
		 SELECT [BTDUP].[COUNTER1], [BT].[SKU], [BT].[LOCATION], @ivaTempLoadDate UPDATE_MOVEMENTS, [BT].[FILE_NAME], [BT].[FILE_ROW_NUMBER] 
		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  
		   JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
		 		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] 
		 		  WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange 
		 		    AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
		 		  GROUP BY [TMP].[SKU], [TMP].[LOCATION]  
		 		 HAVING COUNT(1) > 1) AS [BTDUP] 
		 	ON ([BT].[IDEXCHANGE]       = @ivaIdExchange 
		 	AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
		 	AND [BTDUP].[SKU]           = [BT].[SKU] 
		 	AND [BTDUP].[LOCATION]      = [BT].[LOCATION] 
			AND [BT].[FILE_ROW_NUMBER]  = [BTDUP].[FILE_ROW_NUMBER]); 

		/*SELECT tempo.COUNTER1, tempo.SKU, tempo.LOCATION, tempo.UPDATE_MOVEMENTS, tempo.FILE_NAME, tempo.FILE_ROW_NUMBER 
		FROM (
	  		SELECT COUNT(1) AS COUNTER1, TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER
	  		  FROM TFSCM_CLI_BUFFER_TEMP TMP 
	  		 WHERE TMP.IDEXCHANGE       = @ivaIdExchange 
     		   AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate 
	  		 GROUP BY TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER
		) tempo 
		WHERE tempo.COUNTER1 >1 */

		OPEN cErrorLogCursor 
		FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER

		WHILE (@@FETCH_STATUS = 0) 
		BEGIN 
			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
								      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
			VALUES (@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED + CONVERT(VARCHAR, @DuplicatedBuffersCountTemp, 105) + '.', NULL, 'E', GETDATE(), @PK1_ERROR_LOG, @PK2_ERROR_LOG, 
				    NULL,  @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS_ERROR_LOG );

			SET @ErrorsBuffersCount = @ErrorsBuffersCount + @DuplicatedBuffersCountTemp 
			SET @ovaResult = '1'; 

			IF (@ivaIsDataExchangeForScreen = 1) 
			BEGIN 
				SET @MessageTableErrors = '<tr><td>'+@PK2_ERROR_LOG+'</td><td>'+@PK1_ERROR_LOG+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED+'</td></tr>'; 
				SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

				INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
				VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
			END 
			FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER
		END 

	   DELETE [BT]  
	     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  
	     JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
	 		     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] 
	 		    WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange 
	 		      AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
	 		    GROUP BY [TMP].[SKU], [TMP].[LOCATION]  
	 		   HAVING COUNT(1) > 1) AS [BTDUP] 
	 	   ON ([BT].[IDEXCHANGE]       = @ivaIdExchange 
	 	   AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate 
	 	   AND [BTDUP].[SKU]           = [BT].[SKU] 
	 	   AND [BTDUP].[LOCATION]      = [BT].[LOCATION]); 

		CLOSE cErrorLogCursor 
		DEALLOCATE cErrorLogCursor 
	END TRY 
	BEGIN CATCH 

		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT 

		SET @ErMessage = ERROR_MESSAGE() 
		SET @ErSeverity = ERROR_SEVERITY() 
		SET @ErState = ERROR_STATE() 

		RAISERROR (@ErMessage, @ErSeverity, @ErState) 
	END CATCH 

	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use in Inputs and 
	--                Outs Update. 
	-- --------------------------------------------------------------------------------------- 
	IF OBJECT_ID('BUFFER_DATES_TEMP') IS NOT NULL  
		DROP TABLE BUFFER_DATES_TEMP; 

	SELECT [SKU], [T].[LOCATION],  [T].[UPDATE_MOVEMENTS], [T].[MODIFY_DATE] [UPDATE_MOVEMENTS_OLD] 
	  INTO BUFFER_DATES_TEMP 
	  FROM [dbo].[TFSCM_CLI_BUFFER] [T] 
	 WHERE 1 = 2; 
	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.  
	-- --------------------------------------------------------------------------------------- 
	IF OBJECT_ID('tempdb..#OriginBuffersTemp') IS NOT NULL  
		DROP TABLE #OriginBuffersTemp; 

	SELECT SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY 
	  INTO #OriginBuffersTemp 
	  FROM [dbo].[TFSCM_CLI_BUFFER] 
	 WHERE 1 = 2; 
	-- ---------------------------------------------------------------------------------------  

	DECLARE cDataTempCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY	FOR 
	 SELECT (SELECT COUNT(1)
			   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] [O]
			  WHERE [O].[SKU]             = [TMP].[SKU]
				AND [O].[ORIGIN_LOCATION] = [TMP].[LOCATION]) IS_ORIGIN, 
			TMP.BUFFER, TMP.CDUNIT, TMP.CONSOLIDATED_REPLENISHMENT, TMP.CONSUMPTION, TMP.EXCLUDED_OUTS, TMP.FAMILY, TMP.LOCATION, TMP.MINIMUM_BUFFER, TMP.MINIMUM_REPLENISHMENT, TMP.NEGATIVE_ADJUSTMENTS, TMP.ORIGIN_LOCATION, TMP.PACKAGING_UNIT, TMP.PENDING_DEMAND, TMP.POSITIVE_ADJUSTMENTS, TMP.REPLENISHMENT_FREQUENCY, TMP.REPLENISHMENT_PRIORITY, TMP.REPLENISHMENT_TIME, TMP.SECURITY_STOCK, TMP.SKU, TMP.TOTAL_INVENTORY_ON_PRODUCTION, TMP.TOTAL_INVENTORY_ON_PURCHASING, TMP.TOTAL_INVENTORY_ON_SITE, TMP.TOTAL_INVENTORY_ON_TRANSIT, TMP.TVC, TMP.UNIT_PRICE, TMP.UPDATE_MOVEMENTS, TMP.ID, TMP.LOCATION, TMP.IS_CREATION, CL.LOCATION_TYPE, CBF.CDBUFFER_FAMILY, CLO.CDLOCATION, CU.INVENTORY_ACCURACY, CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,CU.INVENTORY_ACCURACY)) AS NUMERIC(6,5)) AS FORMULA_INVENTORY_ACCURACY, CBF.REPLENISHMENT_ROUNDING_MODE, CBF.YELLOW_ZONE_START, CBF.RED_ZONE_START, CBF.MIDDLE_PROTECTION_FACTOR, CBF.TIME_BETWEEN_BUFFER_RECALCULATIONS, CC.CDCALENDAR, BOLD.SKU, BOLD.LOCATION, BOLD.INACTIVE, BOLD.TOTAL_INVENTORY_ON_SITE, BOLD.LAST_TOTAL_INVENTORY_ON_SITE, BOLD.UPDATE_MOVEMENTS, BOLD.CONSOLIDATED_REPLENISHMENT, BOLD.SITE_PRIORITY_COLOR, BOLD.FAMILY, BOLD.ORIGIN_LOCATION, BOLD.CDUNIT, BOLD.REPLENISHMENT_TIME, BOLD.BUFFER, BOLD.MINIMUM_BUFFER, BOLD.SECURITY_STOCK, BOLD.MINIMUM_REPLENISHMENT, BOLD.PACKAGING_UNIT, BOLD.UNIT_PRICE, BOLD.TVC, BOLD.POSITIVE_ADJUSTMENTS, BOLD.CONSUMPTION, BOLD.NEGATIVE_ADJUSTMENTS, BOLD.TOTAL_INVENTORY_ON_TRANSIT, BOLD.TOTAL_INVENTORY_ON_PURCHASING, BOLD.TOTAL_INVENTORY_ON_PRODUCTION, CBFOLD.REPLENISHMENT_ROUNDING_MODE, CBFOLD.YELLOW_ZONE_START, CBFOLD.RED_ZONE_START, CUOLD.INVENTORY_ACCURACY, CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,CUOLD.INVENTORY_ACCURACY)) AS NUMERIC(6,5)), BOLD.BUFFER_INITIAL_DATE, BOLD.NEXT_BUFFER_ANALYSIS, BOLD.REPLENISHMENT_PROBLEM, BOLD.PENDING_DEMAND, BOLD.EXCLUDED_OUTS, BOLD.REPLENISHMENT_PRIORITY, BOLD.REPLENISHMENT_FREQUENCY, BOLD.SBC_BUFFER_SIZE, OBUFFER.INVENTORY_ON_SITE, OBUFFER.NET_INVENTORY, OBUFFER.FAMILY, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER, REPLENISHMENT_TIME_STR, BUFFER_STR, TOTAL_INVENTORY_ON_SITE_STR, TOTAL_INVENTORY_ON_TRANSIT_STR, TOTAL_INVENTORY_ON_PURCHASING_STR, TOTAL_INVENTORY_ON_PRODUCTION_STR, UPDATE_MOVEMENTS_STR, MINIMUM_BUFFER_STR, SECURITY_STOCK_STR, MINIMUM_REPLENISHMENT_STR, PACKAGING_UNIT_STR, UNIT_PRICE_STR, TVC_STR, POSITIVE_ADJUSTMENTS_STR, NEGATIVE_ADJUSTMENTS_STR, CONSUMPTION_STR, CONSOLIDATED_REPLENISHMENT_STR, PENDING_DEMAND_STR, REPLENISHMENT_PRIORITY_STR, EXCLUDED_OUTS_STR, REPLENISHMENT_FREQUENCY_STR
	   FROM TFSCM_CLI_BUFFER_TEMP TMP 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER BOLD ON (TMP.SKU = BOLD.SKU AND TMP.LOCATION = BOLD.LOCATION) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER        OBUFFER ON (TMP.SKU = OBUFFER.SKU AND TMP.ORIGIN_LOCATION = OBUFFER.LOCATION AND OBUFFER.INACTIVE = 0) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBF     ON (CBF.CDBUFFER_FAMILY = TMP.FAMILY AND CBF.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBFOLD  ON (CBFOLD.CDBUFFER_FAMILY = BOLD.FAMILY) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CL      ON (CL.CDLOCATION = TMP.LOCATION AND CL.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CLO     ON (CLO.CDLOCATION = TMP.ORIGIN_LOCATION AND CLO.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_UNITS CU ON (CU.CDUNIT = TMP.CDUNIT AND CU.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_UNITS CUOLD ON (CUOLD.CDUNIT = BOLD.CDUNIT) 
	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CC ON (CC.CDCALENDAR = CL.CDCALENDAR AND CC.IS_ACTIVE = 1) 
	  WHERE TMP.IDEXCHANGE = @ivaIdExchange 
		AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate 
		AND TMP.ID IN 
	        ( 
	          SELECT TEMPO.ID 
	          FROM ( 
	        	  SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID 
	        	    FROM TFSCM_CLI_BUFFER_TEMP TMPAUX 
	        	   WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange 
	        	     AND TMPAUX.UPDATE_MOVEMENTS = @ivaTempLoadDate 
	        	   GROUP BY TMPAUX.SKU, TMPAUX.LOCATION, TMPAUX.UPDATE_MOVEMENTS 
	               ) TEMPO 
	          WHERE TEMPO.COUNTER1 =1 
	        ) 
	  ORDER BY TMP.UPDATE_MOVEMENTS,TMP.LOCATION,TMP.SKU 

	OPEN cDataTempCursor 
	FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
	SET @Trace = 'go inside the cursor cDataTempCursor  '

	WHILE (@@FETCH_STATUS = 0) 
	BEGIN 
		BEGIN TRY 

			IF (@SKU_OLD IS NOT NULL) 
			BEGIN 
				SET @REPLENISHMENT_PROBLEM = @REPLENISHMENT_PROBLEM_OLD
				IF (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 1) 
				BEGIN   
					SET  @INACTIVE = 0; 
					SET  @INACTIVATION_DATE = NULL; 

					-- OHLO 20180405: Update Movements date must be reseted with server (current) date 
					IF (@ivaIsDataExchangeForScreen = 1) 
					BEGIN 
						SET @UPDATE_MOVEMENTS = GETDATE(); 
					END  
				END  
				ELSE 
				BEGIN   
					SET  @INACTIVE = 0; 
				END  
			END  
			ELSE  
			BEGIN  
				SET @Dummy = ''; 
			END  


			SET @IsConsolidatedReplenishmentChanged = 0;
			SET @IsPositiveAdjustmentsChanged = 0;
			SET @IsConsumptionChanged = 0;
			SET @IsNegativeAdjustmentsChanged = 0;
			SET @IsExcludedOutsChanged = 0;
			SET @IsInventoryOnSiteChanged = 0;
			SET @IsInventoryOnTransitChanged = 0;
			SET @IsInventoryOnProductionChanged = 0;
			SET @IsInventoryOnPurchasingChanged = 0;
			SET @IsPendingDemandChanged = 0;
			SET @IsSecurityStockChanged = 0;
			SET @AreMovementsColumnsChanged = 0;

			/* If any column is not upgradable (This column is marked as not upgradable on the interface), 
			   then set its value with the one it currently has (instead of the one sent in the file, 
			   unless this is a change from Focuss or a rule has changed its value) */

				-- --------------------------------------------------------------------------- 
				-- OHLO 20190620: Since v4.13.0, if there is any rule that changes this buffer,
				--                then avoid setting old values 
				-- --------------------------------------------------------------------------- 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for FAMILY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.FAMILY = @FAMILY_OLD)  
													  OR (BUFFER.FAMILY IS NULL AND @FAMILY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @FAMILY_OLD must be NULL  
					IF (@FAMILY_OLD IS NULL) 
					BEGIN 
						-- If the new @FAMILY has a value, then mark it as "changed" 
						IF (@FAMILY IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						IF (@FAMILY IS NOT NULL AND @FAMILY <> @FAMILY_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					-- @CDBUFFER_FAMILY_DB = @FAMILY_OLD -- if IS_ACTIVE is validated 
					SET @FAMILY = @FAMILY_OLD; 
					SET @REPLENISHMENT_ROUNDING_MODE = @REPLENISHMENT_ROUNDING_MODE_OLD; 
					SET @YELLOW_ZONE_START = @YELLOW_ZONE_START_OLD; 
					SET @RED_ZONE_START = @RED_ZONE_START_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for ORIGIN_LOCATION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.ORIGIN_LOCATION = @ORIGIN_LOCATION_OLD)  
													  OR (BUFFER.ORIGIN_LOCATION IS NULL AND @ORIGIN_LOCATION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @ORIGIN_LOCATION_OLD must be NULL  
					IF (@ORIGIN_LOCATION_OLD IS NULL) 
					BEGIN 
						-- If the new @ORIGIN_LOCATION has a value, then mark it as "changed" 
						IF (@ORIGIN_LOCATION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @ORIGIN_LOCATION has a value and it is different than the old @ORIGIN_LOCATION_OLD, then mark it as "changed" 
						IF (@ORIGIN_LOCATION IS NOT NULL AND @ORIGIN_LOCATION <> @ORIGIN_LOCATION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @ORIGIN_LOCATION      = @ORIGIN_LOCATION_OLD; 
					SET @CDLOCATION_ORIGIN_DB = @ORIGIN_LOCATION_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CDUNIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CDUNIT = @CDUNIT_OLD)  
													  OR (BUFFER.CDUNIT IS NULL AND @CDUNIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CDUNIT_OLD must be NULL  
					IF (@CDUNIT_OLD IS NULL) 
					BEGIN 
						-- If new @CDUNIT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @CDUNIT has not a value, then set it with its default value 
						IF (@CDUNIT IS NULL) 
						BEGIN 
							SET @CDUNIT                     = @CDUNIT_DEFAULT; -- default 
							SET @INVENTORY_ACCURACY         = @INVENTORY_ACCURACY_DEFAULT;
							SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_DEFAULT; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @CDUNIT has a value and it is different than the old @CDUNIT_OLD, then mark it as "changed" 
						IF (@CDUNIT IS NOT NULL AND @CDUNIT <> @CDUNIT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CDUNIT = @CDUNIT_OLD; 
					SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD; 
					SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_TIME column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD)  
													  OR (BUFFER.REPLENISHMENT_TIME IS NULL AND @REPLENISHMENT_TIME_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_TIME_OLD must be NULL  
					IF (@REPLENISHMENT_TIME_OLD IS NULL) 
					BEGIN 
						-- If the new @REPLENISHMENT_TIME has a value, then mark it as "changed" 
						IF (@REPLENISHMENT_TIME IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @REPLENISHMENT_TIME has a value and it is different than the old @REPLENISHMENT_TIME_OLD, then mark it as "changed" 
						IF (@REPLENISHMENT_TIME IS NOT NULL AND @REPLENISHMENT_TIME <> @REPLENISHMENT_TIME_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for BUFFER column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.BUFFER = @BUFFER_OLD)  
													  OR (BUFFER.BUFFER IS NULL AND @BUFFER_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @BUFFER_OLD must be NULL  
					IF (@BUFFER_OLD IS NULL) 
					BEGIN 
						-- If the new @BUFFER has a value, then mark it as "changed" 
						IF (@BUFFER IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						SET @BUFFER = @BUFFER_OLD; 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @BUFFER = @BUFFER_OLD; 
				END 
				ELSE IF (@HasRulesChanges = 1) 
				BEGIN 
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    
					-- ----------------------------------------------------------------------- 
					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  
								WHERE BUFFER.SKU      = @SKU 
								  AND BUFFER.LOCATION = @LOCATION 
								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate 
								  AND BUFFER.BUFFER <> @BUFFER) 
					BEGIN 
						SET @BUFFER = (SELECT BUFFER.BUFFER 
									 FROM TempUpdRulesTbl BUFFER  
									WHERE BUFFER.SKU      = @SKU 
									  AND BUFFER.LOCATION = @LOCATION 
									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 
					END 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for MINIMUM_BUFFER column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD)  
													  OR (BUFFER.MINIMUM_BUFFER IS NULL AND @MINIMUM_BUFFER_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @MINIMUM_BUFFER_OLD must be NULL  
					IF (@MINIMUM_BUFFER_OLD IS NULL) 
					BEGIN 
						-- If new @MINIMUM_BUFFER has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @MINIMUM_BUFFER has not a value, then set it with its default value 
						IF (@MINIMUM_BUFFER IS NULL) 
						BEGIN 
							SET @MINIMUM_BUFFER = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @MINIMUM_BUFFER has a value and it is different than the old @MINIMUM_BUFFER_OLD, then mark it as "changed" 
						IF (@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER <> @MINIMUM_BUFFER_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for SECURITY_STOCK column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.SECURITY_STOCK = @SECURITY_STOCK_OLD)  
													  OR (BUFFER.SECURITY_STOCK IS NULL AND @SECURITY_STOCK_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @SECURITY_STOCK_OLD must be NULL  
					IF (@SECURITY_STOCK_OLD IS NULL) 
					BEGIN 
						-- If new @SECURITY_STOCK has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @SECURITY_STOCK has not a value, then set it with its default value 
						IF (@SECURITY_STOCK IS NULL) 
						BEGIN 
							SET @SECURITY_STOCK = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @SECURITY_STOCK has a value and it is different than the old @SECURITY_STOCK_OLD, then mark it as "changed" 
						IF (@SECURITY_STOCK IS NOT NULL AND @SECURITY_STOCK <> @SECURITY_STOCK_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @SECURITY_STOCK = @SECURITY_STOCK_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsSecurityStockChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for MINIMUM_REPLENISHMENT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD)  
													  OR (BUFFER.MINIMUM_REPLENISHMENT IS NULL AND @MINIMUM_REPLENISHMENT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @MINIMUM_REPLENISHMENT_OLD must be NULL  
					IF (@MINIMUM_REPLENISHMENT_OLD IS NULL) 
					BEGIN 
						-- If new @MINIMUM_REPLENISHMENT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @MINIMUM_REPLENISHMENT has not a value, then set it with its default value 
						IF (@MINIMUM_REPLENISHMENT IS NULL OR @MINIMUM_REPLENISHMENT = -999999) 
						BEGIN 
							SET @MINIMUM_REPLENISHMENT = @FORMULA_INVENTORY_ACCURACY; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @MINIMUM_REPLENISHMENT has a value and it is different than the old @MINIMUM_REPLENISHMENT_OLD, then mark it as "changed" 
						IF (@MINIMUM_REPLENISHMENT IS NOT NULL AND @MINIMUM_REPLENISHMENT <> @MINIMUM_REPLENISHMENT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for PACKAGING_UNIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PACKAGING_UNIT = @PACKAGING_UNIT_OLD)  
													  OR (BUFFER.PACKAGING_UNIT IS NULL AND @PACKAGING_UNIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @PACKAGING_UNIT_OLD must be NULL  
					IF (@PACKAGING_UNIT_OLD IS NULL) 
					BEGIN 
						-- If new @PACKAGING_UNIT has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @PACKAGING_UNIT has not a value, then set it with its default value 
						IF (@PACKAGING_UNIT IS NULL OR @PACKAGING_UNIT = -999999) 
						BEGIN 
							SET @PACKAGING_UNIT = @FORMULA_INVENTORY_ACCURACY; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @PACKAGING_UNIT has a value and it is different than the old @PACKAGING_UNIT_OLD, then mark it as "changed" 
						IF (@PACKAGING_UNIT IS NOT NULL AND @PACKAGING_UNIT <> @PACKAGING_UNIT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @PACKAGING_UNIT = @PACKAGING_UNIT_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for UNIT_PRICE column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.UNIT_PRICE = @UNIT_PRICE_OLD)  
												  OR (BUFFER.UNIT_PRICE IS NULL AND @UNIT_PRICE_OLD IS NULL))  
												THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @UNIT_PRICE_OLD must be NULL  
					IF (@UNIT_PRICE_OLD IS NULL) 
					BEGIN 
						-- If new @UNIT_PRICE has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @UNIT_PRICE has not a value, then set it with its default value 
						IF (@UNIT_PRICE IS NULL) 
						BEGIN 
							SET @UNIT_PRICE = NULL; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @UNIT_PRICE has a value and it is different than the old @UNIT_PRICE_OLD, then mark it as "changed" 
						IF (@UNIT_PRICE IS NOT NULL AND @UNIT_PRICE <> @UNIT_PRICE_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @UNIT_PRICE = @UNIT_PRICE_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TVC column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TVC = @TVC_OLD)  
												  OR (BUFFER.TVC IS NULL AND @TVC_OLD IS NULL))  
												THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TVC_OLD must be NULL  
					IF (@TVC_OLD IS NULL) 
					BEGIN 
						-- If new @TVC has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @TVC has not a value, then set it with its default value 
						IF (@TVC IS NULL) 
						BEGIN 
							SET @TVC = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TVC has a value and it is different than the old @TVC_OLD, then mark it as "changed" 
						IF (@TVC IS NOT NULL AND @TVC <> @TVC_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TVC = @TVC_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CONSOLIDATED_REPLENISHMENT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD)  
													  OR (BUFFER.CONSOLIDATED_REPLENISHMENT IS NULL AND @CONSOLIDATED_REPLENISHMENT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CONSOLIDATED_REPLENISHMENT_OLD must be NULL  
					IF (@CONSOLIDATED_REPLENISHMENT_OLD IS NULL) 
					BEGIN 
						-- If the new @CONSOLIDATED_REPLENISHMENT has a value, then mark it as "changed" 
						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @CONSOLIDATED_REPLENISHMENT has a value and it is different than the old @CONSOLIDATED_REPLENISHMENT_OLD, then mark it as "changed" 
						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL AND @CONSOLIDATED_REPLENISHMENT <> @CONSOLIDATED_REPLENISHMENT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsConsolidatedReplenishmentChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for POSITIVE_ADJUSTMENTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD)  
													  OR (BUFFER.POSITIVE_ADJUSTMENTS IS NULL AND @POSITIVE_ADJUSTMENTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @POSITIVE_ADJUSTMENTS_OLD must be NULL  
					IF (@POSITIVE_ADJUSTMENTS_OLD IS NULL) 
					BEGIN 
						-- If new @POSITIVE_ADJUSTMENTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @POSITIVE_ADJUSTMENTS has not a value, then set it with its default value 
						IF (@POSITIVE_ADJUSTMENTS IS NULL) 
						BEGIN 
							SET @POSITIVE_ADJUSTMENTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @POSITIVE_ADJUSTMENTS has a value and it is different than the old @POSITIVE_ADJUSTMENTS_OLD, then mark it as "changed" 
						IF (@POSITIVE_ADJUSTMENTS IS NOT NULL AND @POSITIVE_ADJUSTMENTS <> @POSITIVE_ADJUSTMENTS_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsPositiveAdjustmentsChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for CONSUMPTION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSUMPTION = @CONSUMPTION_OLD)  
													  OR (BUFFER.CONSUMPTION IS NULL AND @CONSUMPTION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @CONSUMPTION_OLD must be NULL  
					IF (@CONSUMPTION_OLD IS NULL) 
					BEGIN 
						-- If the new @CONSUMPTION has a value, then mark it as "changed" 
						IF (@CONSUMPTION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @CONSUMPTION has a value and it is different than the old @CONSUMPTION_OLD, then mark it as "changed" 
						IF (@CONSUMPTION IS NOT NULL AND @CONSUMPTION <> @CONSUMPTION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @CONSUMPTION = @CONSUMPTION_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsConsumptionChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for NEGATIVE_ADJUSTMENTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD)  
													  OR (BUFFER.NEGATIVE_ADJUSTMENTS IS NULL AND @NEGATIVE_ADJUSTMENTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @NEGATIVE_ADJUSTMENTS_OLD must be NULL  
					IF (@NEGATIVE_ADJUSTMENTS_OLD IS NULL) 
					BEGIN 
						-- If new @NEGATIVE_ADJUSTMENTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @NEGATIVE_ADJUSTMENTS has not a value, then set it with its default value 
						IF (@NEGATIVE_ADJUSTMENTS IS NULL) 
						BEGIN 
							SET @NEGATIVE_ADJUSTMENTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @NEGATIVE_ADJUSTMENTS has a value and it is different than the old @NEGATIVE_ADJUSTMENTS_OLD, then mark it as "changed" 
						IF (@NEGATIVE_ADJUSTMENTS IS NOT NULL AND @NEGATIVE_ADJUSTMENTS <> @NEGATIVE_ADJUSTMENTS_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsNegativeAdjustmentsChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_SITE column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_SITE IS NULL AND @TOTAL_INVENTORY_ON_SITE_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_SITE_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_SITE_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_SITE has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_SITE has a value and it is different than the old @TOTAL_INVENTORY_ON_SITE_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL AND @TOTAL_INVENTORY_ON_SITE <> @TOTAL_INVENTORY_ON_SITE_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnSiteChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_TRANSIT column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_TRANSIT IS NULL AND @TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_TRANSIT_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value and it is different than the old @TOTAL_INVENTORY_ON_TRANSIT_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL AND @TOTAL_INVENTORY_ON_TRANSIT <> @TOTAL_INVENTORY_ON_TRANSIT_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnTransitChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_PURCHASING column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_PURCHASING IS NULL AND @TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_PURCHASING_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value and it is different than the old @TOTAL_INVENTORY_ON_PURCHASING_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL AND @TOTAL_INVENTORY_ON_PURCHASING <> @TOTAL_INVENTORY_ON_PURCHASING_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnPurchasingChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for TOTAL_INVENTORY_ON_PRODUCTION column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD)  
													  OR (BUFFER.TOTAL_INVENTORY_ON_PRODUCTION IS NULL AND @TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @TOTAL_INVENTORY_ON_PRODUCTION_OLD must be NULL  
					IF (@TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL) 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value and it is different than the old @TOTAL_INVENTORY_ON_PRODUCTION_OLD, then mark it as "changed" 
						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL AND @TOTAL_INVENTORY_ON_PRODUCTION <> @TOTAL_INVENTORY_ON_PRODUCTION_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsInventoryOnProductionChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for PENDING_DEMAND column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PENDING_DEMAND = @PENDING_DEMAND_OLD)  
													  OR (BUFFER.PENDING_DEMAND IS NULL AND @PENDING_DEMAND_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER 
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @PENDING_DEMAND_OLD must be NULL  
					IF (@PENDING_DEMAND_OLD IS NULL) 
					BEGIN 
						-- If new @PENDING_DEMAND has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @PENDING_DEMAND has not a value, then set it with its default value 
						IF (@PENDING_DEMAND IS NULL) 
						BEGIN 
							SET @PENDING_DEMAND = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @PENDING_DEMAND has a value and it is different than the old @PENDING_DEMAND_OLD, then mark it as "changed" 
						IF (@PENDING_DEMAND IS NOT NULL AND @PENDING_DEMAND <> @PENDING_DEMAND_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @PENDING_DEMAND = @PENDING_DEMAND_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsPendingDemandChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for EXCLUDED_OUTS column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD)  
													  OR (BUFFER.EXCLUDED_OUTS IS NULL AND @EXCLUDED_OUTS_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @EXCLUDED_OUTS_OLD must be NULL  
					IF (@EXCLUDED_OUTS_OLD IS NULL) 
					BEGIN 
						-- If new @EXCLUDED_OUTS has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @EXCLUDED_OUTS has not a value, then set it with its default value 
						IF (@EXCLUDED_OUTS IS NULL) 
						BEGIN 
							SET @EXCLUDED_OUTS = 0; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @EXCLUDED_OUTS has a value and it is different than the old @EXCLUDED_OUTS_OLD, then mark it as "changed" 
						IF (@EXCLUDED_OUTS IS NOT NULL AND @EXCLUDED_OUTS <> @EXCLUDED_OUTS_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD; 
				END 
				ELSE 
				BEGIN 
					SET @IsExcludedOutsChanged = 1; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_PRIORITY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD)  
													  OR (BUFFER.REPLENISHMENT_PRIORITY IS NULL AND @REPLENISHMENT_PRIORITY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_PRIORITY_OLD must be NULL  
					IF (@REPLENISHMENT_PRIORITY_OLD IS NULL) 
					BEGIN 
						-- If new @REPLENISHMENT_PRIORITY has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @REPLENISHMENT_PRIORITY has not a value, then set it with its default value 
						IF (@REPLENISHMENT_PRIORITY IS NULL) 
						BEGIN 
							SET @REPLENISHMENT_PRIORITY = 1; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @REPLENISHMENT_PRIORITY has a value and it is different than the old @REPLENISHMENT_PRIORITY_OLD, then mark it as "changed" 
						IF (@REPLENISHMENT_PRIORITY IS NOT NULL AND @REPLENISHMENT_PRIORITY <> @REPLENISHMENT_PRIORITY_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- Setting the proper value for REPLENISHMENT_FREQUENCY column 
				-- --------------------------------------------------------------------------- 
				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD)  
													  OR (BUFFER.REPLENISHMENT_FREQUENCY IS NULL AND @REPLENISHMENT_FREQUENCY_OLD IS NULL))  
													THEN 0 ELSE 1 END 
										  FROM TempUpdRulesTbl BUFFER  
										 WHERE BUFFER.SKU      = @SKU 
										   AND BUFFER.LOCATION = @LOCATION 
										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); 

				IF (@HasRulesChanges IS NULL) 
				BEGIN 
					SET @HasRulesChanges = 0; 

					-- If it is a new record @REPLENISHMENT_FREQUENCY_OLD must be NULL  
					IF (@REPLENISHMENT_FREQUENCY_OLD IS NULL) 
					BEGIN 
						-- If new @REPLENISHMENT_FREQUENCY has a value, then mark it as "changed" 
						SET @HasRulesChanges = 1; 

						-- If new @REPLENISHMENT_FREQUENCY has not a value, then set it with its default value 
						IF (@REPLENISHMENT_FREQUENCY IS NULL) 
						BEGIN 
							SET @REPLENISHMENT_FREQUENCY = 1; -- default 
						END 
					END 
					ELSE 
					BEGIN 
						-- If the new @REPLENISHMENT_FREQUENCY has a value and it is different than the old @REPLENISHMENT_FREQUENCY_OLD, then mark it as "changed" 
						IF (@REPLENISHMENT_FREQUENCY IS NOT NULL AND @REPLENISHMENT_FREQUENCY <> @REPLENISHMENT_FREQUENCY_OLD) 
						BEGIN 
							SET @HasRulesChanges = 1; 
						END 
					END 
				END 

				IF (@HasRulesChanges = 0) 
				BEGIN 
					SET @REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD; 
				END 

			SET @UNIT_THROUGHPUT = @UNIT_PRICE - @TVC; 

			-- -------------------------------------------------------------------------------
			-- OHLO 20170405: If buffer changes, then log the alert and also expire pending
			--	  		      suggestions 
			-- -------------------------------------------------------------------------------
			SET @IsBufferChanged = 0; 
			IF (@BUFFER IS NOT NULL AND @BUFFER_OLD IS NOT NULL AND @BUFFER != @BUFFER_OLD)
			BEGIN
				SET @IsBufferChanged = 1; 
			END

			/* OHLO 20170523: If minimum buffer changes, then log the alert and also expire
				  				   pending suggestions in which suggested buffer is less than
				  				   minimum buffer */
			SET @IsMinBufferChanged = 0; 

			SET @IsMinBufferChanged = 
				(SELECT CASE WHEN ((@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER_OLD IS NOT NULL
							  AND @MINIMUM_BUFFER != @MINIMUM_BUFFER_OLD) AND (COUNT(1) > 0)) THEN 
						   1 
					   ELSE 
						   0 
					   END 
				   FROM TFSCM_CLI_BUFFER B 
				  WHERE B.ADJUSTMENT_ACTION = @AdjustmentActionAnalyze
				    AND B.SKU               = @SKU
				    AND B.LOCATION          = @LOCATION
				    AND B.SUGGESTED_BUFFER  < @MINIMUM_BUFFER);

			--IF (@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER_OLD IS NOT NULL 
			--AND @MINIMUM_BUFFER != @MINIMUM_BUFFER_OLD)
			--BEGIN
			--	SET @IsMinBufferChanged = 1; 
			--END

			-- -------------------------------------------------------------------------------
			-- OHLO 20201026: Since v5.2.1, move the code for changing UPDATE_MOVEMENTS column. 
			-- ------------------------------------------------------------------------------- 
			-- OHLO 20191212: Since v4.14.0, UPDATE_MOVEMENTS date column is modified, only 
			--				  when at least one of movements columns has changes. If it is a 
			--  			  DataExchange process, assummed it as changed. 
			-- ------------------------------------------------------------------------------- 
			SET @AreMovementsColumnsChanged = 1; 
			SET @UPDATE_MOVEMENTS = @DATE_SERVER_NO_TIME; 

			IF ((@SKU_OLD IS NOT NULL) 
			AND (@IsConsolidatedReplenishmentChanged = 0) 
			AND (@IsPositiveAdjustmentsChanged       = 0) 
			AND (@IsConsumptionChanged               = 0) 
			AND (@IsNegativeAdjustmentsChanged       = 0) 
			AND (@IsExcludedOutsChanged              = 0) 
			AND (@IsInventoryOnSiteChanged           = 0) 
			AND (@IsInventoryOnTransitChanged        = 0) 
			AND (@IsInventoryOnProductionChanged     = 0) 
			AND (@IsInventoryOnPurchasingChanged     = 0) 
			AND (@IsPendingDemandChanged             = 0))
			BEGIN 
				SET @AreMovementsColumnsChanged = 0; 
			END 

			IF (@AreMovementsColumnsChanged = 0) 
			BEGIN 
				SET @UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS_OLD; 
			END 


			-- ----------------------------------------------------------------------------------- 
			-- OHLO 20201019: Since v5.2.1, fix the Previous Inventory on Site calculation. 
			-- ----------------------------------------------------------------------------------- 
			IF (@SKU_OLD IS NOT NULL) 
			BEGIN 
				SET @LAST_TOTAL_INVENTORY_ON_SITE = (CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
													 	@TOTAL_INVENTORY_ON_SITE_OLD 
													 ELSE 
													 	@LAST_TOTAL_INVENTORY_ON_SITE_OLD 
													 END); 
			END 

			SET @PassesValidations = 1 

			IF (@PassesValidations!=0 AND @LOCATION IS NULL) 
			BEGIN 
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND OUTPUT; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION_TEMP,
					    CONVERT(VARCHAR, @LOCATION_TEMP, 105), @FILE_ROW_NUMBER, 'LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; 
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -------------------------------------------------------------------------------
			-- OHLO 20201119: Since v5.3.0, avoid this validation if it's a reactivation. 
			-- -------------------------------------------------------------------------------
			IF ((@PassesValidations != 0 AND @ivaIsDataExchangeForScreen = 1 AND @IS_CREATION = 1) 
			AND (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    NULL, @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

 			--IF (@ivaIsDataExchangeForScreen = 1) 
				--BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				--END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@SKU IS NULL OR LTRIM(RTRIM(replace(@SKU, ' ', ''))) = ''))
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@LOCATION_TYPE IS NULL OR (@LOCATION_TYPE != 'WH' AND @LOCATION_TYPE != 'CL' AND @LOCATION_TYPE != 'PS'))) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @LOCATION, 105), @FILE_ROW_NUMBER, 'LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS); 

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDBUFFER_FAMILY_DB IS NULL) 
			BEGIN 
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'DATA_EXCHANGE_BUFFERS_FAMILY_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND OUTPUT; 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @FAMILY, 105), @FILE_ROW_NUMBER, 'FAMILY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; 
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDLOCATION_ORIGIN_DB IS NULL) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, 'ORIGIN_LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------
			-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to   
			--				  location 
			-- ------------------------------------------------------------------------
			IF (@PassesValidations!=0 AND @ORIGIN_LOCATION = @LOCATION) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, 'ORIGIN_LOCATION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDCALENDAR IS NULL) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CDCALENDAR, 105), @FILE_ROW_NUMBER, 'CDCALENDAR', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CDUNIT IS NULL OR @INVENTORY_ACCURACY IS NULL))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, 'CDUNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @CDUNIT IS NOT NULL AND @CDUNIT_OLD IS NOT NULL)  
			BEGIN  		
				IF (@INVENTORY_ACCURACY_OLD > @INVENTORY_ACCURACY) 
				BEGIN
					SET @PassesValidations = 0;
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
						'DATA_EXCHANGE_BUFFERS_UNIT_MINOR_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										 	  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
						    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, 'CDUNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

					SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1
					SET @ovaResult = '1';

					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN 
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR+'</td></tr>';
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
					END 

					DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

					FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
					CONTINUE; 
				END
			END	

			IF (@PassesValidations!=0 AND (@REPLENISHMENT_TIME IS NULL OR @REPLENISHMENT_TIME <= 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_TIME_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_TIME', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER) < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_BUFFER_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @BUFFER_STR, 105), @FILE_ROW_NUMBER, 'BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@MINIMUM_BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_BUFFER_STR, 105),  @FILE_ROW_NUMBER, 'MINIMUM_BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 
			IF (@PassesValidations!=0 AND (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)))   
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
 			VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER, NULL, 'E', GETDATE(), @SKU, @LOCATION, 
					     CONVERT(VARCHAR, @MINIMUM_BUFFER_STR, 105), @FILE_ROW_NUMBER,  'MINIMUM_BUFFER', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@SECURITY_STOCK IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @SECURITY_STOCK_STR, 105),  @FILE_ROW_NUMBER, 'SECURITY_STOCK', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@PACKAGING_UNIT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT) <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @PACKAGING_UNIT_STR, 105), @FILE_ROW_NUMBER, 'PACKAGING_UNIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@MINIMUM_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT) <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
                     CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 


			IF (@PassesValidations!=0) 
			BEGIN 

				SET @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) % (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT)); 

			END 

			IF (@PassesValidations!=0 AND @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT != 0)  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT', @Language, '', '', '', @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @REPLENISHMENT_ROUNDING_MODE = 'MS' AND ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)) + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK))))
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR', @Language, '', '', '', @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'MINIMUM_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------------- 
			-- OHLO 20200428: Since v5.0.0, remove the unnecessary accuracy rounding  
			-- ------------------------------------------------------------------------------- 
			IF (@PassesValidations!=0 AND (@UNIT_PRICE IS NOT NULL AND @UNIT_PRICE <= 0)) 
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UNIT_PRICE_STR, 105), @FILE_ROW_NUMBER, 'UNIT_PRICE', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TVC IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TVC) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_TVC_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TVC_STR, 105), @FILE_ROW_NUMBER, 'TVC', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CONSOLIDATED_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CONSOLIDATED_REPLENISHMENT_STR, 105), @FILE_ROW_NUMBER, 'CONSOLIDATED_REPLENISHMENT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@POSITIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @POSITIVE_ADJUSTMENTS_STR, 105), @FILE_ROW_NUMBER, 'POSITIVE_ADJUSTMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@CONSUMPTION IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @CONSUMPTION_STR, 105), @FILE_ROW_NUMBER, 'CONSUMPTION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@NEGATIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @NEGATIVE_ADJUSTMENTS_STR, 105), @FILE_ROW_NUMBER, 'NEGATIVE_ADJUSTMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its   
			--				  validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@PENDING_DEMAND IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @PENDING_DEMAND_STR, 105), @FILE_ROW_NUMBER, 'PENDING_DEMAND', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its    
			--				  validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@EXCLUDED_OUTS IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @EXCLUDED_OUTS) < 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
						CONVERT(VARCHAR, @EXCLUDED_OUTS_STR, 105), @FILE_ROW_NUMBER, 'EXCLUDED_OUTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority   
			--				  and its validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@REPLENISHMENT_PRIORITY IS NOT NULL AND  @REPLENISHMENT_PRIORITY <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_PRIORITY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_PRIORITY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -----------------------------------------------------------------------------------
			-- OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency 
			--				  and its validations 
			-- -----------------------------------------------------------------------------------
			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY IS NULL OR @REPLENISHMENT_FREQUENCY <= 0))  
			BEGIN  
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_FREQUENCY', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 


			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY >= @REPLENISHMENT_TIME))  
			BEGIN 
		 		SET @PassesValidations = 0;
		 		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		 			'DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
		 		VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY_STR, 105), @FILE_ROW_NUMBER, 'REPLENISHMENT_FREQUENCY', @FILE_NAME, @UPDATE_MOVEMENTS)

		 		SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1
		 		SET @ovaResult = '1';

		 		IF (@ivaIsDataExchangeForScreen = 1)
		 		BEGIN 
		 			SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME+'</td></tr>';
		 			SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

		 			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
		 			VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
		 		END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

		 		FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
		 		CONTINUE; 
			END	


			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_SITE IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_SITE', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- ------------------------------------------------------------------------------- 
			-- OHLO 20201019: Since v5.2.1, fix Previous Inventory on Site calculation. 
			-- ------------------------------------------------------------------------------- 
			IF (@PassesValidations!=0 AND @LAST_TOTAL_INVENTORY_ON_SITE IS NOT NULL) 
			BEGIN 
				SET @TempTOTAL_INVENTORY_ON_SITE = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE)) 
                                                 + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)) 
                                                 + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS)) 
                                                 - (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)) 
                                                 - (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS)) 
                                                 /* OHLO 20180302: Since v4.8.3, add Excluded Outs to the calculation */
                                                 - (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@EXCLUDED_OUTS)) 
				IF ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TempTOTAL_INVENTORY_ON_SITE)) != (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE))) 
				BEGIN 
					--SET @PassesValidations = 0;
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						   CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_SITE', @FILE_NAME, @UPDATE_MOVEMENTS)

					--SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
					--SET @ovaResult = '1';

					IF (@ivaIsDataExchangeForScreen = 1) 
					BEGIN 
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
					END 
				END 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_TRANSIT IS NULL OR @TOTAL_INVENTORY_ON_TRANSIT < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_TRANSIT_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_TRANSIT', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PURCHASING IS NULL OR @TOTAL_INVENTORY_ON_PURCHASING < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PURCHASING_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_PURCHASING', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PRODUCTION IS NULL OR @TOTAL_INVENTORY_ON_PRODUCTION < 0)) 
			BEGIN 
				SET @PassesValidations = 0;
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0', @Language, '', '', '', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_INVENTORY_ON_PRODUCTION', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND (@UPDATE_MOVEMENTS IS NULL OR @UPDATE_MOVEMENTS > @DATE_SERVER_NO_TIME)) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST', @Language, '', '', '', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			-- -------------------------------------------------------------------------------
			-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by Update 
			--                     Movements column  
			-- -------------------------------------------------------------------------------
			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) 
			BEGIN   
				SET @PassesValidations = 0; 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
					'DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE', @Language, '', '', '', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_MOVEMENTS', @FILE_NAME, @UPDATE_MOVEMENTS);

				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   
				SET @ovaResult = '1';

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] 
				 WHERE [LOCATION]         = @LOCATION 
				   AND [SKU]              = @SKU 
				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; 

				FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
				CONTINUE; 
			END 

			IF (@PassesValidations = 1) 
			BEGIN 

				SET @BUFFER = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)
				SET @TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) 
				SET @TOTAL_INVENTORY_ON_TRANSIT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_TRANSIT)  
				SET @TOTAL_INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PURCHASING)
				SET @TOTAL_INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PRODUCTION) 
				SET @LAST_TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE) 

				SET @SBC_BUFFER_SIZE = NULL; 

				IF (@IsBufferChanged = 1) 
				BEGIN 
					SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); 
				END 

				IF (@SBC_BUFFER_SIZE IS NULL) 
				BEGIN 
					IF (@SBC_BUFFER_SIZE_OLD IS NULL) 
					BEGIN 
						SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); 
					END 
					ELSE 
					BEGIN 
						SET @SBC_BUFFER_SIZE = @SBC_BUFFER_SIZE_OLD; 
					END 
				END 

				SET @SECURITY_STOCK = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK) 
				SET @MINIMUM_REPLENISHMENT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)
				SET @PACKAGING_UNIT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT)
				SET @CONSOLIDATED_REPLENISHMENT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)
				SET @POSITIVE_ADJUSTMENTS = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS)
				SET @CONSUMPTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)
				SET @NEGATIVE_ADJUSTMENTS = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS)

				IF (@REPLENISHMENT_ROUNDING_MODE = 'MS') 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = 0 
				END 
				ELSE IF (@REPLENISHMENT_ROUNDING_MODE = 'MA') 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @MINIMUM_REPLENISHMENT) 
											  - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY) 
				END 
				ELSE 
				BEGIN 
					SET @ALLOWED_OVERSTOCKING = 0 
				END 

				-- ---------------------------------------------------------------------------
				-- OHLO 20170623: Since v4.7.0, the Pending demand is added to the Allowed    
				--                Overstocking 
				-- ---------------------------------------------------------------------------
				SET @ALLOWED_OVERSTOCKING = @ALLOWED_OVERSTOCKING 
					+ dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) 

				SET @EFFECTIVE_BUFFER        = dbo.GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER(@INVENTORY_ACCURACY, @BUFFER, @SECURITY_STOCK, @ALLOWED_OVERSTOCKING)
				SET @INVENTORY_ON_SITE       = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_SITE)
				SET @INVENTORY_ON_TRANSIT    = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_TRANSIT)
				SET @INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PURCHASING)
				SET @INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PRODUCTION)
				SET @INVENTORY_ON_CHAIN      = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_TRANSIT) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PURCHASING) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PRODUCTION) 
				-- ---------------------------------------------------------------------------
				-- JEBE 20200824: Since v5.2.0, Net Inventory formula is modified 
				-- ---------------------------------------------------------------------------
				-- OHLO 20170623: Since v4.7.0, Calculate the Net Inventori   
				-- ---------------------------------------------------------------------------
				SET @NET_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_CHAIN) 
				                   - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND); 
				SET @SITE_PRIORITY       = dbo.GET_CALCULATE_BUFFER_SITE_PRIORITY(@BUFFER, @SECURITY_STOCK, @INVENTORY_ON_SITE);
				SET @SITE_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@SITE_PRIORITY, @INVENTORY_ON_SITE, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); 

				SET @NET_PRIORITY       = dbo.GET_CALCULATE_BUFFER_NET_PRIORITY(@BUFFER, @SECURITY_STOCK, @NET_INVENTORY);
				SET @NET_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@NET_PRIORITY, @INVENTORY_ON_CHAIN, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); 

				-- ---------------------------------------------------------------------------
				-- OHLO 20200820: Since v5.2.0, add Available Inventory calculated column 
				-- ---------------------------------------------------------------------------
				SET @AVAILABLE_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) 
				                   		 - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND);
				-- ---------------------------------------------------------------------------
				-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory, and Origin Buffer Family calculated columns 
				-- ---------------------------------------------------------------------------
				/*SET @ORIGIN_INVENTORY_ON_SITE = ORIGIN_INVENTORY_ON_SITE;
				SET @ORIGIN_NET_INVENTORY = SELECT NET_INVENTORY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;
				SET @ORIGIN_BUFFER_FAMILY = SELECT FAMILY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;*/
				-- ---------------------------------------------------------------------------


				SET @TOTAL_CONSOLIDATED_INPUTS = 0; 

				-- ---------------------------------------------------------------------------
				-- OHLO 20170112: Restart value for Replenishment Problem 
				-- 				  If Site Priority Color is neither anymore blue, nor red,    
				-- 				  nor black, it is because the problem already passed and     
				-- 				  the field is restarted to its default value.                
				-- 				                                                              
				-- 				  Or if the color changes from 'Blue' to 'Red'/'Black'  
				-- 				  or vice versa.											  
				-- ---------------------------------------------------------------------------
				SET @RESTART = dbo.FN_GET_RESTART_REPLENISHMENT_PROBLEM_VALUE(@SITE_PRIORITY_COLOR_OLD, 
																			  @SITE_PRIORITY_COLOR); 
				IF (@RESTART = 'Y') 
				BEGIN  
					SET @REPLENISHMENT_PROBLEM = @CD_NONE_CAUSE; 
				END  

				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)
				BEGIN 
					SET @LAST_COLOR_CHANGE_DATE = NULL 
					SET @MANAGED = 1 
				END 
				ELSE 
				BEGIN 
					SET @LAST_COLOR_CHANGE_DATE = dbo.BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE(@LAST_COLOR_CHANGE_DATE_OLD,@SITE_PRIORITY_COLOR_OLD,@SITE_PRIORITY_COLOR, @UPDATE_MOVEMENTS) 
					SET @MANAGED = dbo.BUFFER_GET_CALCULATE_MANAGED(@SITE_PRIORITY_COLOR_OLD, @SITE_PRIORITY_COLOR) 
				END 

				SET @CDGROUP = dbo.BUFFER_GET_CDGROUP() 

  			-- Computed columns 2.2.1
				IF (@SKU_OLD IS NULL)
				BEGIN
					-- ----------------------------------------------------------------------- 
					-- OHLO 20200409: Since v5.0.0, set the first value for Worst Inventory on 
					--                site with the current Inventory on Site value            
					-- ----------------------------------------------------------------------- 
					SET @WORST_INVENTORY_ON_SITE    = @INVENTORY_ON_SITE;
					SET @LAST_INVENTORY_ON_SITE     = NULL;
					SET @DAYS_SINCE_LAST_OUT        = NULL;
					SET @LAST_TOTAL_OUTS_MAX_SUM    = NULL;
					SET @PROTECTION_FACTOR          = @MIDDLE_PROTECTION_FACTOR;
					SET @ADJUSTMENT_TYPE            = 'EMPTY';
					SET @RT_ADJUSTMENT_TYPE         = 'EMPTY';
					SET @SUGGESTED_BUFFER           = NULL;
					SET @APPROVED_BUFFER            = NULL;
					SET @ADJUSTMENT_ACTION          = 'IGNORE';
					SET @SUGGESTION_DATE            = NULL;
					SET @SUGGESTION_REJECTION_CAUSE = NULL;
					SET @SUGGESTION_EXPIRATION_DATE = NULL;
					SET @SUGGESTION_ALERTS          = NULL;

					-- ----------------------------------------------------------------------- 
					-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated  
					--                column 
					-- ----------------------------------------------------------------------- 
					SET @DAILY_AVERAGE_CONSUMPTION  = NULL;

					IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)
					BEGIN					
						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @UPDATE_MOVEMENTS);
					END
					ELSE
					BEGIN
						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @UPDATE_MOVEMENTS);
					END				
				END

				IF (@SKU_OLD IS NOT NULL)
				BEGIN
					SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD;
					-- ---------------------------------------------------------------------- 
					-- It is not possible that the field @REPLENISHMENT_TIME_OLD is null when 
					-- the field @SKU_OLD is not empty
					-- ---------------------------------------------------------------------- 
					IF (@REPLENISHMENT_TIME > @REPLENISHMENT_TIME_OLD)
					BEGIN
						IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)
						BEGIN
							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @BUFFER_INITIAL_DATE_OLD)
						END
						ELSE
						BEGIN
							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @BUFFER_INITIAL_DATE_OLD)
						END
						IF (@NEXT_BUFFER_ANALYSIS_OLD > @RT_NEXT_BUFFER_ANALYSIS)
						BEGIN
							SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD
						END
						ELSE
						BEGIN
							SET @NEXT_BUFFER_ANALYSIS = @RT_NEXT_BUFFER_ANALYSIS
						END
					END
				END

				-- --------------------------------------------------------------------------- 
				-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use   
				--                in Inputs and Outs Update. 
				-- --------------------------------------------------------------------------- 
				INSERT INTO BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS], [UPDATE_MOVEMENTS_OLD]) 
				VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @UPDATE_MOVEMENTS_OLD); 

				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)
				BEGIN 
					INSERT INTO TFSCM_CLI_BUFFER(BUFFER, CDUNIT, CONSOLIDATED_REPLENISHMENT, CONSUMPTION, EXCLUDED_OUTS, FAMILY, LOCATION, MINIMUM_BUFFER, MINIMUM_REPLENISHMENT, NEGATIVE_ADJUSTMENTS, ORIGIN_LOCATION, PACKAGING_UNIT, PENDING_DEMAND, POSITIVE_ADJUSTMENTS, REPLENISHMENT_FREQUENCY, REPLENISHMENT_PRIORITY, REPLENISHMENT_TIME, SECURITY_STOCK, SKU, TOTAL_INVENTORY_ON_PRODUCTION, TOTAL_INVENTORY_ON_PURCHASING, TOTAL_INVENTORY_ON_SITE, TOTAL_INVENTORY_ON_TRANSIT, TVC, UNIT_PRICE, UPDATE_MOVEMENTS,CREATION_DATE,CREATOR_USER,MODIFY_DATE,MODIFY_USER,BUFFER_INITIAL_DATE,LOCATION_TYPE,UNIT_THROUGHPUT,INACTIVE,INACTIVATION_DATE,INVENTORY_ON_SITE,INVENTORY_ON_TRANSIT,INVENTORY_ON_PURCHASING,INVENTORY_ON_PRODUCTION,INVENTORY_ON_CHAIN,ALLOWED_OVERSTOCKING,EFFECTIVE_BUFFER,SITE_PRIORITY,SITE_PRIORITY_COLOR,NET_PRIORITY,NET_PRIORITY_COLOR,TOTAL_CONSOLIDATED_INPUTS,TOTAL_CONSOLIDATED_OUTPUTS,LAST_TOTAL_INVENTORY_ON_SITE,LAST_COLOR_CHANGE_DATE,MANAGED,CDGROUP,WORST_INVENTORY_ON_SITE,LAST_INVENTORY_ON_SITE,DAYS_SINCE_LAST_OUT,LAST_TOTAL_OUTS_MAX_SUM,PROTECTION_FACTOR,ADJUSTMENT_TYPE,RT_ADJUSTMENT_TYPE,SUGGESTED_BUFFER,APPROVED_BUFFER,ADJUSTMENT_ACTION,SUGGESTION_DATE,SUGGESTION_REJECTION_CAUSE,SUGGESTION_EXPIRATION_DATE,SUGGESTION_ALERTS,NEXT_BUFFER_ANALYSIS,REPLENISHMENT_PROBLEM,NET_INVENTORY,SBC_BUFFER_SIZE,DAILY_AVERAGE_CONSUMPTION,AVAILABLE_INVENTORY,ORIGIN_INVENTORY_ON_SITE,ORIGIN_NET_INVENTORY,ORIGIN_BUFFER_FAMILY)
					VALUES(@BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, GETDATE(), @ivaCreatorOrModifyUser, GETDATE(), @ivaCreatorOrModifyUser,@UPDATE_MOVEMENTS,@LOCATION_TYPE,@UNIT_THROUGHPUT,0,NULL,@INVENTORY_ON_SITE,@INVENTORY_ON_TRANSIT,@INVENTORY_ON_PURCHASING,@INVENTORY_ON_PRODUCTION,@INVENTORY_ON_CHAIN,@ALLOWED_OVERSTOCKING,@EFFECTIVE_BUFFER,@SITE_PRIORITY,@SITE_PRIORITY_COLOR,@NET_PRIORITY,@NET_PRIORITY_COLOR,0,0,NULL,@LAST_COLOR_CHANGE_DATE,@MANAGED,@CDGROUP,@WORST_INVENTORY_ON_SITE,@LAST_INVENTORY_ON_SITE,@DAYS_SINCE_LAST_OUT,@LAST_TOTAL_OUTS_MAX_SUM,@PROTECTION_FACTOR,@ADJUSTMENT_TYPE,@RT_ADJUSTMENT_TYPE,@SUGGESTED_BUFFER,@APPROVED_BUFFER,@ADJUSTMENT_ACTION,@SUGGESTION_DATE,@SUGGESTION_REJECTION_CAUSE,@SUGGESTION_EXPIRATION_DATE,@SUGGESTION_ALERTS,@NEXT_BUFFER_ANALYSIS,@CD_NONE_CAUSE,@NET_INVENTORY,@SBC_BUFFER_SIZE,@DAILY_AVERAGE_CONSUMPTION,@AVAILABLE_INVENTORY,@ORIGIN_INVENTORY_ON_SITE,@ORIGIN_NET_INVENTORY,@ORIGIN_BUFFER_FAMILY)
				END 
				ELSE 
				BEGIN 
					-- -----------------------------------------------------------------------
					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by 
					--                     Update Movements column  
					-- -----------------------------------------------------------------------
					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					   SET [REPLENISHMENT_PROBLEM] = @REPLENISHMENT_PROBLEM_OLD
					 WHERE [SKU]              = @SKU 
					   AND [LOCATION]         = @LOCATION
					   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS_OLD

					IF (@ivaIsDataExchangeForScreen=0) 
					BEGIN 
						UPDATE TFSCM_CLI_BUFFER
						   SET CDUNIT = @CDUNIT,
							   CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT,
							   CONSUMPTION = @CONSUMPTION,
							   EXCLUDED_OUTS = @EXCLUDED_OUTS,
							   FAMILY = @FAMILY,
							   MINIMUM_BUFFER = @MINIMUM_BUFFER,
							   MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT,
							   NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS,
							   ORIGIN_LOCATION = @ORIGIN_LOCATION,
							   PACKAGING_UNIT = @PACKAGING_UNIT,
							   PENDING_DEMAND = @PENDING_DEMAND,
							   POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS,
							   REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY,
							   REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY,
							   REPLENISHMENT_TIME = @REPLENISHMENT_TIME,
							   SECURITY_STOCK = @SECURITY_STOCK,
							   TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION,
							   TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING,
							   TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE,
							   TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT,
							   TVC = @TVC,
							   UNIT_PRICE = @UNIT_PRICE,
							   UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS,
							   BUFFER = @BUFFER, 

							   MODIFY_DATE             = GETDATE()
							  ,MODIFY_USER             = @ivaCreatorOrModifyUser
							  ,LOCATION_TYPE           = @LOCATION_TYPE
							  ,UNIT_THROUGHPUT         = @UNIT_THROUGHPUT
							  ,INACTIVE                = @INACTIVE
							  ,INACTIVATION_DATE       = @INACTIVATION_DATE
							  ,INVENTORY_ON_SITE       = @INVENTORY_ON_SITE
							  ,INVENTORY_ON_TRANSIT    = @INVENTORY_ON_TRANSIT
							  ,INVENTORY_ON_PURCHASING = @INVENTORY_ON_PURCHASING
							  ,INVENTORY_ON_PRODUCTION = @INVENTORY_ON_PRODUCTION
							  ,INVENTORY_ON_CHAIN      = @INVENTORY_ON_CHAIN
							  ,ALLOWED_OVERSTOCKING    = @ALLOWED_OVERSTOCKING
							  ,EFFECTIVE_BUFFER        = @EFFECTIVE_BUFFER
							  ,SITE_PRIORITY           = @SITE_PRIORITY
							  ,SITE_PRIORITY_COLOR     = @SITE_PRIORITY_COLOR
							  ,NET_PRIORITY            = @NET_PRIORITY
							  ,NET_PRIORITY_COLOR      = @NET_PRIORITY_COLOR
							  ,LAST_TOTAL_INVENTORY_ON_SITE = 
							  	CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
							  		@TOTAL_INVENTORY_ON_SITE_OLD
							  	ELSE 
							  		LAST_TOTAL_INVENTORY_ON_SITE
							  	END	
							  ,LAST_COLOR_CHANGE_DATE  = @LAST_COLOR_CHANGE_DATE
							  ,MANAGED                 = @MANAGED
							  ,NEXT_BUFFER_ANALYSIS    = @NEXT_BUFFER_ANALYSIS
							  ,REPLENISHMENT_PROBLEM   = @REPLENISHMENT_PROBLEM
							  ,NET_INVENTORY           = @NET_INVENTORY
							  ,SBC_BUFFER_SIZE         = @SBC_BUFFER_SIZE
							  ,AVAILABLE_INVENTORY     = @AVAILABLE_INVENTORY
							  ,ORIGIN_INVENTORY_ON_SITE = @ORIGIN_INVENTORY_ON_SITE
							  ,ORIGIN_NET_INVENTORY     = @ORIGIN_NET_INVENTORY
							  ,ORIGIN_BUFFER_FAMILY     = @ORIGIN_BUFFER_FAMILY

						WHERE SKU = @SKU AND LOCATION = @LOCATION
					END 
					ELSE
					BEGIN 
						UPDATE TFSCM_CLI_BUFFER
						   SET BUFFER = @BUFFER,
							   CDUNIT = @CDUNIT,
							   CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT,
							   CONSUMPTION = @CONSUMPTION,
							   EXCLUDED_OUTS = @EXCLUDED_OUTS,
							   FAMILY = @FAMILY,
							   LOCATION = @LOCATION,
							   MINIMUM_BUFFER = @MINIMUM_BUFFER,
							   MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT,
							   NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS,
							   ORIGIN_LOCATION = @ORIGIN_LOCATION,
							   PACKAGING_UNIT = @PACKAGING_UNIT,
							   PENDING_DEMAND = @PENDING_DEMAND,
							   POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS,
							   REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY,
							   REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY,
							   REPLENISHMENT_TIME = @REPLENISHMENT_TIME,
							   SECURITY_STOCK = @SECURITY_STOCK,
							   SKU = @SKU,
							   TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION,
							   TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING,
							   TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE,
							   TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT,
							   TVC = @TVC,
							   UNIT_PRICE = @UNIT_PRICE,
							   UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS,

							   MODIFY_DATE             = GETDATE()
							  ,MODIFY_USER             = @ivaCreatorOrModifyUser
							  ,LOCATION_TYPE           = @LOCATION_TYPE
							  ,UNIT_THROUGHPUT         = @UNIT_THROUGHPUT
							  ,INACTIVE                = @INACTIVE
							  ,INACTIVATION_DATE       = @INACTIVATION_DATE
							  ,INVENTORY_ON_SITE       = @INVENTORY_ON_SITE
							  ,INVENTORY_ON_TRANSIT    = @INVENTORY_ON_TRANSIT
							  ,INVENTORY_ON_PURCHASING = @INVENTORY_ON_PURCHASING
							  ,INVENTORY_ON_PRODUCTION = @INVENTORY_ON_PRODUCTION
							  ,INVENTORY_ON_CHAIN      = @INVENTORY_ON_CHAIN
							  ,ALLOWED_OVERSTOCKING    = @ALLOWED_OVERSTOCKING
							  ,EFFECTIVE_BUFFER        = @EFFECTIVE_BUFFER
							  ,SITE_PRIORITY           = @SITE_PRIORITY
							  ,SITE_PRIORITY_COLOR     = @SITE_PRIORITY_COLOR
							  ,NET_PRIORITY            = @NET_PRIORITY
							  ,NET_PRIORITY_COLOR      = @NET_PRIORITY_COLOR
							  ,LAST_TOTAL_INVENTORY_ON_SITE = 
							  	CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN 
							  		@TOTAL_INVENTORY_ON_SITE_OLD
							  	ELSE 
							  		LAST_TOTAL_INVENTORY_ON_SITE
							  	END	
							  ,LAST_COLOR_CHANGE_DATE  = @LAST_COLOR_CHANGE_DATE
							  ,MANAGED                 = @MANAGED
							  ,NEXT_BUFFER_ANALYSIS    = @NEXT_BUFFER_ANALYSIS
							  ,REPLENISHMENT_PROBLEM   = @REPLENISHMENT_PROBLEM
							  ,NET_INVENTORY           = @NET_INVENTORY
							  ,SBC_BUFFER_SIZE         = @SBC_BUFFER_SIZE
							  ,AVAILABLE_INVENTORY     = @AVAILABLE_INVENTORY
							  ,ORIGIN_INVENTORY_ON_SITE = @ORIGIN_INVENTORY_ON_SITE
							  ,ORIGIN_NET_INVENTORY     = @ORIGIN_NET_INVENTORY
							  ,ORIGIN_BUFFER_FAMILY     = @ORIGIN_BUFFER_FAMILY

						WHERE SKU = @SKU AND LOCATION = @LOCATION
					END 
				END 
				

				-- If buffer value changes, the buffer related orders priority have to be updated 
				--IF (@BUFFER <> @BUFFER_OLD)
				--BEGIN
				IF (@IsBufferChanged = 1)
				BEGIN
					/* OHLO 20170405: Alert user and Expire non-managed suggestions */	
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);
					/* In order to manage the expired sku-location, add it to the list */
					IF (@BufferList <> '')
					BEGIN
						SET @BufferList = @BufferList + @DelimiterForRecords;
					END 

					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; 

					/* Expire any prior non-managed suggestion */
					UPDATE TFSCM_CLI_BUFFER
					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,
						   SUGGESTION_REJECTION_CAUSE = @ExpiredSuggestionCause,
						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP
					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze
					   AND SKU               = @SKU
					   AND LOCATION          = @LOCATION;

					/* If it is a dataexchange from Master window */
					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@AlertNotificationsId, @MessageTableErrors);
					END
					-- -----------------------------------------------------------------------
				END

				-- ---------------------------------------------------------------------------
				-- OHLO 20190613: Since v4.13.0, if columns involved in the calculation 
				-- 					   have changed, then recalculate buffers related OC and 
				--                     OP priorities
				-- ---------------------------------------------------------------------------
				IF (@IsBufferChanged = 1 
				 OR @IsSecurityStockChanged = 1 
				 OR @IsInventoryOnSiteChanged = 1 
				 OR @IsInventoryOnTransitChanged = 1 
				 OR @IsInventoryOnProductionChanged = 1 
				 OR @IsPendingDemandChanged = 1) 
				BEGIN
					DECLARE @recalcPriorityResult  VARCHAR(1);
					DECLARE @recalcPriorityMessage NVARCHAR(max);
					-- -----------------------------------------------------------------------
					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by 
					--                     Update Movements column  
					-- -----------------------------------------------------------------------
					EXEC USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY @SKU, @LOCATION, @UPDATE_MOVEMENTS,
						@recalcPriorityResult OUTPUT, @recalcPriorityMessage OUTPUT;

					-- If there is an error recalculating the priority, then raise it.
					IF (@recalcPriorityResult = '1')
					BEGIN
						SET @ovaResult = '1';
						-- (@ErMessage, @ErSeverity, @ErState)
						RAISERROR (@recalcPriorityMessage, 10, 1);
					END
				END
				-- ---------------------------------------------------------------------------


				IF (@IsMinBufferChanged = 1)
				BEGIN
					/* OHLO 20170523: Alert user and Expire non-managed suggestions */	
					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
						'DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED OUTPUT;

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED, NULL, 'A', GETDATE(), @SKU, @LOCATION,
						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);

					/* In order to manage the expired sku-location, add it to the list */
					IF (@BufferList <> '')
					BEGIN
						SET @BufferList = @BufferList + @DelimiterForRecords;
					END 

					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; 

					/* Expire any prior non-managed suggestion */
					UPDATE TFSCM_CLI_BUFFER
					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,
						   SUGGESTION_REJECTION_CAUSE = @ExpiredMinBufferChange,
						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP
					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze
					   AND SKU               = @SKU
					   AND LOCATION          = @LOCATION
					   AND SUGGESTED_BUFFER  < MINIMUM_BUFFER;

					/* If it is a dataexchange from Master window */
					IF (@ivaIsDataExchangeForScreen = 1)
					BEGIN
						SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>A</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED+'</td></tr>'; 
						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
						VALUES (@AlertNotificationsId, @MessageTableErrors);
					END
					-- -----------------------------------------------------------------------
				END


				-- ---------------------------------------------------------------------------
				-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. 
				-- ---------------------------------------------------------------------------
				IF (@IsOrigin > 0)
				BEGIN
					INSERT INTO #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY)
					VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @INVENTORY_ON_SITE, @NET_INVENTORY, @FAMILY); 
				END
				-- ---------------------------------------------------------------------------

				IF (@LOCATION != @locationTemp) 
				BEGIN 
					SET @locationsListTemp = @locationsListTemp + @LOCATION + @DelimiterForLocations; 
					SET @locationTemp = @LOCATION; 
				END 

				IF (@LOCATION != @locationTempOnlyWorkDay AND @LOCATION != @locationTempNoWorkDay) 
				BEGIN 
					IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@UPDATE_MOVEMENTS, @CDCALENDAR)) = 0) 
					BEGIN  
						SET @locationsListTempOnlyWorkDay = @locationsListTempOnlyWorkDay + @LOCATION + @DelimiterForLocations; 
						SET @locationTempOnlyWorkDay = @LOCATION; 
					END 
					ELSE 
					BEGIN  
						SET @locationTempNoWorkDay = @LOCATION; 
					END 
				END  

				SET @ovaHasProcessed = '1';
				SET @ProcessBuffersCount = @ProcessBuffersCount + 1 
			END 
		END TRY
		BEGIN CATCH 
			SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;
			SET @ovaResult = '1';
			SET @ovaMessage = ' ERROR_MESSAGE: '+ERROR_MESSAGE(); 

			BEGIN TRY 
				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR OUTPUT;

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, 
										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR + '<br><br>' + @ovaMessage, NULL, 'E', GETDATE(), @SKU, @LOCATION,
					    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);

				IF (@ivaIsDataExchangeForScreen = 1) 
				BEGIN 
					SET @MessageTableErrors = '<tr><td>'+@LOCATION+'</td><td>'+@SKU+'</td><td>E</td><td>'+@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR+'</td></tr>'; 
					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; 

					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)
					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);
				END 

			END TRY 
			BEGIN CATCH 
			END CATCH 
		END CATCH 

		SET @COMMIT_COUNT = @COMMIT_COUNT + 1

		-- -----------------------------------------------------------------------------------
		-- OHLO 20200106: Since v4.14.0, the commit batch is set to 10 instead of 100 
		-- -----------------------------------------------------------------------------------
		IF (@COMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @COMMIT_COUNT = 0;
		END

		FETCH NEXT FROM cDataTempCursor INTO @IsOrigin, @BUFFER, @CDUNIT, @CONSOLIDATED_REPLENISHMENT, @CONSUMPTION, @EXCLUDED_OUTS, @FAMILY, @LOCATION, @MINIMUM_BUFFER, @MINIMUM_REPLENISHMENT, @NEGATIVE_ADJUSTMENTS, @ORIGIN_LOCATION, @PACKAGING_UNIT, @PENDING_DEMAND, @POSITIVE_ADJUSTMENTS, @REPLENISHMENT_FREQUENCY, @REPLENISHMENT_PRIORITY, @REPLENISHMENT_TIME, @SECURITY_STOCK, @SKU, @TOTAL_INVENTORY_ON_PRODUCTION, @TOTAL_INVENTORY_ON_PURCHASING, @TOTAL_INVENTORY_ON_SITE, @TOTAL_INVENTORY_ON_TRANSIT, @TVC, @UNIT_PRICE, @UPDATE_MOVEMENTS, @ID, @LOCATION_TEMP, @IS_CREATION, @LOCATION_TYPE, @CDBUFFER_FAMILY_DB, @CDLOCATION_ORIGIN_DB, @INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY, @REPLENISHMENT_ROUNDING_MODE, @YELLOW_ZONE_START, @RED_ZONE_START, @MIDDLE_PROTECTION_FACTOR, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @CDCALENDAR, @SKU_OLD, @LOCATION_OLD, @INACTIVE_OLD, @TOTAL_INVENTORY_ON_SITE_OLD, @LAST_TOTAL_INVENTORY_ON_SITE_OLD, @UPDATE_MOVEMENTS_OLD, @CONSOLIDATED_REPLENISHMENT_OLD, @SITE_PRIORITY_COLOR_OLD, @FAMILY_OLD, @ORIGIN_LOCATION_OLD, @CDUNIT_OLD, @REPLENISHMENT_TIME_OLD, @BUFFER_OLD, @MINIMUM_BUFFER_OLD, @SECURITY_STOCK_OLD, @MINIMUM_REPLENISHMENT_OLD, @PACKAGING_UNIT_OLD, @UNIT_PRICE_OLD, @TVC_OLD, @POSITIVE_ADJUSTMENTS_OLD, @CONSUMPTION_OLD, @NEGATIVE_ADJUSTMENTS_OLD, @TOTAL_INVENTORY_ON_TRANSIT_OLD, @TOTAL_INVENTORY_ON_PURCHASING_OLD, @TOTAL_INVENTORY_ON_PRODUCTION_OLD, @REPLENISHMENT_ROUNDING_MODE_OLD, @YELLOW_ZONE_START_OLD, @RED_ZONE_START_OLD, @INVENTORY_ACCURACY_OLD, @FORMULA_INVENTORY_ACCURACY_OLD, @BUFFER_INITIAL_DATE_OLD, @NEXT_BUFFER_ANALYSIS_OLD, @REPLENISHMENT_PROBLEM_OLD, @PENDING_DEMAND_OLD, @EXCLUDED_OUTS_OLD, @REPLENISHMENT_PRIORITY_OLD, @REPLENISHMENT_FREQUENCY_OLD, @SBC_BUFFER_SIZE_OLD, @ORIGIN_INVENTORY_ON_SITE, @ORIGIN_NET_INVENTORY, @ORIGIN_BUFFER_FAMILY,@FILE_NAME,@FILE_ROW_NUMBER, @REPLENISHMENT_TIME_STR, @BUFFER_STR, @TOTAL_INVENTORY_ON_SITE_STR, @TOTAL_INVENTORY_ON_TRANSIT_STR, @TOTAL_INVENTORY_ON_PURCHASING_STR, @TOTAL_INVENTORY_ON_PRODUCTION_STR, @UPDATE_MOVEMENTS_STR, @MINIMUM_BUFFER_STR, @SECURITY_STOCK_STR, @MINIMUM_REPLENISHMENT_STR, @PACKAGING_UNIT_STR, @UNIT_PRICE_STR, @TVC_STR, @POSITIVE_ADJUSTMENTS_STR, @NEGATIVE_ADJUSTMENTS_STR, @CONSUMPTION_STR, @CONSOLIDATED_REPLENISHMENT_STR, @PENDING_DEMAND_STR, @REPLENISHMENT_PRIORITY_STR, @EXCLUDED_OUTS_STR, @REPLENISHMENT_FREQUENCY_STR
	END 

	-- ---------------------------------------------------------------------------------------
	-- OHLO 20200106: Since v4.14.0, close cursor right after its usage 
	-- ---------------------------------------------------------------------------------------
	CLOSE cDataTempCursor;
	DEALLOCATE cDataTempCursor;

	CREATE INDEX IDX_BUFFER_DATES_TEMP ON BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS]);

	-- ---------------------------------------------------------------------------------------
	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.
	-- ---------------------------------------------------------------------------------------
	CREATE INDEX IDX_OriginBuffersTemp ON #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS);

	UPDATE [BUFFER]
	   SET [BUFFER].[ORIGIN_INVENTORY_ON_SITE] = [OBUFFER].[INVENTORY_ON_SITE], 
		   [BUFFER].[ORIGIN_NET_INVENTORY]     = [OBUFFER].[NET_INVENTORY], 
		   [BUFFER].[ORIGIN_BUFFER_FAMILY]     = [OBUFFER].[FAMILY]
	  FROM [dbo].[TFSCM_CLI_BUFFER] AS [BUFFER]
	  JOIN #OriginBuffersTemp AS [OBUFFER] ON ([OBUFFER].[SKU]              = [BUFFER].[SKU]
										   AND [OBUFFER].[LOCATION]         = [BUFFER].[ORIGIN_LOCATION]
										   AND [OBUFFER].[UPDATE_MOVEMENTS] = [BUFFER].[UPDATE_MOVEMENTS]);
	-- ---------------------------------------------------------------------------------------

	/* Manage the expired suggestions */
	IF (@BufferList <> '')
	BEGIN
		EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferList, @ivaCreatorOrModifyUser, @ManagementWay,
												  @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;
		SET @ovaResult  = @ovaGBASResult;
		SET @ovaMessage = @ovaGBASMessage;
	END

	-- USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS: 
	IF (LEN(@locationsListTemp) > 0) 
	BEGIN 
		SET @locationsListTemp = SUBSTRING (@locationsListTemp, 1, LEN(@locationsListTemp)-LEN(@DelimiterForLocations)) 
	END 
	IF (LEN(@locationsListTempOnlyWorkDay) > 0) 
	BEGIN 
		SET @locationsListTempOnlyWorkDay = SUBSTRING (@locationsListTempOnlyWorkDay, 1, LEN(@locationsListTempOnlyWorkDay)-LEN(@DelimiterForLocations)) 
	END 

	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20200404: Since v5.0.0, send the variable @ManagementWay  
	-- --------------------------------------------------------------------------------------- 
	SET @ManagementWay = 'F'

	EXEC USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS 
		@locationsListTemp, @DelimiterForLocations, @ivaTempLoadDate, @ivaCreatorOrModifyUser, @ManagementWay, 
		@ovaResultPseudocodes OUTPUT, @ovaMessagePseudocodes OUTPUT 

	SET @ovaMessagePseudocodesTotal = @ovaMessagePseudocodesTotal + ', ' + @ovaMessagePseudocodes; 
	IF @ovaResultPseudocodes = '1' 
	BEGIN 
		SET @ovaResult = '1' 
	END 

	SET @Trace = 'go inside the cursor cDataTempCursor  '

	IF (@ovaHasProcessed = '1')
	BEGIN 
		UPDATE TBL 
		SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		FROM TFSCM_COM_TABLES TBL 
		JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		AND INTER.CDINTERFACE = 99
	END 

	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		'DATA_EXCHANGE_BUFFERS_SUCESSFUL', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL OUTPUT;

	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
		'DATA_EXCHANGE_BUFFERS_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_BUFFERS_ERROR OUTPUT;

	SET @ovaMessage =  @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL+':' + CAST (@ProcessBuffersCount AS varchar) + ', '+ @MSG_DATA_EXCHANGE_BUFFERS_ERROR+':' + CAST (@ErrorsBuffersCount AS varchar) + @ovaMessagePseudocodesTotal 
	IF (@ivaIsDataExchangeForScreen = 1) 
	BEGIN 
		UPDATE TFSCM_CLI_MESSAGESNOTIFICATIONS SET MESSAGE = @ovaMessage WHERE ID_MESSAGESNOTIFICATIONS = @ID_MESSAGESNOTIFICATIONS ; 
	END 

	SET @TotalErrorsBuffers = (@ErrorsBuffersCount + @ivaErrorValidations)
	SELECT @MessagesAfterDataExchange = P.PARAM_VALUE FROM TFSCM_COM_PARAMS P 
		WHERE P.CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE'
	IF (@TotalErrorsBuffers > 0 AND @MessagesAfterDataExchange = 'Y')
	BEGIN
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'BDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultRemoveViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);
		END

		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @TotalErrorsBuffers, 'BDE', 'BUFFER_GENERAL_PRIORIZATION', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultAddViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageAddViewNot, 11, 1);
		END
	END	

	IF (@TotalErrorsBuffers = 0 AND @MessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
	BEGIN 
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'BDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT

		-- If there is an error, then raise it.
		IF (@ovaResultRemoveViewNot = '1')
		BEGIN
			SET @ovaResult = '1';
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);
		END
	END

END TRY 
BEGIN CATCH 
	SET @ovaResult = '1';
	SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
		+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
		+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[BUFFERS_MANUAL]') 
		+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR) 
		+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE(); 

	IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1))
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1)) 
		BEGIN 
			CLOSE cDataTempCursor; 
		END 
		DEALLOCATE cDataTempCursor; 
	END 
END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[DELETE_HISTORY_FROM_TABLE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Hernan Dario Jimenez y Edward Rodriguez
-- Create date: 27/01/2015
-- Description:	Procedure to delete history records
-- =============================================
CREATE PROCEDURE [dbo].[DELETE_HISTORY_FROM_TABLE] 
    @ivaTable			VARCHAR(50),
    @ivaHistoryColumn	VARCHAR(50),
    @ivaHistoryDays		INT,    
    @ovaResult			VARCHAR(1) OUTPUT,
    @ovaMessage			NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	DECLARE @vDateDelete AS DATETIME;	
	DECLARE @sqlCommand varchar(1000) = '';
	
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		
		
		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX);
		DECLARE @vMSG_DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR AS NVARCHAR(MAX); 
		DECLARE @vMSG_DELETE_HISTORY_FROM_TABLE_SUCCESSFUL AS NVARCHAR(MAX);
		

		BEGIN TRY  

			SELECT @vLanguage = PARAM_VALUE  
			FROM  TFSCM_COM_PARAMS 
			WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE' 
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR', @vLanguage, '', '', '', @vMSG_DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR OUTPUT  
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DELETE_HISTORY_FROM_TABLE_SUCCESSFUL', @vLanguage, '', '', '', @vMSG_DELETE_HISTORY_FROM_TABLE_SUCCESSFUL OUTPUT


		END TRY  
		BEGIN CATCH  
			SET @vLanguage = 'es' 
			SET @vMSG_DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR = 'DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR'  
			SET @vMSG_DELETE_HISTORY_FROM_TABLE_SUCCESSFUL = 'DELETE_HISTORY_FROM_TABLE_SUCCESSFUL' 
		END CATCH 
		----------------------------------------------------------- 
		
		BEGIN
			
			SET @vDateDelete = DATEADD(d, -@ivaHistoryDays, GETDATE());
	
			SET @sqlCommand = 'DELETE FROM '+@ivaTable+' WHERE '+@ivaHistoryColumn+' < ''' + CONVERT(VARCHAR(30), @vDateDelete, 21) + '''';
			
			IF (@ivaTable = 'TFSCM_CLI_PURCHASE_ORDERS')
			BEGIN
				SET @sqlCommand = @sqlCommand + ' AND ' + @ivaHistoryColumn + ' != ''1901-01-01 00:00'' ';  
			END 
		
			EXEC (@sqlCommand)
			
			SET @ovaResult             = '0';
			SET @ovaMessage = @vMSG_DELETE_HISTORY_FROM_TABLE_SUCCESSFUL;
		END

		
	END TRY
	BEGIN CATCH
		
		SET @ovaResult             = '1';		
		SET @ovaMessage = @vMSG_DELETE_HISTORY_FROM_TABLE_UNEXPECTED_ERROR + CHAR(13) + CHAR(13) +
						   ' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		                   ' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+
                           ' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
                           ' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+
                           ' ERROR_MESSAGE: '+ERROR_MESSAGE() ;
			
	END CATCH	

END
GO
/****** Object:  StoredProcedure [dbo].[FINISHED_PRODUCTION_ORDERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡ 
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 09/24/2013 
-- Description:	FINISHED PRODUCTION ORDERS
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Date       : 19/11/2014
-- Description: Add Yellow and Red Zones 
-- -------------------------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 28/11/2014
-- Description: Add calculations afher orders are finished 
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Date       : 08/01/2015
-- Description: Change DSFAMILY for CDFAMILY
-- -------------------------------------------------------------------------------------------
-- Modified   : Edward Rodríguez
-- Date       : 14/04/2015
-- Description: Add fast forward to cursors and optimization of set values to child orders 
-- -------------------------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 14/10/2015
-- Description: tting quarantine validations
-- -------------------------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 04/08/2016
-- Description: adding a new condition due to the production
--				family can be change.
-- =========================================================================================== 
CREATE PROCEDURE [dbo].[FINISHED_PRODUCTION_ORDERS] 
   /* Input Parameters */
    @ivaIdExchange NUMERIC(10),
	@vORDER_MODIFY_DATE AS DATETIME,
	@vMODIFY_USER AS VARCHAR(50),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
AS
DECLARE @vTrace AS NVARCHAR(MAX); 
DECLARE @vErrorsFinishedProductionOrdersCount AS INT = 0;
DECLARE @vProcessFinishedProductionOrdersCount AS INT = 0;
DECLARE @CDORDER_CHILD AS VARCHAR(50);
DECLARE @ovaPriorityResul NUMERIC(10,2) ;
DECLARE @ovaYellowZoneStart NUMERIC(5,2);
DECLARE @ovaRedZoneStart NUMERIC(5,2);
DECLARE @skuBefore AS VARCHAR(50);
DECLARE @cdDestinationBefore AS VARCHAR(50);
DECLARE @sumProductionStock NUMERIC(38,5);
DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0;
DECLARE @isFinishOrder AS BIT = 0; 
DECLARE @setQuarantineDate AS BIT = 0; 
DECLARE @DATE_SERVER_NO_TIME AS DATE = GETDATE(); 
DECLARE @DATE_CALCULATION AS DATETIME = GETDATE();

BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @ovaResult = '0';
		SET @ovaMessage = '';
				  
		SET @vTrace = 'getting the table name'
		
		SET @skuBefore= '';
		SET @cdDestinationBefore ='';
		
		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vDaysToKeepProductionOrders AS NUMERIC(8);
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE AS NVARCHAR(MAX); 
		
		BEGIN TRY  

			SELECT @vLanguage = PARAM_VALUE  
			FROM  TFSCM_COM_PARAMS 
			WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE'
			
			SELECT TOP(1) @vDaysToKeepProductionOrders =  PARAM_VALUE FROM TFSCM_COM_PARAMS
			WHERE CDPARAM = 'DAYS_TO_KEEP_PRODUCTION_ORDERS_IN_QUARANTINE'
			
			IF(@vDaysToKeepProductionOrders IS NULL)
			BEGIN
				SET @vDaysToKeepProductionOrders = 0;
			END 
			

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED OUTPUT 
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED OUTPUT 
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE OUTPUT 
			
		END TRY  
		BEGIN CATCH 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED    = 'DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED'
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE  = 'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE'
		END CATCH 
		----------------------------------------------------------- 
	
		IF (@vORDER_MODIFY_DATE IS NOT NULL)
		BEGIN		
			-- Finalización de una orden esto debe ejecutar así:
			-- * Consultar la lista de plantas que están en los registros de la tabla temporal para el idexchange
			-- * Buscar todos los registros de la tabla productions_orders que tengan alguna de las plantas del paso
			--   anterior y que no están en la tabla temporal (se busca en la tabla temporal por medio del campo CDORDER)
			-- * Los registros encontrados en el paso anterior son aquellas ordenes que se finalizaron y se debe setear 
			--   su fecha de finalización
			-- PRINT 'START CURSOR LOCATION FINALIZATION';	
			
			DECLARE @GET_DATE AS DATETIME;
			DECLARE @QUARANTINE_DATE_AUX     AS DATETIME;
			DECLARE @CDORDER                 AS VARCHAR(50), 
					@PROMISED_DELIVERY_DATE  AS DATETIME, 
					@PRODUCTION_BUFFER       AS NUMERIC(10,0),
					@CDCALENDAR              AS NUMERIC(4,0),
					@CDORDER_TYPE            AS VARCHAR(1),
					@PRIORITY                AS NUMERIC(10,2),
					@PRIORITY_COLOR          AS VARCHAR(50);
			DECLARE @SKU                     AS VARCHAR(50),
					@CDDESTINATION           AS VARCHAR(50),
					@CREATION_DATE           AS DATETIME,
					@PENDING_AMOUNT          AS NUMERIC(19,2),
					@PRIORITY_OLD            AS NUMERIC(17,2),
					@PRIORITY_COLOR_OLD      AS VARCHAR(50);
			DECLARE @YELLOW_ZONE_START       AS NUMERIC(5,2),
					@RED_ZONE_START          AS NUMERIC(5,2),
					@PROGRESS_PERCENTAGE     AS NUMERIC(17,5),
					@TOUCH_TIME              AS NUMERIC(17,5),
					@EXCHANGES_IN_QUARANTINE AS NUMERIC(8,0),
					@QUARANTINE_DATE         AS DATETIME;
			DECLARE @SHIPPING_TIME           AS VARCHAR(5)
			
			DECLARE cCdOrderTempCursor CURSOR FAST_FORWARD	FOR			
			 SELECT CPO.CDORDER, CPO.PROMISED_DELIVERY_DATE, CPO.PRODUCTION_BUFFER, CL.CDCALENDAR, 
					CPO.CDORDER_TYPE,CPO.SKU, CPO.CDDESTINATION,CPO.CREATION_DATE,CPO.PENDING_AMOUNT, 
					CPO.PRIORITY, CPO.PRIORITY_COLOR, CPF.YELLOW_ZONE_START, CPF.RED_ZONE_START,
					CPO.PROGRESS_PERCENTAGE,CPO.TOUCH_TIME, CPO.EXCHANGES_IN_QUARANTINE,CPO.QUARANTINE_DATE,
					CC.SHIPPING_TIME
			   FROM TFSCM_CLI_PRODUCTION_ORDERS CPO
			  INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = CPO.CDFAMILY)
			  INNER JOIN TFSCM_CLI_LOCATION CL ON (CL.CDLOCATION = CPF.CDLOCATION)
			  INNER JOIN TFSCM_CLI_CALENDAR CC ON (CC.CDCALENDAR = CL.CDCALENDAR) 
			  WHERE (CPF.CDLOCATION  IN (SELECT DISTINCT CPF.CDLOCATION
										   FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
										  INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = TMP.CDFAMILY) 
										  WHERE TMP.IDEXCHANGE        = @ivaIdExchange 
											AND TMP.ORDER_MODIFY_DATE = @vORDER_MODIFY_DATE 
											AND TMP.STATUS            = 1)
			 
					AND CPO.FINALIZATION_DATE IS NULL 
					AND NOT EXISTS (SELECT AUX.CDORDER
									FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP AUX
									WHERE AUX.IDEXCHANGE        = @ivaIdExchange 
									AND AUX.CDORDER           = CPO.CDORDER 
									AND AUX.ORDER_MODIFY_DATE = @vORDER_MODIFY_DATE 
									AND AUX.STATUS            = 1 ))
										
				OR 
				( CPO.EXCHANGES_IN_QUARANTINE > 0 AND CPO.FINALIZATION_DATE IS NULL)							
				ORDER BY CPO.CDPARENT_ORDER DESC;						
				
				--PRINT 'START CURSOR ORDERS BY LOCATION FINALIZATION';
			OPEN cCdOrderTempCursor 
			FETCH NEXT FROM cCdOrderTempCursor INTO @CDORDER, @PROMISED_DELIVERY_DATE, @PRODUCTION_BUFFER, @CDCALENDAR,
										  @CDORDER_TYPE,@SKU,@CDDESTINATION,@CREATION_DATE,@PENDING_AMOUNT,@PRIORITY_OLD, @PRIORITY_COLOR_OLD,@YELLOW_ZONE_START, @RED_ZONE_START,
										  @PROGRESS_PERCENTAGE,@TOUCH_TIME,@EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE,@SHIPPING_TIME;
			
			--PRINT 'START CURSOR ORDERS BY LOCATION FINALIZATION--fetch';
			SET @vTrace = 'go inside the cursor cCdOrderTempCursor  '
			
			WHILE (@@FETCH_STATUS = 0 ) 
			BEGIN					
				BEGIN TRY
					SET @GET_DATE = GETDATE()
					IF (@vORDER_MODIFY_DATE < @DATE_SERVER_NO_TIME) 
					BEGIN 
						SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@vORDER_MODIFY_DATE,@SHIPPING_TIME) 
					END 
					ELSE IF (@vORDER_MODIFY_DATE = @DATE_SERVER_NO_TIME) 
					BEGIN 
						SET @DATE_CALCULATION = GETDATE() 
					END 
					IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR)) > 0) 
					BEGIN 
						SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION ,@CDCALENDAR) 
					END 
					
					SET @isFinishOrder = 0;
					SET @setQuarantineDate = 0; 
					
					
					IF(@EXCHANGES_IN_QUARANTINE = 0 OR @EXCHANGES_IN_QUARANTINE > @vDaysToKeepProductionOrders)
					BEGIN
						SET @isFinishOrder = 1;
					END										
					
					IF(@EXCHANGES_IN_QUARANTINE > 0 AND @QUARANTINE_DATE = CONVERT(DATETIME,'01/01/1901',103))
					BEGIN 
						SET @QUARANTINE_DATE_AUX = @DATE_CALCULATION
						SET @setQuarantineDate = 1 
					END
					
					IF(@isFinishOrder = 1 AND @EXCHANGES_IN_QUARANTINE > 0 )
					BEGIN
						SET @DATE_CALCULATION = @QUARANTINE_DATE
					END 										
					
					--If it is a finalization operation, then It has to calculate the priority and priority color fields
					IF ( @PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != 'S' AND @isFinishOrder = 1) 
					BEGIN 
						SET @PRIORITY       = dbo.GET_CALCULATE_PRIORITY(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @PRODUCTION_BUFFER, dbo.GET_CALCULATE_NON_WORKING_DAYS(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @CDCALENDAR),@CDORDER_TYPE,@PROGRESS_PERCENTAGE,@TOUCH_TIME)
						SET @PRIORITY_COLOR = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY,@CDORDER_TYPE,@YELLOW_ZONE_START,@RED_ZONE_START)										
					END										
					ELSE
					BEGIN
						SET @PRIORITY = @PRIORITY_OLD
						SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD
					END
					
					IF(@isFinishOrder = 1) --Is a finishing action
					BEGIN
						UPDATE TFSCM_CLI_PRODUCTION_ORDERS
						   SET FINALIZATION_DATE = @DATE_CALCULATION,
							   PRIORITY          = @PRIORITY,
							   PRIORITY_COLOR    = @PRIORITY_COLOR,
							   MODIFY_DATE       = @GET_DATE,
							   MODIFY_USER       = @vMODIFY_USER
						 WHERE CDORDER = @CDORDER
						   OR (CDPARENT_ORDER = @CDORDER AND 
								( FINALIZATION_DATE IS NULL) ); -- <--set values for children orders if they are not finished
						
						SET @vProcessFinishedProductionOrdersCount = @vProcessFinishedProductionOrdersCount + 1 
					END										
					
					IF(@setQuarantineDate = 1)
					BEGIN
						UPDATE TFSCM_CLI_PRODUCTION_ORDERS
						   SET QUARANTINE_DATE   = @QUARANTINE_DATE_AUX
						 WHERE CDORDER = @CDORDER
							OR (CDPARENT_ORDER = @CDORDER AND
								 ( FINALIZATION_DATE IS NULL)  )
					END										
					 
				END TRY
				BEGIN CATCH 
					SET @vErrorsFinishedProductionOrdersCount = @vErrorsFinishedProductionOrdersCount + 1 
					SET @ovaResult = '1';
				END CATCH
				
				SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1
				IF (@vCOMMIT_COUNT = 10)
				BEGIN 
					COMMIT;
					SET @vCOMMIT_COUNT = 0
				END									
				
				FETCH NEXT FROM cCdOrderTempCursor INTO @CDORDER, @PROMISED_DELIVERY_DATE, @PRODUCTION_BUFFER, @CDCALENDAR,
											  @CDORDER_TYPE,@SKU,@CDDESTINATION,@CREATION_DATE,@PENDING_AMOUNT,@PRIORITY_OLD, @PRIORITY_COLOR_OLD,@YELLOW_ZONE_START, @RED_ZONE_START,
											  @PROGRESS_PERCENTAGE,@TOUCH_TIME,@EXCHANGES_IN_QUARANTINE,@QUARANTINE_DATE,@SHIPPING_TIME;
			END
			CLOSE cCdOrderTempCursor
			DEALLOCATE cCdOrderTempCursor					
		
				--SET @ovaMessage =  '<br>'+@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_MODIFY_DATE+':'+CONVERT(varchar, @vORDER_MODIFY_DATE, 105)+'(' + @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED+':' +  CAST ( @vProcessFinishedProductionOrdersCount AS varchar ) + ', '+ @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED+':' + CAST ( @vErrorsFinishedProductionOrdersCount AS varchar ) + ')'
		END
		--ELSE 
		--BEGIN
			SET @ovaMessage =  '<br>'+'(' + @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_FINISHED+':' +  CAST ( @vProcessFinishedProductionOrdersCount AS varchar ) + ', '+ @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERRORS_FINISHED+':' + CAST ( @vErrorsFinishedProductionOrdersCount AS varchar ) + ')'
		--END
		
		
		
		SET @vTrace = 'End of FINISHED_PRODUCTION_ORDERS '  
		--Procedure result
	    --PRINT	@vTrace	
		
	END TRY	
	BEGIN CATCH
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = ''	
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[FINISHED_PRODUCTION_ORDERS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cCdOrderTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cCdOrderTempCursor')) IN (0,1))
			BEGIN
				CLOSE cCdOrderTempCursor;
			END
			DEALLOCATE cCdOrderTempCursor;
		END
			
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[FINISHED_PURCHASE_ORDERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡ 
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Hernán Londoño Ospina
-- Modify Date: 26/10/2015 
-- Description:	Change the way of finish orders (Quarantine)
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Hernán Londoño Ospina
-- Modify Date: 19/05/2015 
-- Description:	Change @ovaPriority accuracy
-- -------------------------------------------------------------------------------------------
-- Author     : Julian Andres Gonzalez Velez
-- Modify date: 12/05/2015 
-- Description:	FINISHED PURCHASE ORDERS
-- ===========================================================================================
CREATE PROCEDURE [dbo].[FINISHED_PURCHASE_ORDERS] 
   /* Input Parameters */
    @ivaIdExchange NUMERIC(10),
	@ivaUpdateDate DATETIME,
	-- @dateCalculationFinalization DATETIME,
	@ivaModifyUser VARCHAR(50),
	/* Output Parameters */
    @ovaResult     VARCHAR(1) OUTPUT,
    @ovaMessage    NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
DECLARE @vTrace AS NVARCHAR(MAX); 
DECLARE @vErrorsFinishedPurchaseOrdersCount AS INT = 0;
DECLARE @vProcessFinishedPurchaseOrdersCount AS INT = 0;
DECLARE @skuBefore AS VARCHAR(50);
DECLARE @cdDestinationBefore AS VARCHAR(50);
DECLARE @vCOMMIT_COUNT       AS NUMERIC(4) = 0;
DECLARE @serverDate          AS DATE = GETDATE(); 
DECLARE @calculationDate     AS DATETIME = GETDATE();
DECLARE @mustFinishOrder     AS BIT = 0; 
DECLARE @setQuarantineDate   AS BIT = 0; 

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @ovaResult = '0';
		SET @ovaMessage = '';
				  
		SET @vTrace = 'getting the table name';
		
		SET @skuBefore= '';
		SET @cdDestinationBefore ='';
		
		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';
		DECLARE @vCodErrorResultMessages AS VARCHAR(1);
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE AS NVARCHAR(MAX); 
		----------- AUX VARIABLES -----------------------------------
		DECLARE @PURCHASE_ORDER_NOT_FINALIZED DATETIME;
		DECLARE @vDaysToKeepPUInQuarantine  AS NUMERIC(10,0);
		DECLARE @ovaPriority NUMERIC(10,2);
		DECLARE @ovaPriorityColor VARCHAR(50);
		DECLARE @ovaGetPriorityResult VARCHAR(1);
		DECLARE @ovaGetPriorityMessage NVARCHAR(MAX);

		SET @PURCHASE_ORDER_NOT_FINALIZED = '1901-01-01';
		BEGIN TRY  

			SELECT @vLanguage = PARAM_VALUE
			  FROM TFSCM_COM_PARAMS
		     WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';

			SELECT @vDaysToKeepPUInQuarantine = PARAM_VALUE
			  FROM TFSCM_COM_PARAMS
			 WHERE CDPARAM = 'DAYS_TO_KEEP_PURCHASING_ORDERS_IN_QUARANTINE';
			
			IF(@vDaysToKeepPUInQuarantine IS NULL)
			BEGIN
				SET @vDaysToKeepPUInQuarantine = 0;
			END
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED OUTPUT;
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED OUTPUT;
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE OUTPUT;
			
		END TRY  
		BEGIN CATCH 
			SET @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED = 'DATA_EXCHANGE_PURCHASE_ORDERS_CDORDER_DUPLICATED';
			SET @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED    = 'DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED';
			SET @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE  = 'DATA_EXCHANGE_PURCHASE_ORDERS_ORDER_MODIFY_DATE';
		END CATCH 
		----------------------------------------------------------- 
		IF(@ivaUpdateDate IS NOT NULL)
		BEGIN		
			-- Finalización de una orden esto debe ejecutar así:
			-- * Consultar la lista de plantas que están en los registros de la tabla temporal para el idexchange
			-- * Buscar todos los registros de la tabla purchase_orders que tengan alguna de las plantas del paso 
			--   anterior y que no están en la tabla temporal (se busca en la tabla temporal por medio del campo 
			--   CDPURCHASE_ORDER y SUPPLIER)
			-- * Los registros encontrados en el paso anterior son aquellas ordenes que se finalizaron y se debe  
			--   actualizar su fecha de finalización con la fecha de actualización, es decir, con la fecha que se
			--	 reporta desde el ERP
			-- PRINT 'START CURSOR LOCATION FINALIZATION';	
			DECLARE @CDLOCATION AS VARCHAR(50);
			
			DECLARE cCdLocationPurchaseTempCursor CURSOR FAST_FORWARD FOR 
			 SELECT DISTINCT TMP.DESTINATION
			   FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP 
			  WHERE TMP.IDEXCHANGE  = @ivaIdExchange 
			    AND TMP.UPDATE_DATE = @ivaUpdateDate 
			    AND TMP.STATUS      = 1;
				
			OPEN cCdLocationPurchaseTempCursor;
			FETCH NEXT FROM cCdLocationPurchaseTempCursor INTO @CDLOCATION;
			
			WHILE (@@FETCH_STATUS = 0) 
			BEGIN
				DECLARE @currentDate         AS DATETIME;
				DECLARE @quarantineDateToSet AS DATETIME;
				
				DECLARE @CDORDER                    AS VARCHAR(50), 
						@SUPPLIER                   AS VARCHAR(50),
						@PROMISED_DELIVERY_DATETIME AS DATETIME,
						@NECESSITY_DATETIME         AS DATETIME,
						@CDCALENDAR                 AS NUMERIC(4,0),
						@CDORDER_TYPE               AS VARCHAR(1),
						@PRIORITY                   AS NUMERIC(17,2),
						@PRIORITY_COLOR             AS VARCHAR(50),
						@SKU                        AS VARCHAR(50),
						@CDDESTINATION              AS VARCHAR(50),
						@CREATION_DATE_TIME         AS DATETIME,
						@PENDING_AMOUNT             AS NUMERIC(19,2),
						@PRIORITY_OLD               AS NUMERIC(10,2),
						@PRIORITY_COLOR_OLD         AS VARCHAR(50),
						@SHIPPING_TIME              AS VARCHAR(5),
						@BUFFER_YELLOW_ZONE_START   AS NUMERIC(5,2),
						@BUFFER_RED_ZONE_START      AS NUMERIC(5,2),
						@EXCHANGES_IN_QUARANTINE    AS NUMERIC(10,0),
						@QUARANTINE_DATE            AS DATETIME;
						
				DECLARE cCdPurchaseOrderTempCursor CURSOR FAST_FORWARD FOR			
				 SELECT CPO.CDPURCHASE_ORDER, CPO.SUPPLIER, CPO.PROMISED_DELIVERY_DATETIME, CPO.NECESSITY_DATETIME,
				        CL.CDCALENDAR, CPO.PO_TYPE, CPO.SKU, CPO.DESTINATION, CPO.ORDER_CREATION_DATE,
				        CPO.PENDING_QUANTITY, CPO.PRIORITY, CPO.PRIORITY_COLOR, CALENDAR.SHIPPING_TIME, 
					    CPO.EXCHANGES_IN_QUARANTINE, CPO.QUARANTINE_DATE
				   FROM TFSCM_CLI_PURCHASE_ORDERS CPO
						   INNER JOIN TFSCM_CLI_LOCATION CL       ON (CL.CDLOCATION = CPO.DESTINATION)
						   INNER JOIN TFSCM_CLI_CALENDAR CALENDAR ON (CL.CDCALENDAR = CALENDAR.CDCALENDAR)
				  WHERE CPO.DESTINATION       = @CDLOCATION 
					AND CPO.FINALIZATION_DATE = @PURCHASE_ORDER_NOT_FINALIZED
					AND NOT EXISTS (SELECT AUX.CDPURCHASE_ORDER
				  					  FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP AUX
									 WHERE AUX.IDEXCHANGE       = @ivaIdExchange 
									   AND AUX.CDPURCHASE_ORDER = CPO.CDPURCHASE_ORDER 
									   AND AUX.SUPPLIER         = CPO.SUPPLIER
									   AND AUX.UPDATE_DATE      = @ivaUpdateDate 
									   AND AUX.STATUS           = 1 );
					
				OPEN cCdPurchaseOrderTempCursor;
				FETCH NEXT FROM cCdPurchaseOrderTempCursor
				 INTO @CDORDER, @SUPPLIER, @PROMISED_DELIVERY_DATETIME, @NECESSITY_DATETIME, @CDCALENDAR,
					  @CDORDER_TYPE, @SKU, @CDDESTINATION, @CREATION_DATE_TIME, @PENDING_AMOUNT, @PRIORITY_OLD,
					  @PRIORITY_COLOR_OLD, @SHIPPING_TIME, @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE;
				--PRINT 'START CURSOR ORDERS BY LOCATION FINALIZATION--fetch';
				
				WHILE (@@FETCH_STATUS = 0 ) 
				BEGIN					
					BEGIN TRY
						SET @mustFinishOrder = 0;
						SET @currentDate     = GETDATE();
						
						IF (@ivaUpdateDate < @serverDate)
						BEGIN
							SET @calculationDate = dbo.ADD_TIME_TO_DATE(@ivaUpdateDate, @SHIPPING_TIME);
						END 
						ELSE IF (@ivaUpdateDate = @serverDate)
						BEGIN
							SET @calculationDate = GETDATE();
						END
						
						IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@calculationDate, @CDCALENDAR)) > 0)
						BEGIN
							SET @calculationDate = dbo.GET_PREVIOUS_WORK_DAY(@calculationDate, @CDCALENDAR);
						END
						
						IF (@EXCHANGES_IN_QUARANTINE = 0 OR @EXCHANGES_IN_QUARANTINE > @vDaysToKeepPUInQuarantine)
						BEGIN
							SET @mustFinishOrder = 1;
						END	
						ELSE IF (@EXCHANGES_IN_QUARANTINE > 0 AND @QUARANTINE_DATE = CONVERT(DATETIME,'01/01/1901',103))
						BEGIN 
							SET @quarantineDateToSet = @calculationDate;
							SET @setQuarantineDate   = 1;
						END
						
						IF (@mustFinishOrder = 1 AND @EXCHANGES_IN_QUARANTINE > 0 )
						BEGIN
							SET @calculationDate = @QUARANTINE_DATE;
						END 	
															
						IF (@PROMISED_DELIVERY_DATETIME IS NOT NULL AND @CDORDER_TYPE != 'S' AND @mustFinishOrder = 1)
						BEGIN								
							EXEC SP_GET_PURCHASE_PRIORITY_VALUES @calculationDate, @CREATION_DATE_TIME, @PROMISED_DELIVERY_DATETIME,
							@NECESSITY_DATETIME, @CDCALENDAR,@ovaPriority OUTPUT,@ovaPriorityColor OUTPUT,@ovaGetPriorityResult OUTPUT,
							@ovaGetPriorityMessage OUTPUT;
							
							SET @PRIORITY       = @ovaPriority;
							SET @PRIORITY_COLOR = @ovaPriorityColor;
						END										
						ELSE
						BEGIN
							SET @PRIORITY       = @PRIORITY_OLD;
							SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD;
						END
						
						IF (@mustFinishOrder = 1)
						BEGIN
							UPDATE TFSCM_CLI_PURCHASE_ORDERS
							   SET FINALIZATION_DATE = @calculationDate,
								   PRIORITY          = @ovaPriority,
								   PRIORITY_COLOR    = @ovaPriorityColor,
								   MODIFICATION_DATE = @currentDate,
								   MODIFICATION_USER = @ivaModifyUser
							 WHERE CDPURCHASE_ORDER = @CDORDER
							   AND SUPPLIER = @SUPPLIER;
							   
							SET @vProcessFinishedPurchaseOrdersCount = @vProcessFinishedPurchaseOrdersCount + 1;						
						END
						
						IF(@setQuarantineDate = 1)
						BEGIN
							UPDATE TFSCM_CLI_PURCHASE_ORDERS
							   SET QUARANTINE_DATE  = @quarantineDateToSet
							 WHERE CDPURCHASE_ORDER = @CDORDER
							   AND SUPPLIER         = @SUPPLIER;
						END
					END TRY
					BEGIN CATCH 
						SET @vErrorsFinishedPurchaseOrdersCount = @vErrorsFinishedPurchaseOrdersCount + 1;
						SET @ovaResult = '1';
					END CATCH
					
					SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;
					IF(@vCOMMIT_COUNT = 10)
					BEGIN 
						COMMIT;
						SET @vCOMMIT_COUNT = 0;
					END									
					
					FETCH NEXT FROM cCdPurchaseOrderTempCursor
					 INTO @CDORDER, @SUPPLIER, @PROMISED_DELIVERY_DATETIME, @NECESSITY_DATETIME, @CDCALENDAR,
						  @CDORDER_TYPE, @SKU, @CDDESTINATION, @CREATION_DATE_TIME, @PENDING_AMOUNT, @PRIORITY_OLD,
						  @PRIORITY_COLOR_OLD, @SHIPPING_TIME, @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE;
				END
				CLOSE cCdPurchaseOrderTempCursor;
				DEALLOCATE cCdPurchaseOrderTempCursor;
			 	
				FETCH NEXT FROM cCdLocationPurchaseTempCursor INTO @CDLOCATION;
			END
			CLOSE cCdLocationPurchaseTempCursor;
			DEALLOCATE cCdLocationPurchaseTempCursor;
		END
		
		SET @ovaMessage =  '<br>'+'(' + @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_SUCESSFUL_FINISHED+':' +  CAST ( @vProcessFinishedPurchaseOrdersCount AS varchar ) + ', '+ @vMSG_DATA_EXCHANGE_PURCHASE_ORDERS_ERRORS_FINISHED+':' + CAST ( @vErrorsFinishedPurchaseOrdersCount AS varchar ) + ')';
		SET @vTrace = 'End of FINISHED_PURCHASE_ORDERS ';
		--Procedure result
	    --PRINT	@vTrace			
	END TRY	
	BEGIN CATCH	
		IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderTempCursor')) IN (0,1))
			BEGIN
				CLOSE cCdPurchaseOrderTempCursor;  		
			END
			DEALLOCATE cCdPurchaseOrderTempCursor;  
		END	
	
		IF ((SELECT CURSOR_STATUS('global','cCdLocationPurchaseTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cCdLocationPurchaseTempCursor')) IN (0,1))
			BEGIN
				CLOSE cCdLocationPurchaseTempCursor;  		
			END
			DEALLOCATE cCdLocationPurchaseTempCursor;  
		END	
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = ''	
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[FINISHED_PURCHASE_ORDERS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
			
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[GENERATE_ADJUSTMENT_SUGGESTIONS_HISTORY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 21/03/2019
-- Description : Issue (8567):
--               When managing suggestions, if a buffer is included more than 
--               once, the History insert have to be fixed adding milliseconds
--               to the management date in order to avoid a duplicate key
-- Version     : 4.11.1
-- ---------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 31/01/2018
-- Description : * Rename REPLENISHMENT_COEFFICIENT by PROTECTION_FACTOR
-- Version     : 4.8.2
-- ---------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/03/2017
-- Description : Apply changes in order to update buffer custom columns   
--               properly.
-- ---------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 15/12/2014
-- Description:	Generate adjustment suggestion history from manual action.
-- ===========================================================================
CREATE PROCEDURE [dbo].[GENERATE_ADJUSTMENT_SUGGESTIONS_HISTORY]
	/* Input Parameters */
	@ivaManagedBy VARCHAR(50),
    @ivaLocation  VARCHAR(50),
    @ivaSku  VARCHAR(50),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT 
	-- WITH ENCRYPTION
AS
	
	--Message variables
	DECLARE @vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR AS NVARCHAR(MAX); 
	DECLARE @vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS AS NVARCHAR(MAX);
	DECLARE @vLanguage AS VARCHAR(2) = 'es'; 
	DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
	DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX);
	DECLARE @vDateManagement AS DATETIME  = GETDATE();
	
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		
		--PRINT 'entra a SP TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY'+@ivaCreateFromAction
		SELECT @vLanguage = PARAM_VALUE  
			FROM  TFSCM_COM_PARAMS 
			WHERE CDPARAM = 'DEFAULT_LANGUAGE' 	

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS', @vLanguage, '', '', '', 
			@vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS OUTPUT;	
		-- -------------------------------------------------------------------
 		-- CHECK FOR CUSTOM FIELDS
 		-- -------------------------------------------------------------------
 		DECLARE @parmDefinition AS NVARCHAR(MAX);
		DECLARE @vSqlTmp    AS VARCHAR(MAX) = ' SET ';
		DECLARE @vFromTmp   AS VARCHAR(MAX) = '';
		DECLARE @vColsTmp   AS VARCHAR(MAX) = ' FROM ( SELECT ';
		DECLARE @vSqlUpdate AS NVARCHAR(MAX) = '';
		 
		SELECT  @vSqlTmp  += C.CDCOLUMN + ' = t.'+ C.CDCOLUMN + ', ' , 
				@vColsTmp += C.CDCOLUMN + ', ',
				@vFromTmp  = '         FROM '+ T.TABLE_NAME + CHAR (13)+
				             '          WHERE CDLOCATION = @pvaLocation   ) t '			 
		  FROM TFSCM_COM_COL_TABLE C, TFSCM_COM_TABLES T
		 WHERE C.CDTABLE          = T.CDTABLE
			   AND C.IS_SYSTEM    = 'N' 
			   AND C.SAVE_HISTORY = 'Y'
			   AND C.CDTABLE      = 5;
			   
		IF (LTRIM(RTRIM(@vSqlTmp)) = 'SET')
		BEGIN
			SET @vSqlUpdate  = ' ';
		END
		ELSE
		BEGIN 
			SET @vSqlTmp  = LTRIM(RTRIM(@vSqlTmp));
			SET @vColsTmp = LTRIM(RTRIM(@vColsTmp)); 
			SET @vSqlTmp  = '   ' + SUBSTRING (@vSqlTmp , 1, LEN(@vSqlTmp)  - 1);
			SET @vColsTmp = '  '  + SUBSTRING (@vColsTmp, 1, LEN(@vColsTmp) - 1); 

			SET @vSqlTmp    += ' ' + CHAR(13) + @vColsTmp + ' ' + CHAR(13)+ '  '+ @vFromTmp
			SET @vSqlUpdate  = 'UPDATE TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY ' + CHAR(13)  				  
			SET @vSqlUpdate += @vSqlTmp  + CHAR(13) 
			SET @vSqlUpdate += ' WHERE SKU                = @pvaSku ' + CHAR(13)+
							   '   AND LOCATION           = @pvaLocation  ' + CHAR(13)+ 
							   '   AND DATE_MANAGEMENT = @pvaDateManagement ; '	
		END 
		DECLARE @vSqlTmpBuff AS VARCHAR(MAX) = ' SET ';
		DECLARE @vFromTmpBuff   AS VARCHAR(MAX) = '';
		DECLARE @vColsTmpBuff   AS VARCHAR(MAX) = ' FROM ( SELECT ';
		DECLARE @vSqlUpdateBuff AS VARCHAR(MAX) = '';
		 
		SELECT  @vSqlTmpBuff  += C.CDCOLUMN + ' = t.'+ C.CDCOLUMN + ', ' , 
				@vColsTmpBuff += C.CDCOLUMN + ', ',
				@vFromTmpBuff  = '         FROM '+ T.TABLE_NAME + CHAR(13)+ 
								 '          WHERE SKU                = @pvaSku ' + CHAR(13)+
								 '            AND LOCATION           = @pvaLocation ) t ' 		 
		  FROM TFSCM_COM_COL_TABLE C, TFSCM_COM_TABLES T 
		 WHERE C.IS_SYSTEM    = 'N' 
		   AND C.SAVE_HISTORY = 'Y'
		   AND C.CDTABLE      = T.CDTABLE
		   AND C.CDTABLE      = 11;		
		 
		IF (LTRIM(RTRIM(@vSqlTmpBuff)) = 'SET')
		BEGIN
			SET @vSqlTmpBuff  = ' ';
		END
		ELSE 
		BEGIN
			SET @vSqlTmpBuff  = LTRIM(RTRIM(@vSqlTmpBuff));
			SET @vColsTmpBuff = LTRIM(RTRIM(@vColsTmpBuff)); 

			SET @vSqlTmpBuff  = '   ' + SUBSTRING (@vSqlTmpBuff , 1, LEN(@vSqlTmpBuff)  - 1);
			SET @vColsTmpBuff = '  '  + SUBSTRING (@vColsTmpBuff, 1, LEN(@vColsTmpBuff) - 1);  

			SET @vSqlTmpBuff    += ' ' + CHAR(13) + @vColsTmpBuff + ' ' + CHAR(13)+ '  '+ @vFromTmpBuff;
			SET @vSqlUpdateBuff  = 'UPDATE TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY ' + CHAR(13);
			SET @vSqlUpdateBuff += @vSqlTmpBuff  + CHAR(13);
			SET @vSqlUpdateBuff += ' WHERE SKU                = @pvaSku ' + CHAR(13)+
								   '   AND LOCATION           = @pvaLocation  ' + CHAR(13)+ 
								   '   AND DATE_MANAGEMENT = @pvaDateManagement ; ';
		END

		IF (RTRIM(LTRIM(@vSqlUpdate)) <> '')
		BEGIN
			SET @vSqlUpdate += CHAR(13);
		END		
		SET @vSqlUpdate += @vSqlUpdateBuff;		
		
		SET @parmDefinition = N'@pvaSku VARCHAR(50), @pvaLocation VARCHAR(50), @pvaDateManagement DATETIME';
		IF (RTRIM(LTRIM(@vSqlUpdate)) = '') 
			SET @parmDefinition = ' '; 
			
		--PRINT 'entra a inert1 TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY'
		-- -----------------------------------------------------------------------------------
		-- TODO OHLO 20190321: Since v4.11.1, if there are events which manage the same 
		--                     sku-location at the same applying process, it is necessary to
		--                     check if the same sku-location-management_date already exists
		--                     and add 10 milliseconds to the management date to avoid a 
		--                     duplicate key error.
		-- -----------------------------------------------------------------------------------
		IF EXISTS (SELECT * 
					 FROM TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY
				    WHERE SKU             = @ivaSku 
					  AND LOCATION        = @ivaLocation 
					  AND DATE_MANAGEMENT = @vDateManagement)
		BEGIN
			--INSERT INTO [dbo].[LOG_TMP] ([CODE], [LOG_MESSAGE]) 
			--VALUES (NULL,  'It tried to insert ' +  @ivaSku +'@' + @ivaLocation + '@' + CONVERT(VARCHAR,@vDateManagement , 113)) 
			SET @vDateManagement = DATEADD(ms, 10, @vDateManagement);
			--INSERT INTO [dbo].[LOG_TMP] ([CODE], [LOG_MESSAGE]) 
			--VALUES (NULL,  'Now is going to insert ' +  @ivaSku +'@' + @ivaLocation + '@' + CONVERT(VARCHAR,@vDateManagement , 113)) 
		END
		INSERT INTO TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY
			(SKU, LOCATION, DATE_MANAGEMENT, FAMILY, LOCATION_TYPE,
			 ORIGIN_LOCATION, BUFFER, MINIMUM_BUFFER, LAST_TOTAL_OUTS_MAX_SUM, 
			 ADJUSTMENT_TYPE, PROTECTION_FACTOR,SUGGESTED_BUFFER, APPROVED_BUFFER,
			 ADJUSTMENT_ACTION,SUGGESTION_DATE,SUGGESTION_REJECTION_CAUSE,SUGGESTION_EXPIRATION_DATE,
			 SUGGESTION_ALERTS, MANAGED_BY)															
		SELECT @ivaSku,@ivaLocation, @vDateManagement, FAMILY, LOCATION_TYPE, ORIGIN_LOCATION,BUFFER,
			   MINIMUM_BUFFER,LAST_TOTAL_OUTS_MAX_SUM, ADJUSTMENT_TYPE, PROTECTION_FACTOR,
			   SUGGESTED_BUFFER, APPROVED_BUFFER,ADJUSTMENT_ACTION,SUGGESTION_DATE,
			   SUGGESTION_REJECTION_CAUSE,SUGGESTION_EXPIRATION_DATE,SUGGESTION_ALERTS,
			   @ivaManagedBy
		  FROM TFSCM_CLI_BUFFER
		 WHERE SKU = @ivaSku
		   AND LOCATION = @ivaLocation;
		   
		--PRINT '@vSqlUpdate: '+@vSqlUpdate	
		EXECUTE sp_executesql @vSqlUpdate, @parmDefinition,
				@pvaSku = @ivaSku, @pvaLocation = @ivaLocation, @pvaDateManagement = @vDateManagement;
		
		--Procedure result
		SET @ovaResult = '0';    
		SET @ovaMessage = @vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_SUCESS;
	END TRY 
	BEGIN CATCH 
		SET @ovaResult = '1';
		
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR', @vLanguage, '', '', '', 
			@vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR OUTPUT;
			
		SET @ovaMessage =  @vMSG_DATA_EXCHANGE_HISTORY_ADJUSTMENT_SUGG_ERROR
						+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
						+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
						+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS varchar)
						+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[GENERATE_ADJUSTMENT_SUGGESTIONS_HISTORY]')
						+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS varchar)
						+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[GENERATE_BUFFER_ADJUSTMENT_SUGGESTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Isaac Florez
-- Upgrade date: 20/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 11/11/2020
-- Description : Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				 BAA_OUT_CLASSIFICATION.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 03/06/2020
-- Description : Change the message type from Error (E) to Alert (A), when there's not enough 
--               data for calculating average zone.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 24/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--               * Change the name for the stored procedure SP_CALCULATE_AVERAGE_ZONE to
--				   USP_CALCULATE_AVERAGE_ZONE. 
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/10/2019
-- Description : * Add the output parameter Atypical Consumption Frequency in 
--				   USP_CALCULATE_OUTS_MAXIMUM_SUM
--				 * Add calculations for Projected Increments column
--               -----------------------------------------------------------------------------
--               * Remove from temporary table those records that don't have enough data, in 
--                 order to avoid them to be included in further calculations (Issue 2282).
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 20/09/2019
-- Description : Second index for TEMP_BUFFER_LIST
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 11/10/2018
-- Description : Change the way new buffer is being rounded
-- Version     : 4.9.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 07/09/2018
-- Description : Solving bug (7803):
--				 Use the proper message error for average zone calculation, 
--               when there's no enough data.
-- Version     : 4.9.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 01/08/2018
-- Description : Solving bug (7908):
--				 Adjustment Suggestions have to be accepted when the buffer
--               family has an Automatic Adjustment Mode.
-- Version     : 4.9.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 26/04/2018
-- Description : Order Suggestion Alerts when updating the buffer attributes
-- Version     : 4.8.5
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡ / Oscar Londoño
-- Upgrade date: 15/02/2018
-- Description : Refactoring and adding of TOP N Statement:
--               * Two cursors rewritten to set-based solution
--				 * Softening the amount of Adjustment Suggestions generated
-- Version     : 4.8.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 31/01/2018
-- Description : Rename REPLENISHMENT_COEFFICIENT by PROTECTION_FACTOR
-- Version     : 4.8.2
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 30/12/2017
-- Description : Index for TEMP_BUFFER_LIST
-- Version     : 4.8.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/05/2017
-- Description : Add validation when there is a reduction, but new buffer is 
--    			 equal to current buffer 
-- Version     : 4.6.2
-- -------------------------------------------------------------------------------------------
-- Author:		Oscar Londoño
-- Create date: 20/01/2015
-- Description:	Generate buffer adjustment suggestions from automatic or 
--              manual action 
-- ===========================================================================================
CREATE PROCEDURE [dbo].[GENERATE_BUFFER_ADJUSTMENT_SUGGESTIONS]
	/* Input Parameters */
    @IvaBufferDTO      BufferTblType READONLY,
    @IvaManagedBy      VARCHAR(50),
    @IvaManagementFrom VARCHAR (1),
    /* Output Parameters */
    @OvaResult         VARCHAR(1) OUTPUT,
    @OvaMessage        NVARCHAR(MAX) OUTPUT 
--WITH ENCRYPTION
AS	
	--Auxiliar variables
	DECLARE @ADJUSTMENT_ACTION_ACCEPT	VARCHAR(10) = 'ACCEPT';
	DECLARE @ADJUSTMENT_ACTION_REJECT	VARCHAR(10) = 'REJECT';
	DECLARE @ADJUSTMENT_ACTION_EXPIRE	VARCHAR(10) = 'EXPIRE';
	DECLARE @ADJUSTMENT_ACTION_ANALYZE	VARCHAR(10) = 'ANALYZE';
	DECLARE @ADJUSTMENT_ACTION_IGNORE	VARCHAR(10) = 'IGNORE';
	DECLARE @Sku						VARCHAR(50);
	DECLARE @Location					VARCHAR(50);
	DECLARE @FAMILY						VARCHAR(50);
    DECLARE @ManagementFromManual		VARCHAR(1) = 'M';
    DECLARE @ManagementFromAuto			VARCHAR(1) = 'A';
	DECLARE @UpdateMovements			DATE;
	DECLARE @CurDate					DATE;
	DECLARE @ReplenishmentTime			INT;
    DECLARE @RtAdjustmentType			VARCHAR(50);
	DECLARE @ProtectionFactor			NUMERIC(17,2);
	DECLARE @LowerProtectionFactor		NUMERIC(17,2);
	DECLARE @MiddleProtectionFactor		NUMERIC(17,2);
	DECLARE @UpperProtectionFactor		NUMERIC(17,2);
												  
	DECLARE @AverageZone				VARCHAR(50); 
	DECLARE @CdCause					VARCHAR(50);
	DECLARE @DelimiterForRecords		CHAR(1) = '|';
    DECLARE @DelimiterForPk				CHAR(1) = ';';
    DECLARE @IvaBufferList				NVARCHAR(MAX);
    DECLARE @OvaGBASResult				VARCHAR(1);
    DECLARE @OvaGBASMessage				NVARCHAR(MAX);
    DECLARE @OvaSgResult				VARCHAR(1);
    DECLARE @OvaSgMessage				NVARCHAR(MAX);
	DECLARE @NotificationMessage		NVARCHAR(MAX) = ''; 
	DECLARE @VNotificationBuffer		NVARCHAR(MAX) = ''; 

 	DECLARE @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT			VARCHAR(1) = 'E';
	DECLARE @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT_MS		VARCHAR(1) = 'M';
	DECLARE @ALERT_SUGGESTION_AFTER_PRIOR_REJECTED			VARCHAR(1) = 'R';
	DECLARE @ALERT_ATYPICAL_OUTPUTS_IN_SUGGESTION_RANGE		VARCHAR(1) = 'A';
	DECLARE @ALERT_SUGGESTED_BUFFER_SAME_MINIMUM			VARCHAR(1) = 'S';

	DECLARE @NumberOfErrors				 INT         = 0;
	DECLARE @NumberOfAlerts				 INT         = 0;
	DECLARE @AutoExpiredAmount           INT         = 0;
	DECLARE @AutoAcceptedAmount          INT         = 0;
	DECLARE @BufferManagedAmount         INT         = 0;
	DECLARE @RT_ADJUSTMENT_TYPE_INCREASE VARCHAR(10) = 'INCREASE';
	DECLARE @RT_ADJUSTMENT_TYPE_REDUCE   VARCHAR(10) = 'REDUCE';
	DECLARE @RT_ADJUSTMENT_TYPE_EMPTY    VARCHAR(10) = 'EMPTY';
	DECLARE @ADJUSTMENT_MODE_INACTIVE    VARCHAR(1)  = 'I';
	DECLARE @ADJUSTMENT_MODE_AUTO        VARCHAR(1)  = 'A';
	DECLARE @BUFFER_INACTIVE_NO          VARCHAR(1)  = '0';
	DECLARE @ADJUSTMENT_TYPE_EMPTY       VARCHAR(10) = 'EMPTY';
	DECLARE @OvaMaxSumResult		     VARCHAR(1);
	DECLARE @OvaMaxSumMessage            NVARCHAR(MAX);
	DECLARE @OvaAvgZoneResult            VARCHAR(1);
	DECLARE @OvaAvgZoneMessage           NVARCHAR(MAX);

	-- ---------------------------------------------------------------------------------------
	-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
	-- ---------------------------------------------------------------------------------------
	DECLARE @BAA_OUT_CLASSIFICATION_NORMAL	AS VARCHAR(2) = 'N'; 
	DECLARE @BAA_OUT_CLASSIFICATION_PENDING	AS VARCHAR(2) = 'P'; 
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		-- -----------------------------------------------------------------------------------
		-- MESSAGES
		-- -----------------------------------------------------------------------------------
		DECLARE @Language                             VARCHAR(2) = 'es';  
		DECLARE @CodeErrorResultMessages              VARCHAR(1); 
		DECLARE @MessageErrorResultMessages           NVARCHAR(MAX);
		DECLARE @MsgGenAdjustmentSuggestsError        NVARCHAR(MAX);
		DECLARE @MsgGenAdjustmentSuggestsSuccess      NVARCHAR(MAX); 
		
		DECLARE @MsgGenAdjustmentSuggestsNotification NVARCHAR(MAX);
		DECLARE @MsgAutoExpiredAmount                 NVARCHAR(MAX);
		DECLARE @MsgAutoAcceptedAmount                NVARCHAR(MAX);
		DECLARE @MsgManagedBufferAmount               NVARCHAR(MAX);
		DECLARE @MsgAdjustSuggestsErrors              NVARCHAR(MAX);
		DECLARE @MsgCalcAvgZoneUnexpectedError        NVARCHAR(MAX);
		DECLARE @MsgCalcMaxSumUnexpectedError         NVARCHAR(MAX);
		DECLARE @MsgManageBufferAdjustSuggestsError   NVARCHAR(MAX);
		DECLARE @MsgRecordsForBufferAnalysis          NVARCHAR(MAX);
		DECLARE @MsgCalcAvgZoneNoDataFoundAlert       NVARCHAR(MAX);
		DECLARE @MsgAdjustSuggestsAlerts              NVARCHAR(MAX);

		
		SET @Language = 'es' 
		SET @MsgGenAdjustmentSuggestsError        = 'GEN_ADJUSTMENT_SUGGESTS_ERROR';
		SET @MsgGenAdjustmentSuggestsSuccess      = 'GEN_ADJUSTMENT_SUGGESTS_SUCCESS';
		SET @MsgGenAdjustmentSuggestsNotification = 'GEN_ADJUSTMENT_SUGGESTS_NOTIFICATION';
		SET @MsgAutoExpiredAmount                 = 'AUTO_EXPIRED_AMOUNT';
		SET @MsgAutoAcceptedAmount                = 'AUTO_EXPIRED_AMOUNT';
		SET @MsgManagedBufferAmount               = 'MANAGED_BUFFER_AMOUNT';
		SET @MsgAdjustSuggestsErrors              = 'ADJUST_SUGGESTS_ERRORS';
		SET @MsgCalcAvgZoneUnexpectedError        = 'CALC_AVG_ZONE_UNEXPECTED_ERROR';
		SET @MsgCalcMaxSumUnexpectedError         = 'CALC_MAX_SUM_UNEXPECTED_ERROR';
		SET @MsgManageBufferAdjustSuggestsError   = 'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR';
		SET @MsgRecordsForBufferAnalysis          = 'RECORDS_FOR_BUFFER_ANALYSIS_MESSAGE';
		SET @MsgCalcAvgZoneNoDataFoundAlert       = 'CALC_AVG_ZONE_NO_DATA_FOUND_ALERT';

		/* OHLO 20180215 Softening the amount of Adjustment Suggestions generated */
		/* Job type 6 --> 'Recalculate Buffers' */
		DECLARE @JobType               NUMERIC(2) = 6;
		DECLARE @IsActive              VARCHAR(1) = 'Y';
		DECLARE @BufferCount           INT        = 1;
		DECLARE @BufferAnalysisAmount  INT        = 0;
		DECLARE @SqlStatement          NVARCHAR(MAX); 

		SELECT @Language = PARAM_VALUE
		  FROM TFSCM_COM_PARAMS
		 WHERE CDCOMPONENT = 6
		   AND CDPARAM     = 'DEFAULT_LANGUAGE';

		EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
			'CALC_AVG_ZONE_UNEXPECTED_ERROR', @Language, '', '', '', @MsgCalcAvgZoneUnexpectedError OUTPUT;		
		
		EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
			'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR', @Language, '', '', '', @MsgManageBufferAdjustSuggestsError OUTPUT;

		EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
			'CALC_AVG_ZONE_NO_DATA_FOUND_ALERT', @Language, '', '', '', @MsgCalcAvgZoneNoDataFoundAlert OUTPUT;

		SET @CdCause = (SELECT CDCAUSE FROM TFSCM_CLI_CAUSES WHERE DSCAUSE = 'cause_expired_suggestion');					

	    -- -----------------------------------------------------------------------------------
		-- GENERATE ADJUSTMENT SUGGESTIONS
		-- -----------------------------------------------------------------------------------
		-- If it is an automatic process
		IF (@IvaManagementFrom = @ManagementFromAuto)
		BEGIN
			--PRINT '-- ==========================================================================='
			--PRINT 'Se llama desde una acción automática'
			--PRINT '-- ==========================================================================='
			SET @IvaBufferList = '';
			-- -------------------------------------------------------------------------------
			-- OHLO 20180215 Softening the amount of Adjustment Suggestions generated 
			-- -------------------------------------------------------------------------------
			--  Get the number of days for weekly Job */   
			SELECT @BufferCount = CASE COUNT(*) WHEN  0 THEN 1 ELSE COUNT(*) END 
			  FROM STRING_SPLIT((SELECT DISTINCT TOP 1 CRON_EXP_DAY_OF_WEEK 
								FROM [dbo].[TFSCM_COM_JOBS] 
							   WHERE (JOB_TYPE              = @JobType)
								 AND (ENABLE                = @IsActive)
								 AND (CRON_EXP_DAY_OF_WEEK IS NOT NULL AND CRON_EXP_DAY_OF_WEEK != '?')), ',');
					 
			SELECT @BufferAnalysisAmount =
						CASE WHEN (CAST(COUNT(*) AS NUMERIC(17, 5)) % CAST(@BufferCount AS NUMERIC(17, 5))) > 0 THEN
							/* If there is a remainder, then get the next integer */
							ROUND((CAST(COUNT(*) AS NUMERIC(17, 5)) / CAST(@BufferCount AS NUMERIC(17, 5))) + 0.5, 0)
						ELSE 
							ROUND(CAST(COUNT(*) AS NUMERIC(17, 5)) / CAST(@BufferCount AS NUMERIC(17, 5)), 0)
						END
			  FROM TFSCM_CLI_BUFFER a
				   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY fa ON (fa.CDBUFFER_FAMILY = a.FAMILY) 
				   LEFT OUTER JOIN TFSCM_CLI_UNITS udm ON (udm.CDUNIT = a.CDUNIT )
			 WHERE fa.BUFFER_ADJUSTMENT_MODE <> @ADJUSTMENT_MODE_INACTIVE
			   AND a.INACTIVE                 = @BUFFER_INACTIVE_NO
			   AND a.BUFFER                   > 0; 

			-- -------------------------------------------------------------------------------
			-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
			--                Movements column
			-- -------------------------------------------------------------------------------
			SET @SqlStatement = ''
				+ ' SELECT * '
				+ '   INTO TEMP_BUFFER_LIST '
				+ '   FROM (SELECT TOP ' + CAST(@BufferAnalysisAmount AS VARCHAR(10)) + ' a.*, '
				+ '                fa.TIME_BETWEEN_BUFFER_RECALCULATIONS FA_TIME_BETWEEN_BUFFER_RECALCULATIONS, '
				+ '                fa.BUFFER_DECREASE_THRESHOLD          FA_BUFFER_DECREASE_THRESHOLD, '
				+ '                fa.BUFFER_INCREASE_THRESHOLD          FA_BUFFER_INCREASE_THRESHOLD, '
				+ '                fa.MOVING_SUMS_FOR_RECALCULATIONS     FA_MOVING_SUMS_FOR_RECALCULATIONS, '
				+ '                fa.REPLENISHMENT_ROUNDING_MODE        FA_REPLENISHMENT_ROUNDING_MODE, '
				+ '                fa.LOWER_PROTECTION_FACTOR            FA_LOWER_PROTECTION_FACTOR, '
				+ '                fa.MIDDLE_PROTECTION_FACTOR           FA_MIDDLE_PROTECTION_FACTOR, '
				+ '                fa.UPPER_PROTECTION_FACTOR            FA_UPPER_PROTECTION_FACTOR, '
				+ '                udm.INVENTORY_ACCURACY                UDM_INVENTORY_ACCURACY, '
				+ '                dbo.UFN_GET_AVERAGE_ZONE(a.UPDATE_MOVEMENTS, a.REPLENISHMENT_TIME, a.SKU, a.LOCATION) as AVGZONE '
				+ '           FROM TFSCM_CLI_BUFFER a '
				+ '                LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY fa ON (fa.CDBUFFER_FAMILY = a.FAMILY) '
				+ '                LEFT OUTER JOIN TFSCM_CLI_UNITS udm        ON (udm.CDUNIT = a.CDUNIT) '	   
				+ '          WHERE fa.BUFFER_ADJUSTMENT_MODE <> @ADJUSTMENT_MODE_INACTIVE '
				+ '            AND a.INACTIVE          = @BUFFER_INACTIVE_NO '
				+ '            AND a.BUFFER            > 0 '
				+ '            AND a.UPDATE_MOVEMENTS >= a.NEXT_BUFFER_ANALYSIS '
				+ '          ORDER BY a.NEXT_BUFFER_ANALYSIS ASC '
				+ '      ) DATA_SET_AUTO ';

            -- INSERT INTO [dbo].[LOG_TMP]  ([LOG_MESSAGE]) VALUES (@SqlStatement);

            EXEC sys.sp_executesql @SqlStatement, 
			     N'@BUFFER_INACTIVE_NO VARCHAR(1), @ADJUSTMENT_MODE_INACTIVE VARCHAR(1)', 
				 @BUFFER_INACTIVE_NO, @ADJUSTMENT_MODE_INACTIVE;

			CREATE INDEX IDX_TEMP_BUFFER_LIST ON TEMP_BUFFER_LIST (SKU,LOCATION);

			SET @CurDate = GETDATE();

			-- -------------------------------------------------------------------------------
			-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
			--                Movements column
			-- -------------------------------------------------------------------------------
			INSERT INTO TFSCM_COM_LOG (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
			SELECT @MsgCalcAvgZoneNoDataFoundAlert, NULL, 'A', @CurDate, 
				   TMP.SKU, TMP.LOCATION, dbo.UFN_GET_AVERAGE_ZONE(TMP.UPDATE_MOVEMENTS, TMP.REPLENISHMENT_TIME, TMP.SKU, TMP.LOCATION), NULL, 'AVERAGE_ZONE', NULL, TMP.UPDATE_MOVEMENTS
			  FROM TEMP_BUFFER_LIST TMP
		     WHERE TMP.AVGZONE NOT IN ('RED','YELLOW','GREEN','CYAN');

			-- -------------------------------------------------------------------------------
			-- OHLO 20191211: Since v4.14.0, remove from temporary table those records that
			--                don't have enough data, in order to avoid them to be included
			--                in further calculations.
			-- -------------------------------------------------------------------------------
			DELETE FROM TEMP_BUFFER_LIST 
		     WHERE AVGZONE NOT IN ('RED','YELLOW','GREEN','CYAN');
			-- -------------------------------------------------------------------------------
			 
			SET @NumberOfAlerts = @NumberOfAlerts 
								+ (SELECT COUNT(*) 
								     FROM TFSCM_COM_LOG 
									WHERE LOG_TIME = @CurDate 
								      AND DSLOG    = @MsgCalcAvgZoneNoDataFoundAlert);

			UPDATE BUF
			   SET BUF.PROTECTION_FACTOR = CASE AVGZONE
										     WHEN 'RED'     THEN FA_UPPER_PROTECTION_FACTOR
										     WHEN 'YELLOW'  THEN FA_MIDDLE_PROTECTION_FACTOR
										     ELSE FA_LOWER_PROTECTION_FACTOR
										   END,
				   BUF.RT_ADJUSTMENT_TYPE = CASE AVGZONE
										      WHEN 'RED'    THEN 
											    CASE ISNULL(TMP.RT_ADJUSTMENT_TYPE, @RT_ADJUSTMENT_TYPE_EMPTY) 
											    WHEN @RT_ADJUSTMENT_TYPE_REDUCE THEN @RT_ADJUSTMENT_TYPE_EMPTY 
											    ELSE ISNULL(TMP.RT_ADJUSTMENT_TYPE, @RT_ADJUSTMENT_TYPE_EMPTY)
												END
										      WHEN 'YELLOW' THEN @RT_ADJUSTMENT_TYPE_EMPTY
										      ELSE 
											    CASE ISNULL(TMP.RT_ADJUSTMENT_TYPE, @RT_ADJUSTMENT_TYPE_EMPTY)
												  WHEN @RT_ADJUSTMENT_TYPE_INCREASE THEN @RT_ADJUSTMENT_TYPE_EMPTY 
												  ELSE ISNULL(TMP.RT_ADJUSTMENT_TYPE, @RT_ADJUSTMENT_TYPE_EMPTY) 
											    END 
										    END
              FROM TFSCM_CLI_BUFFER BUF
				   INNER JOIN TEMP_BUFFER_LIST TMP ON BUF.SKU = TMP.SKU AND BUF.LOCATION = TMP.LOCATION
		     WHERE AVGZONE IN ('RED','YELLOW','GREEN','CYAN');

			UPDATE TMP
			   SET TMP.PROTECTION_FACTOR = BUF.PROTECTION_FACTOR,
				   TMP.RT_ADJUSTMENT_TYPE = BUF.RT_ADJUSTMENT_TYPE
			  FROM TEMP_BUFFER_LIST TMP 
				   INNER JOIN TFSCM_CLI_BUFFER BUF ON BUF.SKU = TMP.SKU AND BUF.LOCATION = TMP.LOCATION;

 			SET @IvaBufferList = '';

			-- -------------------------------------------------------------------------------
			-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
			--                Movements column
			-- -------------------------------------------------------------------------------
			UPDATE TMP
			   SET TMP.ADJUSTMENT_TYPE            = @ADJUSTMENT_TYPE_EMPTY,
			       TMP.SUGGESTED_BUFFER           = NULL,
			       TMP.APPROVED_BUFFER            = NULL,
			       TMP.ADJUSTMENT_ACTION          = @ADJUSTMENT_ACTION_IGNORE,
			       TMP.SUGGESTION_DATE            = NULL,
			       TMP.SUGGESTION_REJECTION_CAUSE = NULL,
			       TMP.SUGGESTION_EXPIRATION_DATE = NULL,
			       TMP.SUGGESTION_ALERTS          = NULL,
			       @AutoExpiredAmount             = @AutoExpiredAmount + 1,
			       @IvaBufferList                 = @IvaBufferList + TMP.SKU + @DelimiterForPk + TMP.LOCATION + @DelimiterForRecords
			  FROM TEMP_BUFFER_LIST TMP 
			 INNER JOIN TFSCM_CLI_BUFFER a ON a.SKU = TMP.SKU AND a.LOCATION = TMP.LOCATION
			 WHERE a.ADJUSTMENT_ACTION = @ADJUSTMENT_ACTION_ANALYZE 
			   AND a.UPDATE_MOVEMENTS >= a.NEXT_BUFFER_ANALYSIS;

			-- SET @CdCause = 'cause_expired_suggestion';

			-- Expire any prior non-managed suggestion 
			UPDATE a
			   SET a.ADJUSTMENT_ACTION          = @ADJUSTMENT_ACTION_EXPIRE,
			       a.SUGGESTION_REJECTION_CAUSE = @CdCause,
				   a.SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP
			  FROM TEMP_BUFFER_LIST TMP 
			       INNER JOIN TFSCM_CLI_BUFFER a ON a.SKU = TMP.SKU AND a.LOCATION = TMP.LOCATION
			 WHERE a.ADJUSTMENT_ACTION = @ADJUSTMENT_ACTION_ANALYZE 
			   AND a.UPDATE_MOVEMENTS >= a.NEXT_BUFFER_ANALYSIS;

			IF (@IvaBufferList <> '')
			BEGIN			
				SET @IvaBufferList = SUBSTRING(@IvaBufferList, 1, LEN(@IvaBufferList) - 1);
				
				EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @IvaBufferList, @IvaManagedBy, @IvaManagementFrom,
							                              @OvaGBASResult OUTPUT, @OvaGBASMessage OUTPUT;	
				SET @OvaResult  = @OvaGBASResult;
				SET @OvaMessage = @OvaGBASMessage;

				IF (@OvaResult = '1')
				BEGIN
					INSERT INTO TFSCM_COM_LOG (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@MsgManageBufferAdjustSuggestsError + '<br><br>' + @OvaMessage, NULL, 'E', GETDATE(), NULL, NULL, @IvaBufferList, NULL, 'MANAGE_EXPIRED_BAS', NULL, GETDATE());

					SET @NumberOfErrors = @NumberOfErrors + 1;
				END
				--PRINT '	Se expiran y se gestionan los ajustes para '+ @IvaBufferList  
			END
		END
		ELSE IF (@IvaManagementFrom = @ManagementFromManual)
		BEGIN 
			--PRINT '-- ==========================================================================='
			--PRINT 'Se llama desde una acción Manual '
			--PRINT '-- ==========================================================================='
			SET @SqlStatement = ''
				+ ' SELECT * '
				+ '   INTO TEMP_BUFFER_LIST ' 
				+ '   FROM (SELECT a.*, '
				+ '                fa.TIME_BETWEEN_BUFFER_RECALCULATIONS FA_TIME_BETWEEN_BUFFER_RECALCULATIONS, '
				+ '                fa.BUFFER_DECREASE_THRESHOLD          FA_BUFFER_DECREASE_THRESHOLD, '
				+ '                fa.BUFFER_INCREASE_THRESHOLD          FA_BUFFER_INCREASE_THRESHOLD, '
				+ '                fa.MOVING_SUMS_FOR_RECALCULATIONS     FA_MOVING_SUMS_FOR_RECALCULATIONS, '
				+ '                fa.REPLENISHMENT_ROUNDING_MODE        FA_REPLENISHMENT_ROUNDING_MODE, '
				+ '                fa.LOWER_PROTECTION_FACTOR            FA_LOWER_PROTECTION_FACTOR, '
				+ '                fa.MIDDLE_PROTECTION_FACTOR           FA_MIDDLE_PROTECTION_FACTOR, '
				+ '                fa.UPPER_PROTECTION_FACTOR            FA_UPPER_PROTECTION_FACTOR, '
				+ '                udm.INVENTORY_ACCURACY                UDM_INVENTORY_ACCURACY '
				+ '           FROM @LinBufferDTO b, TFSCM_CLI_BUFFER a '
				+ '                LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY fa ON (fa.CDBUFFER_FAMILY = a.FAMILY) '
				+ '                LEFT OUTER JOIN TFSCM_CLI_UNITS udm        ON (udm.CDUNIT = a.CDUNIT ) '
				+ '  WHERE a.SKU      = b.SKU '
				+ '    AND a.LOCATION = b.LOCATION ) DATA_SET_MANUAL ';

			EXEC sys.sp_executesql @SqlStatement, N'@LinBufferDTO AS BufferTblType READONLY', 
			  @LinBufferDTO = @IvaBufferDTO ;
			  
			CREATE INDEX IDX_TEMP_BUFFER_LIST ON TEMP_BUFFER_LIST (SKU,LOCATION);															
		END

		DECLARE @CurrentFamily                VARCHAR(50);
		DECLARE @NextFamily                   VARCHAR(50);
		DECLARE @NextBufferAnalysis           DATETIME;
		DECLARE @LastTotalOutsMaxSum          NUMERIC(17,5);
		DECLARE @LastColorChangeDate          DATE;
		DECLARE @AdjustmentType               VARCHAR(50);
		DECLARE @LastIncreaseSuggestionDate   DATE;
		DECLARE @LastReductionSuggestionDate  DATE;
		DECLARE @Buffer                       NUMERIC(17,5);
		DECLARE @MinimumBuffer                NUMERIC(17,5);
		DECLARE @MinimumReplenishment         NUMERIC(17,5);
		DECLARE @SuggestionAlerts             NVARCHAR(MAX);
		DECLARE @SuggestedBuffer              NUMERIC(17,5);
		DECLARE @ApprovedBuffer               NUMERIC(17,5);
		DECLARE @AdjustmentAction             VARCHAR(50);
		DECLARE @SuggestionDate               DATETIME;
		DECLARE @BufferInitialDate            DATE;
											  
		DECLARE @Range		                  NUMERIC(10,0);
		DECLARE @DecreaseThreshold            NUMERIC(5,2);
		DECLARE @IncreaseThreshold            NUMERIC(5,2);
		DECLARE @MovingSumsAmount             NUMERIC(10,0);
		DECLARE @RoundingMode                 VARCHAR(3);
		DECLARE @Accuracy                     NUMERIC(3);
											  
		DECLARE @OutputMaxSum                 NUMERIC(16,2);
		DECLARE @AtypicalOutputsAmount        INT;
		DECLARE @AtypicalConsumptionFrequency INT;
		DECLARE @ProjectedIncrements          NUMERIC(12,2);
	

		DECLARE @TRSuggestionAnalysisDays     INT;
		DECLARE @TRSuggestionAnalysisDate     DATE;
											  
		DECLARE @MinimumUnit                  NUMERIC(17,5);
		DECLARE @NewBuffer                    NUMERIC(17,5);
		DECLARE @Threshold                    NUMERIC(17,5); 
		DECLARE @NotifyNewSuggestion          VARCHAR(1) = 'N';
		 
		--PRINT '-- ---------------------------------------------------------------------------'
		--PRINT 'Inician los cálculos comunes  '
		SET @CurrentFamily = '';

		-- -----------------------------------------------------------------------------------
		-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
		--                Movements column
		-- -----------------------------------------------------------------------------------
		DECLARE cur_bufferListTmp CURSOR FAST_FORWARD FOR
		 SELECT SKU,                               LOCATION,                              FAMILY,                       UPDATE_MOVEMENTS,
			    REPLENISHMENT_TIME,                RT_ADJUSTMENT_TYPE,                    PROTECTION_FACTOR,            NEXT_BUFFER_ANALYSIS,
			    LAST_TOTAL_OUTS_MAX_SUM,           LAST_COLOR_CHANGE_DATE,                ADJUSTMENT_TYPE,              LAST_INCREASE_SUGGESTION_DATE,
			    BUFFER,                            MINIMUM_BUFFER,                        MINIMUM_REPLENISHMENT,        SUGGESTION_ALERTS,
			    BUFFER_INITIAL_DATE,               SUGGESTED_BUFFER,                      APPROVED_BUFFER,              ADJUSTMENT_ACTION,
			    SUGGESTION_DATE,                   FA_TIME_BETWEEN_BUFFER_RECALCULATIONS, FA_BUFFER_DECREASE_THRESHOLD, FA_BUFFER_INCREASE_THRESHOLD,
			    FA_MOVING_SUMS_FOR_RECALCULATIONS, FA_REPLENISHMENT_ROUNDING_MODE,        UDM_INVENTORY_ACCURACY,       FA_LOWER_PROTECTION_FACTOR,
			    FA_MIDDLE_PROTECTION_FACTOR,       FA_UPPER_PROTECTION_FACTOR
           FROM TEMP_BUFFER_LIST
		  ORDER BY FAMILY, SKU, LOCATION;

		OPEN cur_bufferListTmp;
			
		FETCH NEXT FROM cur_bufferListTmp 
		 INTO @Sku, @Location, @NextFamily, @UpdateMovements,            @ReplenishmentTime,      @RtAdjustmentType,
			  @ProtectionFactor,            @NextBufferAnalysis,         @LastTotalOutsMaxSum,    @LastColorChangeDate,
			  @AdjustmentType,              @LastIncreaseSuggestionDate, @Buffer,                 @MinimumBuffer,
			  @MinimumReplenishment,        @SuggestionAlerts,           @BufferInitialDate,      @SuggestedBuffer,
			  @ApprovedBuffer,              @AdjustmentAction,           @SuggestionDate,         @Range,
			  @DecreaseThreshold,           @IncreaseThreshold,          @MovingSumsAmount,       @RoundingMode,
			  @Accuracy, 					@LowerProtectionFactor,      @MiddleProtectionFactor, @UpperProtectionFactor;

		WHILE (@@FETCH_STATUS = 0)
		BEGIN	 
			IF (@NextFamily <> @CurrentFamily )
			BEGIN		
				SET @CurrentFamily = @NextFamily;
				--PRINT '-- ---------------------------------------------------------------------------'
				--PRINT 'FAMILIA  ' + @CurrentFamily
				--PRINT '-- ---------------------------------------------------------------------------' 
			END

			SET @OutputMaxSum          = 0;
			SET @AtypicalOutputsAmount = 0;
			SET @Threshold             = 0;
			SET @NewBuffer             = 0;
			SET @ApprovedBuffer        = 0;
			SET @SuggestedBuffer       = 0;
			SET @SuggestionAlerts      = ISNULL(@SuggestionAlerts, ''); 
			SET @ProjectedIncrements   = NULL;
			SET @AtypicalConsumptionFrequency = NULL;

			IF (@IvaManagementFrom = @ManagementFromAuto)
			BEGIN
				SET @NextBufferAnalysis = DATEADD(DAY, @Range, @UpdateMovements);
			END
			--PRINT '	Próximo analisis:            ' + CAST (@NextBufferAnalysis AS VARCHAR)
			--PRINT '	El coeficiente es:           ' + ISNULL(CAST(@ProtectionFactor AS VARCHAR), 'Nulo')
			--PRINT ''
			--PRINT '	Calcula max suma para:       ' + @Sku + '@'+ @Location 
			--PRINT '		Fecha de Actualización:      ' + CAST(@UpdateMovements  AS VARCHAR) 
			--PRINT '		Tiempo de reabastecimiento:  ' + CAST(@ReplenishmentTime AS VARCHAR)
			--PRINT '		Cantidad de sumas móviles:   ' + CAST(@MovingSumsAmount AS VARCHAR)

			-- ---------------------------------------------------------------------------
			-- Since v4.14.0, Add the output parameter Atypical Consumption Frequency
			-- ---------------------------------------------------------------------------
			EXEC USP_CALCULATE_OUTS_MAXIMUM_SUM
					@UpdateMovements,  
					@MovingSumsAmount,
					@ReplenishmentTime,
					@Sku,
					@Location,
					@OutputMaxSum OUTPUT,
					@AtypicalOutputsAmount OUTPUT,
					@AtypicalConsumptionFrequency OUTPUT,
					@OvaMaxSumResult OUTPUT,
					@OvaMaxSumMessage OUTPUT;
					
			SET @OvaResult  = @OvaMaxSumResult;	
			SET @OvaMessage = @OvaMaxSumMessage;	
					    
			IF (@OvaResult = '1')
			BEGIN
				EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
					'CALC_MAX_SUM_UNEXPECTED_ERROR', @Language, '', '', '', @MsgCalcMaxSumUnexpectedError OUTPUT;

				INSERT INTO TFSCM_COM_LOG (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MsgCalcMaxSumUnexpectedError + '<br><br>' + @OvaMessage, NULL, 'E', GETDATE(), NULL, NULL, NULL, NULL, 'OUTS_MAXIMUM_SUM', NULL, GETDATE());

				SET @NumberOfErrors = @NumberOfErrors + 1;

				FETCH NEXT FROM cur_bufferListTmp 
				 INTO @Sku, @Location, @NextFamily, @UpdateMovements,            @ReplenishmentTime,      @RtAdjustmentType,
					  @ProtectionFactor,            @NextBufferAnalysis,         @LastTotalOutsMaxSum,    @LastColorChangeDate,
					  @AdjustmentType,              @LastIncreaseSuggestionDate, @Buffer,                 @MinimumBuffer,
					  @MinimumReplenishment,        @SuggestionAlerts,           @BufferInitialDate,      @SuggestedBuffer,
					  @ApprovedBuffer,              @AdjustmentAction,           @SuggestionDate,         @Range,
					  @DecreaseThreshold,           @IncreaseThreshold,          @MovingSumsAmount,       @RoundingMode,  
					  @Accuracy, 					@LowerProtectionFactor,      @MiddleProtectionFactor, @UpperProtectionFactor;
				CONTINUE; 
			END
			SET @LastTotalOutsMaxSum = @OutputMaxSum;
		         
			IF (@OutputMaxSum > 0)
			BEGIN		
				SET @NewBuffer   = @OutputMaxSum * @ProtectionFactor;
				SET @MinimumUnit = 1.0 / POWER(10 , @Accuracy);		

				-- ---------------------------------------------------------------------------
				-- Since v4.14.0, Add calculations for Projected Increments column
				-- ---------------------------------------------------------------------------
				IF (@NewBuffer > @Buffer)
				BEGIN
					SET @ProjectedIncrements = LOG10(@NewBuffer / @Buffer) / LOG10(1 + (@IncreaseThreshold / 100));
				END
				ELSE
				BEGIN
					SET @ProjectedIncrements = 0;
				END			
				-- ---------------------------------------------------------------------------
				
				--PRINT '		La suma maxima es:           '+ CAST (@OutputMaxSum AS VARCHAR)
				--PRINT ''
				--PRINT '	Salidas atipicas:            '+ CAST (@AtypicalOutputsAmount AS VARCHAR)
				--PRINT '	Anterior Buffer:             '+ CAST(@Buffer AS VARCHAR)
				--PRINT '	Nuevo Buffer:                '+ CAST(@NewBuffer AS VARCHAR)
				--PRINT '	Pecision:                    '+ CAST(@Accuracy AS VARCHAR)
				--PRINT '	Unidad minima:               '+CAST(@MinimumUnit AS VARCHAR) 
				--PRINT '	Umbral de reduccion:         '+ CAST(@DecreaseThreshold  AS VARCHAR)
				--PRINT '	Umbral de aumento:           '+ CAST(@IncreaseThreshold  AS VARCHAR)
				IF ( @NewBuffer <= ( @Buffer * ( 1 - (@DecreaseThreshold / 100)))) 
				BEGIN
					SET @AdjustmentType = @RT_ADJUSTMENT_TYPE_REDUCE;
					--PRINT '		Debe reducir '
					-- OJO APLICA EN LA SIGUIENTE FASE  *************
					-- SET @LastReductionSuggestionDate = @UpdateMovements;
					IF ( @Buffer = ( @MinimumUnit * 2 ))
					BEGIN
						-- ---------------------------------------------------
						-- OHLO 201705230900: Changes for v4.6.2
						-- ---------------------------------------------------
						-- SET @NewBuffer = @MinimumUnit; --> Wrong  
                        -- It is necessary to choose the maximum value, between Buffer and Minimum Buffer 
						SET @NewBuffer = dbo.GET_MAXIMUM_OF (@MinimumBuffer, @MinimumUnit, -9999, -9999);
						
						-- If new buffer is equal to current buffer, then show the alert.
						IF (@NewBuffer = @Buffer) 
						BEGIN
							IF (CHARINDEX(@SuggestionAlerts, @ALERT_SUGGESTED_BUFFER_SAME_MINIMUM)  = 0)
							BEGIN
								SET @SuggestionAlerts = @SuggestionAlerts + @ALERT_SUGGESTED_BUFFER_SAME_MINIMUM;
							END 
						END
						--PRINT '			Como el buffer es igual a dos veces la mínima unidad, se reduce a '
						--    + CAST(@NewBuffer AS VARCHAR)
					END
					ELSE
					BEGIN
						--PRINT '			El umbra se reduce a:    '+ CAST(@NewBuffer AS VARCHAR)
						SET @Threshold =  (@DecreaseThreshold / 100) * (-1);
					END
				END 
				ELSE IF ( @NewBuffer >= (@Buffer * ( 1 + (@IncreaseThreshold / 100)))) 
				BEGIN
					--PRINT '		Debe aumentar'
					SET @AdjustmentType             = @RT_ADJUSTMENT_TYPE_INCREASE;
					SET @LastIncreaseSuggestionDate = @UpdateMovements; 

					IF ( @Buffer = @MinimumUnit ) 
					BEGIN				
						SET @NewBuffer = @MinimumUnit * 2;
						--PRINT '			Como el buffer es igual a la mínima unidad, se incrementa a '+ CAST(@NewBuffer AS VARCHAR)
					END
					ELSE
					BEGIN
						SET @Threshold = (@IncreaseThreshold / 100);
						--PRINT '			El umbra se incrementa a:    '+ CAST(@NewBuffer AS VARCHAR)
					END
				END
				ELSE  
				BEGIN
					--PRINT '	Nuevo buffer:                0'
					SET @NewBuffer = 0;
				END
				--PRINT '	Nuevo Umbral:                ' + CAST(@Threshold AS VARCHAR)
				IF (@Threshold <> 0)
				BEGIN  
					-- Since v4.9.4, fix new buffer rounding; 
					SET @NewBuffer = ROUND(@Buffer * (1 + @Threshold), @Accuracy);
					
					IF (@NewBuffer = @Buffer)
					BEGIN
						IF (@Threshold < 0)
						BEGIN
							SET @NewBuffer = @Buffer - @MinimumUnit;
						END
						ELSE IF (@Threshold > 0)
						BEGIN
							SET @NewBuffer = @Buffer + @MinimumUnit;
						END
					END

					-- IF Rounding Mode is equal to Minimize Stock (MS)
					IF (@RoundingMode = 'MS') 
					BEGIN
						--PRINT '		Rounding Mode is equal to Minimize Stock '
						SET @NewBuffer = dbo.GET_MAXIMUM_OF (@MinimumBuffer, @MinimumUnit, @MinimumReplenishment, @NewBuffer);
						--PRINT '		Entre ' + CAST(@MinimumBuffer AS VARCHAR)+ ', ' +
						--	  CAST(@MinimumUnit AS VARCHAR) + ', ' +
						--	  CAST(@MinimumReplenishment AS VARCHAR)+ ', ' + 
						--	  CAST(ROUND(@Buffer *  @Threshold,  @Accuracy) AS VARCHAR) + ', '+
						--	  'el máximo es:  ' + CAST(@NewBuffer AS VARCHAR)

						IF (@NewBuffer = @Buffer) 
						BEGIN
							IF (CHARINDEX(@SuggestionAlerts, @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT_MS)  = 0)
							BEGIN
								SET @SuggestionAlerts = @SuggestionAlerts + @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT_MS ;
							END 
						END
					END
					ELSE
					BEGIN
						SET @NewBuffer = dbo.GET_MAXIMUM_OF (@MinimumBuffer, @MinimumUnit, @NewBuffer,  0)
						--PRINT '		Entre ' + CAST(@MinimumBuffer AS VARCHAR)   + ', ' +
						--	  CAST(@MinimumUnit AS VARCHAR) + ', ' +
						--	  CAST(ROUND(@Buffer *  @Threshold,  @Accuracy) AS VARCHAR) + ', '+
						--	  'el máximo es:  ' + CAST( @NewBuffer AS VARCHAR)

						IF (@NewBuffer = @Buffer)
						BEGIN
							IF (CHARINDEX(@SuggestionAlerts, @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT)  = 0)
							BEGIN
								SET @SuggestionAlerts = @SuggestionAlerts +  @ALERT_SUGGESTED_BUFFER_EQUAL_CURRENT;
							END
						END
					END 
				END
				
				-- If the new buffer is not 0, then update the data
				IF (@NewBuffer <> 0)
				BEGIN
					--PRINT '		Se configuran las sugerencias de ajustes'
					SET @SuggestedBuffer  = @NewBuffer;
					SET @ApprovedBuffer   = @NewBuffer
					SET @AdjustmentAction = @ADJUSTMENT_ACTION_ANALYZE;
					SET @SuggestionDate   = @UpdateMovements;
					
					-- if there are atypical outputs, set the alert
					IF (@AtypicalOutputsAmount > 0)
					BEGIN
						--PRINT '			 Y se de tienen salidas atipicas'
						IF (CHARINDEX(@SuggestionAlerts, @ALERT_ATYPICAL_OUTPUTS_IN_SUGGESTION_RANGE)  = 0)
						BEGIN
							SET @SuggestionAlerts = @SuggestionAlerts + @ALERT_ATYPICAL_OUTPUTS_IN_SUGGESTION_RANGE;
						END 
					END 
					
					IF (@IvaManagementFrom = @ManagementFromManual)
					BEGIN						
						IF (CHARINDEX(@SuggestionAlerts, @ALERT_SUGGESTION_AFTER_PRIOR_REJECTED)  = 0)
						BEGIN
							SET @SuggestionAlerts = @SuggestionAlerts + @ALERT_SUGGESTION_AFTER_PRIOR_REJECTED;
						END
						SET @NotifyNewSuggestion = 'Y'
						IF (LTRIM(RTRIM(@VNotificationBuffer)) IS NULL)
						BEGIN
							SET @VNotificationBuffer = @VNotificationBuffer  + 
								'-- ---------------------------------------------------------------------------' + '<br>' +
								'BUFFER  ' + @Sku + '@'+ @Location +
								'-- ---------------------------------------------------------------------------' + '<br>' 
						END	

						EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
							'GEN_ADJUSTMENT_SUGGESTS_NOTIFICATION', @Language, '', '', '', 
							@MsgGenAdjustmentSuggestsNotification OUTPUT;

						SET @VNotificationBuffer = @VNotificationBuffer  + @MsgGenAdjustmentSuggestsNotification + '<br>';
					END
				END
				ELSE IF (@AtypicalOutputsAmount > 0)
				BEGIN		
					-- -----------------------------------------------------------------------
					-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
					-- -----------------------------------------------------------------------
					--PRINT '		Salidas atipicas sin sugerencias de ajustes son ignoradas'  
					-- If there are atypical outputs but no adjustment suggestions, then ignore them
					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					   SET [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_NORMAL
					 WHERE [SKU]                    = @Sku
					   AND [LOCATION]               = @Location
					   AND [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_PENDING;
				END
			END
			--ELSE
			--BEGIN
			--	PRINT '		La suma es  cero: '+ @OvaMaxSumMessage
			--END

			-- Check if ther is a TR change
			IF (@ProtectionFactor = @UpperProtectionFactor ) 
			BEGIN
				--PRINT '	El coeficiente es:   2'
				SET @TRSuggestionAnalysisDays = @ReplenishmentTime * 2;
				SET @TRSuggestionAnalysisDate = @LastIncreaseSuggestionDate;
				--PRINT '		Dias Analisis:       ' + CAST (@TRSuggestionAnalysisDays AS VARCHAR)
				--PRINT '		Fecha Analisis TR:   ' + CAST (@TRSuggestionAnalysisDate AS VARCHAR)
				--PRINT '		Fecha mas dias:      ' + CAST (DATEADD(DAY,  @TRSuggestionAnalysisDays, @BufferInitialDate )AS VARCHAR)
				--PRINT '		Fecha A menos dias:  ' + CAST (DATEADD(DAY, -1 * @TRSuggestionAnalysisDays, @UpdateMovements ) AS VARCHAR)

				IF (( @UpdateMovements >= DATEADD(DAY,  @TRSuggestionAnalysisDays, @BufferInitialDate ))  AND
					(( @TRSuggestionAnalysisDate IS NULL ) OR 
					 ( @TRSuggestionAnalysisDate <= DATEADD(DAY, -1 * @TRSuggestionAnalysisDays, @UpdateMovements )))) 
				BEGIN
					EXEC [dbo].[USP_CALCULATE_AVERAGE_ZONE]
						@UpdateMovements,
						@TRSuggestionAnalysisDays,
						@Sku,
						@Location,
						@AverageZone OUTPUT, 
						@OvaAvgZoneResult OUTPUT,
						@OvaAvgZoneMessage OUTPUT;
					
					SET @OvaResult  = @OvaAvgZoneResult;	
					SET @OvaMessage = @OvaAvgZoneMessage;	
					IF (@OvaResult = '1')
					BEGIN
						INSERT INTO TFSCM_COM_LOG (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
						VALUES (@MsgCalcAvgZoneUnexpectedError + '<br><br>' + @OvaMessage, NULL, 'E', GETDATE(), @Sku, @Location, NULL, NULL, 'AVERAGE_ZONE', NULL, @UpdateMovements) 
				 
						SET @NumberOfErrors = @NumberOfErrors + 1;
					
						FETCH NEXT FROM cur_bufferListTmp 
						 INTO @Sku, @Location, @NextFamily, @UpdateMovements,            @ReplenishmentTime,      @RtAdjustmentType,
							  @ProtectionFactor,            @NextBufferAnalysis,         @LastTotalOutsMaxSum,    @LastColorChangeDate,
							  @AdjustmentType,              @LastIncreaseSuggestionDate, @Buffer,                 @MinimumBuffer,
							  @MinimumReplenishment,        @SuggestionAlerts,           @BufferInitialDate,      @SuggestedBuffer,
							  @ApprovedBuffer,              @AdjustmentAction,           @SuggestionDate,         @Range,
							  @DecreaseThreshold,           @IncreaseThreshold,          @MovingSumsAmount,       @RoundingMode,  
							  @Accuracy, 					@LowerProtectionFactor,      @MiddleProtectionFactor, @UpperProtectionFactor;
						CONTINUE; 
					END													
					--PRINT '	La Zona Promedio es:        ' + ISNULL(UPPER(@AverageZone), 'Nula')					
					IF (UPPER(@AverageZone) = 'RED')
					BEGIN  
						--PRINT '		Y como la zona es roja debe Aumentar'
						SET @RtAdjustmentType = @RT_ADJUSTMENT_TYPE_INCREASE;		 
					END
				END
			END	
			 
 
			--PRINT '	Se actualizan los campos: '  
			--PRINT '		Tipo de ajuste RT:     ' + CAST(@RtAdjustmentType AS VARCHAR)
			--PRINT '		Amortiguador sugerido: ' + CAST(@SuggestedBuffer  AS VARCHAR)
			--PRINT '		Amortiguador aprobado: ' + CAST(@ApprovedBuffer AS VARCHAR)
			--PRINT '		Acción de ajuste:      ' + CAST(@AdjustmentAction AS VARCHAR)
			--PRINT '		Fecha de sugerencia:   ' + ISNULL(CAST(@SuggestionDate AS VARCHAR), 'Nula')
			--PRINT '		Alerta:                ' + ISNULL(CAST(@SuggestionAlerts  AS VARCHAR), 'Sin alertas')
			--PRINT '	-- -----------------------------------------------------------------------'
			IF (LTRIM(RTRIM(@SuggestionAlerts)) = '')
			BEGIN
				SET @SuggestionAlerts = NULL;
			END
			
			UPDATE TFSCM_CLI_BUFFER
		       SET RT_ADJUSTMENT_TYPE      = @RtAdjustmentType,
		           SUGGESTED_BUFFER        = @SuggestedBuffer, 
		           APPROVED_BUFFER         = @ApprovedBuffer, 
		           ADJUSTMENT_ACTION       = @AdjustmentAction,
		           SUGGESTION_DATE         = @SuggestionDate,
		           SUGGESTION_ALERTS       = [dbo].[UFN_ORDER_STRING_CHARACTERS](@SuggestionAlerts),
				   ADJUSTMENT_TYPE         = @AdjustmentType, 
				   NEXT_BUFFER_ANALYSIS    = @NextBufferAnalysis,
				   LAST_TOTAL_OUTS_MAX_SUM = @LastTotalOutsMaxSum,
				   -- LAST_REDUCTION_SUGGESTION_DATE = @LastReductionSuggestionDate,
				   LAST_INCREASE_SUGGESTION_DATE  = @LastIncreaseSuggestionDate,				   
				   PROJECTED_INCREMENTS           = @ProjectedIncrements,
				   ATYPICAL_CONSUMPTION_FREQUENCY = @AtypicalConsumptionFrequency
		     WHERE SKU      = @Sku
			  AND LOCATION = @Location;
			
			SET @BufferManagedAmount = @BufferManagedAmount + 1;
			
			FETCH NEXT FROM cur_bufferListTmp 
			 INTO @Sku, @Location, @NextFamily, @UpdateMovements,           @ReplenishmentTime,      @RtAdjustmentType,
				  @ProtectionFactor,            @NextBufferAnalysis,         @LastTotalOutsMaxSum,    @LastColorChangeDate,
				  @AdjustmentType,              @LastIncreaseSuggestionDate, @Buffer,                 @MinimumBuffer,
				  @MinimumReplenishment,        @SuggestionAlerts,           @BufferInitialDate,      @SuggestedBuffer,
				  @ApprovedBuffer,              @AdjustmentAction,           @SuggestionDate,         @Range,
				  @DecreaseThreshold,           @IncreaseThreshold,          @MovingSumsAmount,       @RoundingMode,  
				  @Accuracy, 					@LowerProtectionFactor,      @MiddleProtectionFactor, @UpperProtectionFactor;
		END  -- End cur_bufferListTmp
		 
		CLOSE cur_bufferListTmp
		DEALLOCATE cur_bufferListTmp 

		--PRINT '-- ---------------------------------------------------------------------------'
		--PRINT 'Se gestionan las sugerencias '
		--PRINT '-- ---------------------------------------------------------------------------'
		-- Manage suggestions
		DECLARE @SkuAccepted      VARCHAR(50);
		DECLARE @LocationAccepted VARCHAR(50); 

		SET @IvaBufferList = '';
				
		UPDATE BUF_SOURCE
		   SET BUF_SOURCE.ADJUSTMENT_ACTION = @ADJUSTMENT_ACTION_ACCEPT,
			   @AutoAcceptedAmount          = @AutoAcceptedAmount + 1,
			   @IvaBufferList               = @IvaBufferList + BUF_SOURCE.SKU + @DelimiterForPk + BUF_SOURCE.LOCATION + @DelimiterForRecords 
		  FROM TEMP_BUFFER_LIST BUF_TARGET 
		 INNER JOIN TFSCM_CLI_BUFFER BUF_SOURCE 
			   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY fa ON fa.CDBUFFER_FAMILY = BUF_SOURCE.FAMILY
			   LEFT OUTER JOIN TFSCM_CLI_UNITS udm ON udm.CDUNIT = BUF_SOURCE.CDUNIT
			ON BUF_TARGET.SKU = BUF_SOURCE.SKU AND BUF_TARGET.LOCATION = BUF_SOURCE.LOCATION
		WHERE fa.BUFFER_ADJUSTMENT_MODE     = @ADJUSTMENT_MODE_AUTO
          AND BUF_SOURCE.SUGGESTION_ALERTS IS NULL
          AND BUF_SOURCE.ADJUSTMENT_ACTION  = @ADJUSTMENT_ACTION_ANALYZE;
		
		IF (@IvaBufferList <> '')
		BEGIN
			SET @IvaBufferList = SUBSTRING(@IvaBufferList, 1, LEN(@IvaBufferList) - 1);
			
			EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @IvaBufferList, @IvaManagedBy, @IvaManagementFrom,
						                              @OvaGBASResult OUTPUT, @OvaGBASMessage OUTPUT;
			SET @OvaResult  = @OvaGBASResult;	
			SET @OvaMessage = @OvaGBASMessage;
									                              
			IF (@OvaResult = '1')
			BEGIN
				INSERT INTO TFSCM_COM_LOG (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@MsgManageBufferAdjustSuggestsError + '<br><br>' + @OvaMessage, NULL, 'E', GETDATE(), NULL, NULL, @IvaBufferList, NULL, 'MANAGE_ACCEPTED_BAS', NULL, GETDATE());

				SET @NumberOfErrors = @NumberOfErrors + 1;					
			END
			--PRINT ''
			--PRINT '	Se aceptan y se gestionan las sugerencias para '+ @IvaBufferList  
		END
		 
		DROP TABLE TEMP_BUFFER_LIST; 
 
		EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'GEN_ADJUSTMENT_SUGGESTS_SUCCESS', @Language, '', '', '', @MsgGenAdjustmentSuggestsSuccess OUTPUT;
	
		
		SET @OvaResult  = '0';	
		SET @OvaMessage = @MsgGenAdjustmentSuggestsSuccess;
		
		/* If there is a weekly Recalculate Buffers job with more than one day, Write to log */
		IF (@BufferCount > 1)
		BEGIN 
			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'RECORDS_FOR_BUFFER_ANALYSIS_MESSAGE', @Language, '', '', '', @MsgRecordsForBufferAnalysis OUTPUT;
			
			SET @NotificationMessage = @NotificationMessage + @MsgRecordsForBufferAnalysis + ': '+ CAST(@BufferAnalysisAmount AS VARCHAR);				
		END
			
		IF (@BufferManagedAmount >= 0)
		BEGIN 
			IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
			BEGIN
				SET @NotificationMessage = @NotificationMessage + '<br>'  + '<br>';
			END
			
			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'MANAGED_BUFFER_AMOUNT', @Language, '', '', '', @MsgManagedBufferAmount OUTPUT;

			SET @NotificationMessage = @NotificationMessage + @MsgManagedBufferAmount + ': '+ CAST(@BufferManagedAmount AS VARCHAR);
		END

		IF (@AutoExpiredAmount >= 0)
		BEGIN
			IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
			BEGIN
				SET @NotificationMessage = @NotificationMessage + '<br>'  + '<br>';
			END

			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'AUTO_EXPIRED_AMOUNT', @Language, '', '', '', @MsgAutoExpiredAmount OUTPUT;

			SET @NotificationMessage = @NotificationMessage + @MsgAutoExpiredAmount + ': '+ CAST(@AutoExpiredAmount AS VARCHAR);
		END 
		
		IF (@NotifyNewSuggestion = 'Y')
		BEGIN
			SET @OvaResult = '3';
			SET @NotificationMessage  = @NotificationMessage + '<br>'  + '<br>' + @VNotificationBuffer;
		END
		
		IF (@AutoAcceptedAmount >= 0)
		BEGIN
			IF (@AutoAcceptedAmount > 0)
			BEGIN
				SET @OvaResult  = '2';
			END 
			
			IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
			BEGIN
				SET @NotificationMessage = @NotificationMessage + '<br>'  + '<br>';
			END
			
			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'AUTO_ACCEPTED_AMOUNT', @Language, '', '', '', @MsgAutoAcceptedAmount OUTPUT;

			SET @NotificationMessage = @NotificationMessage + @MsgAutoAcceptedAmount + ': '+ CAST(@AutoAcceptedAmount AS VARCHAR);
		END
		
		IF (@NumberOfErrors >= 0)
		BEGIN 
			IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
			BEGIN
				SET @NotificationMessage = @NotificationMessage + '<br>'  + '<br>';
			END
			
			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'ADJUST_SUGGESTS_ERRORS', @Language, '', '', '', @MsgAdjustSuggestsErrors OUTPUT;			

			SET @NotificationMessage = @NotificationMessage + @MsgAdjustSuggestsErrors + ': '+ CAST(@NumberOfErrors AS VARCHAR);
		END

		-- -----------------------------------------------------------------------------------
		-- OHLO 20200603: Since v5.1.0, change the message type from Error (E) to Alert (A), 
		--                when there's not enough data for calculating average zone.
		-- -----------------------------------------------------------------------------------
		
		IF (@NumberOfAlerts >= 0)
		BEGIN 
			IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
			BEGIN
				SET @NotificationMessage = @NotificationMessage + '<br>'  + '<br>';
			END
			
			EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'ADJUST_SUGGESTS_ALERTS', @Language, '', '', '', @MsgAdjustSuggestsAlerts OUTPUT;			

			SET @NotificationMessage = @NotificationMessage + @MsgAdjustSuggestsAlerts + ': '+ CAST(@NumberOfAlerts AS VARCHAR);
		END	

		IF (@NotificationMessage IS NOT NULL AND LTRIM(RTRIM(@NotificationMessage)) <> '')
		BEGIN
			SET @OvaMessage = @OvaMessage + '<br>'  + '<br>' + @NotificationMessage + '<br>'  + '<br>' ;
		END		
	END TRY 
	BEGIN CATCH 
		
		IF ((SELECT CURSOR_STATUS('global','cur_bufferList')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_bufferList')) IN (0,1))
			BEGIN
				CLOSE cur_bufferList; 			
			END
			DEALLOCATE cur_bufferList; 
		END		
		IF ((SELECT CURSOR_STATUS('global','cur_expire')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_expire')) IN (0,1))
			BEGIN
				CLOSE cur_expire; 		
			END
			DEALLOCATE cur_expire; 	
		END
		IF ((SELECT CURSOR_STATUS('global','cur_bufferListTmp')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_bufferListTmp')) IN (0,1))
			BEGIN
				CLOSE cur_bufferListTmp; 		
			END
			DEALLOCATE cur_bufferListTmp; 
		END
		IF ((SELECT CURSOR_STATUS('global','cur_accept')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_accept')) IN (0,1))
			BEGIN
				CLOSE cur_accept; 		
			END
			DEALLOCATE cur_accept; 
		END
		
		IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'TEMP_BUFFER_LIST') AND type in (N'U'))
		BEGIN
			DROP TABLE  TEMP_BUFFER_LIST 
		END  
 		SET @OvaResult             = '1';
		
		EXEC GET_MESSAGE @CodeErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'GEN_ADJUSTMENT_SUGGESTS_ERROR', @Language, '', '', '', @MsgGenAdjustmentSuggestsError OUTPUT;
		
		IF (ERROR_NUMBER() = 50000)
 		BEGIN
 			SET @OvaMessage = @MsgGenAdjustmentSuggestsError + ' <br><br> ' + ERROR_MESSAGE();                           
 		END
 		ELSE 
 		BEGIN
			SET @OvaMessage = @MsgGenAdjustmentSuggestsError + ' <br> ' + ' <br> ' 
						    + ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		                    + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
                            + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
                            + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[GENERATE_BUFFER_ADJUSTMENT_SUGGESTIONS]')
                            + ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
                            + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		END

		--SET @OvaMessage = CAST(LEN(@OvaMessage) AS VARCHAR);
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[GENERATE_LIST_BUFFER_ADJUSTMENT_SUGGESTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 27/01/2015
-- Description  : Generate buffer adjustment suggestions from automatic or 
--                manual action whit a string buffer list 
-- ===========================================================================================
CREATE PROCEDURE [dbo].[GENERATE_LIST_BUFFER_ADJUSTMENT_SUGGESTIONS]
	/* Input Parameters */
	@ivaBufferList     NVARCHAR(MAX),
    @ivaManagedBy      VARCHAR(50),
    @ivaManagementFrom VARCHAR (1),
    /* Output Parameters */
    @ovaResult         VARCHAR(1) OUTPUT,
    @ovaMessage        NVARCHAR(MAX) OUTPUT  
AS	
	--Auxiliar variables
	DECLARE @managementFromManual  VARCHAR(1) = 'M';
    DECLARE @managementFromAuto    VARCHAR(1) = 'A';
	DECLARE @bufferDTOAux	       BufferTblType; 
	DECLARE @sku                   VARCHAR(50);
	DECLARE @location              VARCHAR(50); 
    DECLARE @DelimiterForRecords   CHAR(1) = '|';
    DECLARE @DelimiterForPk        CHAR(1) = ';';
    DECLARE @bufferRecord          NVARCHAR(MAX); 
    
	DECLARE @ovaGBASResult         VARCHAR(1);
    DECLARE @ovaGBASMessage        NVARCHAR(MAX);
BEGIN	
 	BEGIN TRY
		SET NOCOUNT ON;
		-- -----------------------------------------------------------------------------------
		-- 										MESSAGES
		-- -----------------------------------------------------------------------------------
		DECLARE @vLanguage                          AS VARCHAR(2) = 'es';
		DECLARE @vCodErrorResultMessages            AS VARCHAR(1);
		DECLARE @vMessageErrorResultMessages        AS NVARCHAR(MAX);
		DECLARE @vMSG_GEN_ADJUSTMENT_SUGGESTS_ERROR AS NVARCHAR(MAX); 
		
		SELECT @vLanguage = PARAM_VALUE  
		  FROM TFSCM_COM_PARAMS 
		 WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
			'GEN_ADJUSTMENT_SUGGESTS_ERROR', @vLanguage, '', '', '', @vMSG_GEN_ADJUSTMENT_SUGGESTS_ERROR OUTPUT;

		IF ( @ivaManagementFrom  = @managementFromManual)
		BEGIN 
			DECLARE curBufferList CURSOR FAST_FORWARD FOR 
			 SELECT DISTINCT value AS BUFFERS
			   FROM STRING_SPLIT(@ivaBufferList, @DelimiterForRecords)
			
			OPEN curBufferList;
			FETCH curBufferList INTO @bufferRecord;
			WHILE (@@FETCH_STATUS = 0) 
			BEGIN				
				SELECT @sku      = SUBSTRING(@bufferRecord, 0, CHARINDEX(@DelimiterForPk, @bufferRecord));
				SELECT @location = SUBSTRING(@bufferRecord, CHARINDEX(@DelimiterForPk, @bufferRecord)+1, LEN(@bufferRecord));

				INSERT INTO @bufferDTOAux (SKU, LOCATION) VALUES (@sku, @location );

				FETCH curBufferList INTO @bufferRecord;
			END
			CLOSE curBufferList;
			DEALLOCATE curBufferList;
		END

		EXEC GENERATE_BUFFER_ADJUSTMENT_SUGGESTIONS @bufferDTOAux, @ivaManagedBy, @ivaManagementFrom,
													@ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;

		SET @ovaResult  = @ovaGBASResult;
		SET @ovaMessage = @ovaGBASMessage;
	END TRY
	BEGIN CATCH		
		IF ((SELECT CURSOR_STATUS('global','curBufferList')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curBufferList')) IN (0,1))
			BEGIN
				CLOSE curBufferList; 			
			END
			DEALLOCATE curBufferList; 
		END		
		 
 		SET @ovaResult  = '1';
		SET @ovaMessage = @vMSG_GEN_ADJUSTMENT_SUGGESTS_ERROR + ' <br> ' + ' <br> '
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[GENERATE_LIST_BUFFER_ADJUSTMENT_SUGGESTIONS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
                           
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/02/2020
-- Description : Add a new parameter @GinOriginCaller for filtering the cursorBuffers cursor
--				 depending on which action called Replenishment Suggestions Generation action:	
--						M => SP Manage Buffer Adjustment Suggestions 
--						D => After executing Data Exchange
--				 That will process only those buffers which have had an Accepted Adjustment 
--               Suggestion. (Issue: Inventories/Report/Buffer Recalculation: Buffer 
--               Replenishment Suggestions are Generated Upon Buffer Recalculation Job
--				 Execution)
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 18/09/2017
-- Description : * Add some logic changes when the implementation uses the 
--                 optimizer.
--               * Add the reset of columns used in generating, managing and 
-- 				   suggestion optimizing 
--				  (extracted from GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY).
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 23/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and 
--				   CHAIN_PRIORITY_COLOR by NET_PRIORITY_COLOR
--               * Change the column INVENTRY_ON_CHAIN by NET_INVENTORY to 
--  			   the calculation of missing buffer inventory
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author       : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Creation date: 27/03/2014
-- Description  : Generate replenishment suggestion from manual or data exchange action
-- ===========================================================================================
CREATE PROCEDURE [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS]
	/* Input Parameters */
	@GinUserSession  VARCHAR(50),
    @GinLocations    NVARCHAR(MAX),
    @GinDelimiter    CHAR(1),
	@GinOriginCaller VARCHAR(1),
	/* Ouput Parameters */
    @GoutResult      VARCHAR(1)    OUTPUT,
    @GoutMessage     NVARCHAR(MAX) OUTPUT
AS
	-- Fields use for calculation	
	DECLARE	@vUpdateDate						DATETIME = getdate();
	
	-- CURSOR VARIABLES
	DECLARE @CDLOCATION 						VARCHAR(50);
	DECLARE @BUFFER_SKU 						VARCHAR(50);
	DECLARE @BUFFER_LOCATION 					VARCHAR(50);
	DECLARE @BUFFER_BUFFER 						NUMERIC(17,5);
	DECLARE @BUFFER_SECURITY_STOCK 				NUMERIC(17,5);
	DECLARE @BUFFER_MISSING_BUFFER_INVENTORY 	NUMERIC(17,5);
	DECLARE @BUFFER_INVENTORY_ON_CHAIN 			NUMERIC(17,5);
	DECLARE @BUFFER_SUGGESTED_BUFFER_REPLENISH 	NUMERIC(17,5);
	DECLARE @BUFFER_APPROVED_BUFFER_REPLENISH 	NUMERIC(17,5);
	DECLARE @BUFFER_FAMILY 						VARCHAR(50);
	DECLARE @BUFFER_MINIMUM_REPLENISHMENT 		NUMERIC(17,5);
	DECLARE @BUFFER_PACKAGING_UNIT 				NUMERIC(17,5);
	DECLARE @BUFFER_REPLENISHMENT_ACTION 		VARCHAR(10);
	DECLARE @BUFFER_NET_PRIORITY_COLOR 			VARCHAR(10);
	DECLARE @BUFFER_NET_INVENTORY 				NUMERIC(17, 5);
	
	-- Auxiliar variables
	DECLARE @MISSING_BUFFER_INVENTORY_AUX 		NUMERIC(17,5);
	DECLARE @REPLENISHMENT_ROUNDING_MODE_AUX	VARCHAR(3);
	DECLARE @SUGGESTED_BUFFER_REPLENISH_AUX		NUMERIC(17,5);
	DECLARE @REPLENISHMENT_ACTION_AUX 			VARCHAR(10);
	DECLARE @APPROVED_BUFFER_REPLENISH_AUX 		NUMERIC(17,5); 
	DECLARE @SUGGESTION_MANAGEMENT_AUX 			BIT = 0;
	DECLARE @REPLENISHMENT_MODE_AUX 			VARCHAR(3);
	DECLARE @REPLENISHMENT_ACTION_IGNORE 		VARCHAR(10) = 'IGNORE';
	DECLARE @REPLENISHMENT_ACTION_ANALYSE 		VARCHAR(10) = 'ANALYZE';
	DECLARE @ADJUSTMENT_ACTION_ACCEPT 			VARCHAR(10) = 'ACCEPT';
	DECLARE @ADJUSTMENT_ACTION_ANALYZE 			VARCHAR(10) = 'ANALYZE';
	DECLARE @REPLENISHMENT_ROUNDING_MODE_MS 	VARCHAR(3)  = 'MS';
	DECLARE @REPLENISHMENT_ROUNDING_MODE_MA 	VARCHAR(3)  = 'MA';
	DECLARE @REPLENISHMENT_MODE_D  				VARCHAR(3)  = 'D';
	DECLARE @CREATE_FROM_ACTION  				VARCHAR(3)  = 'RS';
	
	--Message variables
	DECLARE @vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR   NVARCHAR(MAX); 
	DECLARE @vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS  NVARCHAR(MAX);
	DECLARE @Language						    VARCHAR(2) = 'es'; 
	DECLARE @CodErrorResultMessages		        VARCHAR(1); 
	DECLARE @MessageErrorResultMessages	        NVARCHAR(MAX);
	
	-- Parameters Variables
	DECLARE @ParameterComponent                 SMALLINT;
	DECLARE @ParameterCode		                VARCHAR(50);
	DECLARE @UsesReplenishmentOptimizer         VARCHAR(1) = 'N';
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		
		-- Component type: General
		SET @ParameterComponent = 6;
		SET @ParameterCode      = 'DEFAULT_LANGUAGE';
		
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = @ParameterComponent
		   AND [P].[CDPARAM]     = @ParameterCode;
		
		-- Component type: Inventory Buffers
		SET @ParameterComponent = 9;
		SET @ParameterCode      = 'USES_REPLENISHMENT_OPTIMIZER';
		
		SELECT @UsesReplenishmentOptimizer = PARAM_VALUE
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = @ParameterComponent
		   AND [P].[CDPARAM]     = @ParameterCode;
				
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR', @Language, '', '', '', 
				@vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR OUTPUT;

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS', @Language, '', '', '',
				@vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS OUTPUT; 
			
		DECLARE cursorLocations CURSOR FAST_FORWARD FOR
		 SELECT DISTINCT value AS LOCATIONS   
		   FROM STRING_SPLIT(@GinLocations, @GinDelimiter)	
		   
		OPEN cursorLocations;
		FETCH NEXT FROM cursorLocations INTO @CDLOCATION;
		
		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN	
			--PRINT 'CDLOCATION ES '+@CDLOCATION
			
			-- -------------------------------------------------------------------------------
			-- First it have to update all records to the original state ignore linked to the 
			-- samelocation.
			-- -------------------------------------------------------------------------------
			-- OHLO 20170918: Since v4.8.0 reset values for columns used in generating, 
			--                managing and suggestion optimizing.
			-- -------------------------------------------------------------------------------
			UPDATE [dbo].[TFSCM_CLI_BUFFER]
			   SET [REPLENISHMENT_ACTION]       = @REPLENISHMENT_ACTION_IGNORE,
				   [APPROVED_BUFFER_REPLENISH]  = 0, 
				   [SUGGESTED_BUFFER_REPLENISH] = 0
			 WHERE [LOCATION]         = @CDLOCATION
			   AND ((@GinOriginCaller = 'M' AND [ADJUSTMENT_ACTION] IN (@ADJUSTMENT_ACTION_ACCEPT))
				  OR @GinOriginCaller = 'D');			 
			
			-- -------------------------------------------------------------------------------
			-- OHLO 20170918: Since v4.8.0 if in this implementation is the Replenishment 
			-- 				  Optimizer enabled, then reset the values for columns used in 
			--                optimizing. 
			-- -------------------------------------------------------------------------------
			IF (@UsesReplenishmentOptimizer = 'Y')
			BEGIN
				UPDATE [dbo].[TFSCM_CLI_BUFFER]
				   SET [OPTIMIZED_REPLENISHMENT]  = 0,
					   [OPTIMIZED_PRIORITY]       = 0, 
					   [OPTIMIZED_PRIORITY_COLOR] = 'White'
				 WHERE [LOCATION]         = @CDLOCATION
				   AND ((@GinOriginCaller = 'M' AND [ADJUSTMENT_ACTION] IN (@ADJUSTMENT_ACTION_ACCEPT))
				      OR @GinOriginCaller = 'D');           
			END 

			DECLARE cursorBuffers CURSOR FAST_FORWARD FOR	
			 SELECT [BUFFER].[SKU],                        [BUFFER].[LOCATION],                  [BUFFER].[MISSING_BUFFER_INVENTORY],
					[BUFFER].[BUFFER],                     [BUFFER].[SECURITY_STOCK],            [BUFFER].[INVENTORY_ON_CHAIN],
					[BUFFER].[SUGGESTED_BUFFER_REPLENISH], [BUFFER].[APPROVED_BUFFER_REPLENISH], [BUFFER].[FAMILY],
					[BUFFER].[MINIMUM_REPLENISHMENT],      [BUFFER].[PACKAGING_UNIT],            [BUFFER].[REPLENISHMENT_ACTION],
					[BUFFER].[NET_PRIORITY_COLOR],         [BUFFER].[NET_INVENTORY]
			   FROM [dbo].[TFSCM_CLI_BUFFER]   [BUFFER] 
			   JOIN [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F] 
				 ON ([F].[CDBUFFER_FAMILY]         = [BUFFER].[FAMILY] 
				 AND [F].[REPLENISHMENT_MODE]     <> @REPLENISHMENT_MODE_D  -- Disabled
				 AND [BUFFER].[LOCATION]           = @CDLOCATION
				 AND [BUFFER].[INACTIVE]           = 0
				 AND ((@GinOriginCaller = 'M' AND [BUFFER].[ADJUSTMENT_ACTION] IN (@ADJUSTMENT_ACTION_ACCEPT))
				    OR @GinOriginCaller = 'D'));
				
			OPEN cursorBuffers;
			
			FETCH NEXT FROM cursorBuffers 
			 INTO @BUFFER_SKU,                        @BUFFER_LOCATION,                  @BUFFER_MISSING_BUFFER_INVENTORY,
				  @BUFFER_BUFFER,                     @BUFFER_SECURITY_STOCK,  		     @BUFFER_INVENTORY_ON_CHAIN,
				  @BUFFER_SUGGESTED_BUFFER_REPLENISH, @BUFFER_APPROVED_BUFFER_REPLENISH, @BUFFER_FAMILY,
				  @BUFFER_MINIMUM_REPLENISHMENT,      @BUFFER_PACKAGING_UNIT,            @BUFFER_REPLENISHMENT_ACTION,
				  @BUFFER_NET_PRIORITY_COLOR,         @BUFFER_NET_INVENTORY;
				  
			WHILE (@@FETCH_STATUS = 0 ) 
			BEGIN					
				--PRINT 'EL REGISTRO SKU-LOCATION ES: ' +@BUFFER_SKU					
				SET @MISSING_BUFFER_INVENTORY_AUX = dbo.MAXIMUM(@BUFFER_BUFFER + @BUFFER_SECURITY_STOCK - @BUFFER_NET_INVENTORY, 0);
				
				-- ---------------------------------------------------------------------------
				-- En el Comparado con el pseudocÃƒÂ³digo en el siguiente if se adiciona ademÃƒÂ¡s la 
				-- actualizaciÃƒÂ³n del campo MISSING_BUFFER_INVENTORY
				-- ---------------------------------------------------------------------------
				IF (@MISSING_BUFFER_INVENTORY_AUX <= 0)
				BEGIN
					UPDATE [dbo].[TFSCM_CLI_BUFFER]
					   SET [SUGGESTED_BUFFER_REPLENISH] = 0,
						   [APPROVED_BUFFER_REPLENISH]  = 0,
						   [MISSING_BUFFER_INVENTORY]   = @MISSING_BUFFER_INVENTORY_AUX
					 WHERE [SKU]      = @BUFFER_SKU
					   AND [LOCATION] = @BUFFER_LOCATION;
					   
					--PRINT 'SE VA AL SIGUIENTE RECORD '
					FETCH NEXT FROM cursorBuffers 
					 INTO @BUFFER_SKU,                        @BUFFER_LOCATION,                  @BUFFER_MISSING_BUFFER_INVENTORY,
						  @BUFFER_BUFFER,                     @BUFFER_SECURITY_STOCK,  		     @BUFFER_INVENTORY_ON_CHAIN,
						  @BUFFER_SUGGESTED_BUFFER_REPLENISH, @BUFFER_APPROVED_BUFFER_REPLENISH, @BUFFER_FAMILY,
						  @BUFFER_MINIMUM_REPLENISHMENT,      @BUFFER_PACKAGING_UNIT,            @BUFFER_REPLENISHMENT_ACTION,
						  @BUFFER_NET_PRIORITY_COLOR,         @BUFFER_NET_INVENTORY;
					CONTINUE;
				END
				--PRINT 'AHORA SKU ES: ' +@BUFFER_SKU
				
				SELECT @REPLENISHMENT_ROUNDING_MODE_AUX = [F].[REPLENISHMENT_ROUNDING_MODE]
				  FROM [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F]
				 WHERE [F].[CDBUFFER_FAMILY] = @BUFFER_FAMILY;
				
				SELECT @REPLENISHMENT_MODE_AUX = [F].[REPLENISHMENT_MODE]
				  FROM [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F]
				 WHERE [F].[CDBUFFER_FAMILY] = @BUFFER_FAMILY;
				
				-- ---------------------------------------------------------------------------
				-- Replenishment Rounding Mode equals to minimize stock 
				-- ---------------------------------------------------------------------------
				IF (@REPLENISHMENT_ROUNDING_MODE_AUX = @REPLENISHMENT_ROUNDING_MODE_MS) 
				BEGIN
					--PRINT 'entra a minimize stock '
					IF (@BUFFER_MINIMUM_REPLENISHMENT <= @MISSING_BUFFER_INVENTORY_AUX)
					BEGIN	
						SET @SUGGESTED_BUFFER_REPLENISH_AUX = FLOOR(@MISSING_BUFFER_INVENTORY_AUX/@BUFFER_PACKAGING_UNIT)*@BUFFER_PACKAGING_UNIT;
						SET @REPLENISHMENT_ACTION_AUX       = @REPLENISHMENT_ACTION_ANALYSE;
						SET @SUGGESTION_MANAGEMENT_AUX      = 1;
					END
					ELSE
					BEGIN
						SET @SUGGESTED_BUFFER_REPLENISH_AUX = 0;
						SET @REPLENISHMENT_ACTION_AUX       = @BUFFER_REPLENISHMENT_ACTION;
					END				
				END
				
				-- ---------------------------------------------------------------------------
				-- Replenishment Rounding Mode equals to maximize availability
				-- ---------------------------------------------------------------------------
				IF (@REPLENISHMENT_ROUNDING_MODE_AUX = @REPLENISHMENT_ROUNDING_MODE_MA)
				BEGIN
					--PRINT 'entra a maximize availability '
					IF (@BUFFER_MINIMUM_REPLENISHMENT <= @MISSING_BUFFER_INVENTORY_AUX)
					BEGIN
						SET @SUGGESTED_BUFFER_REPLENISH_AUX = CEILING(@MISSING_BUFFER_INVENTORY_AUX/@BUFFER_PACKAGING_UNIT)*@BUFFER_PACKAGING_UNIT;
					END
					ELSE
					BEGIN												
						SET @SUGGESTED_BUFFER_REPLENISH_AUX = @BUFFER_MINIMUM_REPLENISHMENT;
					END	
					
					SET @REPLENISHMENT_ACTION_AUX  = @REPLENISHMENT_ACTION_ANALYSE;	
					SET @SUGGESTION_MANAGEMENT_AUX = 1;			
				END
							
				SET @APPROVED_BUFFER_REPLENISH_AUX = @SUGGESTED_BUFFER_REPLENISH_AUX;					
				
				-- ---------------------------------------------------------------------------
				-- OHLO 20170918: Since 4.8.0, if in this implementation the Replenishment 
				-- 			      Optimizer is disabled, it is possible to do automatic 
				--   			  replenishment suggestion management, for families with 'semi' 
				--                and 'auto' modes. 
				-- ---------------------------------------------------------------------------
				IF (@UsesReplenishmentOptimizer = 'N')
				BEGIN
					--PRINT 'VA A OBTENER ACCION DE REABASTECIMEINTO '
					IF (@SUGGESTION_MANAGEMENT_AUX = 1 
					AND dbo.GET_REPLENISHMENT_ACTION(@REPLENISHMENT_MODE_AUX, @BUFFER_NET_PRIORITY_COLOR) IS NOT NULL)
					BEGIN
						--PRINT ' ENTRA A VA A OBTENER ACCION DE REABASTECIMEINTO '
						SELECT @REPLENISHMENT_ACTION_AUX = dbo.GET_REPLENISHMENT_ACTION(@REPLENISHMENT_MODE_AUX, @BUFFER_NET_PRIORITY_COLOR);
					END
				END
				
				--PRINT 'General update '+@REPLENISHMENT_ACTION_AUX
				-- ---------------------------------------------------------------------------
				-- General update
				-- ---------------------------------------------------------------------------
				UPDATE [dbo].[TFSCM_CLI_BUFFER]
				   SET [APPROVED_BUFFER_REPLENISH]  = @APPROVED_BUFFER_REPLENISH_AUX,
					   [SUGGESTED_BUFFER_REPLENISH] = @SUGGESTED_BUFFER_REPLENISH_AUX,
					   [REPLENISHMENT_ACTION]       = @REPLENISHMENT_ACTION_AUX,
					   [MISSING_BUFFER_INVENTORY]   = @MISSING_BUFFER_INVENTORY_AUX
				 WHERE [SKU]      = @BUFFER_SKU
				   AND [LOCATION] = @BUFFER_LOCATION;
				
				IF (@GinOriginCaller = 'M')
				BEGIN
					EXEC [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]
						@ivaCreateFromAction = @CREATE_FROM_ACTION,
						@ivaApprovedByUser   = @GinUserSession,
						@ivaLocation         = @BUFFER_LOCATION,
						@ivaSku              = @BUFFER_SKU,
						@ovaResult           = @GoutResult OUTPUT,
						@ovaMessage          = @GoutMessage OUTPUT;
				END
				
				FETCH NEXT FROM cursorBuffers 
				 INTO @BUFFER_SKU,                        @BUFFER_LOCATION,                  @BUFFER_MISSING_BUFFER_INVENTORY,
					  @BUFFER_BUFFER,                     @BUFFER_SECURITY_STOCK,  		     @BUFFER_INVENTORY_ON_CHAIN,
					  @BUFFER_SUGGESTED_BUFFER_REPLENISH, @BUFFER_APPROVED_BUFFER_REPLENISH, @BUFFER_FAMILY,
					  @BUFFER_MINIMUM_REPLENISHMENT,      @BUFFER_PACKAGING_UNIT,            @BUFFER_REPLENISHMENT_ACTION,
					  @BUFFER_NET_PRIORITY_COLOR,         @BUFFER_NET_INVENTORY;
			END
			CLOSE cursorBuffers;
			DEALLOCATE cursorBuffers;
			
			--PRINT 'va a llamar registro en history'
			IF (@GinOriginCaller = 'D')
			BEGIN
				EXEC [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]
					@ivaCreateFromAction = @CREATE_FROM_ACTION,
					@ivaApprovedByUser   = @GinUserSession,
					@ivaLocation         = @CDLOCATION,
					@ivaSku              = NULL,
					@ovaResult           = @GoutResult OUTPUT,
					@ovaMessage          = @GoutMessage OUTPUT;
			END
			
			--PRINT 'termina de llamar registro en history'
			FETCH NEXT FROM cursorLocations INTO @CDLOCATION;
		END
		CLOSE cursorLocations;
		DEALLOCATE cursorLocations;

		-- -----------------------------------------------------------------------------------
		-- Procedure result
		-- -----------------------------------------------------------------------------------
		SET @GoutResult = '0';    
		SET @GoutMessage = @vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_SUCESS;
	END TRY 
	BEGIN CATCH
		SET @GoutResult = '1';
		SET @GoutMessage =  @vMSG_DATA_EXCHANGE_GENERATE_REPLENISHMENT_SUGG_ERROR
			+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
			
		IF ((SELECT CURSOR_STATUS('global','cursorBuffers')) = -1)
		BEGIN
			DEALLOCATE cursorBuffers;
		END		
		IF ((SELECT CURSOR_STATUS('global','cursorBuffers')) > -1)
		BEGIN
			CLOSE cursorBuffers;
			DEALLOCATE cursorBuffers;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cursorLocations')) = -1)
		BEGIN
			DEALLOCATE cursorLocations;
		END		
		IF ((SELECT CURSOR_STATUS('global','cursorLocations')) > -1)
		BEGIN
			CLOSE cursorLocations;
			DEALLOCATE cursorLocations;
		END
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 20/02/2020
-- Description : Expire non-exported replenishment suggestions
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 18/10/2018
-- Description : When @CreateFromAction is OS (Optimizer calls this SP), the Suggestion Type
--               must be "Optimizer" ('OST')
-- Version     : 4.9.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 18/09/2017
-- Description : Move the reset for columns used in generating, managing and suggestion
-- 				 optimizing to SP 'GENERATE_REPLENISHMENT_SUGGESTIONS'
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------				
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 23/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and 
--				   CHAIN_PRIORITY_COLOR by NET_PRIORITY_COLOR
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 15/04/2014
-- Description:	Generate replenishment suggestion history from manual or data exchange action
--				If the @ivaSku is null then is an manual action else is an automatic data 
--				exchange action
-- ===========================================================================================
CREATE PROCEDURE [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]
	/* Input Parameters */
	@ivaCreateFromAction VARCHAR(3),
	@ivaApprovedByUser   VARCHAR(50),
    @ivaLocation         VARCHAR(50),
    @ivaSku              VARCHAR(50),
	/* Output Parameters */
    @ovaResult           VARCHAR(1)    OUTPUT,
    @ovaMessage          NVARCHAR(MAX) OUTPUT
AS
	--Fields use for calculation	
	DECLARE	@vUpdateDate AS DATETIME = getdate();
		
	--Auxiliar variables
	DECLARE @SUGGESTION_TYPE_AUX AS VARCHAR(3);
	DECLARE @APPROVAL_DATE_AUX   AS DATETIME;
	DECLARE @REPLENISHMENT_ACTION_ACCEPT  AS VARCHAR(10) = 'ACCEPT';
	DECLARE @CREATE_FROM_ACTION           AS VARCHAR(3)  = 'RS';
	DECLARE @CREATE_FROM_ACTION_OPTIMIZER AS VARCHAR(3)  = 'OS';
	DECLARE @SUGGESTION_TYPE_BST          AS VARCHAR(3)  = 'BST';
	DECLARE @SUGGESTION_TYPE_OST          AS VARCHAR(3)  = 'OST';
	DECLARE @EXPORTED_TYPE_NO             AS VARCHAR(10) = 'N';
	DECLARE @EXPORTED_TYPE_EXPIRED        AS VARCHAR(10) = 'E';
	
	--Message variables
	DECLARE @vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR  AS NVARCHAR(MAX); 
	DECLARE @vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS AS NVARCHAR(MAX);
	DECLARE @vLanguage AS VARCHAR(2) = 'es'; 
	DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
	DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX);
	
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		
		SET @APPROVAL_DATE_AUX = getdate();
		-- PRINT 'entra a SP TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY' + @ivaCreateFromAction
		
		SELECT @vLanguage = [P].[PARAM_VALUE]  
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE';			

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS', @vLanguage, '', '', '', 
			@vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS OUTPUT;
		
		-- If it is a Replenishment Suggestion or an Optimizer Suggestion 
		IF (@ivaCreateFromAction = @CREATE_FROM_ACTION OR @ivaCreateFromAction = @CREATE_FROM_ACTION_OPTIMIZER) 
		BEGIN
			SET @SUGGESTION_TYPE_AUX = @SUGGESTION_TYPE_BST;
			
			-- Since 4.9.4, if it is an Optimizer Suggestion, Suggestion Type must be "Optimizer" ('OST' )
			IF (@ivaCreateFromAction = @CREATE_FROM_ACTION_OPTIMIZER)
			BEGIN
				SET @SUGGESTION_TYPE_AUX = @SUGGESTION_TYPE_OST;
			END
			
			IF (@ivaSku IS NOT NULL)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- OHLO 2020022: Since v4.15.0, expire non-exported records.
				-- ---------------------------------------------------------------------------
				--UPDATE [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
				--   SET [EXPORTED] = @EXPORTED_TYPE_EXPIRED
				-- WHERE [SKU]        = @ivaSku
				--   AND [CDLOCATION] = @ivaLocation
				--   AND [EXPORTED]   = @EXPORTED_TYPE_NO;
				   
				UPDATE [RH]
				   SET [EXPORTED] = @EXPORTED_TYPE_EXPIRED
				  FROM [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY] [RH] 
				  JOIN [dbo].[TFSCM_CLI_BUFFER] [B]  ON ([B].[SKU]                  = [RH].[SKU] 
													 AND [B].[LOCATION]             = [RH].[CDLOCATION]
													 AND [B].[REPLENISHMENT_ACTION] = @REPLENISHMENT_ACTION_ACCEPT
													 AND [RH].[SKU]                 = @ivaSku
													 AND [RH].[CDLOCATION]          = @ivaLocation
													 AND [RH].[EXPORTED]            = @EXPORTED_TYPE_NO);
													 
				--PRINT 'entra a inert1 TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY'
				INSERT INTO [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
					   (SKU, 				     CDLOCATION,             LOCATION_TYPE,  CDLOCATION_SOURCE,
						UNITS, 				     SITE_PRIORITY,          NET_PRIORITY,   MISSING_INVENTORY,
						SUGGESTED_REPLENISHMENT, APPROVED_REPLENISHMENT, SUGGESTED_TYPE, APPROVAL_DATE,
						APPROVER_USER,           EXPORTED)
				SELECT @ivaSku,                          @ivaLocation,                    [B].[LOCATION_TYPE],  [B].[ORIGIN_LOCATION],
					   [B].[CDUNIT],                     [B].[SITE_PRIORITY],             [B].[NET_PRIORITY],   [B].[MISSING_BUFFER_INVENTORY],
					   [B].[SUGGESTED_BUFFER_REPLENISH], [B].[APPROVED_BUFFER_REPLENISH], @SUGGESTION_TYPE_AUX, @APPROVAL_DATE_AUX,
					   @ivaApprovedByUser,               @EXPORTED_TYPE_NO	   
				  FROM [dbo].[TFSCM_CLI_BUFFER] [B]
				 WHERE [B].[SKU]      = @ivaSku
				   AND [B].[LOCATION] = @ivaLocation
				   AND [B].[REPLENISHMENT_ACTION] = @REPLENISHMENT_ACTION_ACCEPT;
										
				-- OHLO 20170918: Since v4.8.0 move reset for columns used in generating, managing and suggestion
				-- optimizing to SP 'GENERATE_REPLENISHMENT_SUGGESTIONS'
			END
			ELSE
			BEGIN
				-- ---------------------------------------------------------------------------
				-- OHLO 2020022: Since v4.15.0, expire non-exported records.
				-- ---------------------------------------------------------------------------
				-- UPDATE [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
				--    SET [EXPORTED] = @EXPORTED_TYPE_EXPIRED
				--  WHERE [CDLOCATION] = @ivaLocation
				--    AND [EXPORTED]   = @EXPORTED_TYPE_NO;
				   
				UPDATE [RH]
				   SET [EXPORTED] = @EXPORTED_TYPE_EXPIRED
				  FROM [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY] [RH] 
				  JOIN [dbo].[TFSCM_CLI_BUFFER] [B]  ON ([B].[SKU]                  = [RH].[SKU] 
													 AND [B].[LOCATION]             = [RH].[CDLOCATION]
													 AND [B].[REPLENISHMENT_ACTION] = @REPLENISHMENT_ACTION_ACCEPT
													 AND [RH].[CDLOCATION]          = @ivaLocation
													 AND [RH].[EXPORTED]            = @EXPORTED_TYPE_NO);
				-- ---------------------------------------------------------------------------
				   
				--PRINT 'entra a inert2 TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY'+@ivaLocation
				--      + CAST(@APPROVAL_DATE_AUX AS VARCHAR)+@ivaApprovedByUser
				INSERT INTO [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
					   (SKU, 				     CDLOCATION,             LOCATION_TYPE,  CDLOCATION_SOURCE,
						UNITS, 				     SITE_PRIORITY,          NET_PRIORITY,   MISSING_INVENTORY,
						SUGGESTED_REPLENISHMENT, APPROVED_REPLENISHMENT, SUGGESTED_TYPE, APPROVAL_DATE,
						APPROVER_USER,           EXPORTED)
				SELECT [B].[SKU],                        @ivaLocation,                    [B].[LOCATION_TYPE],  [B].[ORIGIN_LOCATION],
					   [B].[CDUNIT],                     [B].[SITE_PRIORITY],             [B].[NET_PRIORITY],   [B].[MISSING_BUFFER_INVENTORY], 
					   [B].[SUGGESTED_BUFFER_REPLENISH], [B].[APPROVED_BUFFER_REPLENISH], @SUGGESTION_TYPE_AUX, @APPROVAL_DATE_AUX,
					   @ivaApprovedByUser,               @EXPORTED_TYPE_NO
				  FROM [dbo].[TFSCM_CLI_BUFFER] [B]
				 WHERE [B].[LOCATION] = @ivaLocation
				   AND [B].[REPLENISHMENT_ACTION] = @REPLENISHMENT_ACTION_ACCEPT;
										
				-- OHLO 20170918: Since v4.8.0 move reset for columns used in generating, managing and suggestion
				-- optimizing to SP 'GENERATE_REPLENISHMENT_SUGGESTIONS'
			END
		END
		--Procedure result
		SET @ovaResult  = '0';    
		SET @ovaMessage = @vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_SUCESS;
	END TRY 
	BEGIN CATCH 
		SET @ovaResult = '1';
		
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR', @vLanguage, '', '', '', 
			@vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR OUTPUT 

		SET @ovaMessage =  @vMSG_DATA_EXCHANGE_HISTORY_REPLENISHMENT_SUGG_ERROR
			+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[GET_CALCULATE_STOCK_PO_PRIORITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 26/06/2017
-- Description : Add the column PENDING_DEMAND to be used in the calculation
--               of the priority 
-- Version     : 4.7.0
-- ---------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 09/18/2013 
-- Description:	get function calculate priority
-- ===========================================================================
CREATE PROCEDURE [dbo].[GET_CALCULATE_STOCK_PO_PRIORITY]
	/* Input Parameters */
	@vCdOrderType VARCHAR(1),
	@vSku VARCHAR(50),
	@vDestinationLocation VARCHAR(50),
	@vsumProductionStock NUMERIC(38,5),
	@vProgressPercentage NUMERIC(17,5),
	@vTouchTime NUMERIC(17,5),
	@vProductionBuffer NUMERIC(10,0),
	/* Output Parameters */
	@ovaPriorityResul NUMERIC(10,4) OUTPUT,
	@ovaYellowZoneStart NUMERIC(5,2) OUTPUT,
	@ovaRedZoneStart NUMERIC(5,2)OUTPUT

--WITH ENCRYPTION
AS
BEGIN
	BEGIN TRY
	
		DECLARE @vBuffer             AS NUMERIC(17,5);
		DECLARE @vSecurityStock      AS NUMERIC(17,5);
		DECLARE @vInventoryOnSite    AS NUMERIC(17,5);
		DECLARE @vInventoryOnTransit AS NUMERIC(17,5);
		DECLARE @vPendingDemand      AS NUMERIC(17,5);
		DECLARE @vHTTPriority        AS NUMERIC(10,4);
		
		IF (@vsumProductionStock IS NULL)
		BEGIN
			SET @vsumProductionStock = 0
		END		
		
		IF (@vCdOrderType='S')
		BEGIN		
			SELECT @vBuffer             = B.BUFFER,
				   @vSecurityStock      = B.SECURITY_STOCK,
				   @vInventoryOnSite    = B.INVENTORY_ON_SITE,
				   @vInventoryOnTransit = B.INVENTORY_ON_TRANSIT,
				   @vPendingDemand      = B.PENDING_DEMAND,
				   @ovaYellowZoneStart  = BF.YELLOW_ZONE_START, 
				   @ovaRedZoneStart     = BF.RED_ZONE_START
			  FROM TFSCM_CLI_BUFFER B
			  JOIN TFSCM_CLI_BUFFER_FAMILY BF ON (B.FAMILY = BF.CDBUFFER_FAMILY)
			 WHERE B.SKU      = @vSku
			   AND B.LOCATION = @vDestinationLocation
				
			IF (@vBuffer IS NOT NULL AND @vBuffer = 0 )
			BEGIN
				SET @ovaPriorityResul = NULL
			END
			ELSE
			BEGIN	
				SET @ovaPriorityResul = ((@vBuffer + @vSecurityStock + @vPendingDemand - @vInventoryOnSite 
										- @vInventoryOnTransit - @vsumProductionStock) / @vBuffer) * 100		
				
				IF (@vTouchTime<>0)
				BEGIN					
					SET @vHTTPriority = ((@ovaPriorityResul / 100) - ((@vTouchTime / @vProductionBuffer)
									  *  (@vProgressPercentage / 100))) / (1 - (@vTouchTime / @vProductionBuffer))
					
					SET @ovaPriorityResul = CASE 
											WHEN @ovaPriorityResul > (@vHTTPriority * 100) THEN @ovaPriorityResul
											ELSE (@vHTTPriority * 100)
											END						
				END			
			END		
		END
	END TRY	
	BEGIN CATCH
		PRINT ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
			+ ' ERROR_PROCEDURE: ' + ERROR_PROCEDURE()
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[GET_MESSAGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Edward Rodriguez
-- Create date: 01/11/2013
-- Description:	Procedure to get message
-- =============================================
CREATE PROCEDURE [dbo].[GET_MESSAGE] 
    @outCodError NUMERIC OUTPUT,
    @outMessageError NVARCHAR(MAX) OUTPUT,
	@vCdMessage VARCHAR(62),
	@vLanguage VARCHAR(2),
	@vParam0 NVARCHAR(50),
	@vParam1 NVARCHAR(50),
	@vParam2 NVARCHAR(50),
	@outResultMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	
BEGIN
	
	SET @outResultMessage = '';
	
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;
		
		SELECT @outResultMessage = TEXT
		FROM TFSCM_COM_MESSAGE
		WHERE CDMESSAGE = @vCdMessage AND LANGUAGE = @vLanguage
		
		SET @outResultMessage = REPLACE(@outResultMessage, '{0}', @vParam0)
		SET @outResultMessage = REPLACE(@outResultMessage, '{1}', @vParam1)
		SET @outResultMessage = REPLACE(@outResultMessage, '{2}', @vParam2)
		
		SET @outCodError = 0;
		SET @outMessageError = '';	
	END TRY
	BEGIN CATCH
	
		SET @outCodError = ERROR_NUMBER();
		SET @outMessageError =  ' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	END CATCH	

END
GO
/****** Object:  StoredProcedure [dbo].[GETDATE_FREQUENCY_RANGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Update script for phase 2

*/

-- Alter SPs to recompile as needed.
CREATE PROCEDURE [dbo].[GETDATE_FREQUENCY_RANGE]
	/* Input Parameters */
    @ivaDate DATETIME,
    @ivaFrecuency VARCHAR(1),
    @ovaStartRange DATETIME OUTPUT,
    @ovaEndRange DATETIME OUTPUT
WITH RECOMPILE
AS
	
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Daily frecuency
	IF @ivaFrecuency = 'D'
		BEGIN
			SET @ovaStartRange =  CAST(CAST(@ivaDate AS DATE) AS DATETIME);
			SET @ovaEndRange =  @ovaStartRange;
		END
	ELSE IF @ivaFrecuency = 'W'
		BEGIN
			SET DATEFIRST 1;
			SET @ovaStartRange = CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, @ivaDate), @ivaDate),103), 103)
			SET @ovaEndRange = CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, @ivaDate), @ivaDate)+6, 103), 103)
			
			SET DATEFIRST 7;
		END
	ELSE IF @ivaFrecuency = 'M'
		BEGIN
			SET @ovaStartRange =  DATEADD ( month , DATEDIFF ( month , 0 , @ivaDate), 0 );
			SET @ovaEndRange =   CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , @ivaDate)+ 1 , 0 )) AS DATE) AS DATETIME);
		END
	ELSE
		BEGIN
			SET @ovaStartRange =  NULL;
			SET @ovaEndRange =  NULL;
		END


END

GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 23/05/2019
-- Description : Fully qualified names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 04/04/2018
-- Description : When a date range has been already inserted, it is necessary
--				 to update its values
-- Version     : 4.8.4
-- -------------------------------------------------------------------------------------------
-- Author       : Michal MokroÃ…Â¡
-- Creation date: 03/05/2017
-- Description  : Rewritten to set-based solution
-- Version      : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londono
-- Creation date: 22/12/2016
-- Description  : Procedure for calculating the Buffer Adjustment Suggestions
--                Status indicator (ESAA)
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS]
	/* Input Parameters */
    @ivaCdIndicator        NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaCurrentServerTime  DATETIME,
    @ivaUserFilters        NVARCHAR(MAX),
    /* Output Parameters */
    @ovaResult             VARCHAR(1)    OUTPUT,
    @ovaMessage            NVARCHAR(MAX) OUTPUT 
AS 	
	
	-- Other Variables use for calculation
	DECLARE	@LastCalculationDate    DATETIME;	  

    DECLARE	@return_value           INT; 
	DECLARE @SqlStatement           NVARCHAR(MAX);
	DECLARE @SqlEndStatement        NVARCHAR(MAX);
	DECLARE @SqlSelSumStatement     NVARCHAR(MAX);
	DECLARE @SqlGroupByStatement 	NVARCHAR(MAX);
	DECLARE @SqlMergeStatement      NVARCHAR(MAX);

 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Get the last calculation date
	SELECT @LastCalculationDate = MAX(CALCULATION_DATETIME) 
	  FROM TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS
	 WHERE CDINDICATOR = @ivaCdIndicator;
	
	-- Validate if exists at least one calculation  
	IF (@LastCalculationDate IS NULL)
	BEGIN	
		SET @LastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
	END  
			
	SET DATEFIRST 1;
	SET @SqlSelSumStatement = CAST('' as nVarChar(MAX))  
		+ '  SELECT @ivaIndicator, ' 
		+ '         SUM(CASE '
		+ '               WHEN (SBAH.ADJUSTMENT_ACTION = ''ACCEPT'') AND '
		+ '                    (SBAH.APPROVED_BUFFER = SBAH.SUGGESTED_BUFFER) '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN (SBAH.ADJUSTMENT_ACTION = ''ACCEPT'') AND '
		+ '                    (SBAH.APPROVED_BUFFER <> SBAH.SUGGESTED_BUFFER) '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN (SBAH.ADJUSTMENT_ACTION = ''REJECT'') '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN (SBAH.ADJUSTMENT_ACTION = ''EXPIRE'') '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         0, 0, 0, 0, 0, '
		+ '         CASE '
		+ '           WHEN @ivaFrequency = ''D'' '
		+ '             THEN CAST(CAST(SBAH.DATE_MANAGEMENT AS DATE) AS DATETIME) '
		+ '           WHEN @ivaFrequency = ''W'' '
		+ '             THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, SBAH.DATE_MANAGEMENT), SBAH.DATE_MANAGEMENT),103), 103) '
		+ '           WHEN @ivaFrequency = ''M'' '
		+ '             THEN DATEADD ( month , DATEDIFF ( month , 0 , SBAH.DATE_MANAGEMENT), 0 ) '
		+ '           ELSE NULL '
		+ '         END, '
		+ '         CASE  '
		+ '           WHEN @ivaFrequency = ''D'' '
		+ '             THEN CAST(CAST(SBAH.DATE_MANAGEMENT AS DATE) AS DATETIME) '
		+ '           WHEN @ivaFrequency = ''W'' '
		+ '             THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, SBAH.DATE_MANAGEMENT)+6, SBAH.DATE_MANAGEMENT), 103), 103) '
		+ '           WHEN @ivaFrequency = ''M'' '
		+ '             THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , SBAH.DATE_MANAGEMENT)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '           ELSE NULL '
		+ '         END, '
		+ '         @ivaCSTime ';
		
	SET @SqlEndStatement = CAST('' as nVarChar(MAX)) 
		+ '   FROM TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY SBAH ' 
		+ '  WHERE SBAH.DATE_MANAGEMENT > @LastCalculationDateAux ';
	
	SET @SqlStatement = @SqlSelSumStatement + @SqlEndStatement;
	
	IF (@ivaUserFilters IS NOT NULL)
	BEGIN
	  SET @SqlStatement = @SqlStatement +' AND '+@ivaUserFilters;
	END
	
	SET @SqlGroupByStatement = CAST('' as nVarChar(MAX))
		+ ' GROUP BY CASE '
		+ '          WHEN @ivaFrequency = ''D'' '
		+ '            THEN CAST(CAST(SBAH.DATE_MANAGEMENT AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, SBAH.DATE_MANAGEMENT), SBAH.DATE_MANAGEMENT),103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN DATEADD ( month , DATEDIFF ( month , 0 , SBAH.DATE_MANAGEMENT), 0 ) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        CASE  '
		+ '          WHEN @ivaFrequency = ''D'' '
		+ '            THEN CAST(CAST(SBAH.DATE_MANAGEMENT AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, SBAH.DATE_MANAGEMENT)+6, SBAH.DATE_MANAGEMENT), 103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' ' +
		+ '            THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , SBAH.DATE_MANAGEMENT)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '          ELSE NULL '
		+ '        END ';
	
	SET @SqlStatement = @SqlStatement + @SqlGroupByStatement;
	
	SET @SqlMergeStatement = CAST('' as nVarChar(MAX))
		+ 'MERGE INTO TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS AS target ' 
		+ ' USING (' + @SqlStatement + ')'
		+ ' AS source (CDINDICATOR, ACCEPTED_SUGGESTIONS, MODIFIED_SUGGESTIONS, '
		+ '            REJECTED_SUGGESTIONS, EXPIRED_SUGGESTIONS, TOTAL_SUGGESTIONS, '
		+ '            ACCEPTED_SUGGESTIONS_PERCENT, MODIFIED_SUGGESTIONS_PERCENT, '
		+ '            REJECTED_SUGGESTIONS_PERCENT, EXPIRED_SUGGESTIONS_PERCENT, '
		+ '            START_DATE, END_DATE, CALCULATION_DATETIME) '
		+ ' ON (target.CDINDICATOR = source.CDINDICATOR AND '
		+ '     target.START_DATE  = source.START_DATE AND '
		+ '     target.END_DATE    = source.END_DATE)  '
		+ ' WHEN MATCHED THEN UPDATE '
		+ '  SET target.ACCEPTED_SUGGESTIONS = target.ACCEPTED_SUGGESTIONS + source.ACCEPTED_SUGGESTIONS, '
		+ '      target.MODIFIED_SUGGESTIONS = target.MODIFIED_SUGGESTIONS + source.MODIFIED_SUGGESTIONS, ' 
		+ '      target.REJECTED_SUGGESTIONS = target.REJECTED_SUGGESTIONS + source.REJECTED_SUGGESTIONS, '
		+ '      target.EXPIRED_SUGGESTIONS  = target.EXPIRED_SUGGESTIONS  + source.EXPIRED_SUGGESTIONS, '
		+ '      target.TOTAL_SUGGESTIONS    = target.TOTAL_SUGGESTIONS    + source.TOTAL_SUGGESTIONS, '
		+ '      target.ACCEPTED_SUGGESTIONS_PERCENT = target.ACCEPTED_SUGGESTIONS_PERCENT + source.ACCEPTED_SUGGESTIONS_PERCENT, '
		+ '      target.MODIFIED_SUGGESTIONS_PERCENT = target.MODIFIED_SUGGESTIONS_PERCENT + source.MODIFIED_SUGGESTIONS_PERCENT, '
		+ '      target.REJECTED_SUGGESTIONS_PERCENT = target.REJECTED_SUGGESTIONS_PERCENT + source.REJECTED_SUGGESTIONS_PERCENT, '
		+ '      target.EXPIRED_SUGGESTIONS_PERCENT  = target.EXPIRED_SUGGESTIONS_PERCENT  + source.EXPIRED_SUGGESTIONS_PERCENT, '
		+ '      target.CALCULATION_DATETIME         = @ivaCSTime '
		+ ' WHEN NOT MATCHED THEN INSERT ' 
		+ '   		 (CDINDICATOR, ACCEPTED_SUGGESTIONS, MODIFIED_SUGGESTIONS, '
		+ '           REJECTED_SUGGESTIONS, EXPIRED_SUGGESTIONS, TOTAL_SUGGESTIONS, ' 
		+ '           ACCEPTED_SUGGESTIONS_PERCENT, MODIFIED_SUGGESTIONS_PERCENT, '
		+ '           REJECTED_SUGGESTIONS_PERCENT,  EXPIRED_SUGGESTIONS_PERCENT, '
		+ '           START_DATE, END_DATE, CALCULATION_DATETIME) '
		+ '   VALUES (source.CDINDICATOR, source.ACCEPTED_SUGGESTIONS, source.MODIFIED_SUGGESTIONS, '
		+ '           source.REJECTED_SUGGESTIONS, source.EXPIRED_SUGGESTIONS, source.TOTAL_SUGGESTIONS, '
		+ '           source.ACCEPTED_SUGGESTIONS_PERCENT, source.MODIFIED_SUGGESTIONS_PERCENT, '
		+ '           source.REJECTED_SUGGESTIONS_PERCENT, source.EXPIRED_SUGGESTIONS_PERCENT, '
		+ '           source.START_DATE, source.END_DATE, source.CALCULATION_DATETIME); ';
					  
	SELECT CAST('<root><![CDATA[' + @SqlMergeStatement + ']]></root>' AS XML) 
	
	EXEC sys.sp_executesql
		 @SqlMergeStatement,
		 N'@ivaFrequency VARCHAR(1), @LastCalculationDateAux DATETIME, @ivaCSTime DATETIME, @ivaIndicator NUMERIC(4)',
		 @ivaFrequency = @ivaIndicatorFrequency,
		 @LastCalculationDateAux = @LastCalculationDate,
		 @ivaCSTime = @ivaCurrentServerTime,
		 @ivaIndicator = @ivaCdIndicator;

	SET DATEFIRST 7;	
		 
	-- Now, the percentages have to be updated as well
	UPDATE TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS
	SET TOTAL_SUGGESTIONS = ACCEPTED_SUGGESTIONS + MODIFIED_SUGGESTIONS + 
	                        REJECTED_SUGGESTIONS + EXPIRED_SUGGESTIONS
	WHERE CDINDICATOR = @ivaCdIndicator AND
	      CALCULATION_DATETIME = @ivaCurrentServerTime;

	UPDATE TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS
	SET ACCEPTED_SUGGESTIONS_PERCENT = ((ACCEPTED_SUGGESTIONS / CASE TOTAL_SUGGESTIONS WHEN 0 THEN 1 ELSE TOTAL_SUGGESTIONS END) * 100), 
        MODIFIED_SUGGESTIONS_PERCENT = ((MODIFIED_SUGGESTIONS / CASE TOTAL_SUGGESTIONS WHEN 0 THEN 1 ELSE TOTAL_SUGGESTIONS END) * 100),
        REJECTED_SUGGESTIONS_PERCENT = ((REJECTED_SUGGESTIONS / CASE TOTAL_SUGGESTIONS WHEN 0 THEN 1 ELSE TOTAL_SUGGESTIONS END) * 100),  
        EXPIRED_SUGGESTIONS_PERCENT  = ((EXPIRED_SUGGESTIONS  / CASE TOTAL_SUGGESTIONS WHEN 0 THEN 1 ELSE TOTAL_SUGGESTIONS END) * 100)
	WHERE CDINDICATOR = @ivaCdIndicator AND
	      CALCULATION_DATETIME = @ivaCurrentServerTime;

	--Procedure result
	SET @ovaResult  = '0';
	SET @ovaMessage = 'sucessfulESAACalculation ';
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_BUFFER_COLOR_DISTRIBUTION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 24/08/2017
-- Description : Rewritten using MERGE
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/08/2017
-- Description : When a date range has been already inserted, it is necesary to update its 
--				 values
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 23/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and 
--				   CHAIN_PRIORITY_COLOR by NET_PRIORITY_COLOR
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author       : Michal MokroÃ…Â¡
-- Creation Date: 2017-04-27
-- Description  : Rewritten to set-based solution.
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation Date: 2017-02-09
-- Description  : Fix the total sum of buffers on chain and on site.
-- -------------------------------------------------------------------------------------------
-- Author       : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Creation Date: 11/03/2015
-- Description  : Procedure to calculate the color distribution of the buffers
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_BUFFER_COLOR_DISTRIBUTION]
	/* Input Parameters */
    @ivaCdIndicator        NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaCurrentServerTime  DATETIME,
    @ivaUserFilters        NVARCHAR(MAX),
	/* Output Parameters */
    @ovaResult  VARCHAR(1)    OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT 
AS
	--Fields use for calculation
	
	DECLARE	@vLastCalculationDate    DATETIME;
	DECLARE @vStartEvaluationRange   DATETIME;
	DECLARE @vEndEvaluationRange     DATETIME;
	DECLARE @vStartFrequencyRange    DATETIME;
	DECLARE @vEndFrequencyRange      DATETIME;
	DECLARE	@return_value  INT;
	DECLARE @vCount        INT;
	DECLARE @vCounter      NUMERIC(10) = 0;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSqlEndStatement        NVARCHAR(MAX);
	DECLARE @vSqlSelSumStatement     NVARCHAR(MAX);
	DECLARE @vSqlGroupByStatement 	 NVARCHAR(MAX);
	DECLARE @vSqlMergeStatement      NVARCHAR(MAX);
	
	/* Extra fields use to fill serie spaces */
	DECLARE @vSpaceLoop            	 BIT;	
	DECLARE @vDateSpace            	 DATETIME;
	DECLARE @vDCASerieSpacesCursor 	 CURSOR;	
	/* Extra fields to calculate the update operation. */
		
	DECLARE @CALCULATION_DATE		 DATETIME = @ivaCurrentServerTime;
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--Get the last calculation date
    SELECT @vLastCalculationDate = MAX(CALCULATION_DATE) 
      FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION
     WHERE CDINDICATOR = @ivaCdIndicator;    
	
    --Validate if exists a least one calculation  
    IF  @vLastCalculationDate IS NULL 
	BEGIN	
		SET @vLastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
	END
	
	SET DATEFIRST 1;	
						
	SET @vSqlSelSumStatement = CAST('' as nVarChar(MAX))
		+ ' SELECT  @ivaIndicator, '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Blue'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Blue'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Cyan'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Cyan'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Green'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Green'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Yellow'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Yellow'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Red'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Red'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.NET_PRIORITY_COLOR = ''Black'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.SITE_PRIORITY_COLOR = ''Black'' '
		+ '                 THEN 1 '
		+ '                 ELSE 0 '
		+ '              END), '
		+ '         COUNT(*), '
		+ '         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
		+ '        CASE '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        CASE  '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        @ivaCSTime ';
						
	SET @vSqlEndStatement = CAST('' as nVarChar(MAX))
		+ '  FROM TFSCM_CLI_BUFFER_HISTORY BH, TFSCM_CLI_BUFFER BUFFER '
		+ ' WHERE BH.SKU           = BUFFER.SKU '
		+ '   AND BH.LOCATION      = BUFFER.LOCATION '
		+ '	  AND BH.BUFFER        > 0 '
		+ '   AND BH.CREATION_DATE > @lastCalculationDateAux ';				
	
	SET @vSqlStatement       = @vSqlSelSumStatement + @vSqlEndStatement;
	
	IF (@ivaUserFilters IS NOT NULL)
	BEGIN
		SET @vSqlStatement = @vSqlStatement + ' AND ' + @ivaUserFilters;
	END
	
	SET @vSqlGroupByStatement = CAST('' as nVarChar(MAX))
		+ ' GROUP BY CASE '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) ' 
		+ '          WHEN @ivaFrequency = ''W'' ' 
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) ' 
		+ '          WHEN @ivaFrequency = ''M'' ' 
		+ '            THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) ' 
		+ '          ELSE NULL ' 
		+ '        END, ' 
		+ '        CASE  ' 
		+ '          WHEN @ivaFrequency = ''D'' '
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) ' 
		+ '          WHEN @ivaFrequency = ''W'' ' 
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) ' 
		+ '          WHEN @ivaFrequency = ''M'' ' 
		+ '            THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) ' 
		+ '          ELSE NULL ' 
		+ '        END ';
		
	SET @vSqlStatement       = @vSqlStatement + @vSqlGroupByStatement;
 
	SET @vSqlMergeStatement = CAST('' as nVarChar(MAX))
	    + 'MERGE INTO TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION AS target ' 
        + ' USING ('	+ @vSqlStatement + ')'
		+ ' AS source (CDINDICATOR, BLUE_BUFFERS_ON_CHAIN, BLUE_BUFFERS_ON_SITE, CIAN_BUFFERS_ON_CHAIN, CIAN_BUFFERS_ON_SITE, ' 
		+ '            GREEN_BUFFERS_ON_CHAIN, GREEN_BUFFERS_ON_SITE, YELLOW_BUFFERS_ON_CHAIN, YELLOW_BUFFERS_ON_SITE, ' 
		+ '	     	   RED_BUFFERS_ON_CHAIN, RED_BUFFERS_ON_SITE, BLACK_BUFFERS_ON_CHAIN, BLACK_BUFFERS_ON_SITE, TOTAL_BUFFERS, '
		+ '		       PERCENTAGE_BLUE_BUFFERS_ON_CHAIN, PERCENTAGE_BLUE_BUFFERS_ON_SITE, PERCENTAGE_CIAN_BUFFERS_ON_CHAIN, '
		+ '		       PERCENTAGE_CIAN_BUFFERS_ON_SITE, PERCENTAGE_GREEN_BUFFERS_ON_CHAIN, PERCENTAGE_GREEN_BUFFERS_ON_SITE, ' 
		+ '		       PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN, PERCENTAGE_YELLOW_BUFFERS_ON_SITE, PERCENTAGE_RED_BUFFERS_ON_CHAIN, '
		+ '		       PERCENTAGE_RED_BUFFERS_ON_SITE, PERCENTAGE_BLACK_BUFFERS_ON_CHAIN, PERCENTAGE_BLACK_BUFFERS_ON_SITE, ' 
		+ '		       START_DATE, END_DATE, CALCULATION_DATE) '
		+ ' ON (target.CDINDICATOR = source.CDINDICATOR AND '
		+ '     target.START_DATE = source.START_DATE AND ' 
		+ '     target.END_DATE = source.END_DATE)  '
        + ' WHEN MATCHED THEN UPDATE '
		+ '                     SET target.BLUE_BUFFERS_ON_CHAIN = target.BLUE_BUFFERS_ON_CHAIN + source.BLUE_BUFFERS_ON_CHAIN, '
		+ '                         target.BLUE_BUFFERS_ON_SITE = target.BLUE_BUFFERS_ON_SITE + source.BLUE_BUFFERS_ON_SITE, '
		+ '	                        target.CIAN_BUFFERS_ON_CHAIN = target.CIAN_BUFFERS_ON_CHAIN + source.CIAN_BUFFERS_ON_CHAIN, '
		+ '	                        target.CIAN_BUFFERS_ON_SITE = target.CIAN_BUFFERS_ON_SITE + source.CIAN_BUFFERS_ON_SITE, '
		+ '	                        target.GREEN_BUFFERS_ON_CHAIN = target.GREEN_BUFFERS_ON_CHAIN  + source.GREEN_BUFFERS_ON_CHAIN, '
		+ '	                        target.GREEN_BUFFERS_ON_SITE = target.GREEN_BUFFERS_ON_SITE   + source.GREEN_BUFFERS_ON_SITE, '
		+ '	                        target.YELLOW_BUFFERS_ON_CHAIN = target.YELLOW_BUFFERS_ON_CHAIN + source.YELLOW_BUFFERS_ON_CHAIN, '
		+ '	                        target.YELLOW_BUFFERS_ON_SITE = target.YELLOW_BUFFERS_ON_SITE  + source.YELLOW_BUFFERS_ON_SITE, '
		+ '	                        target.RED_BUFFERS_ON_CHAIN = target.RED_BUFFERS_ON_CHAIN  + source.RED_BUFFERS_ON_CHAIN , '
		+ '	                        target.RED_BUFFERS_ON_SITE = target.RED_BUFFERS_ON_SITE + source.RED_BUFFERS_ON_SITE, '
		+ '	                        target.BLACK_BUFFERS_ON_CHAIN = target.BLACK_BUFFERS_ON_CHAIN  + source.BLACK_BUFFERS_ON_CHAIN, '
		+ '	                        target.BLACK_BUFFERS_ON_SITE = target.BLACK_BUFFERS_ON_SITE + source.BLACK_BUFFERS_ON_SITE, '
		+ '	                        target.TOTAL_BUFFERS = target.TOTAL_BUFFERS + source.TOTAL_BUFFERS, '
		+ '	                        target.CALCULATION_DATE = @ivaCSTime ' 		
        + ' WHEN NOT MATCHED THEN INSERT (CDINDICATOR, BLUE_BUFFERS_ON_CHAIN, BLUE_BUFFERS_ON_SITE, CIAN_BUFFERS_ON_CHAIN, CIAN_BUFFERS_ON_SITE, ' 
		+ '                               GREEN_BUFFERS_ON_CHAIN, GREEN_BUFFERS_ON_SITE, YELLOW_BUFFERS_ON_CHAIN, YELLOW_BUFFERS_ON_SITE, ' 
		+ '	     	                      RED_BUFFERS_ON_CHAIN, RED_BUFFERS_ON_SITE, BLACK_BUFFERS_ON_CHAIN, BLACK_BUFFERS_ON_SITE, TOTAL_BUFFERS, '
		+ '		                          PERCENTAGE_BLUE_BUFFERS_ON_CHAIN, PERCENTAGE_BLUE_BUFFERS_ON_SITE, PERCENTAGE_CIAN_BUFFERS_ON_CHAIN, '
		+ '		                          PERCENTAGE_CIAN_BUFFERS_ON_SITE, PERCENTAGE_GREEN_BUFFERS_ON_CHAIN, PERCENTAGE_GREEN_BUFFERS_ON_SITE, ' 
		+ '		                          PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN, PERCENTAGE_YELLOW_BUFFERS_ON_SITE, PERCENTAGE_RED_BUFFERS_ON_CHAIN, '
		+ '		                          PERCENTAGE_RED_BUFFERS_ON_SITE, PERCENTAGE_BLACK_BUFFERS_ON_CHAIN, PERCENTAGE_BLACK_BUFFERS_ON_SITE, ' 
		+ '		                          START_DATE, END_DATE, CALCULATION_DATE)  '
        + '                       VALUES (source.CDINDICATOR, source.BLUE_BUFFERS_ON_CHAIN, source.BLUE_BUFFERS_ON_SITE, source.CIAN_BUFFERS_ON_CHAIN, source.CIAN_BUFFERS_ON_SITE, ' 
		+ '                               source.GREEN_BUFFERS_ON_CHAIN, source.GREEN_BUFFERS_ON_SITE, source.YELLOW_BUFFERS_ON_CHAIN, source.YELLOW_BUFFERS_ON_SITE, ' 
		+ '	     	                      source.RED_BUFFERS_ON_CHAIN, source.RED_BUFFERS_ON_SITE, source.BLACK_BUFFERS_ON_CHAIN, source.BLACK_BUFFERS_ON_SITE, source.TOTAL_BUFFERS, '
		+ '		                          source.PERCENTAGE_BLUE_BUFFERS_ON_CHAIN, source.PERCENTAGE_BLUE_BUFFERS_ON_SITE, source.PERCENTAGE_CIAN_BUFFERS_ON_CHAIN, '
		+ '		                          source.PERCENTAGE_CIAN_BUFFERS_ON_SITE, source.PERCENTAGE_GREEN_BUFFERS_ON_CHAIN, source.PERCENTAGE_GREEN_BUFFERS_ON_SITE, ' 
		+ '		                          source.PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN, source.PERCENTAGE_YELLOW_BUFFERS_ON_SITE, source.PERCENTAGE_RED_BUFFERS_ON_CHAIN, '
		+ '		                          source.PERCENTAGE_RED_BUFFERS_ON_SITE, source.PERCENTAGE_BLACK_BUFFERS_ON_CHAIN, source.PERCENTAGE_BLACK_BUFFERS_ON_SITE, ' 
		+ '		                          source.START_DATE, source.END_DATE, source.CALCULATION_DATE);';  
	
	SELECT CAST('<root><![CDATA[' + @vSqlMergeStatement + ']]></root>' AS XML) 
	EXEC sys.sp_executesql
		 @vSqlMergeStatement,
		 N'@ivaFrequency VARCHAR(1), @lastCalculationDateAux DATETIME, @ivaCSTime DATETIME, @ivaIndicator NUMERIC(4)',
		 @ivaFrequency = @ivaIndicatorFrequency,
		 @lastCalculationDateAux = @vLastCalculationDate,
		 @ivaCSTime = @ivaCurrentServerTime,
		 @ivaIndicator = @ivaCdIndicator;

	SET DATEFIRST 7;
	
	UPDATE TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION
       SET PERCENTAGE_BLUE_BUFFERS_ON_CHAIN   = CASE
											        WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
											    	       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
											    	       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
											    	   THEN 0
											    	 ELSE ((BLUE_BUFFERS_ON_CHAIN   / 
	                                                        (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
											    	          GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
											    	          RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100) 
											    END,
		PERCENTAGE_CIAN_BUFFERS_ON_CHAIN   = CASE
											     WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
												   THEN 0
												 ELSE ((CIAN_BUFFERS_ON_CHAIN   / 
		                                                (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												         GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												         RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100)
											 END, 
		PERCENTAGE_GREEN_BUFFERS_ON_CHAIN  = CASE
											     WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
												   THEN 0
												 ELSE ((GREEN_BUFFERS_ON_CHAIN  / 
		                                                (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												         GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												         RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100)
										     END,
		PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN = CASE
											     WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
												   THEN 0
												 ELSE ((YELLOW_BUFFERS_ON_CHAIN / 
		                                                (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												         GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												         RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100)
										     END,
		PERCENTAGE_RED_BUFFERS_ON_CHAIN    = CASE
											     WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
												   THEN 0
												 ELSE ((RED_BUFFERS_ON_CHAIN    / 
		                                                (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												         GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												         RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100)
										     END,
		PERCENTAGE_BLACK_BUFFERS_ON_CHAIN  = CASE
											     WHEN (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												       GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												       RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN) = 0
												   THEN 0
												 ELSE ((BLACK_BUFFERS_ON_CHAIN  / 
		                                                (BLUE_BUFFERS_ON_CHAIN + CIAN_BUFFERS_ON_CHAIN +
												         GREEN_BUFFERS_ON_CHAIN + YELLOW_BUFFERS_ON_CHAIN +
												         RED_BUFFERS_ON_CHAIN + BLACK_BUFFERS_ON_CHAIN)) * 100)
										     END,
		PERCENTAGE_BLUE_BUFFERS_ON_SITE    = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((BLUE_BUFFERS_ON_SITE   / 
		                                                (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												         GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												         RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END,
		PERCENTAGE_CIAN_BUFFERS_ON_SITE    = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((CIAN_BUFFERS_ON_SITE   / 
		                                                (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												         GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												         RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END,
		PERCENTAGE_GREEN_BUFFERS_ON_SITE   = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((GREEN_BUFFERS_ON_SITE  / 
		                                               (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
											       	    GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												        RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END,
		PERCENTAGE_YELLOW_BUFFERS_ON_SITE  = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((YELLOW_BUFFERS_ON_SITE / 
		                                                (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												         GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												         RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END,
		PERCENTAGE_RED_BUFFERS_ON_SITE     = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((RED_BUFFERS_ON_SITE    / 
		                                                (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
											         	 GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												         RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END,
		PERCENTAGE_BLACK_BUFFERS_ON_SITE   = CASE
											     WHEN (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												       GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												       RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE) = 0
												   THEN 0
												 ELSE ((BLACK_BUFFERS_ON_SITE  / 
		                                                (BLUE_BUFFERS_ON_SITE + CIAN_BUFFERS_ON_SITE +
												         GREEN_BUFFERS_ON_SITE + YELLOW_BUFFERS_ON_SITE +
												         RED_BUFFERS_ON_SITE + BLACK_BUFFERS_ON_SITE)) * 100)
											 END
	WHERE CDINDICATOR = @ivaCdIndicator;
	
	--Fill spaces in the serie with zero values
    SET @vDCASerieSpacesCursor = CURSOR FAST_FORWARD FOR
	SELECT OER.START_DATE
	  FROM (SELECT DATEADD(DAY,1,AUX.END_DATE) START_DATE
	          FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION AUX
	         WHERE AUX.CDINDICATOR = @ivaCdIndicator ) OER
	 WHERE OER.START_DATE NOT IN (SELECT OER2.START_DATE
	  							    FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION OER2
	  							   WHERE OER2.CDINDICATOR = @ivaCdIndicator 
	  							   UNION
	  							  SELECT DATEADD(DAY, 1, MAX(OER3.END_DATE))
	  							    FROM TFSCM_CLI_COLOR_DISTRIBUTION OER3
	  							   WHERE OER3.CDINDICATOR = @ivaCdIndicator)
	 UNION
	SELECT MIN(OERALL.START_DATE)
	  FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION OERALL
	 WHERE OERALL.CDINDICATOR = @ivaCdIndicator;
		 
    OPEN @vDCASerieSpacesCursor;
    FETCH NEXT FROM @vDCASerieSpacesCursor INTO @vDateSpace;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @vDateSpace IS NOT NULL
		BEGIN
			SET @vSpaceLoop = 0;
			WHILE @vSpaceLoop = 0
			BEGIN
				--PRINT CAST(@vDateSpace AS VARCHAR);
				/* Get the frequency range to validate */
				EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
											@ivaDate = @vDateSpace,
											@ivaFrecuency = @ivaIndicatorFrequency,
											@ovaStartRange = @vStartFrequencyRange OUTPUT,
											@ovaEndRange = @vEndFrequencyRange OUTPUT;

				/* Check if exists a row for the frequency range */
				SELECT @vCount = COUNT(*)
				  FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION AOR
				 WHERE AOR.CDINDICATOR = @ivaCdIndicator
				   AND AOR.START_DATE  = @vStartFrequencyRange 
				   AND AOR.END_DATE    = @vEndFrequencyRange;

				IF (@vCount > 0) 
				BEGIN
					SET @vSpaceLoop = 1;
				END  
				ELSE
				BEGIN										
					INSERT INTO TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION
						(CDINDICATOR, BLUE_BUFFERS_ON_CHAIN, BLUE_BUFFERS_ON_SITE, CIAN_BUFFERS_ON_CHAIN, 
						 CIAN_BUFFERS_ON_SITE, GREEN_BUFFERS_ON_CHAIN, GREEN_BUFFERS_ON_SITE, YELLOW_BUFFERS_ON_CHAIN, 
						 YELLOW_BUFFERS_ON_SITE, RED_BUFFERS_ON_CHAIN, RED_BUFFERS_ON_SITE, BLACK_BUFFERS_ON_CHAIN, 
						 BLACK_BUFFERS_ON_SITE, TOTAL_BUFFERS, PERCENTAGE_BLUE_BUFFERS_ON_CHAIN, 
						 PERCENTAGE_BLUE_BUFFERS_ON_SITE, PERCENTAGE_CIAN_BUFFERS_ON_CHAIN, PERCENTAGE_CIAN_BUFFERS_ON_SITE,
						 PERCENTAGE_GREEN_BUFFERS_ON_CHAIN, PERCENTAGE_GREEN_BUFFERS_ON_SITE, 
						 PERCENTAGE_YELLOW_BUFFERS_ON_CHAIN, PERCENTAGE_YELLOW_BUFFERS_ON_SITE, 
						 PERCENTAGE_RED_BUFFERS_ON_CHAIN, PERCENTAGE_RED_BUFFERS_ON_SITE, PERCENTAGE_BLACK_BUFFERS_ON_CHAIN,
						 PERCENTAGE_BLACK_BUFFERS_ON_SITE, START_DATE, END_DATE, CALCULATION_DATE)
					VALUES
						(@ivaCdIndicator, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						 @vStartFrequencyRange, @vEndFrequencyRange, @ivaCurrentServerTime);						
				 
					SET @vDateSpace = DATEADD(DAY,1,@vEndFrequencyRange);
				END
			END
		END
									
		FETCH NEXT FROM @vDCASerieSpacesCursor INTO @vDateSpace;							
	END
    CLOSE @vDCASerieSpacesCursor;
	DEALLOCATE @vDCASerieSpacesCursor;
   
    /* Procedure result */
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationDCA ' + CONVERT(VARCHAR, @vLastCalculationDate, 103) 
					+ '--' + CONVERT(VARCHAR, @vCounter);
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_BUFFER_STOCK_VALUE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 12/09/2017
-- Description : Rewritten using MERGE
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/08/2017
-- Description : When a date range has been already inserted, it is necesary to update its 
--				 values
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 25/06/2017
-- Description : * Rename MINIMUM_REPLENISHMENT_THEORETICAL_COST by 
--                 ALLOWED_OVERSTOCKING_THEORETICAL_COST
--				 * Rename AVERAGE_MINIMUM_REPLENISHMENT_THEORETICAL_COST by 
--                 AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Modification : Michal MokroÃ…Â¡
-- Creation date: 19/04/2017
-- Description  : Removing obsolete code
-- -------------------------------------------------------------------------------------------
-- Modification : Michal MokroÃ…Â¡
-- Creation date: 05/04/2017
-- Description  : Rewritten to set-based solution
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 14/08/2015
-- Description  : Procedure to calculate the Stock Value Indicator (VI)
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_BUFFER_STOCK_VALUE]
	/* Input Parameters */
    @ivaCdIndicator        NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaCurrentServerTime  DATETIME,
    @ivaUserFilters        NVARCHAR(MAX),
    /* Output Parameters */
    @ovaResult             VARCHAR(1) OUTPUT,
    @ovaMessage            NVARCHAR(MAX) OUTPUT 
AS
	-- Variables from select use for calculation
	DECLARE	@lastCalculationDate     DATETIME;

	-- Variables for the Indicator 
	DECLARE @calculationDatetime     DATETIME = @ivaCurrentServerTime;
	
	-- Other Variables use for calculation
	DECLARE @totalRecordsProcessed   INT           = 0;
	DECLARE @sqlStatement            NVARCHAR(MAX);
	DECLARE @sqlInsStatement         NVARCHAR(MAX);
	DECLARE @sqlSelStatement         NVARCHAR(MAX);
	DECLARE @sqlEndStatement         NVARCHAR(MAX);

	DECLARE @vSqlGroupByStatement 	 NVARCHAR(MAX);
	DECLARE @vSqlMergeStatement      NVARCHAR(MAX);
	
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- Get the last calculation date
    SELECT @lastCalculationDate = MAX([CALCULATION_DATETIME]) 
      FROM [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE]
     WHERE [CDINDICATOR] = @ivaCdIndicator;
	
	-- Validate if exists a least one calculation  
    IF (@lastCalculationDate IS NULL)
	BEGIN	
		SET @lastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
	END  
	 
	SET DATEFIRST 1;
	 	
	SET @sqlSelStatement = ''
		+ ' SELECT  @ivaIndicator, '
		+ '        CASE '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        CASE  '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        DATEDIFF(dd, CASE '
		+ '                       WHEN @ivaFrequency = ''D'' ' 
		+ '                         THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '                       WHEN @ivaFrequency = ''W'' '
		+ '                         THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) '
		+ '                       WHEN @ivaFrequency = ''M'' '
		+ '                          THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) '
		+ '                       ELSE NULL '
		+ '                     END, '
		+ '                     CASE '
		+ '                       WHEN @ivaFrequency = ''D'' ' 
		+ '                         THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '                       WHEN @ivaFrequency = ''W'' '
		+ '                         THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) '
		+ '                       WHEN @ivaFrequency = ''M'' '
		+ '                         THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '                       ELSE NULL '
		+ '                     END) + 1, '
		+ '         SUM(BH.SECURITY_STOCK * BH.TVC), SUM(BH.BUFFER * BH.TVC),	SUM(BH.ALLOWED_OVERSTOCKING * BH.TVC), '
		+ '         SUM(CASE '
		+ '               WHEN BH.INVENTORY_ON_SITE <= BH.SECURITY_STOCK '
		+ '                 THEN BH.INVENTORY_ON_SITE * BH.TVC '
		+ '               WHEN BH.INVENTORY_ON_SITE <= BH.BUFFER + BH.SECURITY_STOCK '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_SITE <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.INVENTORY_ON_SITE <= BH.SECURITY_STOCK '
		+ '                 THEN 0 '
		+ '               WHEN BH.INVENTORY_ON_SITE <= BH.BUFFER + BH.SECURITY_STOCK '
		+ '                 THEN BH.INVENTORY_ON_SITE * BH.TVC - BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_SITE <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.BUFFER * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.BUFFER * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), ' 
		+ '         SUM(CASE '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_SITE <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.INVENTORY_ON_SITE * BH.TVC - BH.BUFFER * BH.TVC - BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.ALLOWED_OVERSTOCKING * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), ' 
		+ '         SUM(CASE '
		+ '               WHEN (BH.INVENTORY_ON_SITE > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.INVENTORY_ON_SITE * BH.TVC - BH.EFFECTIVE_BUFFER * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), ' 
		+ '         SUM(CASE '
		+ '               WHEN BH.INVENTORY_ON_CHAIN <= BH.SECURITY_STOCK '
		+ '                 THEN BH.INVENTORY_ON_CHAIN * BH.TVC '
		+ '               WHEN BH.INVENTORY_ON_CHAIN <= BH.BUFFER + BH.SECURITY_STOCK '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC'
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_CHAIN <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.SECURITY_STOCK * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN BH.INVENTORY_ON_CHAIN <= BH.SECURITY_STOCK '
		+ '                 THEN 0 '
		+ '               WHEN BH.INVENTORY_ON_CHAIN <= BH.BUFFER + BH.SECURITY_STOCK '
		+ '                 THEN BH.INVENTORY_ON_CHAIN * BH.TVC - BH.SECURITY_STOCK * BH.TVC'
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_CHAIN <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.BUFFER * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.BUFFER * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.BUFFER + BH.SECURITY_STOCK AND BH.INVENTORY_ON_CHAIN <= BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.INVENTORY_ON_CHAIN * BH.TVC - BH.BUFFER * BH.TVC - BH.SECURITY_STOCK * BH.TVC '
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.ALLOWED_OVERSTOCKING * BH.TVC '
		+ '               ELSE 0 '
		+ '              END), '
		+ '         SUM(CASE '
		+ '               WHEN (BH.INVENTORY_ON_CHAIN > BH.EFFECTIVE_BUFFER) '
		+ '                 THEN BH.INVENTORY_ON_CHAIN * BH.TVC - BH.EFFECTIVE_BUFFER * BH.TVC'
		+ '               ELSE 0 '
		+ '              END), '
		+ '         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @ivaCSTime ';
		
	SET @sqlEndStatement = 	''
		+ '  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH], [dbo].[TFSCM_CLI_BUFFER] [A] '
		+ ' WHERE BH.SKU           = A.SKU '
		+ '   AND BH.LOCATION      = A.LOCATION ' 
		+ '   AND BH.CREATION_DATE > @lastCalculationDateAux ';
			
	SET @sqlStatement = @sqlSelStatement + @sqlEndStatement;
	
	IF (@ivaUserFilters IS NOT NULL)
	BEGIN
		SET @sqlStatement = @sqlStatement  + ' AND ' + @ivaUserFilters;
	END

	SET @vSqlGroupByStatement = ''
		+ ' GROUP BY CASE '  
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        CASE  '
		+ '          WHEN @ivaFrequency = ''D'' ' 
		+ '            THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '          WHEN @ivaFrequency = ''W'' '
		+ '            THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) '
		+ '          WHEN @ivaFrequency = ''M'' '
		+ '            THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '          ELSE NULL '
		+ '        END, '
		+ '        DATEDIFF(dd, CASE '
		+ '                       WHEN @ivaFrequency = ''D'' ' 
		+ '                         THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '                       WHEN @ivaFrequency = ''W'' '
		+ '                         THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS), BH.UPDATE_MOVEMENTS),103), 103) '
		+ '                       WHEN @ivaFrequency = ''M'' '
		+ '                          THEN DATEADD ( month , DATEDIFF ( month , 0 , BH.UPDATE_MOVEMENTS), 0 ) '
		+ '                       ELSE NULL '
		+ '                     END, '
		+ '                     CASE '
		+ '                       WHEN @ivaFrequency = ''D'' ' 
		+ '                         THEN CAST(CAST(BH.UPDATE_MOVEMENTS AS DATE) AS DATETIME) '
		+ '                       WHEN @ivaFrequency = ''W'' '
		+ '                         THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, BH.UPDATE_MOVEMENTS)+6, BH.UPDATE_MOVEMENTS), 103), 103) '
		+ '                       WHEN @ivaFrequency = ''M'' '
		+ '                         THEN CAST(CAST(DATEADD (s ,- 1, DATEADD ( mm , DATEDIFF ( m , 0 , BH.UPDATE_MOVEMENTS)+ 1 , 0 )) AS DATE) AS DATETIME) '
		+ '                       ELSE NULL '
		+ '                     END) + 1 ';
	
	SET @sqlStatement = @sqlStatement + @vSqlGroupByStatement;
	
	SET @vSqlMergeStatement = CAST('' as nVarChar(MAX))
	    + 'MERGE INTO [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE] AS target ' 
        + ' USING ('	+ @sqlStatement + ')'
		+ ' AS source (CDINDICATOR, START_DATE, END_DATE, PERIOD_DAYS, SAFETY_STOCK_THEORETICAL_COST, BUFFER_THEORETICAL_COST, '
		+ '            ALLOWED_OVERSTOCKING_THEORETICAL_COST, SITE_SAFETY_STOCK_COST, SITE_BUFFER_INVENTORY_COST, '
		+ '            SITE_CYAN_INVENTORY_COST, SITE_BLUE_INVENTORY_COST, CHAIN_SAFETY_STOCK_COST, CHAIN_BUFFER_INVENTORY_COST, '
		+ '            CHAIN_CYAN_INVENTORY_COST, CHAIN_BLUE_INVENTORY_COST, AVERAGE_SAFETY_STOCK_THEORETICAL_COST, '
		+ '            AVERAGE_BUFFER_THEORETICAL_COST, AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST, '
		+ '            AVERAGE_SITE_SAFETY_STOCK_COST, AVERAGE_SITE_BUFFER_INVENTORY_COST, AVERAGE_SITE_CYAN_INVENTORY_COST, '
		+ '            AVERAGE_SITE_BLUE_INVENTORY_COST, AVERAGE_CHAIN_SAFETY_STOCK_COST, AVERAGE_CHAIN_BUFFER_INVENTORY_COST, '
		+ '            AVERAGE_CHAIN_CYAN_INVENTORY_COST, AVERAGE_CHAIN_BLUE_INVENTORY_COST, CALCULATION_DATETIME ) '
		+ ' ON (target.CDINDICATOR = source.CDINDICATOR AND '
		+ '     target.START_DATE  = source.START_DATE AND ' 
		+ '     target.END_DATE    = source.END_DATE)  '
        + ' WHEN MATCHED THEN UPDATE '
		+ '  SET target.SAFETY_STOCK_THEORETICAL_COST = target.SAFETY_STOCK_THEORETICAL_COST + source.SAFETY_STOCK_THEORETICAL_COST, '
		+ '      target.BUFFER_THEORETICAL_COST       = target.BUFFER_THEORETICAL_COST       + source.BUFFER_THEORETICAL_COST      , '
		+ '      target.ALLOWED_OVERSTOCKING_THEORETICAL_COST = target.ALLOWED_OVERSTOCKING_THEORETICAL_COST + source.ALLOWED_OVERSTOCKING_THEORETICAL_COST, '
		+ '      target.SITE_SAFETY_STOCK_COST        = target.SITE_SAFETY_STOCK_COST        + source.SITE_SAFETY_STOCK_COST, '
		+ '      target.SITE_BUFFER_INVENTORY_COST    = target.SITE_BUFFER_INVENTORY_COST    + source.SITE_BUFFER_INVENTORY_COST, '
		+ '      target.SITE_CYAN_INVENTORY_COST      = target.SITE_CYAN_INVENTORY_COST      + source.SITE_CYAN_INVENTORY_COST, '
		+ '      target.SITE_BLUE_INVENTORY_COST      = target.SITE_BLUE_INVENTORY_COST      + source.SITE_BLUE_INVENTORY_COST, '
		+ '      target.CHAIN_SAFETY_STOCK_COST       = target.CHAIN_SAFETY_STOCK_COST       + source.CHAIN_SAFETY_STOCK_COST, '
		+ '      target.CHAIN_BUFFER_INVENTORY_COST   = target.CHAIN_BUFFER_INVENTORY_COST   + source.CHAIN_BUFFER_INVENTORY_COST, '
		+ '      target.CHAIN_CYAN_INVENTORY_COST     = target.CHAIN_CYAN_INVENTORY_COST     + source.CHAIN_CYAN_INVENTORY_COST, '
		+ '      target.CHAIN_BLUE_INVENTORY_COST     = target.CHAIN_BLUE_INVENTORY_COST     + source.CHAIN_BLUE_INVENTORY_COST, '
		+ '      target.CALCULATION_DATETIME          = @ivaCSTime '
		+ ' WHEN NOT MATCHED THEN INSERT '
		+ '	 	    (CDINDICATOR, START_DATE, END_DATE, PERIOD_DAYS, SAFETY_STOCK_THEORETICAL_COST, BUFFER_THEORETICAL_COST, '
		+ '          ALLOWED_OVERSTOCKING_THEORETICAL_COST, SITE_SAFETY_STOCK_COST, SITE_BUFFER_INVENTORY_COST, '
		+ '          SITE_CYAN_INVENTORY_COST, SITE_BLUE_INVENTORY_COST, CHAIN_SAFETY_STOCK_COST, CHAIN_BUFFER_INVENTORY_COST, '
		+ '          CHAIN_CYAN_INVENTORY_COST, CHAIN_BLUE_INVENTORY_COST, AVERAGE_SAFETY_STOCK_THEORETICAL_COST, '
		+ '          AVERAGE_BUFFER_THEORETICAL_COST, AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST, '
		+ '          AVERAGE_SITE_SAFETY_STOCK_COST, AVERAGE_SITE_BUFFER_INVENTORY_COST, AVERAGE_SITE_CYAN_INVENTORY_COST, '
		+ '          AVERAGE_SITE_BLUE_INVENTORY_COST, AVERAGE_CHAIN_SAFETY_STOCK_COST, AVERAGE_CHAIN_BUFFER_INVENTORY_COST, '
		+ '          AVERAGE_CHAIN_CYAN_INVENTORY_COST, AVERAGE_CHAIN_BLUE_INVENTORY_COST, CALCULATION_DATETIME ) '
		+ '	 VALUES (CDINDICATOR, START_DATE, END_DATE, PERIOD_DAYS, SAFETY_STOCK_THEORETICAL_COST, BUFFER_THEORETICAL_COST, '
		+ '      	 ALLOWED_OVERSTOCKING_THEORETICAL_COST, SITE_SAFETY_STOCK_COST, SITE_BUFFER_INVENTORY_COST, '
		+ '      	 SITE_CYAN_INVENTORY_COST, SITE_BLUE_INVENTORY_COST, CHAIN_SAFETY_STOCK_COST, CHAIN_BUFFER_INVENTORY_COST, '
		+ '      	 CHAIN_CYAN_INVENTORY_COST, CHAIN_BLUE_INVENTORY_COST, AVERAGE_SAFETY_STOCK_THEORETICAL_COST, '
		+ '      	 AVERAGE_BUFFER_THEORETICAL_COST, AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST, '
		+ '      	 AVERAGE_SITE_SAFETY_STOCK_COST, AVERAGE_SITE_BUFFER_INVENTORY_COST, AVERAGE_SITE_CYAN_INVENTORY_COST, '
		+ '      	 AVERAGE_SITE_BLUE_INVENTORY_COST, AVERAGE_CHAIN_SAFETY_STOCK_COST, AVERAGE_CHAIN_BUFFER_INVENTORY_COST, '
		+ '      	 AVERAGE_CHAIN_CYAN_INVENTORY_COST, AVERAGE_CHAIN_BLUE_INVENTORY_COST, CALCULATION_DATETIME );'
		
		
	--SELECT CAST('<root><![CDATA[' + @vSqlMergeStatement + ']]></root>' AS XML) 

	EXEC sys.sp_executesql
		 @vSqlMergeStatement,
		 N'@ivaFrequency VARCHAR(1), @lastCalculationDateAux DATETIME, @ivaCSTime DATETIME, @ivaIndicator NUMERIC(4)',
		 @ivaFrequency = @ivaIndicatorFrequency,
		 @lastCalculationDateAux = @lastCalculationDate,
		 @ivaCSTime = @ivaCurrentServerTime,
		 @ivaIndicator = @ivaCdIndicator;
		
	SET DATEFIRST 7;
	
	-- For all records processed, update the averages
	UPDATE [dbo].[TFSCM_CLI_BUFFER_STOCK_VALUE]
	   SET AVERAGE_SITE_SAFETY_STOCK_COST                 = (SITE_SAFETY_STOCK_COST        / PERIOD_DAYS),
	       AVERAGE_CHAIN_SAFETY_STOCK_COST                = (CHAIN_SAFETY_STOCK_COST       / PERIOD_DAYS),
	       AVERAGE_SITE_BUFFER_INVENTORY_COST             = (SITE_BUFFER_INVENTORY_COST    / PERIOD_DAYS),
	       AVERAGE_CHAIN_BUFFER_INVENTORY_COST            = (CHAIN_BUFFER_INVENTORY_COST   / PERIOD_DAYS),
	       AVERAGE_SITE_CYAN_INVENTORY_COST               = (SITE_CYAN_INVENTORY_COST      / PERIOD_DAYS),
	       AVERAGE_CHAIN_CYAN_INVENTORY_COST              = (CHAIN_CYAN_INVENTORY_COST     / PERIOD_DAYS),
	       AVERAGE_SITE_BLUE_INVENTORY_COST               = (SITE_BLUE_INVENTORY_COST      / PERIOD_DAYS),
	       AVERAGE_CHAIN_BLUE_INVENTORY_COST              = (CHAIN_BLUE_INVENTORY_COST     / PERIOD_DAYS) ,
	       AVERAGE_SAFETY_STOCK_THEORETICAL_COST          = (SAFETY_STOCK_THEORETICAL_COST / PERIOD_DAYS),
	       AVERAGE_BUFFER_THEORETICAL_COST                = (BUFFER_THEORETICAL_COST       / PERIOD_DAYS),
	       AVERAGE_ALLOWED_OVERSTOCKING_THEORETICAL_COST  = (ALLOWED_OVERSTOCKING_THEORETICAL_COST / PERIOD_DAYS)	       	       
	 WHERE CDINDICATOR          = @ivaCdIndicator 
	   AND CALCULATION_DATETIME = @calculationDatetime;
   
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulVICalculation ' + CONVERT(VARCHAR,@lastCalculationDate,103) + '--' + CONVERT(VARCHAR,@totalRecordsProcessed);
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 17/03/2020
-- Description : Fully set-based solution with removing function calls
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/01/2020
-- Description : * Change UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION by the column 
--				   DAILY_AVERAGE_CONSUMPTION in the history table
--				 * Add filter by BH.DAILY_AVERAGE_CONSUMPTION in @SqlForQuery, and  	 
--				 * Remove this filter by BUFFER_UPDATE_DATE in @SqlForQuery
-- Version     : 4.15.0
-- ------------------------------------------------------------------------------------------- 
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 30/03/2017
-- Description   : Removing unnecessary code
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÃ…Â¡
-- Upgrade date: 29/03/2017
-- Description : Transformation to set-base solution
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 08/03/2017
-- Description : * Apply changes in order to set a naming standard  
--               * Remove columns SV_NEW_BUFFERS and SV_BUFFERS_WITH_HISTORY 
--                 from VA indocator table
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 01/03/2017
-- Description : Apply changes in order to get a better performance 
--              (All logic for "New buffers" is removed)
-- -------------------------------------------------------------------------------------------
-- Author      : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Upgrade date: 08/04/2016
-- Description : Fetch next Continue if (initial_date == buffer_update_date)
-- -------------------------------------------------------------------------------------------
-- Author      : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Upgrade date: 07/10/2015
-- Description : Is Created the @vSvNewBuffersOld variable to save old values 
--               form data base.
-- -------------------------------------------------------------------------------------------
-- Author     : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 13/08/2015
-- Description: Procedure to calculate the stockout values 
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE]
	/* Input Parameters */
    @ivaCdIndicator        NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn        NVARCHAR(50),
    @ivaSerieValue         NVARCHAR(MAX),
    @ivaCurrentServerTime  DATETIME,
    @ivaUserFilters        NVARCHAR(MAX),
	/* Output Parameters */
    @ovaResult  VARCHAR(1)    OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
AS
	/* Variables used for calculation */
	DECLARE	@LastCalculationDate   DATETIME;  

	DECLARE @SqlForQuery           NVARCHAR(MAX);
	DECLARE @AverageDays           INT = 30;
BEGIN
	BEGIN TRY 
		-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
		SET NOCOUNT ON;
		
		-- -----------------------------------------------------------------------------------
		-- Get the last calculation date
		-- -----------------------------------------------------------------------------------
		SELECT @LastCalculationDate = MAX(CALCULATION_DATE) 
		  FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE
		 WHERE CDINDICATOR = @ivaCdIndicator 
		   AND SERIE       = @ivaSerieValue;
	     
		-- -----------------------------------------------------------------------------------
		-- Validate if exists a least one calculation
		-- -----------------------------------------------------------------------------------
		IF (@LastCalculationDate IS NULL)
		BEGIN	
			SET @LastCalculationDate = CONVERT(DATETIME, '01/01/1901', 103);
		END 
			
		-- -----------------------------------------------------------------------------------
		-- SQL to be executed 
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200130: Since v4.15.0, modify filters and sum calculation
		-- -----------------------------------------------------------------------------------
		SET @SqlForQuery = ''
						+ 'MERGE INTO [dbo].[TFSCM_CLI_BUFFER_STOCKOUT_VALUE] [T] '
						+ 'USING (SELECT @LinCdIndicator AS CDINDICATOR, @LinSeriesValue AS SERIE, '
						+ '              CASE @LinIndicatorFrequency '
						+ '                WHEN ''D'' '
						+ '                  THEN CAST(CAST([BH].[UPDATE_MOVEMENTS] AS DATE) AS DATETIME) '
						+ '                WHEN ''W'' '
						+ '                  THEN CONVERT(DATETIME, CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, [BH].[UPDATE_MOVEMENTS]), [BH].[UPDATE_MOVEMENTS]), 103), 103) '
						+ '                WHEN ''M'' '
						+ '                  THEN DATEADD (month, DATEDIFF(month, 0, [BH].[UPDATE_MOVEMENTS]), 0) '
						+ '                ELSE CAST(NULL AS DATETIME) '
						+ '              END AS START_DATE, '
						+ '              CASE @LinIndicatorFrequency '
						+ '                WHEN ''D'' '
						+ '                  THEN CAST(CAST([BH].[UPDATE_MOVEMENTS] AS DATE) AS DATETIME) '
						+ '                WHEN ''W'' '
						+ '                  THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 7 - DATEPART(DW, [BH].[UPDATE_MOVEMENTS]), [BH].[UPDATE_MOVEMENTS]), 103), 103) '
						+ '                WHEN ''M'' '
						+ '                  THEN CAST(CAST(DATEADD (s , -1, DATEADD(mm, DATEDIFF(m, 0, [BH].UPDATE_MOVEMENTS) + 1, 0)) AS DATE) AS DATETIME) '
						+ '                ELSE CAST(NULL AS DATETIME)'
						+ '              END AS END_DATE, '
						+ '              SUM([BH].[DAILY_AVERAGE_CONSUMPTION] * [BH].[UNIT_THROUGHPUT]) AS TOTAL_STOCKOUT_VALUE '
						+ '         FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH] INNER JOIN '
						+ '              [dbo].[TFSCM_CLI_BUFFER]     [BUFFER] ON ([BH].[SKU] = [BUFFER].[SKU] AND [BH].[LOCATION] = [BUFFER].[LOCATION]) '
						+ '        WHERE [BH].[UNIT_THROUGHPUT]           IS NOT NULL  '
						+ '          AND [BH].[UNIT_THROUGHPUT]           <> 0 '
						+ '          AND [BH].[DAILY_AVERAGE_CONSUMPTION] IS NOT NULL '
						+ '          AND [BH].[DAILY_AVERAGE_CONSUMPTION] <> 0 '
						+ '          AND [BH].[WORST_INVENTORY_ON_SITE]   <= 0 '
						+ '          AND [BH].[BUFFER]                    <> 0 '
						+ '          AND [BH].[CREATION_DATE]              > @LinLastCalculationDate ';				 
						
		-- -----------------------------------------------------------------------------------
		-- If a series column is sent, then add a filter to the query
		-- -----------------------------------------------------------------------------------
		IF (@ivaSerieColumn IS NOT NULL)
		BEGIN 
			IF (@ivaSerieValue = 'EMPTY_SERIE_VALUE')
			BEGIN	
				SET @SqlForQuery = @SqlForQuery + ' AND ' + @ivaSerieColumn + ' IS NULL ';
			END
			ELSE
			BEGIN
				SET @SqlForQuery = @SqlForQuery + ' AND ' + @ivaSerieColumn + ' = @LinSeriesValue ';
			END			
		END	
		
		-- -----------------------------------------------------------------------------------
		-- If there are some user filters, then add them to the query
		-- -----------------------------------------------------------------------------------
		IF (@ivaUserFilters IS NOT NULL)
		BEGIN
			SET @SqlForQuery = @SqlForQuery + ' AND ' + @ivaUserFilters;
		END
		
		SET @SqlForQuery = @SqlForQuery + ' GROUP BY CASE @LinIndicatorFrequency '
						   + '                         WHEN ''D'' '
						   + '                           THEN CAST(CAST([BH].[UPDATE_MOVEMENTS] AS DATE) AS DATETIME) '
						   + '                         WHEN ''W'' '
						   + '                           THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 1 - DATEPART(DW, [BH].[UPDATE_MOVEMENTS]), [BH].[UPDATE_MOVEMENTS]), 103), 103) '
						   + '                         WHEN ''M'' '
						   + '                           THEN DATEADD (month, DATEDIFF(month , 0, [BH].[UPDATE_MOVEMENTS]), 0) '
						   + '                         ELSE CAST(NULL AS DATETIME) '
						   + '                       END, '
						   + '                       CASE @LinIndicatorFrequency '
						   + '                         WHEN ''D'' '
						   + '                           THEN CAST(CAST([BH].[UPDATE_MOVEMENTS] AS DATE) AS DATETIME) '
						   + '                         WHEN ''W'' '
						   + '                           THEN CONVERT(DATETIME,CONVERT(VARCHAR, DATEADD(DD, 7 - DATEPART(DW, [BH].[UPDATE_MOVEMENTS]), [BH].[UPDATE_MOVEMENTS]), 103), 103) '
						   + '                         WHEN ''M'' '
						   + '                           THEN CAST(CAST(DATEADD (s, -1, DATEADD(mm, DATEDIFF(m, 0, [BH].[UPDATE_MOVEMENTS]) + 1, 0)) AS DATE) AS DATETIME) '
						   + '                         ELSE CAST(NULL AS DATETIME) '
						   + '                       END '
		                   + '       ) [S]   ON [T].[CDINDICATOR]              = [S].[CDINDICATOR]  '
				           + ' 				AND COALESCE([T].[SERIE], ''xxx'') = COALESCE([S].[SERIE], ''xxx'') '
				           + ' 				AND [T].[START_DATE]               = [S].[START_DATE] '
				           + ' 				AND [T].[END_DATE]                 = [S].[END_DATE] '
                           + ' WHEN MATCHED THEN '
                           + '		UPDATE '
                           + '         SET TOTAL_SV         = TOTAL_SV + [S].[TOTAL_STOCKOUT_VALUE], '
			               + '             CALCULATION_DATE = @LinCurrentServerTime '
						   + ' WHEN NOT MATCHED BY TARGET THEN '
                           + '		INSERT (CDINDICATOR, SERIE, TOTAL_SV, START_DATE, END_DATE, CALCULATION_DATE) '
						   + '		VALUES (@LinCdIndicator , @LinSeriesValue, [S].[TOTAL_STOCKOUT_VALUE], [S].[START_DATE], [S].[END_DATE], @LinCurrentServerTime); ';
		
		SET DATEFIRST 1;
		EXEC sys.sp_executesql @SqlForQuery, 
			                   N'@LinCdIndicator NUMERIC(4), @LinSeriesValue NVARCHAR(MAX), @LinIndicatorFrequency VARCHAR(1), @LinCurrentServerTime DATETIME, @LinLastCalculationDate DATETIME, @LinAverageDays INT', 
				               @LinCdIndicator         = @ivaCdIndicator, 
				               @LinSeriesValue         = @ivaSerieValue,
				               @LinIndicatorFrequency  = @ivaIndicatorFrequency,
				               @LinCurrentServerTime   = @ivaCurrentServerTime,
							   @LinLastCalculationDate = @LastCalculationDate,
							   @LinAverageDays         = @AverageDays;		 
		SET DATEFIRST 7;
		 
		-- -----------------------------------------------------------------------------------
		-- Procedure result
		-- -----------------------------------------------------------------------------------
		SET @ovaResult  = '0';
		SET @ovaMessage = 'successfulCalculationVA ';
	END TRY	
	BEGIN CATCH
		SET @ovaResult = '1';
		SET @ovaMessage = '' 
			+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS VARCHAR) 
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE(); 
			
		DECLARE @ErrorMessage NVARCHAR(2048), @ErrorSeverity INT, @ErrorState INT;
		
		SET @ErrorMessage  = ERROR_MESSAGE();
		SET @ErrorSeverity = ERROR_SEVERITY();
		SET @ErrorState    = ERROR_STATE();
		
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE_FSPACES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 09/03/2017
-- Description : * Apply changes in order to set a naming standard  
--               * Remove columns SV_NEW_BUFFERS and SV_BUFFERS_WITH_HISTORY
--                 from VA indocator table
-- ---------------------------------------------------------------------------
-- Author       : Julian Andres Gonzalez 
-- Creation date: 01/9/2015
-- Description  : Procedure to fill spaces in the indicator
-- ===========================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE_FSPACES]
	/* Input Parameters */
    @ivaCdIndicator        NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn        NVARCHAR(50),
    @ivaSerieValue         NVARCHAR(MAX),
    @ivaCurrentServerTime  DATETIME,
    @ivaUserFilters        NVARCHAR(MAX),
	/* Outpt Parameters */
    @ovaResult             VARCHAR(1)    OUTPUT,
    @ovaMessage            NVARCHAR(MAX) OUTPUT
AS
	/* Extra fields use to fill serie spaces */
	DECLARE @StartFrequencyRange DATETIME;
	DECLARE @EndFrequencyRange   DATETIME;
	DECLARE @RowCount            INT;
	DECLARE	@ReturnValue         INT;
	DECLARE @SerieSpacesCursor   CURSOR;
	DECLARE @DateSpace           DATETIME;
	DECLARE @SpaceLoop           BIT;
BEGIN
	/* SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements. */
	SET NOCOUNT ON;
	EXEC @ReturnValue = [dbo].[GETDATE_FREQUENCY_RANGE]
		@ivaDate       = @ivaCurrentServerTime,
		@ivaFrecuency  = @ivaIndicatorFrequency,
		@ovaStartRange = @StartFrequencyRange OUTPUT,
		@ovaEndRange   = @EndFrequencyRange   OUTPUT;
		
	/* Fill spaces in the serie with zero values */
    SET @SerieSpacesCursor = CURSOR FORWARD_ONLY STATIC FOR	
		SELECT VA.START_DATE
		  FROM (SELECT DATEADD(DAY, 1, AUX.END_DATE) START_DATE
			      FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE AUX
			     WHERE AUX.CDINDICATOR = @ivaCdIndicator 
				   AND AUX.SERIE       = @ivaSerieValue) VA
		 WHERE VA.START_DATE NOT IN (SELECT VA2.START_DATE
									   FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE VA2
									  WHERE VA2.CDINDICATOR = @ivaCdIndicator 
									    AND VA2.SERIE       = @ivaSerieValue)
		 UNION 
		SELECT MIN(VAALL.START_DATE)
		  FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE VAALL
		 WHERE VAALL.CDINDICATOR = @ivaCdIndicator
		 UNION
		SELECT @StartFrequencyRange;
		 
    OPEN @SerieSpacesCursor;
    FETCH NEXT FROM @SerieSpacesCursor INTO @DateSpace;
	
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		IF (@DateSpace IS NOT NULL)
		BEGIN
			SET @SpaceLoop = 0;
			
			WHILE (@SpaceLoop = 0)
			BEGIN						
				/* Get the frequency range to validate */
				EXEC @ReturnValue = [dbo].[GETDATE_FREQUENCY_RANGE]
					@ivaDate       = @DateSpace,
					@ivaFrecuency  = @ivaIndicatorFrequency,
					@ovaStartRange = @StartFrequencyRange OUTPUT,
					@ovaEndRange   = @EndFrequencyRange   OUTPUT;
					
				/* Check if exists a row for the frequency range */
				SELECT @RowCount = COUNT(*)
				  FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE VA
				 WHERE VA.CDINDICATOR = @ivaCdIndicator
				   AND VA.SERIE       = @ivaSerieValue
				   AND VA.START_DATE  = @StartFrequencyRange
				   AND VA.END_DATE    = @EndFrequencyRange;
				
				IF (@RowCount > 0 OR @StartFrequencyRange > @ivaCurrentServerTime)
				BEGIN
					SET @SpaceLoop = 1;
				END  
				ELSE
				BEGIN
					INSERT INTO TFSCM_CLI_BUFFER_STOCKOUT_VALUE
						   (CDINDICATOR, SERIE, TOTAL_SV, 
						    START_DATE, END_DATE, CALCULATION_DATE)
					VALUES (@ivaCdIndicator, @ivaSerieValue, 0,
							@StartFrequencyRange, @EndFrequencyRange, @ivaCurrentServerTime);
							
					SET @DateSpace = DATEADD(DAY, 1, @EndFrequencyRange);
				END
			END
		END		
									
		FETCH NEXT FROM @SerieSpacesCursor INTO @DateSpace;
	END
    CLOSE @SerieSpacesCursor;
	DEALLOCATE @SerieSpacesCursor;	
    
    /* Procedure result */
    SET @ovaResult  = '0';
    SET @ovaMessage = 'sucessfulCalculationVAFSPACES';
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_COLOR_DISTRIBUTION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 06/09/2013
-- Description:	Procedure to calculate the color distribution of the production orders
-- =============================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_COLOR_DISTRIBUTION]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE	@vLastCalculationDate DATETIME;
	DECLARE	@vLastCalculationDateAux DATETIME;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vOrdersCursor AS CURSOR;
	DECLARE @vFinalizationDate AS DATETIME;
	DECLARE @vRealReleaseDate AS DATETIME;
	DECLARE @vLastColorUpdate AS DATETIME;
	DECLARE @vModifyDate AS DATETIME;
	DECLARE @vRecommendedReleasedDate AS DATETIME;
	DECLARE @vFinalizationLoop AS BIT;
	DECLARE @vCounter AS NUMERIC(10) = 0;
	/*DECLARE @vCounterBlack AS NUMERIC(10) = 0;	*/
	DECLARE @vStartEvaluationRange AS DATETIME;
	DECLARE @vEndEvaluationRange AS DATETIME;
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE	@return_value INT;
	DECLARE	@vFrequencyMultiplier INT;
	DECLARE	@vStartMultiplier DATETIME;
	DECLARE	@vEndMultiplier DATETIME;
	DECLARE @vCount INT;
	--Extra fields use to fill serie spaces
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;	
	DECLARE @vTotalReleases AS NUMERIC(10) = -1;--zero to indicate that the count sql has'nt been executed
	DECLARE @vSQLQueryTotalReleases AS NVARCHAR(MAX);
	DECLARE @vPriorityColor AS  NVARCHAR(10);
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SET @vSQLQueryTotalReleases = 'SELECT @vTotalReleases = COUNT(*) FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
										' JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
										' WHERE ORDERS.CDPARENT_ORDER IS NULL '+
										'	      AND ORDERS.FINALIZATION_DATE IS NULL '+
										'		  AND ORDERS.REAL_RELEASE_DATE IS NOT NULL ';
	
	--SQL to be executed
	SET @vSQLQuery  = ' SELECT ORDERS.ORDER_MODIFY_DATE,ORDERS.PRIORITY_COLOR '+
					  ' FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
					  '		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
					  ' WHERE ORDERS.CDPARENT_ORDER IS NULL '+
					  '	      AND ORDERS.FINALIZATION_DATE IS NULL '+
					  '		  AND ORDERS.REAL_RELEASE_DATE IS NOT NULL ';
					  
	IF @ivaUserFilters IS NOT NULL
		BEGIN
			SET @vSQLQuery = @vSQLQuery +' AND '+@ivaUserFilters;
			SET @vSQLQueryTotalReleases = @vSQLQueryTotalReleases +' AND '+@ivaUserFilters;
		END
			
		EXEC sp_executesql
		@Query = @vSQLQueryTotalReleases ,
		@Params = N'@vTotalReleases INT OUTPUT' ,
		@vTotalReleases = @vTotalReleases OUTPUT					
	
					  
	--Process the result of the query				  	   	
	SET @vSqlStatement = 'SET @vCursor = CURSOR FAST_FORWARD FOR '+@vSQLQuery+' open @vCursor;';
	exec sys.sp_executesql
		@vSqlStatement
		,N'@vCursor cursor output,@ivaSerieValueAux VARCHAR(200),@ivaCurrentServerTimeAux DATETIME,@vLastCalculationDateAux DATETIME' 	
		,@vOrdersCursor output
		,@ivaSerieValueAux = @ivaSerieValue
		,@ivaCurrentServerTimeAux = @ivaCurrentServerTime
		,@vLastCalculationDateAux = @vModifyDate;
	
	--Evaluate each order
	FETCH NEXT FROM @vOrdersCursor INTO @vModifyDate,@vPriorityColor
	WHILE @@FETCH_STATUS = 0
	BEGIN
	
		/*SET @vCounter = @vCounter + 1;*/
		
		/*IF @vPriorityColor = 'Black'	
			BEGIN
				SET @vCounterBlack = @vCounterBlack + 1;
			END*/	
		SET @vStartEvaluationRange = @vModifyDate;
		SET @vEndEvaluationRange = @ivaCurrentServerTime;
		
			
		--Get the frequency range to process
		EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
								@ivaDate = @vStartEvaluationRange,
								@ivaFrecuency = @ivaIndicatorFrequency,
								@ovaStartRange = @vStartFrequencyRange OUTPUT,
								@ovaEndRange = @vEndFrequencyRange OUTPUT;
				
				--Check if exists a row for the frequency range
				SELECT @vCount = COUNT(*)
				FROM TFSCM_CLI_COLOR_DISTRIBUTION CDI
				WHERE 
				
				--CDI.CDINDICATOR = @ivaCdIndicator AND
					CDI.START_DATE = @vStartFrequencyRange AND
					  CDI.END_DATE = @vEndFrequencyRange
					  AND CDI.CDINDICATOR = @ivaCdIndicator; 
				IF @vCount = 0
					BEGIN					
					IF @vPriorityColor = 'Cyan'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,1,0,0,0,0,1,100,0, 0, 0, 0,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
						
					IF	@vPriorityColor = 'Green'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,0,1,0,0,0,1,0,100, 0, 0, 0,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
						
						
					IF @vPriorityColor = 'Yellow'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,0,0,1,0,0,1,0,0, 100, 0, 0,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
						
					IF @vPriorityColor = 'Red'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,0,0,0,1,0,1,0,0, 0, 100,0,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
						
					IF @vPriorityColor = 'Black'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,0,0,0,0,1,1,0,0, 0, 0, 100,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									
					IF @vPriorityColor = 'Blue'					
						INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
								PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, BLUE_ORDERS,PERCENTAGE_BLUE, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,0,0,0,0,0,1,0,0, 0, 0, 0,1,100,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);					
						 			
					END
				ELSE
					BEGIN
														 			
						IF @vPriorityColor = 'Cyan'		
							UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
								SET CIAN_ORDERS = CIAN_ORDERS+1,
									TOTAL_ORDERS = TOTAL_ORDERS+1,
									PERCENTAGE_CIAN =  ((CIAN_ORDERS+1)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_GREEN = ((GREEN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_YELLOW = ((YELLOW_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_RED= ((RED_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_BLACK = (BLACK_ORDERS)/(TOTAL_ORDERS+1)*100,
									PERCENTAGE_BLUE = (BLUE_ORDERS)/(TOTAL_ORDERS+1)*100,
									CALCULATION_DATE =  @ivaCurrentServerTime
								WHERE CDINDICATOR = @ivaCdIndicator AND
								START_DATE = @vStartFrequencyRange AND
								END_DATE = @vEndFrequencyRange;
								
								
						
								
						IF @vPriorityColor = 'Green'		
							UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
								SET GREEN_ORDERS = GREEN_ORDERS+1,
									TOTAL_ORDERS = TOTAL_ORDERS+1,
									PERCENTAGE_CIAN =  ((CIAN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_GREEN = ((GREEN_ORDERS+1)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_YELLOW = ((YELLOW_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_RED= ((RED_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_BLACK = (BLACK_ORDERS)/(TOTAL_ORDERS+1)*100,
									PERCENTAGE_BLUE = (BLUE_ORDERS)/(TOTAL_ORDERS+1)*100,
									CALCULATION_DATE =  @ivaCurrentServerTime
								WHERE CDINDICATOR = @ivaCdIndicator AND
								START_DATE = @vStartFrequencyRange AND
								END_DATE = @vEndFrequencyRange;
								
						IF @vPriorityColor = 'Yellow'		
							UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
								SET YELLOW_ORDERS = YELLOW_ORDERS+1,
									TOTAL_ORDERS = TOTAL_ORDERS+1,
									PERCENTAGE_CIAN =  ((CIAN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_GREEN = ((GREEN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_YELLOW = ((YELLOW_ORDERS+1)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_RED= ((RED_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_BLACK = (BLACK_ORDERS)/(TOTAL_ORDERS+1)*100,
									PERCENTAGE_BLUE = (BLUE_ORDERS)/(TOTAL_ORDERS+1)*100,
									CALCULATION_DATE =  @ivaCurrentServerTime
								WHERE CDINDICATOR = @ivaCdIndicator AND
								START_DATE = @vStartFrequencyRange AND
								END_DATE = @vEndFrequencyRange;
								
						IF @vPriorityColor = 'Red'		
							UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
								SET RED_ORDERS = RED_ORDERS+1,
									TOTAL_ORDERS = TOTAL_ORDERS+1,
									PERCENTAGE_CIAN =  ((CIAN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_GREEN = ((GREEN_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_YELLOW = ((YELLOW_ORDERS)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_RED= ((RED_ORDERS+1)/(TOTAL_ORDERS+1))*100,
									PERCENTAGE_BLACK = (BLACK_ORDERS)/(TOTAL_ORDERS+1)*100,
									PERCENTAGE_BLUE = (BLUE_ORDERS)/(TOTAL_ORDERS+1)*100,
									CALCULATION_DATE =  @ivaCurrentServerTime
								WHERE CDINDICATOR = @ivaCdIndicator AND
								START_DATE = @vStartFrequencyRange AND
								END_DATE = @vEndFrequencyRange;
								
						IF @vPriorityColor = 'Black'							
								UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
									SET BLACK_ORDERS = BLACK_ORDERS+1,
										TOTAL_ORDERS = TOTAL_ORDERS+1,
										PERCENTAGE_CIAN =  ((CIAN_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_GREEN = ((GREEN_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_YELLOW = ((YELLOW_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_RED= ((RED_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_BLACK = (BLACK_ORDERS+1)/(TOTAL_ORDERS+1)*100,
										PERCENTAGE_BLUE = (BLUE_ORDERS)/(TOTAL_ORDERS+1)*100,
										CALCULATION_DATE =  @ivaCurrentServerTime
									WHERE CDINDICATOR = @ivaCdIndicator AND
									START_DATE = @vStartFrequencyRange AND
									END_DATE = @vEndFrequencyRange;
								
						IF @vPriorityColor = 'Blue'							
								UPDATE TFSCM_CLI_COLOR_DISTRIBUTION
									SET BLUE_ORDERS = BLUE_ORDERS+1,
										TOTAL_ORDERS = TOTAL_ORDERS+1,
										PERCENTAGE_CIAN =  ((CIAN_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_GREEN = ((GREEN_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_YELLOW = ((YELLOW_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_RED= ((RED_ORDERS)/(TOTAL_ORDERS+1))*100,
										PERCENTAGE_BLACK = (BLACK_ORDERS)/(TOTAL_ORDERS+1)*100,
										PERCENTAGE_BLUE = (BLUE_ORDERS+1)/(TOTAL_ORDERS+1)*100,
										CALCULATION_DATE =  @ivaCurrentServerTime
									WHERE CDINDICATOR = @ivaCdIndicator AND
									START_DATE = @vStartFrequencyRange AND
									END_DATE = @vEndFrequencyRange;
			
			END	
			
			
								
		FETCH NEXT FROM @vOrdersCursor INTO @vModifyDate,@vPriorityColor;
	END
	CLOSE @vOrdersCursor;
	DEALLOCATE @vOrdersCursor;
	
	--Fill spaces in the serie with zero values
    SET @vSerieSpacesCursor = CURSOR FAST_FORWARD FOR	SELECT OER.START_DATE
																FROM (SELECT DATEADD(DAY,1,AUX.END_DATE) START_DATE
																	  FROM TFSCM_CLI_COLOR_DISTRIBUTION AUX
																	  WHERE AUX.CDINDICATOR = @ivaCdIndicator ) OER
																WHERE OER.START_DATE NOT IN(SELECT OER2.START_DATE
																							FROM  TFSCM_CLI_COLOR_DISTRIBUTION OER2
																							WHERE OER2.CDINDICATOR = @ivaCdIndicator 
																							UNION
																							SELECT DATEADD(DAY,1,MAX(OER3.END_DATE))
																							FROM  TFSCM_CLI_COLOR_DISTRIBUTION OER3
																							WHERE OER3.CDINDICATOR = @ivaCdIndicator)
																UNION
																SELECT MIN(OERALL.START_DATE)
																FROM  TFSCM_CLI_COLOR_DISTRIBUTION OERALL
																WHERE OERALL.CDINDICATOR = @ivaCdIndicator;
		 
    OPEN @vSerieSpacesCursor;
    FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;
	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @vDateSpace IS NOT NULL
			BEGIN
				SET @vSpaceLoop = 0;
				WHILE @vSpaceLoop = 0
					BEGIN
						--PRINT CAST(@vDateSpace AS VARCHAR);
						--Get the frequency range to validate
						EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
													@ivaDate = @vDateSpace,
													@ivaFrecuency = @ivaIndicatorFrequency,
													@ovaStartRange = @vStartFrequencyRange OUTPUT,
													@ovaEndRange = @vEndFrequencyRange OUTPUT;
						--Check if exists a row for the frequency range
						SELECT @vCount = COUNT(*)
						FROM TFSCM_CLI_COLOR_DISTRIBUTION AOR
						WHERE AOR.CDINDICATOR = @ivaCdIndicator AND
							  AOR.START_DATE = @vStartFrequencyRange AND
							  AOR.END_DATE = @vEndFrequencyRange;
						
						IF 	@vCount > 0 
							BEGIN
								SET @vSpaceLoop = 1;
							END  
						ELSE
							BEGIN
							INSERT INTO TFSCM_CLI_COLOR_DISTRIBUTION(CDINDICATOR, CIAN_ORDERS, GREEN_ORDERS, YELLOW_ORDERS, RED_ORDERS, BLACK_ORDERS, TOTAL_ORDERS, 
									PERCENTAGE_CIAN, PERCENTAGE_GREEN, PERCENTAGE_YELLOW, PERCENTAGE_RED, PERCENTAGE_BLACK, START_DATE, END_DATE, CALCULATION_DATE)
										VALUES(@ivaCdIndicator,0,0,0,0,0,0,0,0, 0, 0, 0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
							 
								SET @vDateSpace = DATEADD(DAY,1,@vEndFrequencyRange);
							END
					END
				END
										
			FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;							
		END
    CLOSE @vSerieSpacesCursor;
	DEALLOCATE @vSerieSpacesCursor;
   
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationDCOPS '+CONVERT(VARCHAR,@vLastCalculationDate,103)+'--'+CONVERT(VARCHAR,@vCounter);

END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_INDICATOR]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Modified   : Oscar Londoño
-- Modify Date: 26/12/2016
-- Description: Adding the ESAA indicator for buffer adjustment suggestions
--              status (@vIndicatorType = 8)
-- ---------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify Date: 12/03/2015
-- Description: Adding the VI indicator for buffer color distribution
-- ---------------------------------------------------------------------------
-- Modified   : JAG
-- Modify Date: 12/03/2015
-- Description: Adding the DCA indicator for buffer color distribution
-- ---------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify Date: 26/11/2014
-- Description: When indicator is equal to 1, change the calling to the SP
--              IND_CALCULATE_VALUE_ORDERS_OVERDUE_FSPACES
-- ---------------------------------------------------------------------------
-- Author     : Ricardo Osorio Loaiza
-- Create date: 07/08/2013
-- Description:	Procedure to calculate the indicator value of orders overdue 
-- ===========================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_INDICATOR]
	/* Input Parameters */
    @ivaCdIndicatorSerie NUMERIC(4),
    @ivaUserFiltersSerie NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @vIsCalculateIndicator SMALLINT;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vSeriesCursor AS CURSOR;
	DECLARE @vIndicatorFrequency VARCHAR(1);
	DECLARE @vSerieColumn VARCHAR(50);
	DECLARE @vIndicatorType NUMERIC(4);
	DECLARE @vSerieValue NVARCHAR(MAX);
	DECLARE @vCurrentServerTime DATETIME;
	DECLARE @return_value INT;	
	DECLARE @vDefaultFilters NVARCHAR(MAX);
	
BEGIN
	SET @vCurrentServerTime = GETDATE();
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 

	--Get indicator configuration
	SELECT @vSerieColumn        = IND.SERIE_COLUMN,
		   @vIndicatorFrequency = IND.FREQUENCY,
		   @vIndicatorType      = IND.CDINDICATOR_TYPE
	  FROM TFSCM_CLI_INDICATORS IND
	 WHERE IND.CDINDICATOR = @ivaCdIndicatorSerie;

	SELECT @vIsCalculateIndicator = (CASE 
			WHEN GETDATE()>IND.LAST_CALCULATION_DATE AND IND.LAST_CALCULATION_DATE < TBL.UPGRADE_TABLE_DATE THEN 1
			WHEN IND.LAST_CALCULATION_DATE IS NULL THEN 1 
			ELSE 0 
		    END)    
	  FROM TFSCM_DEX_INT_IND_TYPE INTER_INDTYPE
			JOIN TFSCM_DEX_INTERFACES INTER ON (INTER_INDTYPE.CDINTERFACE = INTER.CDINTERFACE)
			JOIN TFSCM_COM_TABLES TBL ON (INTER.CDTABLE = TBL.CDTABLE)	
			JOIN TFSCM_CLI_INDICATORS_TYPE INDTYPE ON (INTER_INDTYPE.CDINDICATOR_TYPE = INDTYPE.CDINDICATOR_TYPE)
			JOIN TFSCM_CLI_INDICATORS IND ON (INTER_INDTYPE.CDINDICATOR_TYPE = IND.CDINDICATOR_TYPE)
			AND IND.CDINDICATOR = @ivaCdIndicatorSerie
	
	IF @vIsCalculateIndicator = 1
	BEGIN
		IF @vIndicatorType = 3
		BEGIN
			EXEC	@return_value = [dbo].[IND_CALCULATE_COLOR_DISTRIBUTION]
					@ivaCdIndicator = @ivaCdIndicatorSerie,
					@ivaIndicatorFrequency = @vIndicatorFrequency,
					@ivaSerieColumn = @vSerieColumn,
					@ivaSerieValue = @vSerieValue,
					@ivaCurrentServerTime = @vCurrentServerTime,
					@ivaUserFilters = @ivaUserFiltersSerie,
					@ovaResult = @ovaResult OUTPUT,
					@ovaMessage = @ovaMessage OUTPUT					
		END	
		IF @vIndicatorType = 5
		BEGIN
			EXEC	@return_value = [dbo].[IND_CALCULATE_BUFFER_COLOR_DISTRIBUTION]
					@ivaCdIndicator = @ivaCdIndicatorSerie,
					@ivaIndicatorFrequency = @vIndicatorFrequency,
					@ivaCurrentServerTime = @vCurrentServerTime,
					@ivaUserFilters = @ivaUserFiltersSerie,
					@ovaResult = @ovaResult OUTPUT,
					@ovaMessage = @ovaMessage OUTPUT					
		END
		ELSE IF (@vIndicatorType = 7)   -- It is VI indicator
		BEGIN 
			EXEC @return_value = [dbo].[IND_CALCULATE_BUFFER_STOCK_VALUE]
				 @ivaCdIndicator        = @ivaCdIndicatorSerie,
				 @ivaIndicatorFrequency = @vIndicatorFrequency,
				 @ivaCurrentServerTime  = @vCurrentServerTime,
				 @ivaUserFilters        = @ivaUserFiltersSerie,
				 @ovaResult             = @ovaResult OUTPUT,
				 @ovaMessage            = @ovaMessage OUTPUT;
		END		
		ELSE IF (@vIndicatorType = 8)   -- It is ESAA indicator
		BEGIN
			--  print 'calcula [IND_CALCULATE_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS] '
			EXEC @return_value = [dbo].[IND_CALCULATE_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS]
				 @ivaCdIndicator        = @ivaCdIndicatorSerie,
				 @ivaIndicatorFrequency = @vIndicatorFrequency,
				 @ivaCurrentServerTime  = @vCurrentServerTime,
				 @ivaUserFilters        = @ivaUserFiltersSerie,
				 @ovaResult             = @ovaResult  OUTPUT,
				 @ovaMessage            = @ovaMessage OUTPUT;		 
		END		
		ELSE 
		BEGIN	
			--SQL to be executed
			IF ( @vSerieColumn IS NOT NULL ) 
			BEGIN
				IF @vIndicatorType = 1
				BEGIN 					
					SET @vDefaultFilters = 'ORDERS.CDPARENT_ORDER IS NULL '+
					  '		  AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
									' AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
								'OR '+
					  '	     		(@ivaCurrentServerTimeAux >  ORDERS.PROMISED_DELIVERY_DATE '+
									' AND ORDERS.FINALIZATION_DATE IS NULL)) '+
					  '		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';
				END
				
				IF @vIndicatorType = 2
				BEGIN 					
					SET @vDefaultFilters =  'ORDERS.CDPARENT_ORDER IS NULL '+
					  '		  AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
									' AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
					  'OR '+
					  '	     		(@ivaCurrentServerTimeAux  >  ORDERS.PROMISED_DELIVERY_DATE '+
									' AND ORDERS.FINALIZATION_DATE IS NULL)) '+
					  '		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';					  
				END
											
				IF @vIndicatorType = 4
				BEGIN 
				
					SET @vDefaultFilters = 'ORDERS.CDPARENT_ORDER IS NULL '+					  
				  '		  AND (ORDERS.REAL_RELEASE_DATE IS NOT NULL AND '+
				  '	     		ORDERS.REAL_RELEASE_DATE <>	 ORDERS.RECOMMENDED_RELEASE_DATE) '+					  
				  '		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';					  					  
				END	
				
				
				IF @vIndicatorType = 6
				BEGIN				
					SET @vDefaultFilters  = 'BH.UNIT_THROUGHPUT IS NOT NULL '+
				  '		 AND BH.UNIT_THROUGHPUT <> 0 '+
				  '		 AND BH.BUFFER <> 0 '+	
				  '      AND BH.WORST_INVENTORY_ON_SITE <= 0 ';					  					  
				END					
				
				IF(@vIndicatorType = 1 OR @vIndicatorType = 2 OR @vIndicatorType = 4)
				BEGIN
					SET @vSQLQuery  = 'SELECT CAST('+@vSerieColumn+' AS VARCHAR) SERIE_VALUE'+
								  '  FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
								  '		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
								  '		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION)';					
				END
				
				IF(@vIndicatorType = 6)
				BEGIN
					SET @vSQLQuery  = 'SELECT CAST('+@vSerieColumn+' AS VARCHAR) SERIE_VALUE'+
						  ' FROM TFSCM_CLI_BUFFER_HISTORY BH '+
						  '		JOIN TFSCM_CLI_BUFFER BUFFER ON(BH.SKU = BUFFER.SKU AND BH.LOCATION = BUFFER.LOCATION) ';
				
				END
					
				SET @vSQLQuery = @vSQLQuery	+ ' WHERE '+@vDefaultFilters;
				
				IF @ivaUserFiltersSerie IS NOT NULL 
				BEGIN
					SET @vSQLQuery = @vSQLQuery	+ '  AND '+@ivaUserFiltersSerie;
				END
											  
				SET @vSQLQuery = @vSQLQuery	+ ' GROUP BY '+@vSerieColumn;
			END	
			ELSE
			BEGIN
				SET @vSQLQuery  = 'SELECT DUMMY AS SERIE_VALUE FROM DUAL ';
			END
				  
			--Process the result of the query				  	   	
			SET @vSqlStatement = 'SET @vCursor = CURSOR FORWARD_ONLY STATIC FOR '+@vSQLQuery+' open @vCursor;';
			EXEC sys.sp_executesql
				@vSqlStatement
				,N'@vCursor cursor output,@ivaCurrentServerTimeAux DATETIME' 	
				,@vSeriesCursor output
				,@ivaCurrentServerTimeAux = @vCurrentServerTime;
			
			--Evaluate each serie value
			FETCH NEXT FROM @vSeriesCursor INTO @vSerieValue;
			WHILE @@FETCH_STATUS = 0
			BEGIN					
				IF @vSerieValue IS  NULL
				BEGIN
					SET @vSerieValue  = 'EMPTY_SERIE_VALUE';
				END
				
				--Process value orders overdue indicator
				IF @vIndicatorType = 1
				BEGIN
					EXEC	@return_value = [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE_FSPACES]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				
					EXEC	@return_value = [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END
						
				IF @vIndicatorType = 2
				BEGIN
					EXEC	@return_value = [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END
						
				IF @vIndicatorType = 4
				BEGIN				
					EXEC	@return_value = [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END
				
				
				IF @vIndicatorType = 6
				BEGIN
					EXEC	@return_value = [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END

				FETCH NEXT FROM @vSeriesCursor INTO @vSerieValue;	
			END
			CLOSE @vSeriesCursor;
			DEALLOCATE @vSeriesCursor;				
				
			--Fill spaces in the indicator
			EXEC sys.sp_executesql
				@vSqlStatement
				,N'@vCursor cursor output,@ivaCurrentServerTimeAux DATETIME' 	
				,@vSeriesCursor output
				,@ivaCurrentServerTimeAux = @vCurrentServerTime;
			
			--Evaluate each serie value
			FETCH NEXT FROM @vSeriesCursor INTO @vSerieValue;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @vSerieValue IS  NULL
				BEGIN
					SET @vSerieValue  = 'EMPTY_SERIE_VALUE';
				END

				IF @vIndicatorType = 2
				BEGIN
					EXEC	@return_value = [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME_FSPACES]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END				
						
				IF @vIndicatorType = 4
				BEGIN				
					EXEC	@return_value = [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE_FSPACES]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT					
				END
				
				
				IF @vIndicatorType = 6
				BEGIN
					EXEC	@return_value = [dbo].[IND_CALCULATE_BUFFER_STOCKOUT_VALUE_FSPACES]
							@ivaCdIndicator = @ivaCdIndicatorSerie,
							@ivaIndicatorFrequency = @vIndicatorFrequency,
							@ivaSerieColumn = @vSerieColumn,
							@ivaSerieValue = @vSerieValue,
							@ivaCurrentServerTime = @vCurrentServerTime,
							@ivaUserFilters = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaMessage = @ovaMessage OUTPUT	
				END		
				
				
				FETCH NEXT FROM @vSeriesCursor INTO @vSerieValue;	
			END
			CLOSE @vSeriesCursor;
			DEALLOCATE @vSeriesCursor;		
		END
		--Changing the date per indicator
		UPDATE TFSCM_CLI_INDICATORS
		   SET LAST_CALCULATION_DATE = GETDATE()
		 WHERE CDINDICATOR = @ivaCdIndicatorSerie
	END
				
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationIndicators';
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Modified    : Michal MokroÃ…Â¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 04/09/2013
-- Description:	Procedure to calculate the indicator name early and overdue release
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
AS
	--Fields use for calculation
	DECLARE	@vLastCalculationDate DATETIME;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vOrdersCursor AS CURSOR;
	DECLARE @vFinalizationDate AS DATETIME;
	DECLARE @vRealReleaseDate AS DATETIME;
	DECLARE @vRecommendedReleasedDate AS DATETIME;
	DECLARE @vFinalizationLoop AS BIT;
	DECLARE @vCounter AS NUMERIC(10) = 0;
	DECLARE @vStartEvaluationRange AS DATETIME;
	DECLARE @vEndEvaluationRange AS DATETIME;
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vOldStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE	@return_value INT;
	--DECLARE	@vFrequencyMultiplier INT;
	--DECLARE	@vStartMultiplier DATETIME;
	--DECLARE	@vEndMultiplier DATETIME;
	DECLARE @vCount INT;
	--Extra fields use to fill serie spaces
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;	
	DECLARE @vTotalReleases AS NUMERIC(10) = 0;--zero to indicate that the count sql has'nt been executed
	DECLARE @vSQLQueryTotalReleases AS NVARCHAR(MAX);
	DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0;
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET @vOldStartFrequencyRange = CONVERT(DATETIME,'01/01/1900',103);
	--Get the last calculation date
    SELECT @vLastCalculationDate = MAX(CALCULATION_DATE) 
    FROM TFSCM_CLI_ANTI_OVERD_RELEASES
    WHERE CDINDICATOR = @ivaCdIndicator AND SERIE = @ivaSerieValue;
     
    --Validate if exists a least one calculation  
    IF  @vLastCalculationDate IS NULL 
		BEGIN	
			SET @vLastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
		END  
	
	--For all records put the column OPEN_ORDERS_OVERDUE with zero
    UPDATE TFSCM_CLI_ANTI_OVERD_RELEASES
		   SET OPEN_EARLY_RELEASES = 0,
				OPEN_OVERDUE_RELEASES =0,
				TOTAL_RELEASES = 0
	WHERE CDINDICATOR = @ivaCdIndicator AND SERIE = @ivaSerieValue;
	
	--SQL to be executed
	SET @vSQLQuery  = ' SELECT ORDERS.REAL_RELEASE_DATE,ORDERS.FINALIZATION_DATE,ORDERS.RECOMMENDED_RELEASE_DATE '+
					  ' FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
					  '		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
					  '		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
					  ' WHERE ';					  
	
		
	IF 	@ivaSerieColumn IS NOT NULL
		BEGIN
			IF(@ivaSerieValue = 'EMPTY_SERIE_VALUE')
				BEGIN
				SET @vSQLQuery  = @vSQLQuery+@ivaSerieColumn+' IS NULL AND ';
				END
			ELSE
				BEGIN
					SET @vSQLQuery  = @vSQLQuery+@ivaSerieColumn+' = @ivaSerieValueAux AND ';
				END
			
		END
		
	SET @vSQLQuery  = @vSQLQuery +
					  '            ORDERS.CDPARENT_ORDER IS NULL '+	
					  '		AND (ORDERS.REAL_RELEASE_DATE IS NOT NULL AND '+
					  '	     		ORDERS.REAL_RELEASE_DATE <>	 ORDERS.RECOMMENDED_RELEASE_DATE) '+
					  
					  '		  AND ORDERS.CDORDER_TYPE <> ''S'' 	'+
					  '       AND (ORDERS.FINALIZATION_DATE IS NULL OR '+
					  '	     		(ORDERS.FINALIZATION_DATE IS NOT NULL AND ORDERS.MODIFY_DATE > @vLastCalculationDateAux )'+
					  ' 			) ';
					  
	IF @ivaUserFilters IS NOT NULL
		BEGIN
			SET @vSQLQuery = @vSQLQuery +' AND '+@ivaUserFilters;
		END		
	
	SET @vSQLQuery = @vSQLQuery +' ORDER BY ORDERS.REAL_RELEASE_DATE ';			  
	--Process the result of the query				  	   	
	SET @vSqlStatement = 'SET @vCursor = CURSOR FORWARD_ONLY STATIC FOR '+@vSQLQuery+' open @vCursor;';
	exec sys.sp_executesql
		@vSqlStatement
		,N'@vCursor cursor output,@ivaSerieValueAux VARCHAR(200),@vLastCalculationDateAux DATETIME, @ivaCurrentServerTimeAux DATE' 	
		,@vOrdersCursor output
		,@ivaSerieValueAux = @ivaSerieValue
		,@vLastCalculationDateAux = @vLastCalculationDate
		,@ivaCurrentServerTimeAux = @ivaCurrentServerTime;
	
	--Evaluate each order
	FETCH NEXT FROM @vOrdersCursor INTO @vRealReleaseDate,@vFinalizationDate,@vRecommendedReleasedDate
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--print 'orden encontrada';
		SET @vCounter = @vCounter + 1;
		SET @vStartEvaluationRange = @vRealReleaseDate;		
		
		SET @vEndEvaluationRange = @ivaCurrentServerTime;
		
		IF @vFinalizationDate IS NULL
			BEGIN
				SET @vFinalizationLoop = 0;--define if is an open o close order
			END
		ELSE
			BEGIN
				SET @vFinalizationLoop = 1;
			END	
		
			
		--Get the frequency range to process
		EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
								@ivaDate = @vStartEvaluationRange,
								@ivaFrecuency = @ivaIndicatorFrequency,
								@ovaStartRange = @vStartFrequencyRange OUTPUT,
								@ovaEndRange = @vEndFrequencyRange OUTPUT;
		
				
				--Check if exists a row for the frequency range
				SELECT @vCount = COUNT(*)
				FROM TFSCM_CLI_ANTI_OVERD_RELEASES AOR
				WHERE AOR.CDINDICATOR = @ivaCdIndicator AND
					  AOR.SERIE = @ivaSerieValue AND 
					  AOR.START_DATE = @vStartFrequencyRange AND
					  AOR.END_DATE = @vEndFrequencyRange;
					  
				--The total hasn't been calculated
				--IF @vTotalReleases = -1
					--Get the total releases
					
					--BEGIN 
				IF(@vStartFrequencyRange != @vOldStartFrequencyRange)
					BEGIN 
						/*SET @vSQLQueryTotalReleases = 'SELECT @vTotalReleases = COUNT(*) FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
														' WHERE ORDERS.REAL_RELEASE_DATE >= @vStartFrequencyRangeAux  AND '+
														' ORDERS.REAL_RELEASE_DATE <= @vEndFrequencyRangeAux '*/
														
						SET @vSQLQueryTotalReleases = 'SELECT @vTotalReleases = COUNT(*) FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
														'		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+	
														'		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
														' WHERE CONVERT(DATETIME,CONVERT(VARCHAR,ORDERS.REAL_RELEASE_DATE, 103),103) >= CONVERT(DATETIME,CONVERT(VARCHAR, @vStartFrequencyRangeAux, 103),103)  AND '+
														' CONVERT(DATETIME,CONVERT(VARCHAR, ORDERS.REAL_RELEASE_DATE, 103),103) <= CONVERT(DATETIME, CONVERT(VARCHAR, @vEndFrequencyRangeAux, 103), 103) AND '+
														' ORDERS.CDPARENT_ORDER IS NULL AND '+
														' ORDERS.CDORDER_TYPE <> ''S'' 	';
														
											
											
						IF @ivaSerieColumn IS NOT NULL
						BEGIN
							IF(@ivaSerieValue = 'EMPTY_SERIE_VALUE')
								BEGIN
									SET @vSQLQueryTotalReleases = @vSQLQueryTotalReleases +' AND '+@ivaSerieColumn+' IS NULL ';
								END
							ELSE
								BEGIN
									SET @vSQLQueryTotalReleases = @vSQLQueryTotalReleases +' AND '+@ivaSerieColumn+' = '''+@ivaSerieValue+'''';
								END
							
						END
														
						IF @ivaUserFilters IS NOT NULL
							BEGIN
								SET @vSQLQueryTotalReleases = @vSQLQueryTotalReleases +' AND '+@ivaUserFilters;
							END
					--PRINT 	@vSQLQueryTotalReleases	
					EXEC sp_executesql
					  @Query = @vSQLQueryTotalReleases ,
					  @Params = N'@vStartFrequencyRangeAux AS DATETIME,@vEndFrequencyRangeAux AS DATETIME, @vTotalReleases INT OUTPUT' ,
					  @vTotalReleases = @vTotalReleases OUTPUT,		
					  @vStartFrequencyRangeAux = @vStartFrequencyRange,
					  @vEndFrequencyRangeAux = @vEndFrequencyRange					
				END
				SET @vOldStartFrequencyRange = @vStartFrequencyRange				  
				IF @vCount = 0
					BEGIN
						--Open orders
						IF @vFinalizationLoop = 0
							BEGIN
								IF @vRealReleaseDate < @vRecommendedReleasedDate
									BEGIN	
										INSERT INTO TFSCM_CLI_ANTI_OVERD_RELEASES(CDINDICATOR, SERIE, COMPLETED_EARLY_RELEASES, OPEN_EARLY_RELEASES, COMPLETED_OVERDUE_RELEASES, 
																						OPEN_OVERDUE_RELEASES, TOTAL_RELEASES, PERCENTAGE_EARLY_RELEASES, PERCENTAGE_OVERDUE_RELEASES, START_DATE, END_DATE, CALCULATION_DATE)
																					   VALUES(@ivaCdIndicator,@ivaSerieValue,0,1,0,0,@vTotalReleases,(dbo.VALIDATE_DENOMINATOR(1,@vTotalReleases)),0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									END
								ELSE 
									BEGIN
										INSERT INTO TFSCM_CLI_ANTI_OVERD_RELEASES(CDINDICATOR, SERIE, COMPLETED_EARLY_RELEASES, OPEN_EARLY_RELEASES, COMPLETED_OVERDUE_RELEASES, 
																					OPEN_OVERDUE_RELEASES, TOTAL_RELEASES, PERCENTAGE_EARLY_RELEASES,PERCENTAGE_OVERDUE_RELEASES, START_DATE, END_DATE, CALCULATION_DATE)
																				   VALUES(@ivaCdIndicator,@ivaSerieValue,0,0,0,1,@vTotalReleases,0,(dbo.VALIDATE_DENOMINATOR(1,@vTotalReleases)),@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									
									END									
							END
						ELSE
							--Close orders
							BEGIN
								IF @vRealReleaseDate < @vRecommendedReleasedDate
									BEGIN	
										INSERT INTO TFSCM_CLI_ANTI_OVERD_RELEASES(CDINDICATOR, SERIE, COMPLETED_EARLY_RELEASES, OPEN_EARLY_RELEASES, COMPLETED_OVERDUE_RELEASES, 
																						OPEN_OVERDUE_RELEASES, TOTAL_RELEASES, PERCENTAGE_EARLY_RELEASES, PERCENTAGE_OVERDUE_RELEASES,START_DATE, END_DATE, CALCULATION_DATE)
																					   VALUES(@ivaCdIndicator,@ivaSerieValue,1,0,0,0,@vTotalReleases,(dbo.VALIDATE_DENOMINATOR(1,@vTotalReleases)),0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									END
								ELSE 
									BEGIN
										INSERT INTO TFSCM_CLI_ANTI_OVERD_RELEASES(CDINDICATOR, SERIE, COMPLETED_EARLY_RELEASES, OPEN_EARLY_RELEASES, COMPLETED_OVERDUE_RELEASES, 
																					OPEN_OVERDUE_RELEASES, TOTAL_RELEASES, PERCENTAGE_EARLY_RELEASES, PERCENTAGE_OVERDUE_RELEASES,START_DATE, END_DATE, CALCULATION_DATE)
																				   VALUES(@ivaCdIndicator,@ivaSerieValue,0,0,1,0,@vTotalReleases,0, (dbo.VALIDATE_DENOMINATOR(1,@vTotalReleases)),@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									
									END	
							END	
					END
				ELSE
					BEGIN
						--Open orders
						IF @vFinalizationLoop = 0
							BEGIN
								IF @vRealReleaseDate < @vRecommendedReleasedDate
									BEGIN
										UPDATE TFSCM_CLI_ANTI_OVERD_RELEASES
										SET OPEN_EARLY_RELEASES = OPEN_EARLY_RELEASES+1,
											TOTAL_RELEASES = @vTotalReleases,
											PERCENTAGE_EARLY_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_EARLY_RELEASES+OPEN_EARLY_RELEASES+1),@vTotalReleases)),
											PERCENTAGE_OVERDUE_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_OVERDUE_RELEASES+OPEN_OVERDUE_RELEASES),@vTotalReleases)),
											CALCULATION_DATE =  @ivaCurrentServerTime
										WHERE CDINDICATOR = @ivaCdIndicator AND
											  SERIE = @ivaSerieValue AND 
											  START_DATE = @vStartFrequencyRange AND
											  END_DATE = @vEndFrequencyRange;
									END
									
								ELSE
									BEGIN
										UPDATE TFSCM_CLI_ANTI_OVERD_RELEASES
										SET OPEN_OVERDUE_RELEASES = OPEN_OVERDUE_RELEASES+1,
											TOTAL_RELEASES = @vTotalReleases,
											PERCENTAGE_EARLY_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_EARLY_RELEASES+OPEN_EARLY_RELEASES),@vTotalReleases)),
											PERCENTAGE_OVERDUE_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_OVERDUE_RELEASES+OPEN_OVERDUE_RELEASES+1),@vTotalReleases)),
											CALCULATION_DATE =  @ivaCurrentServerTime
										WHERE CDINDICATOR = @ivaCdIndicator AND
											  SERIE = @ivaSerieValue AND 
											  START_DATE = @vStartFrequencyRange AND
											  END_DATE = @vEndFrequencyRange;
									END
								
									
							END
						ELSE
							--Close orders
							BEGIN
								IF @vRealReleaseDate < @vRecommendedReleasedDate
									BEGIN
										UPDATE TFSCM_CLI_ANTI_OVERD_RELEASES
										SET COMPLETED_EARLY_RELEASES = COMPLETED_EARLY_RELEASES+1,
											TOTAL_RELEASES = @vTotalReleases,
											PERCENTAGE_EARLY_RELEASES = (dbo.VALIDATE_DENOMINATOR((1+COMPLETED_EARLY_RELEASES+OPEN_EARLY_RELEASES),@vTotalReleases)),
											PERCENTAGE_OVERDUE_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_OVERDUE_RELEASES+OPEN_OVERDUE_RELEASES),@vTotalReleases)),
											CALCULATION_DATE =  @ivaCurrentServerTime
										WHERE CDINDICATOR = @ivaCdIndicator AND
											  SERIE = @ivaSerieValue AND 
											  START_DATE = @vStartFrequencyRange AND
											  END_DATE = @vEndFrequencyRange;
									END
									
								ELSE
									BEGIN
										UPDATE TFSCM_CLI_ANTI_OVERD_RELEASES
										SET COMPLETED_OVERDUE_RELEASES = COMPLETED_OVERDUE_RELEASES+1,
											TOTAL_RELEASES = @vTotalReleases,
											PERCENTAGE_EARLY_RELEASES = (dbo.VALIDATE_DENOMINATOR((COMPLETED_EARLY_RELEASES+OPEN_EARLY_RELEASES),@vTotalReleases)),
											PERCENTAGE_OVERDUE_RELEASES = (dbo.VALIDATE_DENOMINATOR((1+COMPLETED_OVERDUE_RELEASES+OPEN_OVERDUE_RELEASES),@vTotalReleases)),
											CALCULATION_DATE =  @ivaCurrentServerTime
										WHERE CDINDICATOR = @ivaCdIndicator AND
											  SERIE = @ivaSerieValue AND 
											  START_DATE = @vStartFrequencyRange AND
											  END_DATE = @vEndFrequencyRange;
									END
							END	
					
					END	
					  		
		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT+1
		IF(@vCOMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @vCOMMIT_COUNT = 0
		END
				
		FETCH NEXT FROM @vOrdersCursor INTO @vRealReleaseDate,@vFinalizationDate,@vRecommendedReleasedDate;
	END
	CLOSE @vOrdersCursor;
	DEALLOCATE @vOrdersCursor;	
    
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationOER '+CONVERT(VARCHAR,@vLastCalculationDate,103)+'--'+CONVERT(VARCHAR,@vCounter);

END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE_FSPACES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julian Andres Gonzalez 
-- Create date: 01/10/2013
-- Description:	Procedure to fill spaces in the indicator
-- =============================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_OVERDUE_EARLY_RELEASE_FSPACES]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT

AS
	--Extra fields use to fill serie spaces
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE @vCount INT;
	DECLARE	@return_value INT;
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
														@ivaDate = @ivaCurrentServerTime,
														@ivaFrecuency = @ivaIndicatorFrequency,
														@ovaStartRange = @vStartFrequencyRange OUTPUT,
														@ovaEndRange = @vEndFrequencyRange OUTPUT;
	--Fill spaces in the serie with zero values
    SET @vSerieSpacesCursor = CURSOR FORWARD_ONLY STATIC FOR	SELECT OER.START_DATE
																FROM (SELECT DATEADD(DAY,1,AUX.END_DATE) START_DATE
																	  FROM TFSCM_CLI_ANTI_OVERD_RELEASES AUX
																	  WHERE AUX.CDINDICATOR = @ivaCdIndicator AND AUX.SERIE = @ivaSerieValue) OER
																WHERE OER.START_DATE NOT IN(SELECT OER2.START_DATE
																							FROM  TFSCM_CLI_ANTI_OVERD_RELEASES OER2
																							WHERE OER2.CDINDICATOR = @ivaCdIndicator AND OER2.SERIE = @ivaSerieValue
																							)
																UNION
																SELECT MIN(OERALL.START_DATE)
																FROM  TFSCM_CLI_ANTI_OVERD_RELEASES OERALL
																WHERE OERALL.CDINDICATOR = @ivaCdIndicator
																UNION
																SELECT @vStartFrequencyRange;
		 
    OPEN @vSerieSpacesCursor;
    FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;
	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @vDateSpace IS NOT NULL
				BEGIN
					SET @vSpaceLoop = 0;
					WHILE @vSpaceLoop = 0
						BEGIN
									
							--Get the frequency range to validate
							EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
														@ivaDate = @vDateSpace,
														@ivaFrecuency = @ivaIndicatorFrequency,
														@ovaStartRange = @vStartFrequencyRange OUTPUT,
														@ovaEndRange = @vEndFrequencyRange OUTPUT;
							--Check if exists a row for the frequency range
							SELECT @vCount = COUNT(*)
							FROM TFSCM_CLI_ANTI_OVERD_RELEASES OER
							WHERE OER.CDINDICATOR = @ivaCdIndicator AND
								  OER.SERIE = @ivaSerieValue AND 
								  OER.START_DATE = @vStartFrequencyRange AND
								  OER.END_DATE = @vEndFrequencyRange;
							
							IF 	@vCount > 0 OR @vStartFrequencyRange > @ivaCurrentServerTime
								BEGIN
									SET @vSpaceLoop = 1;
								END  
							ELSE
								BEGIN
								
									INSERT INTO TFSCM_CLI_ANTI_OVERD_RELEASES(CDINDICATOR, SERIE, COMPLETED_EARLY_RELEASES, OPEN_EARLY_RELEASES, COMPLETED_OVERDUE_RELEASES, 
																					OPEN_OVERDUE_RELEASES, TOTAL_RELEASES, PERCENTAGE_EARLY_RELEASES,PERCENTAGE_OVERDUE_RELEASES, START_DATE, END_DATE, CALCULATION_DATE)
																				   VALUES(@ivaCdIndicator,@ivaSerieValue,0,0,0,0,0,0,0,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);			
										
									SET @vDateSpace = DATEADD(DAY,1,@vEndFrequencyRange);
								END
						END
				END
			
										
			FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;							
		END
    CLOSE @vSerieSpacesCursor;
	DEALLOCATE @vSerieSpacesCursor;
	
    
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationLAAFSPACES';

END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Modified    : Michal MokroÃ…Â¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 11/09/2013
-- Description:	Procedure to calculate the percentage of deliveries at time
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
AS
	--Fields use for calculation
	DECLARE	@vLastCalculationDate DATETIME;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vOrdersCursor AS CURSOR;
	DECLARE @vFinalizationDate AS DATETIME;
	DECLARE @vPromisedDeliveryDate AS DATETIME;
	DECLARE @vRecommendedReleasedDate AS DATETIME;
	DECLARE @vFinalizationLoop AS BIT;
	DECLARE @vCounter AS NUMERIC(10) = 0;
	DECLARE @vStartEvaluationRange AS DATETIME;
	DECLARE @vEndEvaluationRange AS DATETIME;
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vOldStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE	@return_value INT;
	DECLARE @vCount INT;
	--Extra fields use to fill serie spaces
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;	
	DECLARE @vTotalOrdersToDelivery AS NUMERIC(10) = 0;--zero to indicate that the count sql has'nt been executed
	DECLARE @vSQLQueryTotalOrdersToDelivery AS NVARCHAR(MAX);
	DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0;
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET @vOldStartFrequencyRange = CONVERT(DATETIME,'01/01/1900',103);
	--Get the last calculation date
    SELECT @vLastCalculationDate = MAX(CALCULATION_DATE) 
    FROM TFSCM_CLI_PERC_DELIV_IN_TIME
    WHERE CDINDICATOR = @ivaCdIndicator AND SERIE = @ivaSerieValue;
     
    --Validate if exists a least one calculation  
    IF  @vLastCalculationDate IS NULL 
		BEGIN	
			SET @vLastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
		END  
	
	--For all records put the column OPEN_ORDERS_OVERDUE with zero
    UPDATE TFSCM_CLI_PERC_DELIV_IN_TIME
		   SET OPEN_ORDERS_OVERDUE = 0,
		   ORDERS_DELIVER = 0
	WHERE CDINDICATOR = @ivaCdIndicator AND SERIE = @ivaSerieValue;
	
	--PRINT'TERMINA DE EJECUTAR  UPDATE DE CEROS'
	
	--SQL to be executed
	SET @vSQLQuery  = ' SELECT ORDERS.PROMISED_DELIVERY_DATE,ORDERS.FINALIZATION_DATE '+
					  ' FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
					  '		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
					  '		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
					  ' WHERE ';
	IF 	@ivaSerieColumn IS NOT NULL
		BEGIN
			IF(@ivaSerieValue = 'EMPTY_SERIE_VALUE')
				BEGIN	
					SET @vSQLQuery  = @vSQLQuery+@ivaSerieColumn+' IS NULL AND ';				
				END
			ELSE
				BEGIN
					SET @vSQLQuery  = @vSQLQuery+@ivaSerieColumn+' = @ivaSerieValueAux AND ';
				END
			
		END
		
	SET @vSQLQuery  = @vSQLQuery +
					  '            ORDERS.CDPARENT_ORDER IS NULL '+
					  '		  AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
									' AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
					  'OR '+
					  '	     		(@ivaCurrentServerTimeAux >	 ORDERS.PROMISED_DELIVERY_DATE '+
									' AND ORDERS.FINALIZATION_DATE IS NULL)) '+
					  '		  AND ORDERS.CDORDER_TYPE <> ''S'' 	'+
					  '       AND (ORDERS.FINALIZATION_DATE IS NULL OR '+
					  '	     		(ORDERS.FINALIZATION_DATE IS NOT NULL AND ORDERS.MODIFY_DATE > @vLastCalculationDateAux )'+
					  ' 			) ';
					  
	IF @ivaUserFilters IS NOT NULL
		BEGIN
			SET @vSQLQuery = @vSQLQuery +' AND '+@ivaUserFilters;
		END
		
	SET @vSQLQuery = @vSQLQuery +' ORDER BY  ORDERS.PROMISED_DELIVERY_DATE ';
		PRINT 	'CONSULTA ES : '+@vSQLQuery		  
	--Process the result of the query				  	   	
	SET @vSqlStatement = 'SET @vCursor = CURSOR FORWARD_ONLY STATIC FOR '+@vSQLQuery+' open @vCursor;';
	exec sys.sp_executesql
		@vSqlStatement
		,N'@vCursor cursor output,@ivaSerieValueAux VARCHAR(200),@ivaCurrentServerTimeAux DATETIME,@vLastCalculationDateAux DATETIME' 	
		,@vOrdersCursor output
		,@ivaSerieValueAux = @ivaSerieValue
		,@ivaCurrentServerTimeAux = @ivaCurrentServerTime
		,@vLastCalculationDateAux = @vLastCalculationDate;
	
	--Evaluate each order
	FETCH NEXT FROM @vOrdersCursor INTO @vPromisedDeliveryDate,@vFinalizationDate
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @vCounter = @vCounter + 1;
		
		SET @vStartEvaluationRange = @vPromisedDeliveryDate;
		SET @vEndEvaluationRange = @ivaCurrentServerTime;
		
		IF @vFinalizationDate IS NULL
			BEGIN
				SET @vFinalizationLoop = 0;
			END
		ELSE
			BEGIN
				SET @vFinalizationLoop = 1;
			END	
			
		--Get the frequency range to process
		EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
								@ivaDate = @vStartEvaluationRange,
								@ivaFrecuency = @ivaIndicatorFrequency,
								@ovaStartRange = @vStartFrequencyRange OUTPUT,
								@ovaEndRange = @vEndFrequencyRange OUTPUT;
		
				
				
			--Check if exists a row for the frequency range
				SELECT @vCount = COUNT(*)
				FROM TFSCM_CLI_PERC_DELIV_IN_TIME PET
				WHERE PET.CDINDICATOR = @ivaCdIndicator AND
					  PET.SERIE = @ivaSerieValue AND					  
					  PET.START_DATE = @vStartFrequencyRange AND
					  PET.END_DATE = @vEndFrequencyRange;
			
			IF(@vStartFrequencyRange != @vOldStartFrequencyRange)
				BEGIN 
			
						/*SET @vSQLQueryTotalOrdersToDelivery = 'SELECT @vTotalOrdersToDelivery = COUNT(*) FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
														' WHERE ORDERS.PROMISED_DELIVERY_DATE >= @vStartFrequencyRangeAux  AND '+
														' ORDERS.PROMISED_DELIVERY_DATE <= @vEndFrequencyRangeAux AND '+
														' ORDERS.CDORDER_TYPE <> ''I''  ';*/
														
						SET @vSQLQueryTotalOrdersToDelivery = 'SELECT @vTotalOrdersToDelivery = COUNT(*) FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
						'		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
						'		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
														' WHERE CONVERT(DATETIME,CONVERT(VARCHAR,ORDERS.PROMISED_DELIVERY_DATE, 103),103) >= CONVERT(DATETIME,CONVERT(VARCHAR, @vStartFrequencyRangeAux, 103),103)  AND '+
														' CONVERT(DATETIME,CONVERT(VARCHAR, ORDERS.PROMISED_DELIVERY_DATE, 103),103) <= CONVERT(DATETIME, CONVERT(VARCHAR, @vEndFrequencyRangeAux, 103), 103) AND '+
														' ORDERS.CDPARENT_ORDER IS NULL AND '+
														' ORDERS.CDORDER_TYPE <> ''S''  ';
														
														
						IF @ivaSerieColumn IS NOT NULL
						BEGIN
							IF(@ivaSerieValue = 'EMPTY_SERIE_VALUE')
								BEGIN	
									SET @vSQLQueryTotalOrdersToDelivery = @vSQLQueryTotalOrdersToDelivery +' AND '+@ivaSerieColumn+' IS NULL ';								
								END
							ELSE
								BEGIN
									SET @vSQLQueryTotalOrdersToDelivery = @vSQLQueryTotalOrdersToDelivery +' AND '+@ivaSerieColumn+' = '''+@ivaSerieValue+'''';
								END
							
						END
																			
						IF @ivaUserFilters IS NOT NULL
							BEGIN
								SET @vSQLQueryTotalOrdersToDelivery = @vSQLQueryTotalOrdersToDelivery +' AND '+@ivaUserFilters;
							END				
					EXEC sp_executesql
					  @Query = @vSQLQueryTotalOrdersToDelivery ,
					  @Params = N'@vStartFrequencyRangeAux AS DATETIME,@vEndFrequencyRangeAux AS DATETIME, @vTotalOrdersToDelivery INT OUTPUT' ,
					  @vTotalOrdersToDelivery = @vTotalOrdersToDelivery OUTPUT,		
					  @vStartFrequencyRangeAux = @vStartFrequencyRange,
					  @vEndFrequencyRangeAux = @vEndFrequencyRange;					
				END	
				
				SET @vOldStartFrequencyRange = @vStartFrequencyRange		
				--PRINT 'Fecha ini '+CAST(@vStartFrequencyRange AS VARCHAR)+' Fecha fin '+CAST(@vEndFrequencyRange AS VARCHAR)+' count es '+CAST(@vCount AS VARCHAR)+' TOTAL '+CAST(@vTotalOrdersToDelivery AS VARCHAR)	 
				IF @vCount = 0
					BEGIN
						--Open orders
						IF @vFinalizationLoop = 0
							BEGIN	
														
								INSERT INTO TFSCM_CLI_PERC_DELIV_IN_TIME(CDINDICATOR, SERIE, COMPLETED_ORDERS_OVERDUE, OPEN_ORDERS_OVERDUE, ORDERS_DELIVER, 
																			PERCENTAGE_COO, PERCENTAGE_OOO,PERCENTAGE_DEL_IN_TIME, START_DATE, END_DATE, CALCULATION_DATE)
								VALUES(@ivaCdIndicator,@ivaSerieValue,0,1,@vTotalOrdersToDelivery,0,(dbo.VALIDATE_DENOMINATOR(1,@vTotalOrdersToDelivery)),100- (dbo.VALIDATE_DENOMINATOR(1,@vTotalOrdersToDelivery)),@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
																	
							END
						ELSE
							--Close orders
							BEGIN
								INSERT INTO TFSCM_CLI_PERC_DELIV_IN_TIME(CDINDICATOR, SERIE, COMPLETED_ORDERS_OVERDUE, OPEN_ORDERS_OVERDUE, ORDERS_DELIVER, 
																			PERCENTAGE_COO, PERCENTAGE_OOO,PERCENTAGE_DEL_IN_TIME, START_DATE, END_DATE, CALCULATION_DATE)
								VALUES(@ivaCdIndicator,@ivaSerieValue,1,0,@vTotalOrdersToDelivery,(dbo.VALIDATE_DENOMINATOR(1,@vTotalOrdersToDelivery)),0,100 - (dbo.VALIDATE_DENOMINATOR(1,@vTotalOrdersToDelivery)),@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									
							END	
					END
				ELSE
					BEGIN
						--Open orders			 
						IF @vFinalizationLoop = 0
							BEGIN
							--print 'entro a ordenes abiertas con fecha inicio '+cast(@vStartFrequencyRange as varchar)+' y fin'+cast(@vEndFrequencyRange as varchar);
								UPDATE TFSCM_CLI_PERC_DELIV_IN_TIME
									SET 									
										OPEN_ORDERS_OVERDUE = OPEN_ORDERS_OVERDUE+1,
										ORDERS_DELIVER = @vTotalOrdersToDelivery,
										PERCENTAGE_COO = (dbo.VALIDATE_DENOMINATOR((COMPLETED_ORDERS_OVERDUE),@vTotalOrdersToDelivery)),
										PERCENTAGE_OOO = (dbo.VALIDATE_DENOMINATOR(OPEN_ORDERS_OVERDUE+1,@vTotalOrdersToDelivery)),
										PERCENTAGE_DEL_IN_TIME = 100 - (dbo.VALIDATE_DENOMINATOR(OPEN_ORDERS_OVERDUE+1,@vTotalOrdersToDelivery))-(dbo.VALIDATE_DENOMINATOR((COMPLETED_ORDERS_OVERDUE),@vTotalOrdersToDelivery)),
										CALCULATION_DATE =  @ivaCurrentServerTime
									WHERE CDINDICATOR = @ivaCdIndicator AND
										SERIE = @ivaSerieValue AND 
										START_DATE = @vStartFrequencyRange AND
										END_DATE = @vEndFrequencyRange;						
									
							END
						ELSE						
							--Close orders
							BEGIN
							--print 'entro a ordenes cerradas con fecha inicio '+cast(@vStartFrequencyRange as varchar)+' y fin'+cast(@vEndFrequencyRange as varchar);								
								UPDATE TFSCM_CLI_PERC_DELIV_IN_TIME
									SET 
										COMPLETED_ORDERS_OVERDUE = COMPLETED_ORDERS_OVERDUE+1,
										ORDERS_DELIVER = @vTotalOrdersToDelivery,
										PERCENTAGE_COO = (dbo.VALIDATE_DENOMINATOR((COMPLETED_ORDERS_OVERDUE+1),@vTotalOrdersToDelivery)),
										PERCENTAGE_OOO = (dbo.VALIDATE_DENOMINATOR((OPEN_ORDERS_OVERDUE),@vTotalOrdersToDelivery)),
										PERCENTAGE_DEL_IN_TIME = 100 - (dbo.VALIDATE_DENOMINATOR((OPEN_ORDERS_OVERDUE),@vTotalOrdersToDelivery))-(dbo.VALIDATE_DENOMINATOR((COMPLETED_ORDERS_OVERDUE+1),@vTotalOrdersToDelivery)),
										CALCULATION_DATE =  @ivaCurrentServerTime
									WHERE CDINDICATOR = @ivaCdIndicator AND
										SERIE = @ivaSerieValue AND 
										START_DATE = @vStartFrequencyRange AND
										END_DATE = @vEndFrequencyRange;			
									
								
							END	
					
					END	
				
		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT+1
		IF(@vCOMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @vCOMMIT_COUNT = 0
		END		
		FETCH NEXT FROM @vOrdersCursor INTO @vPromisedDeliveryDate,@vFinalizationDate;
	END
	CLOSE @vOrdersCursor;
	DEALLOCATE @vOrdersCursor;
	
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationOER '+CONVERT(VARCHAR,@vLastCalculationDate,103)+'--'+CONVERT(VARCHAR,@vCounter);
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME_FSPACES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julian Andres Gonzalez 
-- Create date: 01/10/2013
-- Description:	Procedure to fill spaces in the indicator
-- =============================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_PERCENTAGE_DELIVERIES_AT_TIME_FSPACES]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT

AS
	--Extra fields use to fill serie spaces
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE @vCount INT;
	DECLARE	@return_value INT;
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
														@ivaDate = @ivaCurrentServerTime,
														@ivaFrecuency = @ivaIndicatorFrequency,
														@ovaStartRange = @vStartFrequencyRange OUTPUT,
														@ovaEndRange = @vEndFrequencyRange OUTPUT;
	--Fill spaces in the serie with zero values
    SET @vSerieSpacesCursor = CURSOR FORWARD_ONLY STATIC FOR	SELECT PET.START_DATE
																FROM (SELECT DATEADD(DAY,1,AUX.END_DATE) START_DATE
																	  FROM TFSCM_CLI_PERC_DELIV_IN_TIME AUX
																	  WHERE AUX.CDINDICATOR = @ivaCdIndicator AND AUX.SERIE = @ivaSerieValue) PET
																WHERE PET.START_DATE NOT IN(SELECT PET2.START_DATE
																							FROM  TFSCM_CLI_PERC_DELIV_IN_TIME PET2
																							WHERE PET2.CDINDICATOR = @ivaCdIndicator AND PET2.SERIE = @ivaSerieValue
																							)
																UNION
																SELECT MIN(PETALL.START_DATE)
																FROM  TFSCM_CLI_PERC_DELIV_IN_TIME PETALL
																WHERE PETALL.CDINDICATOR = @ivaCdIndicator
																UNION
																SELECT @vStartFrequencyRange;
		 
    OPEN @vSerieSpacesCursor;
    FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;
	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @vDateSpace IS NOT NULL
				BEGIN
					SET @vSpaceLoop = 0;
					WHILE @vSpaceLoop = 0
						BEGIN
									
							--Get the frequency range to validate
							EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
														@ivaDate = @vDateSpace,
														@ivaFrecuency = @ivaIndicatorFrequency,
														@ovaStartRange = @vStartFrequencyRange OUTPUT,
														@ovaEndRange = @vEndFrequencyRange OUTPUT;
							--Check if exists a row for the frequency range
							SELECT @vCount = COUNT(*)
							FROM TFSCM_CLI_PERC_DELIV_IN_TIME PET
							WHERE PET.CDINDICATOR = @ivaCdIndicator AND
								  PET.SERIE = @ivaSerieValue AND 
								  PET.START_DATE = @vStartFrequencyRange AND
								  PET.END_DATE = @vEndFrequencyRange;
							
							IF 	@vCount > 0 OR @vStartFrequencyRange > @ivaCurrentServerTime
								BEGIN
									SET @vSpaceLoop = 1;
								END  
							ELSE
								BEGIN								
									INSERT INTO TFSCM_CLI_PERC_DELIV_IN_TIME(CDINDICATOR, SERIE, COMPLETED_ORDERS_OVERDUE, OPEN_ORDERS_OVERDUE, ORDERS_DELIVER, 
																				PERCENTAGE_COO, PERCENTAGE_OOO,PERCENTAGE_DEL_IN_TIME, START_DATE, END_DATE, CALCULATION_DATE)
									VALUES(@ivaCdIndicator,@ivaSerieValue,0,0,0,0,0,100,@vStartFrequencyRange,@vEndFrequencyRange,@ivaCurrentServerTime);	
									
																
									SET @vDateSpace = DATEADD(DAY,1,@vEndFrequencyRange);
								END
						END
				END
			
										
			FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;							
		END
    CLOSE @vSerieSpacesCursor;
	DEALLOCATE @vSerieSpacesCursor;
	
    
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationVOOFSPACES';

END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Modified    : Michal MokroÃ…Â¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 20/04/2018
-- Description : Modify the place where commits are done
-- Version     : 4.8.5
-- -------------------------------------------------------------------------------------------
-- Author      : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Upgrade date: 19/10/2015
-- Description : Validation for D Frequency.
-- -------------------------------------------------------------------------------------------
-- Author      : Ricardo Osorio Loaiza
-- Create date : 07/08/2013
-- Description : Procedure to calculate the indicator value of orders overdue  
-- ===========================================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE	@vLastCalculationDate DATETIME;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vOrdersCursor AS CURSOR;
	DECLARE @vFinalizationDate AS DATETIME;
	DECLARE @vPromisedDelDate AS DATETIME;
	DECLARE @vFinalizationLoop AS BIT;
	DECLARE @vOrderValue AS NUMERIC(17,2);
	DECLARE @vCounter AS NUMERIC(10) = 0;
	DECLARE @vStartEvaluationRange AS DATETIME;
	DECLARE @vEndEvaluationRange AS DATETIME;
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE	@return_value INT;
	DECLARE	@vFrequencyMultiplier INT;
	DECLARE	@vStartMultiplier DATETIME;
	DECLARE	@vEndMultiplier DATETIME;
	DECLARE @vCount INT;
	--Extra fields use to fill serie spaces
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;
	DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0;
	
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Get the last calculation date
    SELECT @vLastCalculationDate = MAX(CALCULATION_DATE) 
      FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE
     WHERE CDINDICATOR = @ivaCdIndicator 
       AND SERIE       = @ivaSerieValue;
     
    --Validate if exists a least one calculation  
    IF  @vLastCalculationDate IS NULL 
	BEGIN	
		SET @vLastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
	END  

	--For all records put the column OPEN_ORDERS_OVERDUE with zero
    UPDATE TFSCM_CLI_VALUE_ORDERS_OVERDUE
	   SET OPEN_ORDERS_OVERDUE = 0
	 WHERE CDINDICATOR = @ivaCdIndicator 
	   AND SERIE       = @ivaSerieValue;
	
	--SQL to be executed
	SET @vSQLQuery  = ' SELECT ORDERS.PROMISED_DELIVERY_DATE,ORDERS.FINALIZATION_DATE,ORDERS.ORDER_VALUE '+
					  '   FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
					  '		   JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
					  '		   JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
					  '  WHERE ';
					  
	IF 	@ivaSerieColumn IS NOT NULL
	BEGIN
		IF(@ivaSerieValue = 'EMPTY_SERIE_VALUE')
		BEGIN
			SET @vSQLQuery = @vSQLQuery + @ivaSerieColumn + ' IS NULL AND ';
		END
		ELSE
		BEGIN
			SET @vSQLQuery = @vSQLQuery + @ivaSerieColumn + ' = @ivaSerieValueAux AND ';
		END		
	END
		
	SET @vSQLQuery = @vSQLQuery +
					  '		    ORDERS.CDPARENT_ORDER IS NULL '+
					  '		AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
					  '				AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
					  '			OR '+
					  '	     	 (@ivaCurrentServerTimeAux > ORDERS.PROMISED_DELIVERY_DATE '+
					  '				AND ORDERS.FINALIZATION_DATE IS NULL)) '+
					  '		AND ORDERS.CDORDER_TYPE <> ''S'' 	'+
					  '     AND (ORDERS.FINALIZATION_DATE IS NULL OR '+
					  '	     	 (ORDERS.FINALIZATION_DATE IS NOT NULL AND ORDERS.MODIFY_DATE > @vLastCalculationDateAux )'+
					  ' 		) ';
					  
	IF @ivaUserFilters IS NOT NULL
	BEGIN
		SET @vSQLQuery = @vSQLQuery +' AND '+@ivaUserFilters;
	END
					  
	--Process the result of the query				  	   	
	SET @vSqlStatement = 'SET @vCursor = CURSOR FORWARD_ONLY STATIC FOR '+@vSQLQuery+' open @vCursor;';
	EXEC sys.sp_executesql
		@vSqlStatement
		,N'@vCursor cursor output,@ivaSerieValueAux VARCHAR(200),@ivaCurrentServerTimeAux DATETIME,@vLastCalculationDateAux DATETIME' 	
		,@vOrdersCursor output
		,@ivaSerieValueAux = @ivaSerieValue
		,@ivaCurrentServerTimeAux = @ivaCurrentServerTime
		,@vLastCalculationDateAux = @vLastCalculationDate;
	
	--Evaluate each order
	FETCH NEXT FROM @vOrdersCursor INTO @vPromisedDelDate,@vFinalizationDate,@vOrderValue
	WHILE @@FETCH_STATUS = 0
	BEGIN
	--print '@ivaSerieColumn'+@ivaSerieColumn+'@ivaSerieValue'+@ivaSerieValue+ '@vPromisedDelDate'+cast(@vPromisedDelDate as varchar)+'@vFinalizationDate'+cast(@vFinalizationDate as varchar)
		SET @vCounter = @vCounter + 1;
		--Define the range dates to evaluate the indicator
		IF @vFinalizationDate IS NULL
		BEGIN
			SET @vFinalizationLoop = 0;
			SET @vStartEvaluationRange = @vPromisedDelDate;
			SET @vEndEvaluationRange = @ivaCurrentServerTime;
		END
		ELSE
		BEGIN
			SET @vFinalizationLoop = 1;
			SET @vStartEvaluationRange = @vPromisedDelDate;
			SET @vEndEvaluationRange = @vFinalizationDate;
		END	
			
		--Get the frequency range to process
		IF(@ivaIndicatorFrequency = 'D')
		BEGIN
			--Open orders
			IF (@vFinalizationLoop = 0)
			BEGIN
				UPDATE TFSCM_CLI_VALUE_ORDERS_OVERDUE
				   SET OPEN_ORDERS_OVERDUE  = OPEN_ORDERS_OVERDUE+(@vOrderValue),
					   VALUE_ORDERS_OVERDUE = COMPLETED_ORDERS_OVERDUE + OPEN_ORDERS_OVERDUE + (@vOrderValue),
					   CALCULATION_DATE     = @ivaCurrentServerTime
				 WHERE CDINDICATOR = @ivaCdIndicator AND
					   SERIE       = @ivaSerieValue AND 
					   START_DATE >= CAST (@vStartEvaluationRange AS DATE) AND
					   END_DATE   <= CAST (@vEndEvaluationRange AS DATE);
			END
			ELSE
			--Close orders
			BEGIN
				UPDATE TFSCM_CLI_VALUE_ORDERS_OVERDUE
				   SET COMPLETED_ORDERS_OVERDUE = COMPLETED_ORDERS_OVERDUE+(@vOrderValue),
					   VALUE_ORDERS_OVERDUE     = COMPLETED_ORDERS_OVERDUE + OPEN_ORDERS_OVERDUE + (@vOrderValue),
					   CALCULATION_DATE         = @ivaCurrentServerTime 
				 WHERE CDINDICATOR = @ivaCdIndicator AND
					   SERIE       = @ivaSerieValue AND 
					   START_DATE >= CAST (@vStartEvaluationRange AS DATE) AND
					   END_DATE   <= CAST (@vEndEvaluationRange AS DATE);
			END			
		
			FETCH NEXT FROM @vOrdersCursor INTO @vPromisedDelDate,@vFinalizationDate,@vOrderValue
			CONTINUE;
		END
		ELSE
		BEGIN
			EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
					@ivaDate = @vStartEvaluationRange,
					@ivaFrecuency = @ivaIndicatorFrequency,
					@ovaStartRange = @vStartFrequencyRange OUTPUT,
					@ovaEndRange = @vEndFrequencyRange OUTPUT;
		END
		--print '@vStartEvaluationRange'+cast(@vStartEvaluationRange as varchar)+'@vEndEvaluationRange'+cast(@vEndEvaluationRange as varchar)
		--Process each frequency range
		WHILE @vStartFrequencyRange <= @vEndEvaluationRange
		BEGIN
			--Calculate the multiplier to apply to the frequency range
			SET @vStartMultiplier = @vStartFrequencyRange;
			SET @vEndMultiplier   = @vEndFrequencyRange;
						
			IF @vEndEvaluationRange < @vEndFrequencyRange
			BEGIN
				SET @vEndMultiplier = @vEndEvaluationRange;
			END
			
			IF @vStartEvaluationRange > @vStartFrequencyRange
			BEGIN
				SET @vStartMultiplier = @vStartEvaluationRange;
			END			
			
			SET @vFrequencyMultiplier = DATEDIFF(DAY,@vStartMultiplier,@vEndMultiplier) + 1;
			
			IF @vFrequencyMultiplier<= 0
			BEGIN
				SET @vFrequencyMultiplier = 1;
			END
 		 
			/*PRINT '------------'
			print 'serie'+@ivaSerieColumn 
			print 'valor serie'+@ivaSerieValue
			print 'vALOR '+CAST(@vOrderValue AS VARCHAR)+'Frequency '+	CAST(@vFrequencyMultiplier AS VARCHAR) +' iNICIO '+CAST(@vStartFrequencyRange AS VARCHAR)+' FIN '+CAST(@vEndFrequencyRange AS VARCHAR);
			PRINT 'START MULTIPLIER '+CAST(@vStartMultiplier AS VARCHAR)+' END MULTIPLIER '+CAST(@vEndMultiplier AS VARCHAR)
			print '@vStartEvaluationRange '+CAST(@vStartEvaluationRange AS VARCHAR)+' @vEndEvaluationRange '+CAST(@vEndEvaluationRange AS VARCHAR)
			 */				
			--Open orders
			IF @vFinalizationLoop = 0
			BEGIN
				UPDATE TFSCM_CLI_VALUE_ORDERS_OVERDUE
				   SET OPEN_ORDERS_OVERDUE  = OPEN_ORDERS_OVERDUE+(@vOrderValue*@vFrequencyMultiplier),
					   VALUE_ORDERS_OVERDUE = COMPLETED_ORDERS_OVERDUE + OPEN_ORDERS_OVERDUE + (@vOrderValue*@vFrequencyMultiplier),
					   CALCULATION_DATE     =  @ivaCurrentServerTime
				WHERE CDINDICATOR = @ivaCdIndicator AND
					  SERIE       = @ivaSerieValue AND 
					  START_DATE  = CONVERT(DATETIME,CONVERT(VARCHAR,@vStartFrequencyRange, 103),103) AND
					  END_DATE    = CONVERT(DATETIME,CONVERT(VARCHAR,@vEndFrequencyRange, 103),103);					
			END
			ELSE
			--Close orders
			BEGIN
				UPDATE TFSCM_CLI_VALUE_ORDERS_OVERDUE
				   SET COMPLETED_ORDERS_OVERDUE = COMPLETED_ORDERS_OVERDUE+(@vOrderValue*@vFrequencyMultiplier),
					   VALUE_ORDERS_OVERDUE     = COMPLETED_ORDERS_OVERDUE + OPEN_ORDERS_OVERDUE + (@vOrderValue*@vFrequencyMultiplier),
					   CALCULATION_DATE         =  @ivaCurrentServerTime 
				 WHERE CDINDICATOR = @ivaCdIndicator AND
					   SERIE       = @ivaSerieValue AND 
					   START_DATE  = CONVERT(DATETIME,CONVERT(VARCHAR,@vStartFrequencyRange, 103),103) AND
					   END_DATE    = CONVERT(DATETIME,CONVERT(VARCHAR,@vEndFrequencyRange, 103),103);
			END					 
				  		
			--Get the frequency of the start range
			SET @vStartEvaluationRange = DATEADD(DAY,1,@vEndFrequencyRange);
			EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
									@ivaDate = @vStartEvaluationRange,
									@ivaFrecuency = @ivaIndicatorFrequency,
									@ovaStartRange = @vStartFrequencyRange OUTPUT,
									@ovaEndRange = @vEndFrequencyRange OUTPUT;
		
			SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1
			IF(@vCOMMIT_COUNT = 10)
			BEGIN 
				COMMIT;
				SET @vCOMMIT_COUNT = 0
			END
		END	
				
		FETCH NEXT FROM @vOrdersCursor INTO @vPromisedDelDate,@vFinalizationDate,@vOrderValue;
	END
	CLOSE @vOrdersCursor;
	DEALLOCATE @vOrdersCursor;
 	
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationVOO '+CONVERT(VARCHAR,@vLastCalculationDate,103)+'--'+CONVERT(VARCHAR,@vCounter);
END
GO
/****** Object:  StoredProcedure [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE_FSPACES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author     : Ricardo Osorio Loaiza
-- Create date: 29/09/2013
-- Description:	Procedure to fill spaces in the indicator
-- ---------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify Date: 26/11/2014
-- Description: Change the minimum start date for the indicator
-- ===========================================================================
CREATE PROCEDURE [dbo].[IND_CALCULATE_VALUE_ORDERS_OVERDUE_FSPACES]
	/* Input Parameters */
    @ivaCdIndicator NUMERIC(4),
    @ivaIndicatorFrequency VARCHAR(1),
    @ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT

AS
	--Extra fields use to fill serie spaces
	DECLARE @vStartFrequencyRange AS DATETIME;
	DECLARE @vEndFrequencyRange AS DATETIME;
	DECLARE @vCount INT;
	DECLARE	@return_value INT;
	DECLARE @vSerieSpacesCursor AS CURSOR;
	DECLARE @vDateSpace DATETIME;
	DECLARE @vSpaceLoop AS BIT;

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
			@ivaDate = @ivaCurrentServerTime,
			@ivaFrecuency = @ivaIndicatorFrequency,
			@ovaStartRange = @vStartFrequencyRange OUTPUT,
			@ovaEndRange = @vEndFrequencyRange OUTPUT;
	
	-- -----------------------------------------------------------------------
	-- Get the minimum Start Date for the indicator
	-- -----------------------------------------------------------------------
	DECLARE	@vLastCalculationDate DATETIME;
	DECLARE @vSqlStatement NVARCHAR(MAX);
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vOrdersCursor AS CURSOR;
	DECLARE @minStartDate AS DATETIME;
	
	/* PARA PRUEBAS
	@ivaCdIndicator NUMERIC(4),
	@ivaSerieColumn NVARCHAR(50),
    @ivaSerieValue NVARCHAR(MAX),
    @ivaCurrentServerTime DATETIME,
    @ivaUserFilters NVARCHAR(MAX);
    
    SET @ivaCdIndicator = 61;
    SET @ivaSerieValue = 'SERIE';
    SET @ivaCurrentServerTime = CURRENT_TIMESTAMP;*/
    
	--Get the last calculation date
    SELECT @vLastCalculationDate = MAX(CALCULATION_DATE) 
      FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE
     WHERE CDINDICATOR = @ivaCdIndicator 
       AND SERIE       = @ivaSerieValue;
   
    --Validate if exists a least one calculation  
    IF  @vLastCalculationDate IS NULL 
	BEGIN	
		SET @vLastCalculationDate = CONVERT(DATETIME,'01/01/1901',103);
	END  

	--SQL to be executed
	SET @vSQLQuery  = ' SELECT  MIN(ORDERS.PROMISED_DELIVERY_DATE) '+
					  '   FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
					  '		   JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
					  '		   JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION) '+
					  '  WHERE ';
					  

		
	SET @vSQLQuery = @vSQLQuery +
					  '		    ORDERS.CDPARENT_ORDER IS NULL '+
					  '		AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
					  '				AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
					  '			OR '+
					  '	     	 (@ivaCurrentServerTimeAux > ORDERS.PROMISED_DELIVERY_DATE '+
					  '				AND ORDERS.FINALIZATION_DATE IS NULL)) '+
					  '		AND ORDERS.CDORDER_TYPE <> ''S'' 	'+
					  '     AND (ORDERS.FINALIZATION_DATE IS NULL OR '+
					  '	     	 (ORDERS.FINALIZATION_DATE IS NOT NULL '+
					  '           AND ORDERS.MODIFY_DATE > @vLastCalculationDateAux ))';
					  
	IF @ivaUserFilters IS NOT NULL
	BEGIN
		SET @vSQLQuery = @vSQLQuery +' AND '+@ivaUserFilters;
	END
			  
	--Process the result of the query				  	   	
	SET @vSqlStatement = 'SET @minStartDates =  ( ' + @vSQLQuery + ');';
	
	EXEC sys.sp_executesql
		@vSqlStatement
		,N'@minStartDates DATETIME output,@ivaSerieValueAux VARCHAR(200),@ivaCurrentServerTimeAux DATETIME,@vLastCalculationDateAux DATETIME' 	
		,@minStartDate output
		,@ivaSerieValueAux = @ivaSerieValue
		,@ivaCurrentServerTimeAux = @ivaCurrentServerTime
		,@vLastCalculationDateAux = @vLastCalculationDate;
	
    SET @vSerieSpacesCursor = CURSOR FORWARD_ONLY STATIC FOR  SELECT VOO.START_DATE
																FROM (SELECT DATEADD(DAY,1,AUX.END_DATE) START_DATE
																	  FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE AUX
																	  WHERE AUX.CDINDICATOR = @ivaCdIndicator AND AUX.SERIE = @ivaSerieValue) VOO
																WHERE VOO.START_DATE NOT IN(SELECT VOO2.START_DATE
																							FROM  TFSCM_CLI_VALUE_ORDERS_OVERDUE VOO2
																							WHERE VOO2.CDINDICATOR = @ivaCdIndicator AND VOO2.SERIE = @ivaSerieValue
																							)
																UNION
																SELECT @minStartDate
																
																UNION
																SELECT @vStartFrequencyRange;
		 
    OPEN @vSerieSpacesCursor;
    FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;
	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @vDateSpace IS NOT NULL
				BEGIN
					SET @vSpaceLoop = 0;
					WHILE @vSpaceLoop = 0
						BEGIN
							--Get the frequency range to validate
							EXEC	@return_value = [dbo].[GETDATE_FREQUENCY_RANGE]
														@ivaDate = @vDateSpace,
														@ivaFrecuency = @ivaIndicatorFrequency,
														@ovaStartRange = @vStartFrequencyRange OUTPUT,
														@ovaEndRange = @vEndFrequencyRange OUTPUT;
							--Check if exists a row for the frequency range
							
							
							SELECT @vCount = COUNT(*)
							FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE VOO
							WHERE VOO.CDINDICATOR = @ivaCdIndicator AND
								  VOO.SERIE = @ivaSerieValue AND 
								  VOO.START_DATE = @vStartFrequencyRange AND
								  VOO.END_DATE = @vEndFrequencyRange;
							
							IF 	@vCount > 0 OR @vStartFrequencyRange > @ivaCurrentServerTime
								BEGIN
									SET @vSpaceLoop = 1;
								END  
							ELSE
								BEGIN
									INSERT INTO TFSCM_CLI_VALUE_ORDERS_OVERDUE(CDINDICATOR,SERIE,COMPLETED_ORDERS_OVERDUE,OPEN_ORDERS_OVERDUE,
																					VALUE_ORDERS_OVERDUE,START_DATE,END_DATE,CALCULATION_DATE)
																				   VALUES(@ivaCdIndicator,@ivaSerieValue,0,0,
																						  0,@vStartFrequencyRange,@vEndFrequencyRange,CONVERT(DATETIME,'01/01/1901',103));			
								
									SET @vDateSpace = DATEADD(DAY,1,@vEndFrequencyRange);
								END
						END
				END
			
										
			FETCH NEXT FROM @vSerieSpacesCursor INTO @vDateSpace;							
		END
    CLOSE @vSerieSpacesCursor;
	DEALLOCATE @vSerieSpacesCursor;
	
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaMessage = 'sucessfulCalculationVOOFSPACES';

END
GO
/****** Object:  StoredProcedure [dbo].[IND_COUNT_SERIE_DISTINCT_VALUES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 28/10/2014
-- Description:	Procedure to count the distinct values of a serie
-- =============================================
CREATE PROCEDURE [dbo].[IND_COUNT_SERIE_DISTINCT_VALUES]
	/* Input Parameters */
    @ivaIndicatorType NUMERIC(4),
    @ivaSerieColum NVARCHAR(50),
    @ivaUserFiltersSerie NVARCHAR(MAX),
    @ovaResultCount VARCHAR(1) OUTPUT,
    @ovaSqlCountResult INT OUTPUT
--
AS
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vDefaultFilters AS NVARCHAR(MAX);
	DECLARE @return_value AS INT;
	DECLARE @ovaResult AS VARCHAR(1);
	DECLARE	@ovaSqlGenerated AS NVARCHAR(max)
	DECLARE @vCurrentServerTime DATETIME;
	
BEGIN
	--SET @vCurrentServerTime = GETDATE();
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET  @vCurrentServerTime = GETDATE();
	
	
	EXEC	@return_value = [dbo].[IND_GENERATE_QUERY_SQL]
							@ivaIsCountBySerieColumn = 1,
							@ivaIndicatorType = @ivaIndicatorType,
							@ivaSerieColum = @ivaSerieColum,
							@ivaUserFiltersSerie = @ivaUserFiltersSerie,
							@ovaResult = @ovaResult OUTPUT,
							@ovaSqlGenerated = @ovaSqlGenerated OUTPUT
	PRINT @ovaSqlGenerated
	EXEC sp_executesql
	@ovaSqlGenerated ,
	N'@vTotalDistinctSeriesV INT OUTPUT, @ivaCurrentServerTimeAux DATETIME' ,
	@ovaSqlCountResult OUTPUT,		
	@ivaCurrentServerTimeAux = @vCurrentServerTime;
	PRINT  CAST(@ovaSqlCountResult AS VARCHAR)				
		
    --Procedure result
    SET @ovaResultCount = '0';

END
GO
/****** Object:  StoredProcedure [dbo].[IND_GENERATE_QUERY_SQL]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Julián Andrés González Vélez
-- Create date: 28/10/2014
-- Description:	Procedure to generare SQL for an specific indicator 
-- =============================================
CREATE PROCEDURE [dbo].[IND_GENERATE_QUERY_SQL]
	/* Input Parameters */
	@ivaIsCountBySerieColumn BIT,
    @ivaIndicatorType NUMERIC(4),
    @ivaSerieColum NVARCHAR(50),
    @ivaUserFiltersSerie NVARCHAR(MAX),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaSqlGenerated NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	DECLARE @vSQLQuery AS NVARCHAR(MAX);
	DECLARE @vDefaultFilters NVARCHAR(MAX)
	
	
BEGIN
	--SET @vCurrentServerTime = GETDATE();
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--SQL to be executed				
		IF @ivaIndicatorType = 1
			BEGIN 
						
				SET @vDefaultFilters = ' ORDERS.CDPARENT_ORDER IS NULL '+
				'		  AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
										' AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
						'OR '+
				'	     		(@ivaCurrentServerTimeAux >  ORDERS.PROMISED_DELIVERY_DATE '+
										' AND ORDERS.FINALIZATION_DATE IS NULL)) '+
				'		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';
			END
						
		IF @ivaIndicatorType = 2
			BEGIN 
						
				SET @vDefaultFilters =  ' ORDERS.CDPARENT_ORDER IS NULL '+
				'		  AND ((ORDERS.FINALIZATION_DATE > ORDERS.PROMISED_DELIVERY_DATE'+ 
										' AND ORDERS.FINALIZATION_DATE IS NOT NULL )'+
				'OR '+
				'	     		(@ivaCurrentServerTimeAux  >  ORDERS.PROMISED_DELIVERY_DATE '+
										' AND ORDERS.FINALIZATION_DATE IS NULL)) '+
				'		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';
						  
						  
				END
						
						
		IF @ivaIndicatorType = 4
			BEGIN 
						
				SET @vDefaultFilters = ' ORDERS.CDPARENT_ORDER IS NULL '+					  
				'		  AND (ORDERS.REAL_RELEASE_DATE IS NOT NULL AND '+
				'	     		ORDERS.REAL_RELEASE_DATE <>	 ORDERS.RECOMMENDED_RELEASE_DATE) '+
						  
				'		  AND ORDERS.CDORDER_TYPE <> ''S'' 	';
						  
						  
			END
			
			
		IF @ivaIndicatorType = 6
			BEGIN				
				SET @vDefaultFilters  = ' BH.UNIT_THROUGHPUT IS NOT NULL '+
			  '		 AND BH.UNIT_THROUGHPUT <> 0 '+
			  '		 AND BH.BUFFER <> 0 '+
			  '      AND BH.WORST_INVENTORY_ON_SITE <= 0 ';						  					  
			END	
	
		
						
			IF(@ivaIsCountBySerieColumn = 1)
				BEGIN 
					SET @vSQLQuery  = ' SELECT @vTotalDistinctSeriesV = COUNT(DISTINCT '+@ivaSerieColum+') ';
				END 
			ELSE
				BEGIN
					
					SET @vSQLQuery  = ' SELECT CAST('+@ivaSerieColum+' AS VARCHAR) SERIE_VALUE ';
				END		
					
					
			IF(@ivaIndicatorType = 1 OR @ivaIndicatorType = 2 OR @ivaIndicatorType = 4)
			BEGIN
				SET @vSQLQuery  = @vSQLQuery+
							' FROM TFSCM_CLI_PRODUCTION_ORDERS ORDERS '+
							'		 JOIN TFSCM_CLI_PRODUCTION_FAMILY FAMILY ON(ORDERS.CDFAMILY = FAMILY.CDFAMILY) '+
							'		 JOIN TFSCM_CLI_LOCATION UBICACION ON (ORDERS.CDPLANT = UBICACION.CDLOCATION)';			
			END
				
			IF(@ivaIndicatorType = 6)
			BEGIN
				SET @vSQLQuery  = @vSQLQuery+ ' FROM TFSCM_CLI_BUFFER_HISTORY BH '+
					  '		JOIN TFSCM_CLI_BUFFER BUFFER ON(BH.SKU = BUFFER.SKU AND BH.LOCATION = BUFFER.LOCATION) ';
			
			END
							
			SET @vSQLQuery = @vSQLQuery	+ ' WHERE '+@vDefaultFilters;
							
						
			IF @ivaUserFiltersSerie IS NOT NULL 
				BEGIN
					SET @vSQLQuery = @vSQLQuery	+ ' AND '+@ivaUserFiltersSerie;
				END
				
				IF(@ivaIsCountBySerieColumn = 0)
				BEGIN
					SET @vSQLQuery = @vSQLQuery	+ ' GROUP BY '+@ivaSerieColum;	
				END									  
							
		
    --Procedure result
    SET @ovaResult = '0';
    SET @ovaSqlGenerated = @vSQLQuery;

END
GO
/****** Object:  StoredProcedure [dbo].[MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 11/11/2020
-- Description : Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				 BAA_OUT_CLASSIFICATION.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 24/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/02/2020
-- Description : * Add temporary table which will be used for updating adjustment acction 
--                 column after executing Replenishment Suggestions Generation action.
--				 * Add parameter 'M' for calling SP GENERATE_REPLENISHMENT_SUGGESTIONS, which
--                 indicates that it is called form Manage Buffer Suggestions action.
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/12/2019
-- Description : When this method was called from Focuss manually, @ivaManagementFrom was 
-- 				 wrongly changed to 'C' because of a bad condition (@ivaManagementFrom != 'C') 
--				 and should be (@ivaManagementFrom = 'C') 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡ - Oscar Londoño
-- Upgrade date: 01/05/2019
-- Description : Improve performance for cursors declaration
-- Version     : 4.10.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 13/12/2018
-- Description : If this method is called from Apply Buffer Changes process
-- 				 (@ivaManagementFrom = 'C'), then SBC_BUFFER_SIZE value should NOT be changed
-- Version     : 4.10.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 26/04/2018
-- Description : Only if it is an Increase Suggestion rejection, for a buffer 
--               with atypical outs, a buffer recalculation is needed
-- Version     : 4.8.5
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/06/2017
-- Description : * Rename NET_PRIORITY by NET_PRIORITY and NET_PRIORITY_COLOR by 
--				   NET_PRIORITY_COLOR
-- 				 * Select NET_INVETORY for priority calculation  
-- 				 * Change GET_CALCULATE_BUFFER_CHAIN_PRIORITY by GET_CALCULATE_BUFFER_NET_PRIORITY
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/03/2017
-- Description : If GENERATE_ADJUSTMENT_SUGGESTIONS_HISTORY returns an error, then rise an 
--				 exception. 
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Create date: 26/10/2015
-- Description:	Calculate priority of purchase orders
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Create date: 18/12/2014
-- Description:	Generate buffer adjustment suggestions from manual or automaticaction
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS]
	/* Input Parameters */
    @ivaBufferList 			NVARCHAR(MAX),
    @ivaManagedBy 			VARCHAR(50),
    @ivaManagementFrom 		VARCHAR (1),
    /* Output Parameters */
    @ovaResult 				VARCHAR(1) OUTPUT,
    @ovaMessage				NVARCHAR(MAX) OUTPUT
AS
	--Fields use for calculation	
	DECLARE	@UpdateDate AS DATETIME = getdate();	
	
	--Auxiliar variables
	DECLARE @EMPTY_ADJUSTMENT_TYPE      AS VARCHAR(10) = 'EMPTY';
	DECLARE @ADJUSTMENT_ACTION_ACCEPT   AS VARCHAR(10) = 'ACCEPT';
	DECLARE @ADJUSTMENT_ACTION_REJECT   AS VARCHAR(10) = 'REJECT';
	DECLARE @ADJUSTMENT_ACTION_EXPIRE   AS VARCHAR(10) = 'EXPIRE';
	-- -------------------------------------------------------------------------------------------
	-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
	-- -------------------------------------------------------------------------------------------
	DECLARE @BAA_OUT_CLASSIFICATION_NORMAL		AS VARCHAR(2) = 'N';
	DECLARE @BAA_OUT_CLASSIFICATION_ATYPICAL	AS VARCHAR(2) = 'A';
	DECLARE @BAA_OUT_CLASSIFICATION_PENDING		AS VARCHAR(2) = 'P';
	DECLARE @OutputMark                 AS VARCHAR(1)  = 'N';
	DECLARE @BufferDTOAux				AS BufferTblType;
	DECLARE @ADJUSTMENT_TYPE_INCREASE   AS VARCHAR(10) = 'INCREASE'
	DECLARE @AdjustmentType             AS VARCHAR(50);
	DECLARE @AdjustmentAction           AS VARCHAR(50);
	DECLARE @SuggestionAlerts           AS VARCHAR(50);
	DECLARE @SKU 						AS VARCHAR(50);
	DECLARE @LOCATION 					AS VARCHAR(50);
	DECLARE @UPDATE_MOVEMENTS 			AS DATE;
	DECLARE @REPLENISHMENT_TIME 		AS INT;
	DECLARE @BUFFER 					AS NUMERIC (17,5);
	DECLARE @FAMILY 					AS VARCHAR(50);
	DECLARE @OvaSgResult 				AS VARCHAR(1);
    DECLARE @OvaSgMessage				AS NVARCHAR(MAX);
    DECLARE @ManagementFromManual 		AS VARCHAR(1) = 'M';
    DECLARE @ManagementFromAutomatic	AS VARCHAR(1) = 'A';
    DECLARE @OvaGBASResult				AS VARCHAR(1);
    DECLARE @OvaGBASMessage 			AS NVARCHAR(MAX);
    DECLARE @AtipicalOutputsAlert 		AS VARCHAR(1) = 'A';
    DECLARE @DelimiterForRecords  		AS CHAR(1) = '|';
    DECLARE @DelimiterForPk  			AS CHAR(1) = ';';
    DECLARE @BufferRecord 				AS NVARCHAR(MAX);
    DECLARE @GenerateAdjSuggestions		AS VARCHAR(1) = 'N';  
    DECLARE @OriginCaller				AS VARCHAR(1) = 'M';
    
    --Auxiliar variables V2.2.2
    DECLARE @APPROVED_BUFFER 					AS NUMERIC(17,5);
    DECLARE @SITE_PRIORITY 						AS NUMERIC(17,2);
    DECLARE @INVENTORY_ON_SITE 					AS NUMERIC(17,5);
    DECLARE @SECURITY_STOCK 					AS NUMERIC(17,5);
    DECLARE @INVENTORY_ACCURACY 				AS NUMERIC(3,0);
    DECLARE @EFFECTIVE_BUFFER 					AS NUMERIC(17,5);
    DECLARE @ALLOWED_OVERSTOCKING				AS NUMERIC(17,5);
    DECLARE @BUFFER_SITE_PRIORITY_COLOR 		AS VARCHAR(50);
    DECLARE @BUFFER_SITE_PRIORITY_COLOR_OLD 	AS VARCHAR(50);
    DEClARE @BUFFER_YELLOW_ZONE_START 			AS NUMERIC(5,2);
    DECLARE @BUFFER_RED_ZONE_START 				AS NUMERIC(5,2);
    DECLARE @INVENTORY_ON_CHAIN  				AS NUMERIC(17,5);
    DECLARE @NET_INVENTORY 						AS NUMERIC(17,5);
	DECLARE @BUFFER_NET_PRIORITY 				AS NUMERIC(17,2);
    DECLARE @BUFFER_NET_PRIORITY_COLOR 			AS VARCHAR(50);
    DECLARE @BUFFER_LAST_COLOR_CHANGE_DATE 		AS DATE;
    DECLARE @BUFFER_LAST_COLOR_CHANGE_DATE_OLD	AS DATE;
    DECLARE @MANAGED 							AS BIT;
    DECLARE @DelimiterForLocations 				AS CHAR(1) = '|';
    DECLARE @LocationsListTemp 					AS NVARCHAR(MAX) = '';
    DECLARE @OvaReplenishmentResult				AS VARCHAR(1);
    DECLARE @OvaReplenishmentMessage 			AS NVARCHAR(MAX);
    DECLARE @UpdateFullBuffer 					AS VARCHAR(1) = 'N';
    DECLARE @FinalizationDateDefaultValue		AS DATETIME;
    DECLARE @SBC_BUFFER_SIZE 					AS NUMERIC(17,5);

    DECLARE @SkuBefore 					AS  VARCHAR(50);
	DECLARE @CdDestinationBefore 		AS  VARCHAR(50);
    DEClARE @OP_YELLOW_ZONE_START		AS  NUMERIC(5,2);
    DECLARE @OP_RED_ZONE_START			AS  NUMERIC(5,2);
    DECLARE @OvaOpPriorityResul			AS  NUMERIC(10,2);
    DECLARE @SumProductionStock			AS  NUMERIC(38,5);
    DECLARE @MANAGED_ORDER				AS  BIT;
    DECLARE @RECOMMENDED_RELEASE_DATE	AS  DATETIME;
    DECLARE @OP_PRIORITY_COLOR			AS  VARCHAR(50);
	DECLARE @OP_RELEASE_STATUS			AS  VARCHAR(1);
	DECLARE @CDCALENDAR					AS  NUMERIC(4,0)
	DECLARE @ExistAccepted 				AS  VARCHAR(1)  = 'N'
	DECLARE @STOCK_ORDER_TYPE 			AS  VARCHAR(1)  = 'S'
	
	--PURCHASE ORDERS VARIABLES
	DECLARE @SumPurchaseStock			AS NUMERIC(38,5);
	DECLARE @SumTofinishPurchaseStock	AS NUMERIC(38,5);
	DECLARE @OvaPuoPriority				AS NUMERIC(17,2);
	DECLARE @OvaPuoPriorityColor		AS VARCHAR(50);
	DECLARE @OvaPuoPriorityResul		AS VARCHAR(1);
	DECLARE @OvaPuoPriorityMessage		AS NVARCHAR(max);
	
	--Message variables
	DECLARE @MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR  AS NVARCHAR(MAX);
	DECLARE @MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS AS NVARCHAR(MAX);
	DECLARE @Language					AS VARCHAR(2) = 'es';
	DECLARE @CodErrorResultMessages		AS VARCHAR(1);
	DECLARE @MessageErrorResultMessages	AS NVARCHAR(MAX);

BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
	
		SET @ovaMessage = '';
		SELECT @Language = PARAM_VALUE  
		  FROM TFSCM_COM_PARAMS 
		 WHERE CDPARAM = 'DEFAULT_LANGUAGE';

		SET @FinalizationDateDefaultValue = CONVERT(DATETIME,'01/01/1901', 103);	
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200227: Since v4.15.0, add temporary table which will be used for updating
		--                Adjustment Acction column after executing Replenishment Suggestions
		-- 				  Generation action.	
		-- -----------------------------------------------------------------------------------
		IF OBJECT_ID('TempProcessedSuggTbl') IS NOT NULL 
			DROP TABLE TempProcessedSuggTbl;
		
		SELECT DISTINCT [B].[SKU], [B].[LOCATION]
		  INTO TempProcessedSuggTbl
	      FROM [dbo].[TFSCM_CLI_BUFFER] [B] 
		 WHERE 2 = 1;	
			
		DECLARE cMBuffer CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR
		 SELECT DISTINCT value AS BUFFERS   
		   FROM STRING_SPLIT(@ivaBufferList, @DelimiterForRecords);
		
		OPEN cMBuffer;
		FETCH cMBuffer INTO @BufferRecord;
		
		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN
			SELECT @SKU      = SUBSTRING(@BufferRecord, 0, CHARINDEX(@DelimiterForPk, @BufferRecord));
			SELECT @LOCATION = SUBSTRING(@BufferRecord, CHARINDEX(@DelimiterForPk, @BufferRecord) + 1, LEN(@BufferRecord));
			
			--PRINT 'ENTRADA ES '+@SKU
			--PRINT 'ENTRADA ES '+@LOCATION	
			-- -------------------------------------------------------------------------------
			-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
			--                Movements column
			-- -------------------------------------------------------------------------------
			SELECT @AdjustmentAction                  = BUFF.ADJUSTMENT_ACTION ,
				   @SuggestionAlerts                  = BUFF.SUGGESTION_ALERTS,
				   @UPDATE_MOVEMENTS                  = BUFF.UPDATE_MOVEMENTS,
			       @REPLENISHMENT_TIME                = BUFF.REPLENISHMENT_TIME,
				   @BUFFER                            = BUFF.BUFFER,
				   @FAMILY                            = BUFF.FAMILY,
				   @APPROVED_BUFFER                   = BUFF.APPROVED_BUFFER,
				   @INVENTORY_ON_SITE                 = BUFF.INVENTORY_ON_SITE,
				   @SECURITY_STOCK                    = BUFF.SECURITY_STOCK,				
				   @ALLOWED_OVERSTOCKING              = BUFF.ALLOWED_OVERSTOCKING,
				   @INVENTORY_ON_CHAIN                = BUFF.INVENTORY_ON_CHAIN,
				   @NET_INVENTORY                     = BUFF.NET_INVENTORY,
				   @BUFFER_LAST_COLOR_CHANGE_DATE_OLD = BUFF.LAST_COLOR_CHANGE_DATE,
				   @BUFFER_SITE_PRIORITY_COLOR_OLD    = SITE_PRIORITY_COLOR,
				   @BUFFER_YELLOW_ZONE_START          = CBF.YELLOW_ZONE_START,
				   @BUFFER_RED_ZONE_START             = CBF.RED_ZONE_START,
				   @INVENTORY_ACCURACY                = CU.INVENTORY_ACCURACY,
				   @AdjustmentType                    = BUFF.ADJUSTMENT_TYPE,
				   @SBC_BUFFER_SIZE 				  = BUFF.SBC_BUFFER_SIZE
			  FROM TFSCM_CLI_BUFFER BUFF
					LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBF ON (CBF.CDBUFFER_FAMILY = BUFF.FAMILY) 
					LEFT OUTER JOIN TFSCM_CLI_UNITS CU          ON (CU.CDUNIT = BUFF.CDUNIT)
			 WHERE BUFF.SKU      = @SKU
			   AND BUFF.LOCATION = @LOCATION;
			
			--PRINT @SKU+' LOCATION '+@LOCATION+'BUFFER'+CAST(@BUFFER AS VARCHAR)+' ALERTS '
			--     + @SuggestionAlerts+' @AdjustmentAction:'+@AdjustmentAction		
			IF (@AdjustmentAction IS NOT NULL AND (@AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT 
			 OR @AdjustmentAction = @ADJUSTMENT_ACTION_REJECT OR @AdjustmentAction = @ADJUSTMENT_ACTION_EXPIRE))
			BEGIN
				IF (@SuggestionAlerts IS NOT NULL AND (CHARINDEX(@AtipicalOutputsAlert, @SuggestionAlerts)) > 0) 
				BEGIN 
					-- -----------------------------------------------------------------------
					-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
					-- -----------------------------------------------------------------------
					IF (@AdjustmentAction IS NOT NULL AND @AdjustmentAction = @ADJUSTMENT_ACTION_REJECT
					     AND @AdjustmentType = @ADJUSTMENT_TYPE_INCREASE)
					BEGIN 
						SET @GenerateAdjSuggestions = 'Y';
						SET @OutputMark = @BAA_OUT_CLASSIFICATION_ATYPICAL; 
						-- -------------------------------------------------------------------
						-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by
						--                Update Movements column
						-- -------------------------------------------------------------------
						INSERT INTO @BufferDTOAux (SKU, LOCATION, UPDATE_MOVEMENTS, REPLENISHMENT_TIME, BUFFER, FAMILY)
						VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @REPLENISHMENT_TIME, @BUFFER, @FAMILY);	
					END
					ELSE
					BEGIN
						SET @OutputMark = @BAA_OUT_CLASSIFICATION_NORMAL;						
					END
					
					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					   SET [BAA_OUT_CLASSIFICATION] = @OutputMark
					 WHERE [SKU]                    = @SKU
				       AND [LOCATION]               = @LOCATION
					   AND [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_PENDING;
				END
				
				EXEC GENERATE_ADJUSTMENT_SUGGESTIONS_HISTORY  @ivaManagedBy, @LOCATION, @SKU, 
						@OvaSgResult OUTPUT, @OvaSgMessage OUTPUT;
						
				IF (@OvaSgResult = '1')
				BEGIN					
					SET @ovaResult = '1';
					-- (@ErMessage, @ErSeverity, @ErState)		 
					RAISERROR (@OvaSgMessage, 11, 1);
				END	
				
				IF (@AdjustmentAction IS NOT NULL AND @AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT)
				BEGIN 
					SET @UpdateFullBuffer = 'Y';
					SET @ExistAccepted    = 'Y';
					
					UPDATE TFSCM_CLI_BUFFER
					   SET BUFFER = APPROVED_BUFFER
					 WHERE SKU      = @SKU
					   AND LOCATION = @LOCATION;
						
					--PRINT '@APPROVED_BUFFER ES'+CAST(@APPROVED_BUFFER AS VARCHAR)
					-- -----------------------------------------------------------------------
					-- For those columns that are directly related with buffer size, then 
					-- re-calculate them
					-- -----------------------------------------------------------------------
					SET @EFFECTIVE_BUFFER = dbo.GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER(@INVENTORY_ACCURACY,
												@APPROVED_BUFFER, @SECURITY_STOCK, @ALLOWED_OVERSTOCKING);
					SET @SITE_PRIORITY = dbo.GET_CALCULATE_BUFFER_SITE_PRIORITY(@APPROVED_BUFFER, @SECURITY_STOCK,
												@INVENTORY_ON_SITE);
					SET @BUFFER_SITE_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@SITE_PRIORITY, 
												@INVENTORY_ON_SITE, @EFFECTIVE_BUFFER, @BUFFER_YELLOW_ZONE_START, 
												@BUFFER_RED_ZONE_START);
					SET @BUFFER_NET_PRIORITY = dbo.GET_CALCULATE_BUFFER_NET_PRIORITY(@APPROVED_BUFFER,
												@SECURITY_STOCK, @NET_INVENTORY);
					SET @BUFFER_NET_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@BUFFER_NET_PRIORITY, 
												@INVENTORY_ON_CHAIN, @EFFECTIVE_BUFFER, @BUFFER_YELLOW_ZONE_START, 
												@BUFFER_RED_ZONE_START);
					-- -----------------------------------------------------------------------
					-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by 
					--                Update Movements column
					-- -----------------------------------------------------------------------
					SET @BUFFER_LAST_COLOR_CHANGE_DATE = dbo.BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE(
												@BUFFER_LAST_COLOR_CHANGE_DATE_OLD, @BUFFER_SITE_PRIORITY_COLOR_OLD,
												@BUFFER_SITE_PRIORITY_COLOR, @UPDATE_MOVEMENTS);
					SET @MANAGED = dbo.BUFFER_GET_CALCULATE_MANAGED(@BUFFER_SITE_PRIORITY_COLOR_OLD, 
												@BUFFER_SITE_PRIORITY_COLOR);
					
					-- Append this location to the list of edited ones
					IF (CHARINDEX(@LOCATION, @LocationsListTemp ) = 0 
					AND (SELECT dbo.VALIDATE_NON_WORK_DAY(GETDATE(), @CDCALENDAR)) = 0) 				
					BEGIN
						SET @LocationsListTemp = @LocationsListTemp + @DelimiterForLocations + @LOCATION
					END						
					
					-- The buffer related orders priority have to be updated
					DECLARE @recalcPriorityResult  VARCHAR(1);
					DECLARE @recalcPriorityMessage NVARCHAR(MAX);
					EXEC USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY @SKU, @LOCATION, @UPDATE_MOVEMENTS,
									@recalcPriorityResult OUTPUT, @recalcPriorityMessage OUTPUT;
									
					IF (@recalcPriorityResult = '1')
					BEGIN
						SET @ovaResult = '1';
						-- (@ErMessage, @ErSeverity, @ErState)
						RAISERROR (@recalcPriorityMessage, 10, 1);
					END		
				END	
				
				IF (@UpdateFullBuffer = 'Y')
				BEGIN 
					UPDATE TFSCM_CLI_BUFFER
					   SET BUFFER = CASE WHEN (@AdjustmentAction IS NOT NULL
										  AND  @AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT) THEN
										APPROVED_BUFFER
								    ELSE
										BUFFER
								    END,
						   -- ----------------------------------------------------------------
						   -- OHLO 20181213: Since v4.10.0 if called from Apply Buffer Changes, 
						   --                value does not change
						   -- ----------------------------------------------------------------
						   SBC_BUFFER_SIZE = CASE WHEN (@ivaManagementFrom = 'C') THEN
												SBC_BUFFER_SIZE
											 ELSE
												 CASE WHEN (@AdjustmentAction IS NOT NULL 
													   AND  @AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT) THEN
													APPROVED_BUFFER
												 ELSE 
													BUFFER 
												 END		
											 END,		
						   ADJUSTMENT_TYPE = @EMPTY_ADJUSTMENT_TYPE,
						   SUGGESTED_BUFFER = NULL,
						   APPROVED_BUFFER = NULL,
						   -- ----------------------------------------------------------------
						   -- OHLO 20200227: Since v4.15.0, Adjustment Action column will be 
						   --                updated after calling the Replenishment 
						   --                Suggestions Generation action.
						   -- ----------------------------------------------------------------
						   -- ADJUSTMENT_ACTION = 'IGNORE',
						   SUGGESTION_DATE = NULL,
						   SUGGESTION_REJECTION_CAUSE = NULL,
						   SUGGESTION_EXPIRATION_DATE = NULL,
						   SUGGESTION_ALERTS = NULL,
						   EFFECTIVE_BUFFER = @EFFECTIVE_BUFFER,
						   SITE_PRIORITY = @SITE_PRIORITY,
						   SITE_PRIORITY_COLOR = @BUFFER_SITE_PRIORITY_COLOR,
						   NET_PRIORITY = @BUFFER_NET_PRIORITY,
						   NET_PRIORITY_COLOR = @BUFFER_NET_PRIORITY_COLOR,
						   LAST_COLOR_CHANGE_DATE = @BUFFER_LAST_COLOR_CHANGE_DATE,
						   MANAGED = @MANAGED
					WHERE SKU      = @SKU
					  AND LOCATION = @LOCATION
					
					-- -----------------------------------------------------------------------
					-- OHLO 20200227: Since v4.15.0, Save buffers for which Adjustment Action 
					--                column will be updated later.
					-- -----------------------------------------------------------------------
					INSERT INTO TempProcessedSuggTbl (SKU, LOCATION) VALUES (@SKU, @LOCATION);					
				END 
				ELSE							
				BEGIN
					UPDATE TFSCM_CLI_BUFFER
					   SET BUFFER = CASE WHEN (@AdjustmentAction IS NOT NULL 
										  AND  @AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT) THEN
										APPROVED_BUFFER
								    ELSE 
									    BUFFER 
							        END,
						   -- ----------------------------------------------------------------						   
				           -- OHLO 20181213: Since v4.10.0 if called from Apply Buffer Changes,
						   --			 	 value does not change
						   -- ----------------------------------------------------------------						   
						   SBC_BUFFER_SIZE = CASE WHEN (@ivaManagementFrom = 'C') THEN
												SBC_BUFFER_SIZE
											 ELSE
												 CASE WHEN (@AdjustmentAction IS NOT NULL 
													   AND  @AdjustmentAction = @ADJUSTMENT_ACTION_ACCEPT) THEN
													APPROVED_BUFFER
												 ELSE 
													BUFFER 
												 END		
											 END,
						   ADJUSTMENT_TYPE   = @EMPTY_ADJUSTMENT_TYPE,
						   SUGGESTED_BUFFER  = NULL,
						   APPROVED_BUFFER   = NULL,
						   -- ----------------------------------------------------------------
						   -- OHLO 20200227: Since v4.15.0, Adjustment Action column will be 
						   --                updated after calling the Replenishment 
						   --                Suggestions Generation action.
						   -- ----------------------------------------------------------------
						   --ADJUSTMENT_ACTION = 'IGNORE',
						   SUGGESTION_DATE   = NULL,
						   SUGGESTION_REJECTION_CAUSE = NULL,
						   SUGGESTION_EXPIRATION_DATE = NULL,
						   SUGGESTION_ALERTS = NULL	
					 WHERE SKU = @SKU
					   AND LOCATION = @LOCATION;

					-- -----------------------------------------------------------------------
					-- OHLO 20200227: Since v4.15.0, Save buffers for which Adjustment Action 
					--                column will be updated later.
					-- -----------------------------------------------------------------------
					INSERT INTO TempProcessedSuggTbl (SKU, LOCATION) VALUES (@SKU, @LOCATION);					   
				END							
			END
			SET @UpdateFullBuffer = 'N';		
			FETCH cMBuffer INTO @BufferRecord
		END
		CLOSE cMBuffer			
		DEALLOCATE cMBuffer
		
		CREATE INDEX IdxTempProcessedSuggTbl ON TempProcessedSuggTbl ([SKU], [LOCATION]);
		
		IF(LEN(@LocationsListTemp)>0)
		BEGIN
			SET @LocationsListTemp = SUBSTRING (@LocationsListTemp, 2, LEN(@LocationsListTemp));
			
			-- -------------------------------------------------------------------------------
			-- OHLO 20200227: Since v4.15.0, Add parameter M as Origin Caller. 
			-- -------------------------------------------------------------------------------
			EXEC [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS]
				@ivaManagedBy, 
				@LocationsListTemp, 
				@DelimiterForLocations, 
				@OriginCaller, --> Called from management M
				@OvaReplenishmentResult OUTPUT, 
				@OvaReplenishmentMessage OUTPUT;
		END 
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200227: Since v4.15.0, Update the Adjustment Action column after calling the
		--                Replenishment Suggestions Generation action.
		-- -----------------------------------------------------------------------------------
		UPDATE [BUFFER]
		   SET [ADJUSTMENT_ACTION] = 'IGNORE'
		  FROM [dbo].[TFSCM_CLI_BUFFER] [BUFFER] 
		  JOIN TempProcessedSuggTbl [TBL] ON ([TBL].[SKU]      = [BUFFER].[SKU] 
		                                  AND [TBL].[LOCATION] = [BUFFER].[LOCATION]);
		  
		SET @ovaResult = '0';    
		
		IF (@GenerateAdjSuggestions = 'Y')
		BEGIN
			-- -------------------------------------------------------------------------------
			-- OHLO 20191219: Since v4.14.0, condition sould be: (@ivaManagementFrom = 'C') 
			--				  instead of: (@ivaManagementFrom != 'C')
			-- -------------------------------------------------------------------------------
			-- OHLO 20181212: Since v4.10.0, when this SP is called from Apply Buffer Changes,
			--                then the generation of buffer adjustmen suggestions is the same
			-- 			      as Automatic 
			-- -------------------------------------------------------------------------------
			IF (@ivaManagementFrom = 'C')
			BEGIN
				SET @ivaManagementFrom = 'A';
			END
			
			EXEC GENERATE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferDTOAux, @ivaManagedBy, @ivaManagementFrom,
				 @OvaGBASResult OUTPUT, @OvaGBASMessage OUTPUT;
				 
			SET @ovaResult = @OvaGBASResult;    				
		END
		--SET @ovaResult = '2';
		IF (@ExistAccepted = 'Y' AND @ovaResult <> '1')
		BEGIN
			SET @ovaResult = '2';
		END 
						
		--Procedure result
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS', @Language, '', '', '', 
				@MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS OUTPUT;
				
		SET @ovaMessage = @ovaMessage+ @MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_SUCESS +@OvaGBASMessage;
		IF (@ovaResult = '1')
		BEGIN
			EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR', @Language, '', '', '', 
					@MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR OUTPUT;
			SET @ovaMessage = @MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR +@OvaGBASMessage;
		END	
	END TRY 
	BEGIN CATCH 
		SET @ovaResult  = '1';
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR', @Language, '', '', '', 
				@MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR OUTPUT;
		
		SET @ovaMessage = @MSG_MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS_ERROR
						+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
						+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
						+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
						+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS]')
						+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
						+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cMBuffer')) = -1)
		BEGIN
			DEALLOCATE cMBuffer;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cMBuffer')) > -1)
		BEGIN
			CLOSE cMBuffer;
			DEALLOCATE cMBuffer;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cCdOrderStockCursor')) = -1)
		BEGIN
			DEALLOCATE cCdOrderStockCursor;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cCdOrderStockCursor')) > -1)
		BEGIN
			CLOSE cCdOrderStockCursor;
			DEALLOCATE cCdOrderStockCursor;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderStockCursor')) = -1)
		BEGIN
			DEALLOCATE cCdOrderStockCursor;
		END
		
		IF ((SELECT CURSOR_STATUS('global','cCdPurchaseOrderStockCursor')) > -1)
		BEGIN
			CLOSE cCdOrderStockCursor;
			DEALLOCATE cCdOrderStockCursor;
		END
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[MASTER_BUFFER_BUILDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 12/01/2021
-- Description : Read from the temporary table the string column related to the numeric ones
--               in order to insert the raw value into the Exchange Log.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 18/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/11/2020
-- Description : Update Origin Inventory On Site, Origin Net Inventory, and Origin Buffer
--				 Family columns with values from the temporary table, but only when the
-- 				 Origin Buffer passes all validations.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/11/2020
-- Description : When a buffer is being created from Focuss but it exists as inactive, then it
--               is necessary to activate it instead of displaying the "existing buffer" 
--               message.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 10/11/2020
-- Description : Add the Origin Inventory On Site, Origin Net Inventory, and Origin Buffer
--				 Family columns
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 26/10/2020
-- Description : Since the UPDATE_MOVEMENTS column should not be changed when there are no 
-- 			     updates to the movement columns, the code in charge of that validation had 
--               to be moved, so that it could be done in the right place.
-- Version     : 5.2.1
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio - Oscar Londoño
-- Upgrade date: 19/10/2020
-- Description : Fix the way Previous Inventory on Site was being calculated (Here, the column 
--				 called LAST_TOTAL_INVENTORY_ON_SITE is the one used for Previous Inventory on
--               Site).
-- Version     : 5.2.1
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio - Oscar Londoño
-- Upgrade date: 24/08/2020
-- Description : Net Inventory formula is modified
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio - Oscar Londoño
-- Upgrade date: 20/08/2020
-- Description : Add Available Inventory calculated column
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/07/2020
-- Description : * Refactor delimiter variables used in STRING_SPLIT function
--               * Fix automation rules value assignment for columns that are not added to the 
--                 interface structure.
--				 * Add optional columns that are not in the structure to the main query.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 09/06/2020
-- Description : * The assignment of the variable 
--				   SET @LAST_TOTAL_INVENTORY_ON_SITE_OLD = @TOTAL_INVENTORY_ON_SITE_OLD was  
--				   removed, since itreassigned the value of the variable causing the condition
--                 not to be met. 
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/03/2020
-- Description : * Replece Buffer Update Date column by Movements Date column.
--               * Add the parameter ManagementWay when calling 
--						USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS.
--               * Remove the unnecessary accuracy rounding for validating Unit Price column.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 29/01/2020
-- Description : Add Daily Average Consumption calculation and updating.
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 03/01/2020
-- Description : * Reduce commit count to 10
--               * Close cursor cDataTempCursor right after finishing its usage 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 06/12/2019
-- Description : * Fix SBC Buffer Size calculation (Issue 9433)
-- 				 * Update UPDATE_MOVEMENTS only when at least one of these columns is changed:
--                [CONSOLIDATED_REPLENISHMENT], [POSITIVE_ADJUSTMENTS], [CONSUMPTION],
--				  [NEGATIVE_ADJUSTMENTS], [EXCLUDED_OUTS], [INVENTORY_ON_SITE],
--				  [INVENTORY_ON_TRANSIT], [INVENTORY_ON_PRODUCTION], [INVENTORY_ON_PURCHASING],
-- 				  [PENDING_DEMAND]
--				 * Rename BUFFER_EXECUTE_PSEUDOCODES to USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Fully qualified names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/06/2019
-- Description : If there are Rules changes for a buffer, keep the value from temporary table 
--               (do not use _OLD value) even if it is a column set with Is Upgradeable = No
-- Version     : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 13/06/2019
-- Description : Recalculate buffers related OC and OP priorities when columns involved in the
--               calculation are being changed during data exchange process
-- Version     : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 10/06/2019
-- Description : Add execution of Automation rules process
-- Version     : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 04/04/2019
-- Description : Fix the adding of validations for Replenishment Frequency 
-- Version     : 4.12.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 14/03/2019
-- Description : Fix Replenishment Time vs Repleishment Frequency validation
-- Version     : 4.11.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/02/2019
-- Description : Fix SBC Buffer Size updating formula
-- Version     : 4.11.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡ - Oscar Londoño
-- Upgrade date: 01/05/2019
-- Description : Improve performance for cursors declaration
-- Version     : 4.10.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 12/12/2018
-- Description : Remove columns: Season Starting Buffer, Atypical Consumption 
--                               Start Date, Atypical Consumption End Date,
--                               Change Delta and Buffer Reset Date 
--               Add columns: Replenishment Frequency and SBC Buffer Size.
-- Version     : 4.10.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/02/2018
-- Description : Add column EXCLUDED_OUTS
-- Version     : 4.8.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 12/02/2018
-- Description : Expiration must be validated against new MINIMUM_BUFFER
-- Version     : 4.8.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/02/2018
-- Description : Rename REPLENISHMENT_COEFFICIENT by PROTECTION_FACTOR and
--               INITIAL_REPLENISHMENT_COEFFICIENT by MIDDLE_PROTECTION_FACTOR
-- Version     : 4.8.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 10/01/2018
-- Description : ORIGIN LOCATION should not be equal to LOCATION
-- Version     : 4.8.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/09/2017
-- Description : Add column REPLENISHMENT_PRIORITY
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and 
--				   CHAIN_PRIORITY_COLOR by NET_PRIORITY_COLOR
-- 				 * Select NET_INVETORY for priority calculation  
-- 				 * Select PENDING_DEMAND for allowed overstocking calculation  
-- 				 * Change GET_CALCULATE_BUFFER_CHAIN_PRIORITY by 
--                 GET_CALCULATE_BUFFER_NET_PRIORITY
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/05/2017
-- Description : If minimum buffer changes, then expire pending suggestions
--				 when suggested buffer is less than minumum buffer.
--               This only apply if Minimum Buffer is part of the interface 
-- Version     : 4.6.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 03/05/2017
-- Description : Remove IS_ACTIVE filter for "old" buffer join tables
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/04/2017
-- Description : Add logic when buffer size changes
-- -------------------------------------------------------------------------------------------
-- Author:		Julián Andrés González Vélez
-- Modify date: 8/04/2016 
-- Description:	Change the validation for last_total_inventory_on_site
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 22/12/2015
-- Description: Remove LAST_REPLENISHMENT
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 02/11/2015
-- Description: Recalculate priority when buffer changes
-- -------------------------------------------------------------------------------------------
-- Author     : Edward Rodriguez
-- Create date: 04/08/2014
-- Description: Procedure for creating SP buffers
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 25/11/2014
-- Description: Modifying SP in order to improve the performance
-- -------------------------------------------------------------------------------------------
-- Modified   : Julián Andrés Gonzalez
-- Modify date: 10/04/2015
-- Description: Changes for performance improvement
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 11/05/2015
-- Description: Adding FAST_FORWARD to cursors and FETCH NEXT FROM
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MASTER_BUFFER_BUILDER] 
   /* Input Parameters */
    @ivaCodInterface AS SMALLINT,
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT 
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @SPMasterLoad AS NVARCHAR(MAX);
	DECLARE @TableTempName AS VARCHAR(50);
	DECLARE @TableRealName AS VARCHAR(50);
	DECLARE @Trace AS NVARCHAR(MAX)= '';
	
	DECLARE @CDFIELD AS NVARCHAR(50);
	DECLARE @CDPKFIELD1 AS NVARCHAR(50);
	DECLARE @CDPKFIELD2 AS NVARCHAR(50);
	DECLARE @DSTYPE AS VARCHAR(50);
	DECLARE @COLUMN_SIZE AS SMALLINT;
	DECLARE @COLUMN_ACCURACY AS SMALLINT;
	DECLARE @IS_UPGRADEABLE AS VARCHAR(1);
	DECLARE @IN_INTERFACE   AS VARCHAR(1);
	
	DECLARE @interfaceForCustom AS INT;
	
	DECLARE @AllDeclareColumnOld AS NVARCHAR(MAX) = '';
	DECLARE @AllDeclareColumnInterfaceTmp AS NVARCHAR(MAX) = '';
	DECLARE @AllDeclareColumnCalc AS NVARCHAR(MAX) = '';
	DECLARE @AllColumnsBuildSelectByCursor AS NVARCHAR(MAX) = '';
	DECLARE @AllVariablesInterfaceTmp AS NVARCHAR(MAX) = '';
	DECLARE @AllVariablesFetch AS NVARCHAR(MAX) = '';
	
	DECLARE @AllColumnsInterfaceTmp AS NVARCHAR(MAX) = '';
	
	DECLARE @AllColumnsInsert AS NVARCHAR(MAX) = '';
	DECLARE @AllValuesInsert AS NVARCHAR(MAX) = '';
	
	DECLARE @AllUpgradablesColumns AS NVARCHAR(MAX) = '   SET ';
	DECLARE @AllUpgradablesColumnsDataExchangeForScreen AS NVARCHAR(MAX) = '   SET ';
	DECLARE @AllSetsColumnsAndValuesUpdate AS NVARCHAR(MAX) = '';
	
	DECLARE @HadComma NUMERIC(10)= 0;
	DECLARE @HadCommaAllUpgradablesColumns NUMERIC(10)= 0;
	DECLARE @PRE_FUNCTIONS AS NVARCHAR(MAX) = '';
	
	DECLARE @TotalColumnSize  NUMERIC(2) = 0;
BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		IF OBJECT_ID('TempRulesColsTbl') IS NOT NULL 
			DROP TABLE TempRulesColsTbl;
			
		IF OBJECT_ID('TempUpdRulesTbl') IS NOT NULL 
			DROP TABLE TempUpdRulesTbl;
			
		IF OBJECT_ID('LogRulesTbl') IS NOT NULL 
			DROP TABLE LogRulesTbl;	  
			
		IF OBJECT_ID('TempNumToStrTbl') IS NOT NULL 
			DROP TABLE TempNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR'  AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_BUFFER_TEMP' 
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');

		SET @Trace = 'getting the Table and Temp Table names';
				
		SELECT @TableRealName = TBL.TABLE_NAME, 
		       @TableTempName = TBL.TABLE_NAME_TEMP 
		FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
		WHERE INTERFACE.CDTABLE = TBL.CDTABLE
		AND INTERFACE.CDINTERFACE = @ivaCodInterface;
		
		/*		
		SET @CDPKFIELD =	  (SELECT TBL.CDCOLUMN FROM TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE 
																					
									WHERE INTERFACE.CDTABLE = TBL.CDTABLE
									AND TBL.IS_PRIMARY_KEY = 'Y'
									AND INTERFACE.CDINTERFACE = @ivaCodInterface);
		*/
		SET @CDPKFIELD1 = 'SKU';
		SET @CDPKFIELD2 = 'LOCATION';
		
		SET @interfaceForCustom = @ivaCodInterface;
		IF (@ivaCodInterface = 99)
		BEGIN
			SET @interfaceForCustom = 3;
		END
		
		DECLARE cColumnConfiguration CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
		 SELECT TBL.CDCOLUMN, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, DETAIL.IS_UPGRADEABLE, 1 IN_INTERFACE
		   FROM TFSCM_DEX_INT_DETAIL DETAIL, 
		 	    TFSCM_COM_COL_TABLE  TBL, 
			    TFSCM_DEX_INTERFACES INTERFACE
		  WHERE INTERFACE.CDINTERFACE = @ivaCodInterface
			AND DETAIL.CDINTERFACE    = INTERFACE.CDINTERFACE
			AND INTERFACE.CDTABLE     = TBL.CDTABLE 
			AND TBL.CDCOLUMN          = DETAIL.CDFIELD
	 	  UNION
		 SELECT TBL.CDCOLUMN, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, 'Y' IS_UPGRADEABLE, 1 IN_INTERFACE
		   FROM TFSCM_COM_COL_TABLE  TBL
		  WHERE @ivaCodInterface = 99 
		    AND LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
		    AND TBL.IS_EDITABLE = 'Y'
		    UNION 
		SELECT DISTINCT C.CDCOLUMN, C.DSTYPE, C.COLUMN_SIZE, C.COLUMN_ACCURACY, 'Y' IS_UPGRADEABLE, 0 IN_INTERFACE
           FROM TFSCM_DEX_INTERFACES I, TFSCM_COM_COL_TABLE C , TFSCM_CLI_COL_TABLE CLI
          WHERE C.CDTABLE = I.CDTABLE 
			AND C.CDCOLUMN = CLI.CDCOLUMN
            AND I.CDINTERFACE = 3
            AND C.IS_SYSTEM  = 'O' 
            AND CLI.IS_EDITABLE = 'Y'
            AND C.CDCOLUMN NOT IN 
                  (SELECT B.CDFIELD 
                     FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
                    WHERE A.CDINTERFACE = @interfaceForCustom) 
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190712: Since v4.13.0, add custom fields which could be modified by
		--                automation rules process and should be updated.
		-- -----------------------------------------------------------------------------------
		  UNION 
		 SELECT DISTINCT TBL.CDCOLUMN, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, 'Y' IS_UPGRADEABLE, 0 IN_INTERFACE
		   FROM TFSCM_COM_COL_TABLE  TBL
		  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
			AND TBL.CDTABLE IN  (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
		    AND TBL.CDCOLUMN NOT IN 
                  (SELECT B.CDFIELD 
                     FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
                    WHERE A.CDINTERFACE = @interfaceForCustom)
			AND NOT EXISTS (SELECT TBL_MANUAL.*
							  FROM TFSCM_COM_COL_TABLE  TBL_MANUAL
							 WHERE @ivaCodInterface = 99 
							   AND LEN(TBL_MANUAL.CDCOLUMN) >= 6 AND SUBSTRING(TBL_MANUAL.CDCOLUMN, 0, 7) = 'CF_BF_'
							   AND TBL_MANUAL.IS_EDITABLE = 'Y'
							   AND TBL_MANUAL.CDTABLE  = TBL.CDTABLE
							   AND TBL_MANUAL.CDCOLUMN = TBL.CDCOLUMN)
							   
		OPEN cColumnConfiguration
		
		FETCH NEXT FROM cColumnConfiguration 
		 INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE, @IN_INTERFACE;
		
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			-- If it is Buffers interface and this column is not part of the interface
			-- sctructure, then continue
			IF (@IN_INTERFACE = 0 AND @ivaCodInterface <> 99)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- OHLO 20190712: Since v4.13.0, add custom fields which could be modified by
				--                automation rules process and should be updated.
				-- ---------------------------------------------------------------------------
				IF NOT (@ivaCodInterface = 3 AND LEN(@CDFIELD) > 6 AND SUBSTRING(@CDFIELD, 0, 7) = 'CF_BF_')
				BEGIN
					FETCH NEXT FROM cColumnConfiguration 
					 INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE, @IN_INTERFACE;
					CONTINUE;
				END
				/*FETCH NEXT FROM cColumnConfiguration 
				 INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE, @IN_INTERFACE;
				CONTINUE;*/
			END
			
			--PRINT @CDFIELD
			--IF (@CDFIELD!='NOMBRE_CAMPO')
			--BEGIN
			IF (@HadComma = 0)
			BEGIN
				SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
					+ '(SELECT COUNT(1)' + CHAR(13)
					+ '			   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] [O]' + CHAR(13)
					+ '			  WHERE [O].[SKU]             = [TMP].[SKU]' + CHAR(13)
					+ '				AND [O].[ORIGIN_LOCATION] = [TMP].[LOCATION]) IS_ORIGIN, ' + CHAR(13) 
					+ CHAR(9) + CHAR(9) + CHAR(9);
					
				SET @AllColumnsInterfaceTmp        = @AllColumnsInterfaceTmp + '' + @CDFIELD;
				SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor + 'TMP.' + @CDFIELD;
				SET @AllVariablesInterfaceTmp      = @AllVariablesInterfaceTmp + '@' + @CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS NUMERIC('+CAST (@COLUMN_SIZE+@COLUMN_ACCURACY AS VARCHAR)+','+CAST (@COLUMN_ACCURACY AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'varchar')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' BIT ';
			END
			ELSE 
			BEGIN
				SET @AllColumnsInterfaceTmp        = @AllColumnsInterfaceTmp+ ', '+@CDFIELD; 
				SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor+', TMP.'+@CDFIELD;
				SET @AllVariablesInterfaceTmp      = @AllVariablesInterfaceTmp+', @'+@CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS NUMERIC('+CAST (@COLUMN_SIZE+@COLUMN_ACCURACY AS VARCHAR)+','+CAST (@COLUMN_ACCURACY AS VARCHAR)+') ';
						
				IF (@DSTYPE = 'varchar')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @AllDeclareColumnInterfaceTmp = @AllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' BIT ';
			END
			SET @HadComma = 1			
			
			/* TODO OHLO 20200330: Since v5.0.0, Don't add UPDATE_MOVEMENTS to updatable columns  */
			--IF (@CDFIELD = 'UPDATE_MOVEMENTS')
			--BEGIN
			--	FETCH NEXT FROM cColumnConfiguration 
			--	 INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE, @IN_INTERFACE;
			--	CONTINUE;
			--END

			IF (LTRIM(RTRIM(@AllUpgradablesColumnsDataExchangeForScreen)) <>  'SET')
			BEGIN
				SET @AllUpgradablesColumnsDataExchangeForScreen = @AllUpgradablesColumnsDataExchangeForScreen + '							   ';
			END
			
			SET @AllUpgradablesColumnsDataExchangeForScreen = @AllUpgradablesColumnsDataExchangeForScreen+@CDFIELD+' = @'+@CDFIELD+','+ CHAR(13);
			
			IF (@IS_UPGRADEABLE = 'Y')
			BEGIN					
				IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
				BEGIN
					SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
				END
				
				SET @AllUpgradablesColumns = @AllUpgradablesColumns+@CDFIELD+' = @'+@CDFIELD+','+ CHAR(13);
			END	
			--END
			-- Reading the new row
			FETCH NEXT FROM cColumnConfiguration 
			 INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE, @IN_INTERFACE;

		END
		-- Cierre del cursor
		CLOSE cColumnConfiguration

		-- Liberar los recursos
		DEALLOCATE cColumnConfiguration
		
		SET @AllVariablesFetch = ''
			+ '@IsOrigin' 
			+ ', ' + @AllVariablesInterfaceTmp
			+ ', @ID'
			+ ', @LOCATION_TEMP'
			+ ', @IS_CREATION'
			+ ', @LOCATION_TYPE'
			+ ', @CDBUFFER_FAMILY_DB'
			+ ', @CDLOCATION_ORIGIN_DB'
			+ ', @INVENTORY_ACCURACY'
			+ ', @FORMULA_INVENTORY_ACCURACY'
			+ ', @REPLENISHMENT_ROUNDING_MODE'
			+ ', @YELLOW_ZONE_START'
			+ ', @RED_ZONE_START'
			+ ', @MIDDLE_PROTECTION_FACTOR'
			+ ', @TIME_BETWEEN_BUFFER_RECALCULATIONS'
			+ ', @CDCALENDAR'
			+ ', @SKU_OLD'
			+ ', @LOCATION_OLD'
			+ ', @INACTIVE_OLD'
			+ ', @TOTAL_INVENTORY_ON_SITE_OLD'
			+ ', @LAST_TOTAL_INVENTORY_ON_SITE_OLD'
			/* TODO OHLO 20200319: Since v5.0.0, remove Buffer Update Date column 
				+ ', @BUFFER_UPDATE_DATE_OLD' */
			+ ', @UPDATE_MOVEMENTS_OLD'
			+ ', @CONSOLIDATED_REPLENISHMENT_OLD'
			+ ', @SITE_PRIORITY_COLOR_OLD'
			+ ', @FAMILY_OLD'
			+ ', @ORIGIN_LOCATION_OLD'
			+ ', @CDUNIT_OLD'
			+ ', @REPLENISHMENT_TIME_OLD'
			+ ', @BUFFER_OLD'
			+ ', @MINIMUM_BUFFER_OLD'
			+ ', @SECURITY_STOCK_OLD'
			+ ', @MINIMUM_REPLENISHMENT_OLD'
			+ ', @PACKAGING_UNIT_OLD'
			+ ', @UNIT_PRICE_OLD'
			+ ', @TVC_OLD'
			+ ', @POSITIVE_ADJUSTMENTS_OLD'
			+ ', @CONSUMPTION_OLD'
			+ ', @NEGATIVE_ADJUSTMENTS_OLD'
			+ ', @TOTAL_INVENTORY_ON_TRANSIT_OLD'
			+ ', @TOTAL_INVENTORY_ON_PURCHASING_OLD'
			+ ', @TOTAL_INVENTORY_ON_PRODUCTION_OLD'
			+ ', @REPLENISHMENT_ROUNDING_MODE_OLD'
			+ ', @YELLOW_ZONE_START_OLD'
			+ ', @RED_ZONE_START_OLD'
			+ ', @INVENTORY_ACCURACY_OLD'
			+ ', @FORMULA_INVENTORY_ACCURACY_OLD'
			+ ', @BUFFER_INITIAL_DATE_OLD'
			+ ', @NEXT_BUFFER_ANALYSIS_OLD'
			+ ', @REPLENISHMENT_PROBLEM_OLD'
			+ ', @PENDING_DEMAND_OLD'
			+ ', @EXCLUDED_OUTS_OLD'
			+ ', @REPLENISHMENT_PRIORITY_OLD'
			/*  OHLO 20181212: Since v4.10.0, add Replenishment Frequency and SBC Buffer Size column */
			+ ', @REPLENISHMENT_FREQUENCY_OLD'
			+ ', @SBC_BUFFER_SIZE_OLD'
			/*  JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory  and Origin Bufer Family columns */
			+ ', @ORIGIN_INVENTORY_ON_SITE'
			+ ', @ORIGIN_NET_INVENTORY'
			+ ', @ORIGIN_BUFFER_FAMILY'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number  
			-- -------------------------------------------------------------------------------
			+ ',@FILE_NAME'
			+ ',@FILE_ROW_NUMBER'
			+ '';
		-- -----------------------------------------------------------------------------------
		--  OHLO 20191020: Since v4.13.0, add custom columns for fetching into
		-- -----------------------------------------------------------------------------------
		-- 	a) Principal non-upgradable Columns
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' @' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')			
					AND CHARINDEX(TBL.CDCOLUMN, @AllVariablesFetch) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
 
		-- 	b) Optional not-included Columns
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200727: Since v5.1.0, add optional columns that are not in the structure
		-- -----------------------------------------------------------------------------------
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' @' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE  TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.IS_SYSTEM = 'O'
					AND NOT EXISTS
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A
							 JOIN TFSCM_DEX_INT_DETAIL B 
							   ON (A.CDINTERFACE = @interfaceForCustom
							   AND B.CDFIELD = TBL.CDCOLUMN 
							   AND A.CDINTERFACE = B.CDINTERFACE))
					AND PATINDEX('%[^_]' + TRIM(TBL.CDCOLUMN) + '[^_]%', @AllVariablesFetch + ' ') = 0
				  ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
			
		-- 	c) Principal non-included Columns 
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' @' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN, @AllVariablesFetch) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
		
		-- 	d) OLD non-upgradable Columns
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' @' + TBL.CDCOLUMN + '_OLD'
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE)			
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllVariablesFetch) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');

		-- 	e) OLD not-included Columns 
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' @' + TBL.CDCOLUMN + '_OLD'
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllVariablesFetch) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');

		-- -----------------------------------------------------------------------------------
		-- OHLO 20210112: Since v5.3.0, add the fetch of string columns related to the
		--                numeric ones.
		-- -----------------------------------------------------------------------------------
		SET @AllVariablesFetch = @AllVariablesFetch 
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', @' + [NTS].[VARCHAR_COLUMN], '') AS FETCH_SENTENCE
				 FROM TempNumToStrTbl AS [NTS]), ''));
		
		--	PRINT @AllVariablesFetch 
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20210111: Since v5.3.0, if a buffer has an error it should be removed from the
		--                temporary table, so that the information for consoldated in and outs 
		--                is properly updated.
		-- -----------------------------------------------------------------------------------
		DECLARE @RemoveBufferWithError AS NVARCHAR(MAX);
		
		SET @RemoveBufferWithError = ''
			+ '				DELETE FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] ' + CHAR(13)
			+ '				 WHERE [LOCATION]         = @LOCATION ' + CHAR(13)
			+ '				   AND [SKU]              = @SKU ' + CHAR(13)
			+ '				   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS; ' + CHAR(13);
		-- -----------------------------------------------------------------------------------
		
		DECLARE @OptionalStructureValidateCDUNITStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateCDUNITStr = ''
			+ '			IF (@PassesValidations!=0 AND (@CDUNIT IS NULL OR @INVENTORY_ACCURACY IS NULL))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, ''CDUNIT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)							
			+ '				END ' + CHAR(13) 
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @CDUNIT IS NOT NULL AND @CDUNIT_OLD IS NOT NULL)  ' + CHAR(13)
			+ '			BEGIN  		' + CHAR(13)					
			+ '				IF (@INVENTORY_ACCURACY_OLD > @INVENTORY_ACCURACY) ' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @PassesValidations = 0;' + CHAR(13)
			+ '					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '						''DATA_EXCHANGE_BUFFERS_UNIT_MINOR_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										 	  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '						    CONVERT(VARCHAR, @CDUNIT, 105), @FILE_ROW_NUMBER, ''CDUNIT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '					SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1' + CHAR(13) 
			+ '					SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen = 1)' + CHAR(13) 
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR+''</td></tr>'';' + CHAR(13) 
			+ '						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ CHAR(13)
			+ '	' + @RemoveBufferWithError
			+ CHAR(13)
			+ '					FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '					CONTINUE; ' + CHAR(13)
			+ '				END' + CHAR(13)				
			+ '			END	' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateMINIMUM_BUFFERStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateMINIMUM_BUFFERStr = ''
			+ '			IF (@PassesValidations!=0 AND (@MINIMUM_BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @MINIMUM_BUFFER' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'MINIMUM_BUFFER_STR') THEN '_STR' ELSE  '' END)
			+ ', 105),  @FILE_ROW_NUMBER, ''MINIMUM_BUFFER'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_BUFFER)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)))   ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ ' 			VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER, NULL, ''E'', GETDATE(), @SKU, @LOCATION, ' + CHAR(13)
			+ '					     CONVERT(VARCHAR, @MINIMUM_BUFFER' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'MINIMUM_BUFFER_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER,  ''MINIMUM_BUFFER'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateSECURITY_STOCKStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateSECURITY_STOCKStr = ''
			+ '			IF (@PassesValidations!=0 AND (@SECURITY_STOCK IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)				
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @SECURITY_STOCK' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'SECURITY_STOCK_STR') THEN '_STR' ELSE  '' END)
			+ ', 105),  @FILE_ROW_NUMBER, ''SECURITY_STOCK'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidatePACKAGING_UNITStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidatePACKAGING_UNITStr = ''
			+ '			IF (@PassesValidations!=0 AND (@PACKAGING_UNIT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT) <= 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @PACKAGING_UNIT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PACKAGING_UNIT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PACKAGING_UNIT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateMINIMUM_REPLENISHMENTStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = ''
			+ '			IF (@PassesValidations!=0 AND (@MINIMUM_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT) <= 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '                     CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'MINIMUM_REPLENISHMENT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''MINIMUM_REPLENISHMENT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '';
		
		SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
			+ '			IF (@PassesValidations!=0) ' + CHAR(13)
			+ '			BEGIN '+ CHAR(13)
		
		--IF (LEN(@OptionalStructureValidatePACKAGING_UNITStr) = 0)
		IF (CHARINDEX('PACKAGING_UNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			--IF (LEN(@OptionalStructureValidateCDUNITStr) > 0)
			IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) > 0)
			BEGIN
				SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
					+ '				SET @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) % (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@FORMULA_INVENTORY_ACCURACY)); '+ CHAR(13)
			END
			ELSE
			BEGIN
				SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
					+ '				SET @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) % (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@FORMULA_INVENTORY_ACCURACY_DEFAULT)); '+ CHAR(13)
			END
		END
		ELSE
		BEGIN
			SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
				+ '				SET @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) % (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT)); '+ CHAR(13)
		END
		SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
				+ '			END '+ CHAR(13);			
		
		SET @OptionalStructureValidateMINIMUM_REPLENISHMENTStr = @OptionalStructureValidateMINIMUM_REPLENISHMENTStr + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT != 0)  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT'', @Language, '''', '''', '''', @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13) 
			+ '					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'MINIMUM_REPLENISHMENT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''MINIMUM_REPLENISHMENT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateUNIT_PRICEStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateUNIT_PRICEStr = ''
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			-- OHLO 20200428: Since v5.0.0, remove the unnecessary accuracy rounding  ' + CHAR(13)
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@UNIT_PRICE IS NOT NULL AND @UNIT_PRICE <= 0)) ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' +CHAR(13)
			+ '					    CONVERT(VARCHAR, @UNIT_PRICE' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UNIT_PRICE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UNIT_PRICE'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateTVCStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateTVCStr = ''
			+ '			IF (@PassesValidations!=0 AND (@TVC IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TVC) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_TVC_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 OUTPUT;' + CHAR(13)	
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13) 
			+ '					    CONVERT(VARCHAR, @TVC' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TVC_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TVC'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13) 
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
			
		DECLARE @OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr = ''
			+ '			IF (@PassesValidations!=0 AND (@CONSOLIDATED_REPLENISHMENT IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @CONSOLIDATED_REPLENISHMENT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'CONSOLIDATED_REPLENISHMENT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''CONSOLIDATED_REPLENISHMENT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr = ''
			+ '			IF (@PassesValidations!=0 AND (@POSITIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @POSITIVE_ADJUSTMENTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'POSITIVE_ADJUSTMENTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''POSITIVE_ADJUSTMENTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13) 
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateCONSUMPTIONStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateCONSUMPTIONStr = ''
			+ '			IF (@PassesValidations!=0 AND (@CONSUMPTION IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 OUTPUT;' + CHAR(13)							
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @CONSUMPTION' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'CONSUMPTION_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''CONSUMPTION'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		DECLARE @OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr = ''
			+ '			IF (@PassesValidations!=0 AND (@NEGATIVE_ADJUSTMENTS IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @NEGATIVE_ADJUSTMENTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NEGATIVE_ADJUSTMENTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''NEGATIVE_ADJUSTMENTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		DECLARE @OptionalStructureValidatePendingDemandStr AS NVARCHAR(MAX) = ''; 		
		SET @OptionalStructureValidatePendingDemandStr = ''
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its   ' + CHAR(13)
			+ '			--				  validations ' + CHAR(13)
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)		
			+ '			IF (@PassesValidations != 0 AND (@PENDING_DEMAND IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @PENDING_DEMAND' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PENDING_DEMAND_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PENDING_DEMAND'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		DECLARE @OptionalStructureValidateExcludedOutsStr AS NVARCHAR(MAX) = ''; 
		SET @OptionalStructureValidateExcludedOutsStr = ''
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its    ' + CHAR(13)
			+ '			--				  validations ' + CHAR(13)
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)		
			+ '			IF (@PassesValidations != 0 AND (@EXCLUDED_OUTS IS NOT NULL AND dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @EXCLUDED_OUTS) < 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '						CONVERT(VARCHAR, @EXCLUDED_OUTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EXCLUDED_OUTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EXCLUDED_OUTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority 
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		DECLARE @OptionalStructureValidateReplenishmentPriorityStr AS NVARCHAR(MAX) = ''; 
		SET @OptionalStructureValidateReplenishmentPriorityStr = '' 
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority   ' + CHAR(13)
			+ '			--				  and its validations ' + CHAR(13)
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)		
			+ '			IF (@PassesValidations != 0 AND (@REPLENISHMENT_PRIORITY IS NOT NULL AND  @REPLENISHMENT_PRIORITY <= 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @REPLENISHMENT_PRIORITY' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REPLENISHMENT_PRIORITY_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REPLENISHMENT_PRIORITY'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '';

		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.10.0, add Replenishment Frequency 
		--                     column validations 
		-- -----------------------------------------------------------------------------------
		DECLARE @OptionalStructureValidateReplenishmentFrequencyStr AS NVARCHAR(MAX) = '';
		SET @OptionalStructureValidateReplenishmentFrequencyStr = ''
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency ' + CHAR(13)
			+ '			--				  and its validations ' + CHAR(13)
			+ '			-- -----------------------------------------------------------------------------------' + CHAR(13)		
			+ '			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY IS NULL OR @REPLENISHMENT_FREQUENCY <= 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REPLENISHMENT_FREQUENCY_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REPLENISHMENT_FREQUENCY'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)							
			+ '				END ' + CHAR(13) 
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13);
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20181212: Since v4.12.0, fix the adding of this second validation 
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190314: Since v4.11.1, this validation have to be done even if 
		--                REPLENISHMENT_FREQUENCY is not part of the interface 
		-- -----------------------------------------------------------------------------------
		SET @OptionalStructureValidateReplenishmentFrequencyStr = @OptionalStructureValidateReplenishmentFrequencyStr + CHAR(13)
			+ '			IF (@PassesValidations != 0 AND (@REPLENISHMENT_FREQUENCY >= @REPLENISHMENT_TIME))  ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '		 		SET @PassesValidations = 0;' + CHAR(13)
			+ '		 		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '		 			''DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME OUTPUT;' + CHAR(13)
			+ CHAR(13)	
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)						
			+ '		 		VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @REPLENISHMENT_FREQUENCY' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REPLENISHMENT_FREQUENCY_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REPLENISHMENT_FREQUENCY'', @FILE_NAME, @UPDATE_MOVEMENTS)' + CHAR(13) 
			+ CHAR(13)	
			+ '		 		SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1' + CHAR(13) 
			+ '		 		SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '		 		IF (@ivaIsDataExchangeForScreen = 1)' + CHAR(13) 
			+ '		 		BEGIN ' + CHAR(13)
			+ '		 			SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME+''</td></tr>'';' + CHAR(13) 
			+ '		 			SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)	
			+ '		 			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '		 			VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '		 		END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)	
			+ '		 		FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '		 		CONTINUE; ' + CHAR(13)			
			+ '			END	' + CHAR(13)
			+ CHAR(13);
	
		
		/* EDITAR LOS SIGUIENTES PARA AGREGAR CAMPOS QUEMADOS: */		
		SET @AllDeclareColumnCalc = ''
			+ ' @ID AS NUMERIC(18,0)' + CHAR(13)
			+ ', @LOCATION_TEMP AS VARCHAR(50)' + CHAR(13)
			+ ', @IS_CREATION AS BIT' + CHAR(13)
			+ ', @LOCATION_TYPE AS VARCHAR(2)' + CHAR(13)
			+ ', @CDBUFFER_FAMILY_DB AS VARCHAR(50)' + CHAR(13)
			+ ', @CDLOCATION_ORIGIN_DB AS VARCHAR(50)' + CHAR(13)
			+ ', @INVENTORY_ACCURACY AS NUMERIC(3,0)' + CHAR(13)
			+ ', @FORMULA_INVENTORY_ACCURACY AS NUMERIC(6,5)' + CHAR(13)
			+ ', @UNIT_THROUGHPUT AS NUMERIC(17,2)' + CHAR(13)
			+ ', @INACTIVE AS BIT' + CHAR(13)
			+ ', @INACTIVATION_DATE AS DATE' + CHAR(13)
			+ '';
							
		--IF (LEN(@OptionalStructureValidateSECURITY_STOCKStr) = 0) 
		IF (CHARINDEX('SECURITY_STOCK', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @SECURITY_STOCK AS NUMERIC(17,5)'+ CHAR(13)
		END
		
		--IF (LEN(@OptionalStructureValidateMINIMUM_REPLENISHMENTStr) = 0)
		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @MINIMUM_REPLENISHMENT AS NUMERIC(17,5)'+ CHAR(13)
		END
		
		IF (CHARINDEX('MINIMUM_BUFFER', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @MINIMUM_BUFFER AS NUMERIC(20,5)'+ CHAR(13)
		END	
		
		IF (CHARINDEX('PACKAGING_UNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @PACKAGING_UNIT AS NUMERIC(20,5)'+ CHAR(13)
		END
		
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @POSITIVE_ADJUSTMENTS AS NUMERIC(20,5)'+ CHAR(13)
		END
		
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @NEGATIVE_ADJUSTMENTS AS NUMERIC(20,5)'+ CHAR(13)
		END
		
		IF (CHARINDEX('UNIT_PRICE', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @UNIT_PRICE AS NUMERIC(20,2)'+ CHAR(13)
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('PENDING_DEMAND', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @PENDING_DEMAND AS NUMERIC(17,5)'+ CHAR(13)
		END		
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('EXCLUDED_OUTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @EXCLUDED_OUTS AS NUMERIC(17,5)'+ CHAR(13)
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority 
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('REPLENISHMENT_PRIORITY', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @REPLENISHMENT_PRIORITY AS INT '+ CHAR(13)
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20181212: Since v4.10.0 add field Replenishmente Frequency 
		--		          and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @REPLENISHMENT_FREQUENCY AS INT '+ CHAR(13)
		END
		
		IF (CHARINDEX('TVC', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc + ', @TVC AS NUMERIC(17,2)'+ CHAR(13)
		END
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.13.0 add the field Unit and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
				+ ', @CDUNIT AS VARCHAR(50) '+ CHAR(13);
		END
		
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc
			+ ', @INVENTORY_ON_SITE AS NUMERIC(17,5)' + CHAR(13)
			+ ', @INVENTORY_ON_TRANSIT AS NUMERIC(17,5)' + CHAR(13)
			+ ', @INVENTORY_ON_PURCHASING AS NUMERIC(17,5)' + CHAR(13)
			+ ', @INVENTORY_ON_PRODUCTION AS NUMERIC(17,5)' + CHAR(13)
			+ ', @INVENTORY_ON_CHAIN AS NUMERIC(17,5)' + CHAR(13)
			+ ', @NET_INVENTORY AS NUMERIC(17,5)' + CHAR(13)
			+ ', @REPLENISHMENT_ROUNDING_MODE AS VARCHAR(3)' + CHAR(13)
			+ ', @ALLOWED_OVERSTOCKING AS NUMERIC(17,5)' + CHAR(13)
			+ ', @EFFECTIVE_BUFFER AS NUMERIC(17,5)' + CHAR(13)
			+ ', @SITE_PRIORITY AS NUMERIC(17,2)' + CHAR(13)
			+ ', @YELLOW_ZONE_START AS NUMERIC(5,2)' + CHAR(13)
			+ ', @RED_ZONE_START AS NUMERIC(5,2)' + CHAR(13)
			+ ', @SITE_PRIORITY_COLOR AS VARCHAR(50)' + CHAR(13)
			+ ', @NET_PRIORITY AS NUMERIC(17,2)' + CHAR(13)
			+ ', @NET_PRIORITY_COLOR AS VARCHAR(50)' + CHAR(13)
			+ ', @TOTAL_CONSOLIDATED_INPUTS AS NUMERIC(17,5)' + CHAR(13)
			+ ', @TOTAL_CONSOLIDATED_OUTPUTS AS NUMERIC(17,5)' + CHAR(13)
			+ ', @LAST_TOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5)' + CHAR(13)
			+ ', @LAST_TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @LAST_COLOR_CHANGE_DATE AS DATE' + CHAR(13)
			+ ', @MANAGED AS BIT' + CHAR(13)
			+ ', @CDGROUP AS NUMERIC(2,0)' + CHAR(13)
			+ ', @CDCALENDAR AS NUMERIC(4,0)' + CHAR(13)
			+ ', @COMMIT_COUNT AS NUMERIC(4) = 0' + CHAR(13)
			+ ', @WORST_INVENTORY_ON_SITE AS NUMERIC(15,5)' + CHAR(13)
			+ ', @LAST_INVENTORY_ON_SITE AS NUMERIC(15,5)' + CHAR(13)
			+ ', @DAYS_SINCE_LAST_OUT AS NUMERIC(5)' + CHAR(13)
			+ ', @LAST_TOTAL_OUTS_MAX_SUM AS NUMERIC(15,5)' + CHAR(13)
			+ ', @PROTECTION_FACTOR AS NUMERIC(17,2)' + CHAR(13)
			+ ', @ADJUSTMENT_TYPE AS VARCHAR(50)' + CHAR(13)
			+ ', @RT_ADJUSTMENT_TYPE AS VARCHAR(50)' + CHAR(13)
			+ ', @SUGGESTED_BUFFER AS NUMERIC(15,5)' + CHAR(13)
			+ ', @APPROVED_BUFFER AS NUMERIC(15,5)' + CHAR(13)
			+ ', @ADJUSTMENT_ACTION AS VARCHAR(50)' + CHAR(13)
			+ ', @SUGGESTION_DATE AS DATETIME' + CHAR(13)
			+ ', @SUGGESTION_REJECTION_CAUSE AS VARCHAR(50)' + CHAR(13)
			+ ', @REPLENISHMENT_PROBLEM AS VARCHAR(50)' + CHAR(13)
			+ ', @REPLENISHMENT_PROBLEM_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @CD_NONE_CAUSE AS VARCHAR(10)' + CHAR(13)
			+ ', @SUGGESTION_EXPIRATION_DATE AS DATETIME' + CHAR(13)
			+ ', @SUGGESTION_ALERTS AS VARCHAR(50)' + CHAR(13)
			+ ', @NEXT_BUFFER_ANALYSIS AS DATETIME' + CHAR(13)		
			+ ', @RT_NEXT_BUFFER_ANALYSIS AS DATETIME' + CHAR(13)
			+ ', @MIDDLE_PROTECTION_FACTOR AS NUMERIC(17,2)' + CHAR(13)
			+ ', @TIME_BETWEEN_BUFFER_RECALCULATIONS AS NUMERIC(10,0)' + CHAR(13)
			+ ', @RESTART AS VARCHAR(1)' + CHAR(13)
			/*  OHLO 201811212: Since v4.10.0, add field SBC Buffer Size and its validations */
			+ ', @SBC_BUFFER_SIZE AS NUMERIC(17,5)' + CHAR(13)
			+ ', @SBC_BUFFER_SIZE_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ '-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated column  ' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ ', @DAILY_AVERAGE_CONSUMPTION AS NUMERIC(17,5)' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ '-- OHLO 20200820: Since v5.2.0, add Available Inventory column  ' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ ', @AVAILABLE_INVENTORY AS NUMERIC(15,5)' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ '-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory and Origin Buffer family  columns  ' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ ', @ORIGIN_INVENTORY_ON_SITE AS NUMERIC(15,5)' + CHAR(13)
			+ ', @ORIGIN_NET_INVENTORY AS NUMERIC(15,5)' + CHAR(13)
			+ ', @ORIGIN_BUFFER_FAMILY AS VARCHAR(50)' + CHAR(13)
			+ '';
		
		SET @AllDeclareColumnOld = ''
			+ ' @SKU_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @LOCATION_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @INACTIVE_OLD AS BIT' + CHAR(13)
			+ ', @TOTAL_INVENTORY_ON_SITE_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @BUFFER_INITIAL_DATE_OLD AS DATE' + CHAR(13)
			+ ', @NEXT_BUFFER_ANALYSIS_OLD AS DATETIME' + CHAR(13)
			/* TODO OHLO 20200319: Since v5.0.0, remove Buffer Update Date column 
				+ ', @BUFFER_UPDATE_DATE_OLD AS DATE' + CHAR(13) */
			+ ', @UPDATE_MOVEMENTS_OLD AS DATE' + CHAR(13)
			+ ', @CONSOLIDATED_REPLENISHMENT_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @SITE_PRIORITY_COLOR_OLD VARCHAR(50)' + CHAR(13)
			+ ', @LAST_COLOR_CHANGE_DATE_OLD AS DATE' + CHAR(13)
			+ ', @FAMILY_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @ORIGIN_LOCATION_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @CDUNIT_OLD AS VARCHAR(50)' + CHAR(13)
			+ ', @REPLENISHMENT_TIME_OLD AS int' + CHAR(13)
			+ ', @BUFFER_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @MINIMUM_BUFFER_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @SECURITY_STOCK_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @MINIMUM_REPLENISHMENT_OLD AS NUMERIC (15,5)' + CHAR(13)
			+ ', @PACKAGING_UNIT_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @UNIT_PRICE_OLD AS NUMERIC(17,2)' + CHAR(13)
			+ ', @TVC_OLD AS NUMERIC(17,2)' + CHAR(13)
			+ ', @POSITIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @CONSUMPTION_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @NEGATIVE_ADJUSTMENTS_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @TOTAL_INVENTORY_ON_TRANSIT_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @TOTAL_INVENTORY_ON_PURCHASING_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @TOTAL_INVENTORY_ON_PRODUCTION_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @REPLENISHMENT_ROUNDING_MODE_OLD AS VARCHAR(3)' + CHAR(13)
			+ ', @YELLOW_ZONE_START_OLD AS NUMERIC(5,2)' + CHAR(13)
			+ ', @RED_ZONE_START_OLD AS NUMERIC(5,2)' + CHAR(13)
			+ ', @INVENTORY_ACCURACY_OLD AS NUMERIC(3,0)' + CHAR(13)
			+ ', @FORMULA_INVENTORY_ACCURACY_OLD AS NUMERIC(6,5)' + CHAR(13)
			+ ', @PENDING_DEMAND_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @EXCLUDED_OUTS_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ ', @REPLENISHMENT_PRIORITY_OLD AS INT ' + CHAR(13)
			/*  OHLO 20181212: Since v4.10.0, add Replenishment Frequency column */
			+ ', @REPLENISHMENT_FREQUENCY_OLD AS INT ' + CHAR(13)
			+ '';
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20191020: Since v4.13.0, add custom columns declarations
		-- -----------------------------------------------------------------------------------
		-- 	a) Principal non-upgradable Columns
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' @' + TBL.CDCOLUMN + ' ' + (CASE WHEN (TBL.DSTYPE = 'boolean') THEN  
																'BIT'
															   ELSE 
																 UPPER(TBL.DSTYPE) 
														  END) 
							+ (CASE WHEN (TBL.DSTYPE = 'varchar') THEN 
									 + '(' + CAST(TBL.COLUMN_SIZE AS VARCHAR) + ')'
								   WHEN (TBL.DSTYPE = 'numeric') THEN
									 + '(' + CAST((TBL.COLUMN_SIZE + TBL.COLUMN_ACCURACY) AS VARCHAR) + ',' + CAST(TBL.COLUMN_ACCURACY AS VARCHAR) + ')'
								   ELSE 
									 ''
							   END)  
						   + '' + CHAR(13)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')			
					AND CHARINDEX(TBL.CDCOLUMN, @AllDeclareColumnCalc) = 0
					AND CHARINDEX(TBL.CDCOLUMN, @AllDeclareColumnInterfaceTmp) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
 
		-- 	b) Principal non-included Columns 
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' @' + TBL.CDCOLUMN + ' ' + (CASE WHEN (TBL.DSTYPE = 'boolean') THEN  
																 'BIT'
															    ELSE 
																  UPPER(TBL.DSTYPE) 
														   END) 
							+ (CASE WHEN (TBL.DSTYPE = 'varchar') THEN 
									 + '(' + CAST(TBL.COLUMN_SIZE AS VARCHAR) + ')'
								   WHEN (TBL.DSTYPE = 'numeric') THEN
									 + '(' + CAST((TBL.COLUMN_SIZE + TBL.COLUMN_ACCURACY) AS VARCHAR) + ',' + CAST(TBL.COLUMN_ACCURACY AS VARCHAR) + ')'
								   ELSE 
									 ''
							   END)
							+ '' + CHAR(13)
				   FROM TFSCM_COM_COL_TABLE TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE IN  (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN, @AllDeclareColumnCalc) = 0
					AND CHARINDEX(TBL.CDCOLUMN, @AllDeclareColumnInterfaceTmp) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
		
		-- 	c) OLD non-upgradable Columns
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
							+ ' @' + TBL.CDCOLUMN + '_OLD ' + (CASE WHEN (TBL.DSTYPE = 'boolean') THEN  
																	'BIT'
																   ELSE 
																	 UPPER(TBL.DSTYPE) 
															  END) 
							+ (CASE WHEN (TBL.DSTYPE = 'varchar') THEN 
									 + '(' + CAST(TBL.COLUMN_SIZE AS VARCHAR) + ')'
								   WHEN (TBL.DSTYPE = 'numeric') THEN
									 + '(' + CAST((TBL.COLUMN_SIZE + TBL.COLUMN_ACCURACY) AS VARCHAR) + ',' + CAST(TBL.COLUMN_ACCURACY AS VARCHAR) + ')'
								   ELSE 
									 ''
							   END)
							+ '' + CHAR(13)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE)			
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllDeclareColumnCalc) = 0
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllDeclareColumnInterfaceTmp) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');

		-- 	d) OLD not-included Columns 
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' @' + TBL.CDCOLUMN + '_OLD ' + (CASE WHEN (TBL.DSTYPE = 'boolean') THEN  
																	'BIT'
																   ELSE 
																	 UPPER(TBL.DSTYPE) 
															  END)
							+ (CASE WHEN (TBL.DSTYPE = 'varchar') THEN 
									 + '(' + CAST(TBL.COLUMN_SIZE AS VARCHAR) + ')'
								   WHEN (TBL.DSTYPE = 'numeric') THEN
									 + '(' + CAST((TBL.COLUMN_SIZE + TBL.COLUMN_ACCURACY) AS VARCHAR) + ',' + CAST(TBL.COLUMN_ACCURACY AS VARCHAR) + ')'
								   ELSE 
									 ''
							   END)
							+ '' + CHAR(13)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllDeclareColumnCalc) = 0
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllDeclareColumnInterfaceTmp) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20210112: Since v5.3.0, add the declaration of string columns related to the 
		--                numeric ones.
		-- -----------------------------------------------------------------------------------
		SET @AllDeclareColumnCalc = @AllDeclareColumnCalc + (CHAR(13))
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', ' + LEFT('@' + [NTS].[VARCHAR_COLUMN] + REPLICATE(' ', 56), 56)  + 'AS VARCHAR(50)',  CHAR(13)) AS DECLARE_SENTENCE
				 FROM TempNumToStrTbl AS [NTS]), ''));
		
		--	PRINT @AllDeclareColumnCalc  
		-- -----------------------------------------------------------------------------------

		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor
			+ ', TMP.ID'
			+ ', TMP.LOCATION'
			+ ', TMP.IS_CREATION'
			+ ', CL.LOCATION_TYPE'
			+ ', CBF.CDBUFFER_FAMILY'
			+ ', CLO.CDLOCATION'
				
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor
				+ ', CU.INVENTORY_ACCURACY'
				+ ', CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,CU.INVENTORY_ACCURACY)) AS NUMERIC(6,5)) AS FORMULA_INVENTORY_ACCURACY'
		END
		ELSE
		BEGIN
			SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor
				+ ', @INVENTORY_ACCURACY_DEFAULT'
				+ ', @FORMULA_INVENTORY_ACCURACY_DEFAULT'
		END
		
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor
			+ ', CBF.REPLENISHMENT_ROUNDING_MODE'
			+ ', CBF.YELLOW_ZONE_START'
			+ ', CBF.RED_ZONE_START'
			-- + ', (CASE CBF.INITIAL_REPLENISHMENT_COEFFICIENT  WHEN ''RC175'' THEN 1.75 WHEN ''RC150'' THEN 1.50 ELSE 2.00 END) INITIAL_REPLENISHMENT_COEFFICIENT'
			+ ', CBF.MIDDLE_PROTECTION_FACTOR'
			+ ', CBF.TIME_BETWEEN_BUFFER_RECALCULATIONS'
			+ ', CC.CDCALENDAR'
			+ ', BOLD.SKU'
			+ ', BOLD.LOCATION'
			+ ', BOLD.INACTIVE'
			+ ', BOLD.TOTAL_INVENTORY_ON_SITE'
			+ ', BOLD.LAST_TOTAL_INVENTORY_ON_SITE'
			/* TODO OHLO 20200319: Since v5.0.0, remove Buffer Update Date column 
				+ ', BOLD.BUFFER_UPDATE_DATE' */
			+ ', BOLD.UPDATE_MOVEMENTS'
			+ ', BOLD.CONSOLIDATED_REPLENISHMENT'
			+ ', BOLD.SITE_PRIORITY_COLOR'
			+ ', BOLD.FAMILY'
			+ ', BOLD.ORIGIN_LOCATION'
			+ ', BOLD.CDUNIT'
			+ ', BOLD.REPLENISHMENT_TIME'
			+ ', BOLD.BUFFER'
			+ ', BOLD.MINIMUM_BUFFER'
			+ ', BOLD.SECURITY_STOCK'
			+ ', BOLD.MINIMUM_REPLENISHMENT'
			+ ', BOLD.PACKAGING_UNIT'
			+ ', BOLD.UNIT_PRICE'
			+ ', BOLD.TVC'
			+ ', BOLD.POSITIVE_ADJUSTMENTS'
			+ ', BOLD.CONSUMPTION'
			+ ', BOLD.NEGATIVE_ADJUSTMENTS'
			+ ', BOLD.TOTAL_INVENTORY_ON_TRANSIT'
			+ ', BOLD.TOTAL_INVENTORY_ON_PURCHASING'
			+ ', BOLD.TOTAL_INVENTORY_ON_PRODUCTION'
			+ ', CBFOLD.REPLENISHMENT_ROUNDING_MODE'
			+ ', CBFOLD.YELLOW_ZONE_START'
			+ ', CBFOLD.RED_ZONE_START'
			+ ', CUOLD.INVENTORY_ACCURACY'
			+ ', CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,CUOLD.INVENTORY_ACCURACY)) AS NUMERIC(6,5))'
			+ ', BOLD.BUFFER_INITIAL_DATE'
			+ ', BOLD.NEXT_BUFFER_ANALYSIS'
			+ ', BOLD.REPLENISHMENT_PROBLEM'
			+ ', BOLD.PENDING_DEMAND'
			+ ', BOLD.EXCLUDED_OUTS'
			+ ', BOLD.REPLENISHMENT_PRIORITY'
			/*  OHLO 20181212: Since v4.10.0, add Replenishment Frequency and SBC Buffer Size columns */
			+ ', BOLD.REPLENISHMENT_FREQUENCY'
			+ ', BOLD.SBC_BUFFER_SIZE'
			+ ', OBUFFER.INVENTORY_ON_SITE'
			+ ', OBUFFER.NET_INVENTORY'
			+ ', OBUFFER.FAMILY'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add columns File_name and File_row_number  
			-- -------------------------------------------------------------------------------
			+ ', TMP.FILE_NAME'
			+ ', TMP.FILE_ROW_NUMBER';
			
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20191020: Since v4.13.0, add custom columns for cursor selection
		-- -----------------------------------------------------------------------------------
		-- 	a) Principal non-upgradable Columns
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' TMP.' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')			
					AND CHARINDEX(TBL.CDCOLUMN, @AllColumnsBuildSelectByCursor) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
				
		-- 	b) Optional not-included Columns 
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200727: Since v5.1.0, add optional columns that are not in the structure
		-- -----------------------------------------------------------------------------------
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' TMP.' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE  TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.IS_SYSTEM = 'O'
					AND NOT EXISTS
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A
							 JOIN TFSCM_DEX_INT_DETAIL B 
							   ON (A.CDINTERFACE = @interfaceForCustom
							   AND B.CDFIELD = TBL.CDCOLUMN 
							   AND A.CDINTERFACE = B.CDINTERFACE))
					AND PATINDEX('%[^_]TMP.' + TRIM(TBL.CDCOLUMN) + '[^_]%', ' ' + @AllColumnsBuildSelectByCursor + ' ') = 0
				  ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
				
		-- 	c) Principal non-included Columns 
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' TMP.' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN, @AllColumnsBuildSelectByCursor) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
		
		-- 	d) OLD non-upgradable Columns
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' BOLD.' + TBL.CDCOLUMN  
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE)			
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllColumnsBuildSelectByCursor) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');

		-- 	e) OLD not-included Columns 
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' BOLD.' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN + '_OLD', @AllColumnsBuildSelectByCursor) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');

		-- -----------------------------------------------------------------------------------
		-- OHLO 20210112: Since v5.3.0, add the selection of string columns related to the 
		--                numeric ones.
		-- -----------------------------------------------------------------------------------
		SET @AllColumnsBuildSelectByCursor = @AllColumnsBuildSelectByCursor 
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', ' + [NTS].[VARCHAR_COLUMN], '') AS SELECT_SENTENCE
				 FROM TempNumToStrTbl AS [NTS]), ''));

		--	PRINT @AllColumnsBuildSelectByCursor  
		
		-- -----------------------------------------------------------------------------------
		--                       Start Building INSERT
		-- -----------------------------------------------------------------------------------
		SET @AllColumnsInsert = @AllColumnsInterfaceTmp;
		SET @AllColumnsInsert = @AllColumnsInsert + ',CREATION_DATE'
													+ ',CREATOR_USER'
													+ ',MODIFY_DATE'
													+ ',MODIFY_USER'
													
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',CDUNIT'
		END
		
		IF (CHARINDEX('MINIMUM_BUFFER', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',MINIMUM_BUFFER'
		END
		
		IF (CHARINDEX('SECURITY_STOCK', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',SECURITY_STOCK'
		END
		
		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',MINIMUM_REPLENISHMENT'
		END
		
		IF (CHARINDEX('PACKAGING_UNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',PACKAGING_UNIT'
		END
		
		IF (CHARINDEX('UNIT_PRICE', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',UNIT_PRICE'
		END
		
		IF (CHARINDEX('TVC', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',TVC'
		END
		
		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',CONSOLIDATED_REPLENISHMENT'
		END
		
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',POSITIVE_ADJUSTMENTS'
		END
		
		IF (CHARINDEX('CONSUMPTION', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',CONSUMPTION'
		END
		
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',NEGATIVE_ADJUSTMENTS'
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its
		--				  validations
		-- -----------------------------------------------------------------------------------		
		IF (CHARINDEX('PENDING_DEMAND', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',PENDING_DEMAND'
		END		
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its
		--				  validations
		-- -----------------------------------------------------------------------------------		
		IF (CHARINDEX('EXCLUDED_OUTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',EXCLUDED_OUTS'
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority
		--				  and its validations
		-- -----------------------------------------------------------------------------------		
		IF (CHARINDEX('REPLENISHMENT_PRIORITY', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',REPLENISHMENT_PRIORITY'
		END		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllColumnsInsert = @AllColumnsInsert + ',REPLENISHMENT_FREQUENCY'
		END		
		
		SET @AllColumnsInsert = @AllColumnsInsert 
			+ ',BUFFER_INITIAL_DATE'
			+ ',LOCATION_TYPE'
			+ ',UNIT_THROUGHPUT'
			+ ',INACTIVE'
			+ ',INACTIVATION_DATE'
			+ ',INVENTORY_ON_SITE'
			+ ',INVENTORY_ON_TRANSIT'
			+ ',INVENTORY_ON_PURCHASING'
			+ ',INVENTORY_ON_PRODUCTION'
			+ ',INVENTORY_ON_CHAIN'
			+ ',ALLOWED_OVERSTOCKING'
			+ ',EFFECTIVE_BUFFER'
			+ ',SITE_PRIORITY'
			+ ',SITE_PRIORITY_COLOR'
			+ ',NET_PRIORITY'
			+ ',NET_PRIORITY_COLOR'
			+ ',TOTAL_CONSOLIDATED_INPUTS'
			+ ',TOTAL_CONSOLIDATED_OUTPUTS'
			+ ',LAST_TOTAL_INVENTORY_ON_SITE'
			+ ',LAST_COLOR_CHANGE_DATE'
			+ ',MANAGED'
			+ ',CDGROUP'
			+ ',WORST_INVENTORY_ON_SITE'
			+ ',LAST_INVENTORY_ON_SITE'
			+ ',DAYS_SINCE_LAST_OUT'
			+ ',LAST_TOTAL_OUTS_MAX_SUM'
			+ ',PROTECTION_FACTOR'		
			+ ',ADJUSTMENT_TYPE'
			+ ',RT_ADJUSTMENT_TYPE'
			+ ',SUGGESTED_BUFFER'
			+ ',APPROVED_BUFFER'
			+ ',ADJUSTMENT_ACTION'
			+ ',SUGGESTION_DATE'
			+ ',SUGGESTION_REJECTION_CAUSE'
			+ ',SUGGESTION_EXPIRATION_DATE'
			+ ',SUGGESTION_ALERTS'
			+ ',NEXT_BUFFER_ANALYSIS'
			+ ',REPLENISHMENT_PROBLEM'	
			+ ',NET_INVENTORY'
			/*  OHLO 201811212: Since v4.10.0, add field SBC Buffer Size and its validations */			
			+ ',SBC_BUFFER_SIZE'
			-- -------------------------------------------------------------------------------
			-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated column 
			-- -------------------------------------------------------------------------------
			+ ',DAILY_AVERAGE_CONSUMPTION'
			-- -------------------------------------------------------------------------------
			-- OHLO 20200820: Since v5.2.0, add Available Inventory calculated column 
			-- -------------------------------------------------------------------------------
			+ ',AVAILABLE_INVENTORY'	
			-- -------------------------------------------------------------------------------
			-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory and Origin Buffer Family  calculated columns 
			-- -------------------------------------------------------------------------------
			+ ',ORIGIN_INVENTORY_ON_SITE'
			+ ',ORIGIN_NET_INVENTORY'
			+ ',ORIGIN_BUFFER_FAMILY';				

		-- -----------------------------------------------------------------------------------
		--  OHLO 20191020: Since v4.13.0, add custom columns for INSERT INTO
		-- -----------------------------------------------------------------------------------
		-- 	a) Principal non-upgradable Columns
		SET @AllColumnsInsert = @AllColumnsInsert 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' ' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')			
					AND CHARINDEX(TBL.CDCOLUMN, @AllColumnsInsert) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
 
		-- 	b) Principal non-included Columns 
		SET @AllColumnsInsert = @AllColumnsInsert 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' ' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN, @AllColumnsInsert) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');		 
		--	PRINT @AllColumnsInsert  
		-- -----------------------------------------------------------------------------------
				
		SET @AllValuesInsert = @AllVariablesInterfaceTmp
		SET @AllValuesInsert = @AllValuesInsert 	+ ', GETDATE()'
													+ ', @ivaCreatorOrModifyUser'
													+ ', GETDATE()'
													+ ', @ivaCreatorOrModifyUser'
													
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@CDUNIT_DEFAULT' --CDUNIT
		END
		
		IF (CHARINDEX('MINIMUM_BUFFER', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',0' --MINIMUM_BUFFER
		END
		
		IF (CHARINDEX('SECURITY_STOCK', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@SECURITY_STOCK' --SECURITY_STOCK
		END
		
		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @AllValuesInsert = @AllValuesInsert + ',@MINIMUM_REPLENISHMENT' 
		END
		
		IF (CHARINDEX('PACKAGING_UNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN --PACKAGING_UNIT
			IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) > 0)
			BEGIN
				SET @AllValuesInsert = @AllValuesInsert + ',@FORMULA_INVENTORY_ACCURACY'
			END
			ELSE
			BEGIN
				SET @AllValuesInsert = @AllValuesInsert + ',@FORMULA_INVENTORY_ACCURACY_DEFAULT'
			END
		END

		IF (CHARINDEX('UNIT_PRICE', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@UNIT_PRICE' --UNIT_PRICE
		END
		
		IF (CHARINDEX('TVC', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@TVC' --TVC
		END
		
		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',0' --CONSOLIDATED_REPLENISHMENT
		END
		
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',0' --POSITIVE_ADJUSTMENTS
		END

		IF (CHARINDEX('CONSUMPTION', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',0' --CONSUMPTION
		END
		
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',0' --NEGATIVE_ADJUSTMENTS
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('PENDING_DEMAND', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@PENDING_DEMAND' --PENDING_DEMAND
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('EXCLUDED_OUTS', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@EXCLUDED_OUTS' --EXCLUDED_OUTS
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('REPLENISHMENT_PRIORITY', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@REPLENISHMENT_PRIORITY' --REPLENISHMENT_PRIORITY
		END
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllColumnsInterfaceTmp) = 0)
		BEGIN 
			SET @AllValuesInsert = @AllValuesInsert + ',@REPLENISHMENT_FREQUENCY' --REPLENISHMENT_FREQUENCY
		END
		
		SET @AllValuesInsert = @AllValuesInsert 	
			+ ',@UPDATE_MOVEMENTS' --BUFFER_INITIAL_DATE
			+ ',@LOCATION_TYPE' --LOCATION_TYPE
			+ ',@UNIT_THROUGHPUT' --UNIT_THROUGHPUT
			+ ',0' --INACTIVE
			+ ',NULL' --INACTIVATION_DATE
			+ ',@INVENTORY_ON_SITE' --INVENTORY_ON_SITE
			+ ',@INVENTORY_ON_TRANSIT' --INVENTORY_ON_TRANSIT
			+ ',@INVENTORY_ON_PURCHASING' --INVENTORY_ON_PURCHASING
			+ ',@INVENTORY_ON_PRODUCTION' --INVENTORY_ON_PRODUCTION
			+ ',@INVENTORY_ON_CHAIN' --INVENTORY_ON_CHAIN
			+ ',@ALLOWED_OVERSTOCKING' --ALLOWED_OVERSTOCKING
			+ ',@EFFECTIVE_BUFFER' --EFFECTIVE_BUFFER
			+ ',@SITE_PRIORITY' --SITE_PRIORITY
			+ ',@SITE_PRIORITY_COLOR' --SITE_PRIORITY_COLOR
			+ ',@NET_PRIORITY' --NET_PRIORITY
			+ ',@NET_PRIORITY_COLOR' --NET_PRIORITY_COLOR
			+ ',0' --TOTAL_CONSOLIDATED_INPUTS
			+ ',0' --TOTAL_CONSOLIDATED_OUTPUTS
			+ ',NULL' --LAST_TOTAL_INVENTORY_ON_SITE
			+ ',@LAST_COLOR_CHANGE_DATE' --LAST_COLOR_CHANGE_DATE
			+ ',@MANAGED' --MANAGED
			+ ',@CDGROUP' --CDGROUP
			+ ',@WORST_INVENTORY_ON_SITE' 
			+ ',@LAST_INVENTORY_ON_SITE' 
			+ ',@DAYS_SINCE_LAST_OUT' 
			+ ',@LAST_TOTAL_OUTS_MAX_SUM' 
			+ ',@PROTECTION_FACTOR'		
			+ ',@ADJUSTMENT_TYPE' 
			+ ',@RT_ADJUSTMENT_TYPE'
			+ ',@SUGGESTED_BUFFER' 
			+ ',@APPROVED_BUFFER' 
			+ ',@ADJUSTMENT_ACTION' 
			+ ',@SUGGESTION_DATE' 
			+ ',@SUGGESTION_REJECTION_CAUSE' 
			+ ',@SUGGESTION_EXPIRATION_DATE' 
			+ ',@SUGGESTION_ALERTS' 
			+ ',@NEXT_BUFFER_ANALYSIS'
			+ ',@CD_NONE_CAUSE'
			+ ',@NET_INVENTORY'
			/*  OHLO 201811212: Since v4.10.0, add field SBC Buffer Size and its validations */
			+ ',@SBC_BUFFER_SIZE'
			-- -------------------------------------------------------------------------------
			-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated column  
			-- -------------------------------------------------------------------------------
			+ ',@DAILY_AVERAGE_CONSUMPTION'			
			-- -------------------------------------------------------------------------------
			-- OHLO 20200820: Since v5.2.0, add Available Inventory calculated column  
			-- -------------------------------------------------------------------------------
			+ ',@AVAILABLE_INVENTORY'		
			-- -------------------------------------------------------------------------------
			-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory and Origin Buffer Family calculated columns  
			-- -------------------------------------------------------------------------------	
			+ ',@ORIGIN_INVENTORY_ON_SITE'
			+ ',@ORIGIN_NET_INVENTORY'
			+ ',@ORIGIN_BUFFER_FAMILY'
			+ '';
			
		-- -----------------------------------------------------------------------------------
		--  OHLO 20191020: Since v4.13.0, add custom columns for INSERT INTO
		-- -----------------------------------------------------------------------------------
		-- 	a) Principal non-upgradable Columns
		SET @AllValuesInsert = @AllValuesInsert 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N',' 
						   + ' @' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')			
					AND CHARINDEX(TBL.CDCOLUMN, @AllValuesInsert) = 0
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');
 
		-- 	b) Principal non-included Columns 
		SET @AllValuesInsert = @AllValuesInsert 
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT  N',' 
							+ ' @' + TBL.CDCOLUMN
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT B.CDFIELD 
							 FROM TFSCM_DEX_INTERFACES A LEFT JOIN TFSCM_DEX_INT_DETAIL B ON A.CDINTERFACE = B.CDINTERFACE 
							WHERE A.CDINTERFACE = @interfaceForCustom)
					AND CHARINDEX(TBL.CDCOLUMN, @AllValuesInsert) = 0
					ORDER BY 1
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N'')), '');	 
		--	PRINT @AllValuesInsert  
		-- -----------------------------------------------------------------------------------	
		
		-- ------------------------------------------------------------------------------------
		--                        End Building INSERT
		-- ------------------------------------------------------------------------------------ 
		--                       Start Building UPDATE
		-- ------------------------------------------------------------------------------------
	 	SET @AllSetsColumnsAndValuesUpdate = ''
			+ '							   MODIFY_DATE             = GETDATE()' + CHAR(13)
			+ '							  ,MODIFY_USER             = @ivaCreatorOrModifyUser'+ CHAR(13);		 
		
		SET @AllSetsColumnsAndValuesUpdate = @AllSetsColumnsAndValuesUpdate
			+ '							  ,LOCATION_TYPE           = @LOCATION_TYPE' + CHAR(13)
			+ '							  ,UNIT_THROUGHPUT         = @UNIT_THROUGHPUT' + CHAR(13)
			+ '							  ,INACTIVE                = @INACTIVE' + CHAR(13)
			+ '							  ,INACTIVATION_DATE       = @INACTIVATION_DATE' + CHAR(13)
			+ '							  ,INVENTORY_ON_SITE       = @INVENTORY_ON_SITE' + CHAR(13)
			+ '							  ,INVENTORY_ON_TRANSIT    = @INVENTORY_ON_TRANSIT' + CHAR(13)
			+ '							  ,INVENTORY_ON_PURCHASING = @INVENTORY_ON_PURCHASING' + CHAR(13)
			+ '							  ,INVENTORY_ON_PRODUCTION = @INVENTORY_ON_PRODUCTION' + CHAR(13)
			+ '							  ,INVENTORY_ON_CHAIN      = @INVENTORY_ON_CHAIN' + CHAR(13)
			+ '							  ,ALLOWED_OVERSTOCKING    = @ALLOWED_OVERSTOCKING' + CHAR(13)
			+ '							  ,EFFECTIVE_BUFFER        = @EFFECTIVE_BUFFER' + CHAR(13)
			+ '							  ,SITE_PRIORITY           = @SITE_PRIORITY' + CHAR(13)
			+ '							  ,SITE_PRIORITY_COLOR     = @SITE_PRIORITY_COLOR' + CHAR(13)
			+ '							  ,NET_PRIORITY            = @NET_PRIORITY' + CHAR(13)
			+ '							  ,NET_PRIORITY_COLOR      = @NET_PRIORITY_COLOR' + CHAR(13)
			+ '							  ,LAST_TOTAL_INVENTORY_ON_SITE = ' + CHAR(13) 
			+ '							  	CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN ' + CHAR(13)
			+ '							  		@TOTAL_INVENTORY_ON_SITE_OLD' + CHAR(13)
			+ '							  	ELSE ' + CHAR(13)
			+ '							  		LAST_TOTAL_INVENTORY_ON_SITE' + CHAR(13)
			+ '							  	END	' + CHAR(13)
			+ '							  ,LAST_COLOR_CHANGE_DATE  = @LAST_COLOR_CHANGE_DATE' + CHAR(13)
			+ '							  ,MANAGED                 = @MANAGED' + CHAR(13)
			+ '							  ,NEXT_BUFFER_ANALYSIS    = @NEXT_BUFFER_ANALYSIS' + CHAR(13)
			+ '							  ,REPLENISHMENT_PROBLEM   = @REPLENISHMENT_PROBLEM' + CHAR(13)
			+ '							  ,NET_INVENTORY           = @NET_INVENTORY' + CHAR(13)
			-- -------------------------------------------------------------------------------
			--  OHLO 201811212: Since v4.10.0, add field SBC Buffer Size and its validations 
			-- -------------------------------------------------------------------------------
			+ '							  ,SBC_BUFFER_SIZE         = @SBC_BUFFER_SIZE' + CHAR(13)			
			-- -------------------------------------------------------------------------------
			--  OHLO 20200820: Since v5.2.0, add Available Inventory to the update sentence  
			-- -------------------------------------------------------------------------------
			+ '							  ,AVAILABLE_INVENTORY     = @AVAILABLE_INVENTORY' + CHAR(13)			
			-- -------------------------------------------------------------------------------
			--  JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory, and Origin Buffer Family to the update sentence  
			-- -------------------------------------------------------------------------------
			+ '							  ,ORIGIN_INVENTORY_ON_SITE = @ORIGIN_INVENTORY_ON_SITE' + CHAR(13)	
			+ '							  ,ORIGIN_NET_INVENTORY     = @ORIGIN_NET_INVENTORY' + CHAR(13)		
			+ '							  ,ORIGIN_BUFFER_FAMILY     = @ORIGIN_BUFFER_FAMILY' + CHAR(13)
			+ '';
		-- ------------------------------------------------------------------------------------
		--                        End Building UPDATE
		-- ------------------------------------------------------------------------------------
		
		SET @Trace = 'building the vSPMasterLoad '	
		
		DECLARE @procedureName VARCHAR(50);
		SET @procedureName = 'BUFFERS';
		IF (@ivaCodInterface = 99)
		BEGIN
			SET @procedureName = 'BUFFERS_MANUAL';
		END
			
		IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = @procedureName)
			SET @SPMasterLoad = 'ALTER PROCEDURE [dbo].['+ @procedureName +'] '+ CHAR(13)	
		ELSE
			SET @SPMasterLoad = 'CREATE PROCEDURE [dbo].['+ @procedureName +'] '+ CHAR(13)
		
		SET @SPMasterLoad = @SPMasterLoad							
			+ '	@ivaIdExchange NUMERIC(10), ' + CHAR(13)
			+ '	@ivaTempLoadDate DATE ,' + CHAR(13)
			+ '	@ivaCreatorOrModifyUser NVARCHAR(MAX), ' + CHAR(13)
			+ '	@ivaIsDataExchangeForScreen SMALLINT, ' + CHAR(13)
			+ '	@ivaCdViewIfDataExchangeForScreen INT, ' + CHAR(13)
			+ '	@ivaErrorValidations NUMERIC(10), ' + CHAR(13)
			+ '	@ovaResult VARCHAR(1) OUTPUT, ' + CHAR(13)
			+ '	@ovaMessage NVARCHAR(MAX) OUTPUT, ' + CHAR(13)
			+ '	@ovaMessageTableErrors NVARCHAR(MAX) OUTPUT, ' + CHAR(13)
			+ '	@locationsListTempOnlyWorkDay AS NVARCHAR(MAX)  OUTPUT, ' + CHAR(13)							
			+ '	@ovaHasProcessed VARCHAR(1) OUTPUT ' + CHAR(13)
			+ 'AS ' + CHAR(13)
			+ 'DECLARE @Trace 						AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @DuplicatedBuffersCountTemp 	AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ErrorsBuffersCount 			AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ProcessBuffersCount 		AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ovaResultPseudocodes 		AS VARCHAR(1); ' + CHAR(13)
			+ 'DECLARE @ovaMessagePseudocodes 		AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @ovaMessagePseudocodesTotal 	AS NVARCHAR(MAX) = ''''; ' + CHAR(13)
			+ 'DECLARE @PassesValidations 			AS SMALLINT = 1; ' + CHAR(13)
			+ 'DECLARE @CountIntTmp 				AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @CountNumericTmp 			AS NUMERIC(17,5) = 0; ' + CHAR(13)
			+ 'DECLARE @locationsListTemp 			AS NVARCHAR(MAX) = ''''; ' + CHAR(13)
			+ 'DECLARE @locationTemp 				AS VARCHAR(50) = ''''; ' + CHAR(13)
			+ 'DECLARE @locationTempOnlyWorkDay 	AS VARCHAR(50) = ''''; ' + CHAR(13)
			+ 'DECLARE @locationTempNoWorkDay 		AS VARCHAR(50) = ''''; ' + CHAR(13)																			   
																			   
			+ 'DECLARE @DelimiterForLocations	   AS CHAR(1) = ''|''; ' + CHAR(13)
			+ 'DECLARE @DATE_SERVER_NO_TIME   	   AS DATE; ' + CHAR(13)
			+ 'DECLARE @CDUNIT_DEFAULT 		  	   AS VARCHAR(50); ' + CHAR(13)
			+ 'DECLARE @INVENTORY_ACCURACY_DEFAULT AS NUMERIC(3,0); ' + CHAR(13)
																			   
			+ 'DECLARE @FORMULA_INVENTORY_ACCURACY_DEFAULT AS NUMERIC(6,5); ' + CHAR(13)
			+ 'DECLARE @MODULE_MINIMUM_REPLENISHMENT_PACKAGING_UNIT AS NUMERIC(17,5); ' + CHAR(13)
			+ 'DECLARE @TempTOTAL_INVENTORY_ON_SITE AS NUMERIC(17,5); ' + CHAR(13)
			+ 'DECLARE @ID_MESSAGESNOTIFICATIONS AS NUMERIC(18,0) = 0; ' + CHAR(13)
			+ 'DECLARE @TableTempID_MESSAGESNOTIFICATIONS TABLE (ID NUMERIC(18,0)); ' + CHAR(13)
			+ 'DECLARE @MessageTableErrors AS VARCHAR(4000) = ''''; ' + CHAR(13)																			   
																			   
			+ 'DECLARE @Dummy AS VARCHAR(10) = ''''; ' + CHAR(13)
			+ 'DECLARE @ovaResultRemoveViewNot    AS VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageRemoveViewNot   AS VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaResultAddViewNot       AS VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageAddViewNot      AS VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @TotalErrorsBuffers        AS NUMERIC(8) = 0;' + CHAR(13)
			+ 'DECLARE @MessagesAfterDataExchange AS VARCHAR = ''N'';' + CHAR(13)
			/* OHLO 20170405: If buffer changes, expire pending suggestions for sku-location */
			+ 'DECLARE @DelimiterForRecords       AS VARCHAR(1)    = ''|'';' + CHAR(13)
			+ 'DECLARE @DelimeterPk               AS VARCHAR(1)    = '';'';' + CHAR(13)
			+ 'DECLARE @BufferList                AS NVARCHAR(MAX) = '''';' + CHAR(13)
			+ 'DECLARE @AdjustmentActionExpire    AS VARCHAR(10)   = ''EXPIRE'';' + CHAR(13)
			+ 'DECLARE @AdjustmentActionAnalyze   AS VARCHAR(10)   = ''ANALYZE'';' + CHAR(13)
			+ 'DECLARE @IsBufferChanged           AS NUMERIC(1)    = 0;' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ '-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. ' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)
			+ 'DECLARE @IsOrigin                  AS INT           = 0;' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13) 
			+ '-- OHLO 20190613: Since v4.13.0, in order to recalculate buffers related OC and OP ' + CHAR(13) 
			+ '--                priorities, check if columns involved in the calculation have changed. ' + CHAR(13) 
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)  			
			+ 'DECLARE @IsSecurityStockChanged         NUMERIC(1) = 0;' + CHAR(13) -- @SECURITY_STOCK <> @SECURITY_STOCK_OLD  
			+ 'DECLARE @IsInventoryOnSiteChanged       NUMERIC(1) = 0;' + CHAR(13) -- @TOTAL_INVENTORY_ON_SITE <> @TOTAL_INVENTORY_ON_SITE_OLD
			+ 'DECLARE @IsInventoryOnTransitChanged    NUMERIC(1) = 0;' + CHAR(13) -- @TOTAL_INVENTORY_ON_TRANSIT <> @TOTAL_INVENTORY_ON_TRANSIT_OLD 
			+ 'DECLARE @IsInventoryOnProductionChanged NUMERIC(1) = 0;' + CHAR(13) -- @TOTAL_INVENTORY_ON_PRODUCTION <> @TOTAL_INVENTORY_ON_PRODUCTION_OLD 
			+ 'DECLARE @IsPendingDemandChanged         NUMERIC(1) = 0;' + CHAR(13) -- @PENDING_DEMAND <> @PENDING_DEMAND_OLD
			+ CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)  			
			+ '-- OHLO 20191212: Since v4.14.0, in order to update "UPDATE_MOVEMENTS" date column,' + CHAR(13) 
			+ '--                it is necessary to check if the movements columns have been changed.  ' + CHAR(13)
			+ '-- -------------------------------------------------------------------------------------------' + CHAR(13)  			
			+ 'DECLARE @IsConsolidatedReplenishmentChanged NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @IsPositiveAdjustmentsChanged       NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @IsConsumptionChanged               NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @IsNegativeAdjustmentsChanged       NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @IsExcludedOutsChanged              NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @IsInventoryOnPurchasingChanged     NUMERIC(1) = 0;' + CHAR(13)
			+ 'DECLARE @AreMovementsColumnsChanged         NUMERIC(1) = 0;' + CHAR(13)

			+ '-- -------------------------------------------------------------------------------' + CHAR(13)  			
			+ 'DECLARE @ExpiredSuggestionCause		VARCHAR(50)   = '''';' + CHAR(13)
			+ 'DECLARE @ManagementWay				VARCHAR(1)    = ''A'';' + CHAR(13)
			+ 'DECLARE @ovaGBASResult				VARCHAR(1)    = '''';' + CHAR(13)
			+ 'DECLARE @ovaGBASMessage				NVARCHAR(MAX) = '''';' + CHAR(13)
			+ 'DECLARE @TmpTableAlertNotifications	TABLE (ID NUMERIC(18,0));' + CHAR(13) 
			+ 'DECLARE @AlertNotificationsId		NUMERIC(18,0) = 0;' + CHAR(13)
			+ 'DECLARE @IsMinBufferChanged			NUMERIC(1)    = 0;' + CHAR(13)
			+ 'DECLARE @ExpiredMinBufferChange		VARCHAR(50)   = '''';' + CHAR(13)
			+ 'DECLARE @HasRulesChanges				NUMERIC(1)    = 0;' + CHAR(13)
			+ CHAR(13);	
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ 'BEGIN ' + CHAR(13)
			 
			+ 'BEGIN TRY ' + CHAR(13)
			+ '	-- SET NOCOUNT ON added to prevent extra result sets from ' + CHAR(13)
			+ '	-- interfering with SELECT statements. ' + CHAR(13)
			+ '	SET NOCOUNT ON; ' + CHAR(13)	
			+ '	SET @ovaResult = ''0'';' + CHAR(13)
			+ '	SET @ovaMessage = '''';' + CHAR(13)
			+ '	SET @ovaMessageTableErrors = '''';' + CHAR(13)
			+ '	SET @locationsListTempOnlyWorkDay = ''''; ' + CHAR(13)
			+ '	SET @ovaHasProcessed = ''0'';' + CHAR(13)
			+ '	SET @Trace = ''Setting the cursor cDataTempCursor  ''' + CHAR(13)
			+ '	SET @DATE_SERVER_NO_TIME = GETDATE(); ' + CHAR(13)
														  
			+ '	SELECT @CDUNIT_DEFAULT = CDUNIT, @INVENTORY_ACCURACY_DEFAULT = INVENTORY_ACCURACY FROM TFSCM_CLI_UNITS WHERE (IS_DEFAULT_UNIT = 1 AND IS_ACTIVE = 1); ' + CHAR(13)
			+ '	SET @FORMULA_INVENTORY_ACCURACY_DEFAULT = CAST(CAST(1 AS NUMERIC(2,1))/(POWER(10,@INVENTORY_ACCURACY_DEFAULT)) AS NUMERIC(6,5)); ' + CHAR(13)
			+ CHAR(13);
							
		SET @SPMasterLoad = @SPMasterLoad + ' DECLARE ' + @AllDeclareColumnInterfaceTmp + ';' + CHAR(13);	
		SET @SPMasterLoad = @SPMasterLoad + ' DECLARE ' + @AllDeclareColumnCalc + ';' + CHAR(13);
		SET @SPMasterLoad = @SPMasterLoad + ' DECLARE ' + @AllDeclareColumnOld + ';' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)							
			+ '	BEGIN TRY ' + CHAR(13)
			+ CHAR(13)
			+ '		---------- MESSAGES ---------------------------------------- ' + CHAR(13)
			+ '		DECLARE @Language AS VARCHAR(2) = ''es'';  ' + CHAR(13)
			+ '		DECLARE @CodErrorResultMessages AS VARCHAR(1); ' + CHAR(13)
			+ '		DECLARE @MessageErrorResultMessages AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNITS_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_BUFFER_GT_BUFFER AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SECURITY_STOCK_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 AS NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MINIMUM_REPLENISHMENT_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PACKAGING_UNIT_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_BUFFERS_MINREPLENISHMENT_NOMULTIPLO_PACKAGING_UNIT AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_PRICE_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TVC_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSOLIDA_REPLENISHMENT_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_POSITIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_CONSUMPTION_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_NEGATIVE_ADJUSTMENTS_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DEX_BUFFERS_TOTAL_INVENTORY_ON_PRODUCTION_DIFF AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNIT_MINOR_THAN_ACTUAL_ERROR AS NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR AS NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR AS NVARCHAR(MAX);' + CHAR(13)
			/* OHLO 20170405: If buffer changes, expire pending suggestions for sku-location */
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED AS NVARCHAR(MAX);' + CHAR(13)			
			/* OHLO 20170523: If minimum buffer changes, expire pending suggestions for sku-location */
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED AS NVARCHAR(MAX);' + CHAR(13)
			/* OHLO 20170623: Pending Demand validation error */
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_PENDING_DEMAND_LESS_0 AS NVARCHAR(MAX);' + CHAR(13)
			/* OHLO 20180223: Excluded Outs validation error */
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_EXCLUDED_OUTS_LESS_0 AS NVARCHAR(MAX);' + CHAR(13)
			/* OHLO 20170920: Replensihment Priority validation error */
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_PRIORITY_LESS_0 AS NVARCHAR(MAX);' + CHAR(13)
			+ '		-- -------------------------------------------------------------------------' + CHAR(13)
			+ '		-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to location' + CHAR(13)
			+ '		-- -------------------------------------------------------------------------' + CHAR(13)	
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR AS NVARCHAR(MAX);' + CHAR(13)
			/*  OHLO 20181212: Since v4.10.0, add Replenishment Frequency column */
			+ '		-- -------------------------------------------------------------------------' + CHAR(13)
			+ '		-- OHLO 20181212: Since v4.10.0, add Replenishment Frequency column messages  ' + CHAR(13)
			+ '		-- -------------------------------------------------------------------------' + CHAR(13)	
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_FREQUENCY_LE_0 AS NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_REP_FREQUENCY_GT_REP_TIME AS NVARCHAR(MAX);' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT @Language = P.PARAM_VALUE  ' + CHAR(13)
			+ '		  FROM  TFSCM_COM_PARAMS P ' + CHAR(13)
			+ '		 WHERE P.CDPARAM = ''DEFAULT_LANGUAGE'' ' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT TOP(1) @CD_NONE_CAUSE = C.CDCAUSE FROM TFSCM_CLI_CAUSES C WHERE C.IS_SYSTEM = ''Y'' AND C.CAUSE_TYPE = ''B''' + CHAR(13)
			
			-- -------------------------------------------------------------------------------
			-- OHLO 20190607: Since v4.13.0, execution of Automation Rules process 
            -- -------------------------------------------------------------------------------			
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		-- OHLO 20190607: Since v4.13.0, execute automation rules process           ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		EXEC USP_EXECUTE_AUTOMATION_RULES ' + CAST(@interfaceForCustom AS VARCHAR) + ', @ivaTempLoadDate, ' + CHAR(13)
			+ '										  @ivaIsDataExchangeForScreen, @ovaResult OUTPUT, @ovaMessage OUTPUT ' + CHAR(13)
			+ CHAR(13)	
			+ '		-- If there is an error, then raise it.' + CHAR(13)
			+ '		IF (@ovaResult = ''1'')' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			-- (@ErMessage, @ErSeverity, @ErState)' + CHAR(13)
			+ '			RAISERROR (@ovaMessage, 11, 1);' + CHAR(13)
			+ '		END' + CHAR(13);

			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			/*+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		-- OHLO 20210125: Since v5.3.0, update _STR columns related to numeric ones, whose ' + CHAR(13)
			+ '		--                values were modified by any automation rule.' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		UPDATE [dbo].[TFSCM_CLI_BUFFER_TEMP]' + CHAR(13)
			+ '		   SET ' + (SELECT STRING_AGG ('		       ' + LEFT([CI].[COLUMN_NAME]+ '_STR' + REPLICATE(' ', 54), 54) + ' = ' + [CI].[COLUMN_NAME], ', ' + CHAR(13)) AS FETCH_SENTENCE
								  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
								 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_BUFFER_TEMP' 
								   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
								   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime')
								   ) + ';' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ CHAR(13)
            -- -------------------------------------------------------------------------------
			+ CHAR(13)		  */
			+ '		IF (@ivaIsDataExchangeForScreen = 1)' + CHAR(13) 
			+ '		BEGIN' + CHAR(13) 
			+ '			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE' + CHAR(13) 
			+ '											 FROM TFSCM_CLI_CAUSES C ' + CHAR(13) 
			+ '						 					WHERE C.DSCAUSE = ''cause_manual_buffer_changing'');' + CHAR(13) 
			+ CHAR(13)
			+ '			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE' + CHAR(13) 
			+ '											 FROM TFSCM_CLI_CAUSES C ' + CHAR(13) 
			+ '						 					WHERE C.DSCAUSE = ''cause_manual_min_buffer_changing'');' + CHAR(13) 
			+ '		END' + CHAR(13) 
			+ '		ELSE' + CHAR(13) 
			+ '		BEGIN' + CHAR(13) 
			+ '			SET @ExpiredSuggestionCause = (SELECT C.CDCAUSE' + CHAR(13) 
			+ '						  					 FROM TFSCM_CLI_CAUSES C ' + CHAR(13) 
			+ '						 					WHERE C.DSCAUSE = ''cause_buffer_changing_through_interface'');' + CHAR(13) 
			+ CHAR(13)
			+ '			SET @ExpiredMinBufferChange = (SELECT C.CDCAUSE' + CHAR(13) 
			+ '											 FROM TFSCM_CLI_CAUSES C ' + CHAR(13) 
			+ '						 					WHERE C.DSCAUSE = ''cause_min_buffer_changing_through_interface'');' + CHAR(13) 
			+ '		END' + CHAR(13) 
			+ CHAR(13)	
			+ '		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_MIN_REPLENISHMENT_VALIDATION_ERROR OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '		----------------------------------------------------------- ' + CHAR(13)  
			+ CHAR(13)
			+ '		IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			/* Message Notifications for Alerts */' + CHAR(13)
			+ '			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE)' + CHAR(13)
			+ '			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TableTempID_MESSAGESNOTIFICATIONS' + CHAR(13)
			+ '			VALUES('''');' + CHAR(13)
			+ CHAR(13)
			+ '			SELECT @ID_MESSAGESNOTIFICATIONS = ID FROM @TableTempID_MESSAGESNOTIFICATIONS;' + CHAR(13)
			+ CHAR(13)
			+ '			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)' + CHAR(13)
			+ '			VALUES (@ivaCdViewIfDataExchangeForScreen, @ID_MESSAGESNOTIFICATIONS);' + CHAR(13) 
			/* Message Notifications for Alerts */
			+  CHAR(13)
			+ '			/* Message Notifications for Alerts */' + CHAR(13)
			+ '			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE, NOTIFICATION_TYPE)' + CHAR(13)
			+ '			OUTPUT Inserted.ID_MESSAGESNOTIFICATIONS INTO @TmpTableAlertNotifications' + CHAR(13)
			+ '			VALUES('''', ''A'');' + CHAR(13)
			+  CHAR(13) 
			+ ' 			SELECT @AlertNotificationsId = ID FROM @TmpTableAlertNotifications;' + CHAR(13)
			+  CHAR(13)
			+ '			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW,ID_MESSAGESNOTIFICATIONS)' + CHAR(13)
			+ '			VALUES (@ivaCdViewIfDataExchangeForScreen, @AlertNotificationsId);' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		----------------------------------------------------------- ' + CHAR(13)  + CHAR(13)
			+ '		DECLARE @PK1_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ '		DECLARE @PK2_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ '		DECLARE @FILE_NAME AS VARCHAR(500); ' + CHAR(13)
			+ '		DECLARE @FILE_ROW_NUMBER AS INT; ' + CHAR(13)
			+ '		DECLARE @UPDATE_MOVEMENTS_ERROR_LOG AS DATE; ' + CHAR(13)
			+  CHAR(13)
			+ '		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_BUFFER_DUPLICATED'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFER_DUPLICATED OUTPUT; ' + CHAR(13)
			+ CHAR(13)	
			+ '		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_BUFFERS_COUNT_DUPLICATED'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_COUNT_BUFFER_DUPLICATED OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '		DECLARE cErrorLogCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY  FOR ' + CHAR(13)
			+ '		 SELECT [BTDUP].[COUNTER1], [BT].[SKU], [BT].[LOCATION], @ivaTempLoadDate UPDATE_MOVEMENTS, [BT].[FILE_NAME], [BT].[FILE_ROW_NUMBER] ' + CHAR(13)
			+ '		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  ' + CHAR(13)
			+ '		   JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '		 		   FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] ' + CHAR(13)
			+ '		 		  WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '		 		    AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate ' + CHAR(13)
			+ '		 		  GROUP BY [TMP].[SKU], [TMP].[LOCATION]  ' + CHAR(13)
			+ '		 		 HAVING COUNT(1) > 1) AS [BTDUP] ' + CHAR(13)
			+ '		 	ON ([BT].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '		 	AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate ' + CHAR(13)
			+ '		 	AND [BTDUP].[SKU]           = [BT].[SKU] ' + CHAR(13)			
			+ '		 	AND [BTDUP].[LOCATION]      = [BT].[LOCATION] ' + CHAR(13)
			+ '			AND [BT].[FILE_ROW_NUMBER]  = [BTDUP].[FILE_ROW_NUMBER]); ' + CHAR(13)
			+ CHAR(13)
			+ '		/*SELECT tempo.COUNTER1, tempo.SKU, tempo.LOCATION, tempo.UPDATE_MOVEMENTS, tempo.FILE_NAME, tempo.FILE_ROW_NUMBER ' + CHAR(13)
			+ '		FROM (' + CHAR(13)
			+ '	  		SELECT COUNT(1) AS COUNTER1, TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER' + CHAR(13)
			+ '	  		  FROM TFSCM_CLI_BUFFER_TEMP TMP ' + CHAR(13)
			+ '	  		 WHERE TMP.IDEXCHANGE       = @ivaIdExchange ' + CHAR(13)
			+ '     		   AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
			+ '	  		 GROUP BY TMP.SKU, TMP.LOCATION, TMP.UPDATE_MOVEMENTS, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER' + CHAR(13)
			+ '		) tempo ' + CHAR(13)
			+ '		WHERE tempo.COUNTER1 >1 */' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN cErrorLogCursor ' + CHAR(13)
			+ '		FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER' + CHAR(13)
			+ CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '								      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '			VALUES (@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED + CONVERT(VARCHAR, @DuplicatedBuffersCountTemp, 105) + ''.'', NULL, ''E'', GETDATE(), @PK1_ERROR_LOG, @PK2_ERROR_LOG, ' + CHAR(13)
			+ '				    NULL,  @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @UPDATE_MOVEMENTS_ERROR_LOG );' + CHAR(13)
			+ CHAR(13)
			+ '			SET @ErrorsBuffersCount = @ErrorsBuffersCount + @DuplicatedBuffersCountTemp ' + CHAR(13)
			+ '			SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @MessageTableErrors = ''<tr><td>''+@PK2_ERROR_LOG+''</td><td>''+@PK1_ERROR_LOG+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFER_DUPLICATED+''</td></tr>''; ' + CHAR(13)
			+ '				SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '				VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			FETCH NEXT FROM cErrorLogCursor INTO @DuplicatedBuffersCountTemp, @PK1_ERROR_LOG, @PK2_ERROR_LOG, @UPDATE_MOVEMENTS_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ CHAR(13)
			+ '	   DELETE [BT]  ' + CHAR(13)
			+ '	     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [BT]  ' + CHAR(13)
			+ '	     JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[SKU], [TMP].[LOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '	 		     FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [TMP] ' + CHAR(13)
			+ '	 		    WHERE [TMP].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '	 		      AND [TMP].[UPDATE_MOVEMENTS] = @ivaTempLoadDate ' + CHAR(13)
			+ '	 		    GROUP BY [TMP].[SKU], [TMP].[LOCATION]  ' + CHAR(13)
			+ '	 		   HAVING COUNT(1) > 1) AS [BTDUP] ' + CHAR(13)
			+ '	 	   ON ([BT].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '	 	   AND [BT].[UPDATE_MOVEMENTS] = @ivaTempLoadDate ' + CHAR(13)
			+ '	 	   AND [BTDUP].[SKU]           = [BT].[SKU] ' + CHAR(13)			
			+ '	 	   AND [BTDUP].[LOCATION]      = [BT].[LOCATION]); ' + CHAR(13)
			+ CHAR(13)
			+ '		CLOSE cErrorLogCursor ' + CHAR(13)
			+ '		DEALLOCATE cErrorLogCursor ' + CHAR(13)
			+ '	END TRY ' + CHAR(13)
			+ '	BEGIN CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT ' + CHAR(13)
			+ CHAR(13)	
			+ '		SET @ErMessage = ERROR_MESSAGE() ' + CHAR(13)
			+ '		SET @ErSeverity = ERROR_SEVERITY() ' + CHAR(13)
			+ '		SET @ErState = ERROR_STATE() ' + CHAR(13)
			+ CHAR(13)	
			+ '		RAISERROR (@ErMessage, @ErSeverity, @ErState) ' + CHAR(13)			
			+ '	END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use in Inputs and ' + CHAR(13)
			+ '	--                Outs Update. ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	IF OBJECT_ID(''BUFFER_DATES_TEMP'') IS NOT NULL  ' + CHAR(13)
			+ '		DROP TABLE BUFFER_DATES_TEMP; ' + CHAR(13)
			+ CHAR(13)	
			+ '	SELECT [SKU], [T].[LOCATION],  [T].[UPDATE_MOVEMENTS], [T].[MODIFY_DATE] [UPDATE_MOVEMENTS_OLD] ' + CHAR(13)
			+ '	  INTO BUFFER_DATES_TEMP ' + CHAR(13)
			+ '	  FROM [dbo].[TFSCM_CLI_BUFFER] [T] ' + CHAR(13)
			+ '	 WHERE 1 = 2; ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.  ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	IF OBJECT_ID(''tempdb..#OriginBuffersTemp'') IS NOT NULL  ' + CHAR(13)
			+ '		DROP TABLE #OriginBuffersTemp; ' + CHAR(13)
			+ CHAR(13)	
			+ '	SELECT SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY ' + CHAR(13)
			+ '	  INTO #OriginBuffersTemp ' + CHAR(13)
			+ '	  FROM [dbo].[TFSCM_CLI_BUFFER] ' + CHAR(13)
			+ '	 WHERE 1 = 2; ' + CHAR(13)
			+ '	-- ---------------------------------------------------------------------------------------  ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20170503: Remove IS_ACTIVE filter for "old" buffer join tables 
			-- -------------------------------------------------------------------------------
			+ CHAR(13)
			+ '	DECLARE cDataTempCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY	FOR ' + CHAR(13)
			+ '	 SELECT ' + @AllColumnsBuildSelectByCursor + CHAR(13)
			+ '	   FROM ' + @TableTempName+ ' TMP '+ CHAR(13)
			+ '	   LEFT OUTER JOIN '+@TableRealName+' BOLD ON (TMP.SKU = BOLD.SKU AND TMP.LOCATION = BOLD.LOCATION) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER        OBUFFER ON (TMP.SKU = OBUFFER.SKU AND TMP.ORIGIN_LOCATION = OBUFFER.LOCATION AND OBUFFER.INACTIVE = 0) '+  CHAR(13)												
			+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBF     ON (CBF.CDBUFFER_FAMILY = TMP.FAMILY AND CBF.IS_ACTIVE = 1) '  + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER_FAMILY CBFOLD  ON (CBFOLD.CDBUFFER_FAMILY = BOLD.FAMILY) '  + CHAR(13)							
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CL      ON (CL.CDLOCATION = TMP.LOCATION AND CL.IS_ACTIVE = 1) '  + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION      CLO     ON (CLO.CDLOCATION = TMP.ORIGIN_LOCATION AND CLO.IS_ACTIVE = 1) ' + CHAR(13);
							
		--IF (LEN(@OptionalStructureValidateCDUNITStr) > 0)
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad 
				+ '	   LEFT OUTER JOIN TFSCM_CLI_UNITS CU ON (CU.CDUNIT = TMP.CDUNIT AND CU.IS_ACTIVE = 1) ' + CHAR(13);
		END
		/* OHLO 20170503: Remove IS_ACTIVE filter for "old" buffer join tables */
		SET @SPMasterLoad = @SPMasterLoad
			+ '	   LEFT OUTER JOIN TFSCM_CLI_UNITS CUOLD ON (CUOLD.CDUNIT = BOLD.CDUNIT) ' + CHAR(13);
 
		SET @SPMasterLoad = @SPMasterLoad
			+ '	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CC ON (CC.CDCALENDAR = CL.CDCALENDAR AND CC.IS_ACTIVE = 1) '  + CHAR(13)
			+ '	  WHERE TMP.IDEXCHANGE = @ivaIdExchange '+ CHAR(13)
			+ '		AND TMP.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
			+ '		AND TMP.ID IN '+ CHAR(13)
			+ '	        ( '+ CHAR(13)
			+ '	          SELECT TEMPO.ID '+ CHAR(13)
			+ '	          FROM ( '+ CHAR(13)
			+ '	        	  SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID '+ CHAR(13)
			+ '	        	    FROM '+@TableTempName+ ' TMPAUX '+ CHAR(13)
			+ '	        	   WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange '+ CHAR(13)
			+ '	        	     AND TMPAUX.UPDATE_MOVEMENTS = @ivaTempLoadDate '+ CHAR(13)
			+ '	        	   GROUP BY TMPAUX.SKU, TMPAUX.LOCATION, TMPAUX.UPDATE_MOVEMENTS '+ CHAR(13)
			+ '	               ) TEMPO '+ CHAR(13)
			+ '	          WHERE TEMPO.COUNTER1 =1 '+ CHAR(13)
			+ '	        ) '+ CHAR(13)
			+ '	  ORDER BY TMP.UPDATE_MOVEMENTS,TMP.LOCATION,TMP.SKU ' + CHAR(13)
			+ CHAR(13)
			+ '	OPEN cDataTempCursor ' + CHAR(13)
			+ '	FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '	SET @Trace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)
			+ CHAR(13)
			+ '	WHILE (@@FETCH_STATUS = 0) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13) 	
			+ '		BEGIN TRY '+ CHAR(13);

		-- -----------------------------------------------------------------------------------
		-- DEFAULT VALUES 
		-- For optional columns which were excluded of the interface structure
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)
			+ '			IF (@SKU_OLD IS NOT NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @REPLENISHMENT_PROBLEM = @REPLENISHMENT_PROBLEM_OLD' + CHAR(13)
			+ '				IF (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 1) ' + CHAR(13)
			+ '				BEGIN   ' + CHAR(13)
			+ '					SET  @INACTIVE = 0; ' + CHAR(13)
			+ '					SET  @INACTIVATION_DATE = NULL; ' + CHAR(13)
			+ CHAR(13)
			+ '					-- OHLO 20180405: Update Movements date must be reseted with server (current) date ' + CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)	
			+ '						SET @UPDATE_MOVEMENTS = GETDATE(); ' + CHAR(13)
			+ '					END  ' + CHAR(13)
			+ '				END  ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN   ' + CHAR(13)
			+ '					SET  @INACTIVE = 0; ' + CHAR(13)
			+ '				END  ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ '			ELSE  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @Dummy = ''''; ' + CHAR(13);
			
		/*DECLARE @SqlSetNullNotIncludedColumns NVARCHAR(MAX) = N'';
		SET @SqlSetNullNotIncludedColumns = 
			(SELECT STUFF((
					SELECT DISTINCT
						   (CASE WHEN (CHARINDEX(C.CDCOLUMN, @AllUpgradablesColumns) = 0) THEN
								   N'				SET @' + C.CDCOLUMN + ' = NULL; ' 
								 ELSE
								   N''
							END) + CHAR(13) SQL_SET 
					  FROM TFSCM_COM_COL_TABLE C
					  JOIN TFSCM_DEX_INTERFACES A ON (A.CDINTERFACE = @interfaceForCustom 
					   AND C.CDTABLE  = A.CDTABLE 
					   AND C.IS_SYSTEM = 'O'
					   AND NOT EXISTS (SELECT 1 FROM TFSCM_DEX_INT_DETAIL I 
										WHERE I.CDINTERFACE = A.CDINTERFACE
										  AND I.CDFIELD     = C.CDCOLUMN))
			FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 0, N''));
				  
		SET @SPMasterLoad = @SPMasterLoad 
						  + ISNULL(@SqlSetNullNotIncludedColumns, '');*/

		SET @SPMasterLoad = @SPMasterLoad
			+ '			END  ' + CHAR(13)
			+ CHAR(13);										
		-- ----------------------------------------------------------------------------------- 
		-- IAFJ 20200609: Since v5.1.0, The assignment of the variable 
		--				  SET @LAST_TOTAL_INVENTORY_ON_SITE_OLD = @TOTAL_INVENTORY_ON_SITE_OLD
		--				  was removed, since it reassigned the value of the variable causing 
		--                the condition not to be met.
		-- -----------------------------------------------------------------------------------	

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			SET @IsConsolidatedReplenishmentChanged = 0;' + CHAR(13)
			+ '			SET @IsPositiveAdjustmentsChanged = 0;' + CHAR(13)
			+ '			SET @IsConsumptionChanged = 0;' + CHAR(13)
			+ '			SET @IsNegativeAdjustmentsChanged = 0;' + CHAR(13) 
			+ '			SET @IsExcludedOutsChanged = 0;' + CHAR(13)
			+ '			SET @IsInventoryOnSiteChanged = 0;' + CHAR(13)
			+ '			SET @IsInventoryOnTransitChanged = 0;' + CHAR(13)
			+ '			SET @IsInventoryOnProductionChanged = 0;' + CHAR(13)
			+ '			SET @IsInventoryOnPurchasingChanged = 0;' + CHAR(13)
			+ '			SET @IsPendingDemandChanged = 0;' + CHAR(13)
			+ '			SET @IsSecurityStockChanged = 0;' + CHAR(13)
			+ '			SET @AreMovementsColumnsChanged = 0;' + CHAR(13);
																					
		-- -----------------------------------------------------------------------------------
		-- END SETTING DEFAULT VALUES  
		-- -----------------------------------------------------------------------------------
		
		-- -----------------------------------------------------------------------------------
		-- BEGINING FOR SETTING INITIAL  VALUES (OVERRIDE VALUES) IN SPECIALS CONDITIONS:
		-- -----------------------------------------------------------------------------------
		-- SET OLD COLUMN VALUES OVER CURRENT VALUES
		/* If any column is not upgradable (This column is marked as not upgradable on the interface), 
		   then set its value with the one it currently has (instead of the one sent in the file, 
		   unless this is a change from Focuss or a rule has changed its value)*/
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)
			+ '			/* If any column is not upgradable (This column is marked as not upgradable on the interface), ' + CHAR(13) 
			+ '			   then set its value with the one it currently has (instead of the one sent in the file, ' + CHAR(13) 
			+ '			   unless this is a change from Focuss or a rule has changed its value) */' + CHAR(13) 
			----+ '			IF (@SKU_OLD IS NOT NULL AND @ivaIsDataExchangeForScreen=0) ' + CHAR(13)
			--+ '			IF (@SKU_OLD IS NOT NULL) ' + CHAR(13)
			--+ '			BEGIN ' + CHAR(13)
			--+ '				SET @Dummy = ''''; ' + CHAR(13);
		
		-- ----------------------------------------------------------------------------------- 
		-- OHLO 20190620: Since v4.13.0, if there is any rule that changes this buffer, then
		--                avoid setting old values
		-- -----------------------------------------------------------------------------------	
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- OHLO 20190620: Since v4.13.0, if there is any rule that changes this buffer,' + CHAR(13)
			+ '				--                then avoid setting old values ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for FAMILY column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.FAMILY = @FAMILY_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.FAMILY IS NULL AND @FAMILY_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);			
				
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @FAMILY_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@FAMILY_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @FAMILY has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@FAMILY IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('FAMILY', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @FAMILY = @FAMILY_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						IF (@FAMILY IS NOT NULL AND @FAMILY <> @FAMILY_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)				
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					-- @CDBUFFER_FAMILY_DB = @FAMILY_OLD -- if IS_ACTIVE is validated ' + CHAR(13)
			+ '					SET @FAMILY = @FAMILY_OLD; ' + CHAR(13)
			+ '					SET @REPLENISHMENT_ROUNDING_MODE = @REPLENISHMENT_ROUNDING_MODE_OLD; ' + CHAR(13)
			+ '					SET @YELLOW_ZONE_START = @YELLOW_ZONE_START_OLD; ' + CHAR(13)
			+ '					SET @RED_ZONE_START = @RED_ZONE_START_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
			
		
		IF (CHARINDEX('FAMILY', @AllUpgradablesColumns) = 0)
		BEGIN	
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.FAMILY <> @FAMILY) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @FAMILY = (SELECT BUFFER.FAMILY ' + CHAR(13)
				+ '										 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '										WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '										  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '										  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
			
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'FAMILY = @FAMILY, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for ORIGIN_LOCATION column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.ORIGIN_LOCATION = @ORIGIN_LOCATION_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.ORIGIN_LOCATION IS NULL AND @ORIGIN_LOCATION_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @ORIGIN_LOCATION_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@ORIGIN_LOCATION_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @ORIGIN_LOCATION has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@ORIGIN_LOCATION IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('ORIGIN_LOCATION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @ORIGIN_LOCATION = @ORIGIN_LOCATION_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @ORIGIN_LOCATION has a value and it is different than the old @ORIGIN_LOCATION_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@ORIGIN_LOCATION IS NOT NULL AND @ORIGIN_LOCATION <> @ORIGIN_LOCATION_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END		

		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)				
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @ORIGIN_LOCATION      = @ORIGIN_LOCATION_OLD; ' + CHAR(13)
			+ '					SET @CDLOCATION_ORIGIN_DB = @ORIGIN_LOCATION_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
			
		IF (CHARINDEX('ORIGIN_LOCATION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.ORIGIN_LOCATION <> @ORIGIN_LOCATION) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @ORIGIN_LOCATION = (SELECT BUFFER.ORIGIN_LOCATION ' + CHAR(13)
				+ '											  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '											 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '											   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '											   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'ORIGIN_LOCATION = @ORIGIN_LOCATION, ' + CHAR(13);	
		END
		
		-- IF ((LEN(@OptionalStructureValidateCDUNITStr) > 0) 
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('CDUNIT', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for CDUNIT column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CDUNIT = @CDUNIT_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.CDUNIT IS NULL AND @CDUNIT_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @CDUNIT_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@CDUNIT_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @CDUNIT has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @CDUNIT has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@CDUNIT IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @CDUNIT                     = @CDUNIT_DEFAULT; -- default ' + CHAR(13)
			+ '							SET @INVENTORY_ACCURACY         = @INVENTORY_ACCURACY_DEFAULT;' + CHAR(13)
			+ '							SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_DEFAULT; ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('CDUNIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @CDUNIT = @CDUNIT_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @CDUNIT has a value and it is different than the old @CDUNIT_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@CDUNIT IS NOT NULL AND @CDUNIT <> @CDUNIT_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END		 
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @CDUNIT = @CDUNIT_OLD; ' + CHAR(13)
			+ '					SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD; ' + CHAR(13)
			+ '					SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_OLD; ' + CHAR(13)								
			+ '				END ' + CHAR(13);
 
		IF (CHARINDEX('CDUNIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.CDUNIT <> @CDUNIT) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @CDUNIT = (SELECT BUFFER.CDUNIT ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'CDUNIT = @CDUNIT, ' + CHAR(13);
		END 
		
		--IF (LEN(@OptionalStructureValidateCDUNITStr) = 0) 
		IF (CHARINDEX('CDUNIT', @AllColumnsInterfaceTmp) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '				SET @INVENTORY_ACCURACY         = @INVENTORY_ACCURACY_DEFAULT;' + CHAR(13)
				+ '				SET @FORMULA_INVENTORY_ACCURACY = @FORMULA_INVENTORY_ACCURACY_DEFAULT; ' + CHAR(13);
		END 
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for REPLENISHMENT_TIME column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.REPLENISHMENT_TIME IS NULL AND @REPLENISHMENT_TIME_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @REPLENISHMENT_TIME_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@REPLENISHMENT_TIME_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @REPLENISHMENT_TIME has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@REPLENISHMENT_TIME IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('REPLENISHMENT_TIME', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad 
				+ '						SET @REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @REPLENISHMENT_TIME has a value and it is different than the old @REPLENISHMENT_TIME_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@REPLENISHMENT_TIME IS NOT NULL AND @REPLENISHMENT_TIME <> @REPLENISHMENT_TIME_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
 		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @REPLENISHMENT_TIME = @REPLENISHMENT_TIME_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
			
		IF (CHARINDEX('REPLENISHMENT_TIME', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.REPLENISHMENT_TIME <> @REPLENISHMENT_TIME) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @REPLENISHMENT_TIME = (SELECT BUFFER.REPLENISHMENT_TIME ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'REPLENISHMENT_TIME = @REPLENISHMENT_TIME, ' + CHAR(13);
		END
		
		--is neccesary to use patindex because there are severals column who contain the BUFFER word into their names
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for BUFFER column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.BUFFER = @BUFFER_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.BUFFER IS NULL AND @BUFFER_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @BUFFER_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@BUFFER_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @BUFFER has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@BUFFER IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (PATINDEX('%[^_]BUFFER[^_]%', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad 
				+ '						SET @BUFFER = @BUFFER_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @BUFFER has a value and it is different than the old @BUFFER_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@BUFFER IS NOT NULL AND @BUFFER <> @BUFFER_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END	
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @BUFFER = @BUFFER_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (PATINDEX('%[^_]BUFFER[^_]%', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.BUFFER <> @BUFFER) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @BUFFER = (SELECT BUFFER.BUFFER ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'BUFFER = @BUFFER, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidateMINIMUM_BUFFERStr) > 0) AND (CHARINDEX('MINIMUM_BUFFER', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('MINIMUM_BUFFER', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for MINIMUM_BUFFER column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.MINIMUM_BUFFER IS NULL AND @MINIMUM_BUFFER_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @MINIMUM_BUFFER_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@MINIMUM_BUFFER_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @MINIMUM_BUFFER has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @MINIMUM_BUFFER has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@MINIMUM_BUFFER IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @MINIMUM_BUFFER = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('MINIMUM_BUFFER', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @MINIMUM_BUFFER has a value and it is different than the old @MINIMUM_BUFFER_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER <> @MINIMUM_BUFFER_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MINIMUM_BUFFER = @MINIMUM_BUFFER_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (CHARINDEX('MINIMUM_BUFFER', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.MINIMUM_BUFFER <> @MINIMUM_BUFFER) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @MINIMUM_BUFFER = (SELECT BUFFER.MINIMUM_BUFFER ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'MINIMUM_BUFFER = @MINIMUM_BUFFER, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidateSECURITY_STOCKStr) > 0) AND (CHARINDEX('SECURITY_STOCK', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('SECURITY_STOCK', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for SECURITY_STOCK column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.SECURITY_STOCK = @SECURITY_STOCK_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.SECURITY_STOCK IS NULL AND @SECURITY_STOCK_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @SECURITY_STOCK_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@SECURITY_STOCK_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @SECURITY_STOCK has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @SECURITY_STOCK has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@SECURITY_STOCK IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @SECURITY_STOCK = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('SECURITY_STOCK', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @SECURITY_STOCK = @SECURITY_STOCK_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @SECURITY_STOCK has a value and it is different than the old @SECURITY_STOCK_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@SECURITY_STOCK IS NOT NULL AND @SECURITY_STOCK <> @SECURITY_STOCK_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @SECURITY_STOCK = @SECURITY_STOCK_OLD; ' + CHAR(13)   
			+ '				END ' + CHAR(13) 
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsSecurityStockChanged = 1; ' + CHAR(13);
				
		IF (CHARINDEX('SECURITY_STOCK', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13) 
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.SECURITY_STOCK <> @SECURITY_STOCK) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @SECURITY_STOCK = (SELECT BUFFER.SECURITY_STOCK ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'SECURITY_STOCK = @SECURITY_STOCK, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
			
		-- IF ((LEN(@OptionalStructureValidateMINIMUM_REPLENISHMENTStr) > 0) AND (CHARINDEX('MINIMUM_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('MINIMUM_REPLENISHMENT', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for MINIMUM_REPLENISHMENT column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.MINIMUM_REPLENISHMENT IS NULL AND @MINIMUM_REPLENISHMENT_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @MINIMUM_REPLENISHMENT_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@MINIMUM_REPLENISHMENT_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @MINIMUM_REPLENISHMENT has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @MINIMUM_REPLENISHMENT has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@MINIMUM_REPLENISHMENT IS NULL OR @MINIMUM_REPLENISHMENT = -999999) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13);
		
		IF (CHARINDEX('CDUNIT', @AllUpgradablesColumns) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '							SET @MINIMUM_REPLENISHMENT = @FORMULA_INVENTORY_ACCURACY; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '							SET @MINIMUM_REPLENISHMENT = @FORMULA_INVENTORY_ACCURACY_DEFAULT; ' + CHAR(13);
		END
			
		SET @SPMasterLoad = @SPMasterLoad
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @MINIMUM_REPLENISHMENT has a value and it is different than the old @MINIMUM_REPLENISHMENT_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@MINIMUM_REPLENISHMENT IS NOT NULL AND @MINIMUM_REPLENISHMENT <> @MINIMUM_REPLENISHMENT_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.MINIMUM_REPLENISHMENT <> @MINIMUM_REPLENISHMENT) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @MINIMUM_REPLENISHMENT = (SELECT BUFFER.MINIMUM_REPLENISHMENT ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'MINIMUM_REPLENISHMENT = @MINIMUM_REPLENISHMENT, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidatePACKAGING_UNITStr) > 0) AND (CHARINDEX('PACKAGING_UNIT', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('PACKAGING_UNIT', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for PACKAGING_UNIT column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PACKAGING_UNIT = @PACKAGING_UNIT_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.PACKAGING_UNIT IS NULL AND @PACKAGING_UNIT_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @PACKAGING_UNIT_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@PACKAGING_UNIT_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @PACKAGING_UNIT has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @PACKAGING_UNIT has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@PACKAGING_UNIT IS NULL OR @PACKAGING_UNIT = -999999) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13);
			
		IF (CHARINDEX('CDUNIT', @AllUpgradablesColumns) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '							SET @PACKAGING_UNIT = @FORMULA_INVENTORY_ACCURACY; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '							SET @PACKAGING_UNIT = @FORMULA_INVENTORY_ACCURACY_DEFAULT; ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('PACKAGING_UNIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @PACKAGING_UNIT = @PACKAGING_UNIT_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @PACKAGING_UNIT has a value and it is different than the old @PACKAGING_UNIT_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@PACKAGING_UNIT IS NOT NULL AND @PACKAGING_UNIT <> @PACKAGING_UNIT_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @PACKAGING_UNIT = @PACKAGING_UNIT_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (CHARINDEX('PACKAGING_UNIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.PACKAGING_UNIT <> @PACKAGING_UNIT) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @PACKAGING_UNIT = (SELECT BUFFER.PACKAGING_UNIT ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'PACKAGING_UNIT = @PACKAGING_UNIT, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidateUNIT_PRICEStr) > 0) AND (CHARINDEX('UNIT_PRICE', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('UNIT_PRICE', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for UNIT_PRICE column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.UNIT_PRICE = @UNIT_PRICE_OLD)  ' + CHAR(13)
			+ '												  OR (BUFFER.UNIT_PRICE IS NULL AND @UNIT_PRICE_OLD IS NULL))  ' + CHAR(13)
			+ '												THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @UNIT_PRICE_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@UNIT_PRICE_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @UNIT_PRICE has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @UNIT_PRICE has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@UNIT_PRICE IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @UNIT_PRICE = NULL; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('UNIT_PRICE', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @UNIT_PRICE = @UNIT_PRICE_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @UNIT_PRICE has a value and it is different than the old @UNIT_PRICE_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@UNIT_PRICE IS NOT NULL AND @UNIT_PRICE <> @UNIT_PRICE_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @UNIT_PRICE = @UNIT_PRICE_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
			
		IF (CHARINDEX('UNIT_PRICE', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.UNIT_PRICE <> @UNIT_PRICE) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @UNIT_PRICE = (SELECT BUFFER.UNIT_PRICE ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'UNIT_PRICE = @UNIT_PRICE, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidateTVCStr) > 0) AND (CHARINDEX('TVC', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('TVC', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for TVC column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TVC = @TVC_OLD)  ' + CHAR(13)
			+ '												  OR (BUFFER.TVC IS NULL AND @TVC_OLD IS NULL))  ' + CHAR(13)
			+ '												THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @TVC_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@TVC_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @TVC has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @TVC has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@TVC IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @TVC = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('TVC', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @TVC = @TVC_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @TVC has a value and it is different than the old @TVC_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@TVC IS NOT NULL AND @TVC <> @TVC_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @TVC = @TVC_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
		
		IF (CHARINDEX('TVC', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.TVC <> @TVC) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @TVC = (SELECT BUFFER.TVC ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'TVC = @TVC, ' + CHAR(13);
		END
		
		-- IF ((LEN(@OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr) > 0) AND (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for CONSOLIDATED_REPLENISHMENT column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.CONSOLIDATED_REPLENISHMENT IS NULL AND @CONSOLIDATED_REPLENISHMENT_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @CONSOLIDATED_REPLENISHMENT_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@CONSOLIDATED_REPLENISHMENT_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @CONSOLIDATED_REPLENISHMENT has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
														
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @CONSOLIDATED_REPLENISHMENT has a value and it is different than the old @CONSOLIDATED_REPLENISHMENT_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@CONSOLIDATED_REPLENISHMENT IS NOT NULL AND @CONSOLIDATED_REPLENISHMENT <> @CONSOLIDATED_REPLENISHMENT_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13) 
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsConsolidatedReplenishmentChanged = 1; ' + CHAR(13);
		
		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.CONSOLIDATED_REPLENISHMENT <> @CONSOLIDATED_REPLENISHMENT) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @CONSOLIDATED_REPLENISHMENT = (SELECT BUFFER.CONSOLIDATED_REPLENISHMENT ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'CONSOLIDATED_REPLENISHMENT = @CONSOLIDATED_REPLENISHMENT, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
			
		-- IF ((LEN(@OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr) > 0) AND (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('POSITIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for POSITIVE_ADJUSTMENTS column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.POSITIVE_ADJUSTMENTS IS NULL AND @POSITIVE_ADJUSTMENTS_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @POSITIVE_ADJUSTMENTS_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@POSITIVE_ADJUSTMENTS_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @POSITIVE_ADJUSTMENTS has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @POSITIVE_ADJUSTMENTS has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@POSITIVE_ADJUSTMENTS IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @POSITIVE_ADJUSTMENTS = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @POSITIVE_ADJUSTMENTS has a value and it is different than the old @POSITIVE_ADJUSTMENTS_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@POSITIVE_ADJUSTMENTS IS NOT NULL AND @POSITIVE_ADJUSTMENTS <> @POSITIVE_ADJUSTMENTS_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsPositiveAdjustmentsChanged = 1; ' + CHAR(13);
		
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.POSITIVE_ADJUSTMENTS <> @POSITIVE_ADJUSTMENTS) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @POSITIVE_ADJUSTMENTS = (SELECT BUFFER.POSITIVE_ADJUSTMENTS ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'POSITIVE_ADJUSTMENTS = @POSITIVE_ADJUSTMENTS, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		-- IF ((LEN(@OptionalStructureValidateCONSUMPTIONStr) > 0) AND (CHARINDEX('CONSUMPTION', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('CONSUMPTION', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for CONSUMPTION column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CONSUMPTION = @CONSUMPTION_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.CONSUMPTION IS NULL AND @CONSUMPTION_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @CONSUMPTION_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@CONSUMPTION_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @CONSUMPTION has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@CONSUMPTION IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('CONSUMPTION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @CONSUMPTION = @CONSUMPTION_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @CONSUMPTION has a value and it is different than the old @CONSUMPTION_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@CONSUMPTION IS NOT NULL AND @CONSUMPTION <> @CONSUMPTION_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @CONSUMPTION = @CONSUMPTION_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsConsumptionChanged = 1; ' + CHAR(13);
				
		IF (CHARINDEX('CONSUMPTION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.CONSUMPTION <> @CONSUMPTION) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @CONSUMPTION = (SELECT BUFFER.CONSUMPTION ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'CONSUMPTION = @CONSUMPTION, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		-- IF ((LEN(@OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr) > 0) AND (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for NEGATIVE_ADJUSTMENTS column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.NEGATIVE_ADJUSTMENTS IS NULL AND @NEGATIVE_ADJUSTMENTS_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			  
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @NEGATIVE_ADJUSTMENTS_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@NEGATIVE_ADJUSTMENTS_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @NEGATIVE_ADJUSTMENTS has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @NEGATIVE_ADJUSTMENTS has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@NEGATIVE_ADJUSTMENTS IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @NEGATIVE_ADJUSTMENTS = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @NEGATIVE_ADJUSTMENTS has a value and it is different than the old @NEGATIVE_ADJUSTMENTS_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@NEGATIVE_ADJUSTMENTS IS NOT NULL AND @NEGATIVE_ADJUSTMENTS <> @NEGATIVE_ADJUSTMENTS_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsNegativeAdjustmentsChanged = 1; ' + CHAR(13);
				
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.NEGATIVE_ADJUSTMENTS <> @NEGATIVE_ADJUSTMENTS) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @NEGATIVE_ADJUSTMENTS = (SELECT BUFFER.NEGATIVE_ADJUSTMENTS ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'NEGATIVE_ADJUSTMENTS = @NEGATIVE_ADJUSTMENTS, ' + CHAR(13);
		END		
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for TOTAL_INVENTORY_ON_SITE column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.TOTAL_INVENTORY_ON_SITE IS NULL AND @TOTAL_INVENTORY_ON_SITE_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @TOTAL_INVENTORY_ON_SITE_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@TOTAL_INVENTORY_ON_SITE_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @TOTAL_INVENTORY_ON_SITE has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('TOTAL_INVENTORY_ON_SITE', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @TOTAL_INVENTORY_ON_SITE has a value and it is different than the old @TOTAL_INVENTORY_ON_SITE_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL AND @TOTAL_INVENTORY_ON_SITE <> @TOTAL_INVENTORY_ON_SITE_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
				
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsInventoryOnSiteChanged = 1; ' + CHAR(13);
			
		IF (CHARINDEX('TOTAL_INVENTORY_ON_SITE', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.TOTAL_INVENTORY_ON_SITE <> @TOTAL_INVENTORY_ON_SITE) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @TOTAL_INVENTORY_ON_SITE = (SELECT BUFFER.TOTAL_INVENTORY_ON_SITE ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'TOTAL_INVENTORY_ON_SITE = @TOTAL_INVENTORY_ON_SITE, ' + CHAR(13);
		END		
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for TOTAL_INVENTORY_ON_TRANSIT column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.TOTAL_INVENTORY_ON_TRANSIT IS NULL AND @TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @TOTAL_INVENTORY_ON_TRANSIT_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@TOTAL_INVENTORY_ON_TRANSIT_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('TOTAL_INVENTORY_ON_TRANSIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @TOTAL_INVENTORY_ON_TRANSIT has a value and it is different than the old @TOTAL_INVENTORY_ON_TRANSIT_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL AND @TOTAL_INVENTORY_ON_TRANSIT <> @TOTAL_INVENTORY_ON_TRANSIT_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsInventoryOnTransitChanged = 1; ' + CHAR(13);
		
		IF (CHARINDEX('TOTAL_INVENTORY_ON_TRANSIT', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.TOTAL_INVENTORY_ON_TRANSIT <> @TOTAL_INVENTORY_ON_TRANSIT) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @TOTAL_INVENTORY_ON_TRANSIT = (SELECT BUFFER.TOTAL_INVENTORY_ON_TRANSIT ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);

			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'TOTAL_INVENTORY_ON_TRANSIT = @TOTAL_INVENTORY_ON_TRANSIT, ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13); 
		
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for TOTAL_INVENTORY_ON_PURCHASING column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.TOTAL_INVENTORY_ON_PURCHASING IS NULL AND @TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @TOTAL_INVENTORY_ON_PURCHASING_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@TOTAL_INVENTORY_ON_PURCHASING_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('TOTAL_INVENTORY_ON_PURCHASING', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @TOTAL_INVENTORY_ON_PURCHASING has a value and it is different than the old @TOTAL_INVENTORY_ON_PURCHASING_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@TOTAL_INVENTORY_ON_PURCHASING IS NOT NULL AND @TOTAL_INVENTORY_ON_PURCHASING <> @TOTAL_INVENTORY_ON_PURCHASING_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsInventoryOnPurchasingChanged = 1; ' + CHAR(13);
			
		IF (CHARINDEX('TOTAL_INVENTORY_ON_PURCHASING', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.TOTAL_INVENTORY_ON_PURCHASING <> @TOTAL_INVENTORY_ON_PURCHASING) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @TOTAL_INVENTORY_ON_PURCHASING = (SELECT BUFFER.TOTAL_INVENTORY_ON_PURCHASING ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);

			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'TOTAL_INVENTORY_ON_PURCHASING = @TOTAL_INVENTORY_ON_PURCHASING, ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for TOTAL_INVENTORY_ON_PRODUCTION column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.TOTAL_INVENTORY_ON_PRODUCTION IS NULL AND @TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @TOTAL_INVENTORY_ON_PRODUCTION_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13) 
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('TOTAL_INVENTORY_ON_PRODUCTION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @TOTAL_INVENTORY_ON_PRODUCTION has a value and it is different than the old @TOTAL_INVENTORY_ON_PRODUCTION_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL AND @TOTAL_INVENTORY_ON_PRODUCTION <> @TOTAL_INVENTORY_ON_PRODUCTION_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsInventoryOnProductionChanged = 1; ' + CHAR(13);
		
		IF (CHARINDEX('TOTAL_INVENTORY_ON_PRODUCTION', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.TOTAL_INVENTORY_ON_PRODUCTION <> @TOTAL_INVENTORY_ON_PRODUCTION) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @TOTAL_INVENTORY_ON_PRODUCTION = (SELECT BUFFER.TOTAL_INVENTORY_ON_PRODUCTION ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);

			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'TOTAL_INVENTORY_ON_PRODUCTION = @TOTAL_INVENTORY_ON_PRODUCTION, ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);

		IF (CHARINDEX('UPDATE_MOVEMENTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ CHAR(13)
				+ '					SET @UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS_OLD; ' + CHAR(13);
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		-- IF ((LEN(@OptionalStructureValidatePendingDemandStr) > 0) AND (CHARINDEX('PENDING_DEMAND', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('PENDING_DEMAND', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for PENDING_DEMAND column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.PENDING_DEMAND = @PENDING_DEMAND_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.PENDING_DEMAND IS NULL AND @PENDING_DEMAND_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and its validations
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @PENDING_DEMAND_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@PENDING_DEMAND_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @PENDING_DEMAND has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @PENDING_DEMAND has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@PENDING_DEMAND IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @PENDING_DEMAND = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('PENDING_DEMAND', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @PENDING_DEMAND = @PENDING_DEMAND_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @PENDING_DEMAND has a value and it is different than the old @PENDING_DEMAND_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@PENDING_DEMAND IS NOT NULL AND @PENDING_DEMAND <> @PENDING_DEMAND_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @PENDING_DEMAND = @PENDING_DEMAND_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsPendingDemandChanged = 1; ' + CHAR(13)
				
		IF (CHARINDEX('PENDING_DEMAND', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.PENDING_DEMAND <> @PENDING_DEMAND) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @PENDING_DEMAND = (SELECT BUFFER.PENDING_DEMAND ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'PENDING_DEMAND = @PENDING_DEMAND, ' + CHAR(13);
		END		
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its
		--				  validations
		-- -----------------------------------------------------------------------------------
		-- IF ((LEN(@OptionalStructureValidateExcludedOutsStr) > 0) AND (CHARINDEX('EXCLUDED_OUTS', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('EXCLUDED_OUTS', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for EXCLUDED_OUTS column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.EXCLUDED_OUTS IS NULL AND @EXCLUDED_OUTS_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and its validations
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @EXCLUDED_OUTS_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@EXCLUDED_OUTS_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @EXCLUDED_OUTS has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @EXCLUDED_OUTS has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@EXCLUDED_OUTS IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @EXCLUDED_OUTS = 0; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('EXCLUDED_OUTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @EXCLUDED_OUTS has a value and it is different than the old @EXCLUDED_OUTS_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@EXCLUDED_OUTS IS NOT NULL AND @EXCLUDED_OUTS <> @EXCLUDED_OUTS_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @EXCLUDED_OUTS = @EXCLUDED_OUTS_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @IsExcludedOutsChanged = 1; ' + CHAR(13)

		IF (CHARINDEX('EXCLUDED_OUTS', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.EXCLUDED_OUTS <> @EXCLUDED_OUTS) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @EXCLUDED_OUTS = (SELECT BUFFER.EXCLUDED_OUTS ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13);
				
			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'EXCLUDED_OUTS = @EXCLUDED_OUTS, ' + CHAR(13);
		END			
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '				END ' + CHAR(13);
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority 
		--				  and its validations
		-- -----------------------------------------------------------------------------------
		-- IF ((LEN(@OptionalStructureValidateReplenishmentPriorityStr) > 0) AND (CHARINDEX('REPLENISHMENT_PRIORITY', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('REPLENISHMENT_PRIORITY', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for REPLENISHMENT_PRIORITY column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.REPLENISHMENT_PRIORITY IS NULL AND @REPLENISHMENT_PRIORITY_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170920: Since v4.8.0 add field Replenishment Priority and its validations
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @REPLENISHMENT_PRIORITY_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@REPLENISHMENT_PRIORITY_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @REPLENISHMENT_PRIORITY has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @REPLENISHMENT_PRIORITY has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@REPLENISHMENT_PRIORITY IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @REPLENISHMENT_PRIORITY = 1; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('REPLENISHMENT_PRIORITY', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @REPLENISHMENT_PRIORITY has a value and it is different than the old @REPLENISHMENT_PRIORITY_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@REPLENISHMENT_PRIORITY IS NOT NULL AND @REPLENISHMENT_PRIORITY <> @REPLENISHMENT_PRIORITY_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (CHARINDEX('REPLENISHMENT_PRIORITY', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.REPLENISHMENT_PRIORITY <> @REPLENISHMENT_PRIORITY) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @REPLENISHMENT_PRIORITY = (SELECT BUFFER.REPLENISHMENT_PRIORITY ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);

			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'REPLENISHMENT_PRIORITY = @REPLENISHMENT_PRIORITY, ' + CHAR(13);
		END
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency
		--				       and its validations
		-- -----------------------------------------------------------------------------------
		-- IF ((CHARINDEX('REPLENISHMENT_FREQUENCY', @AllColumnsInterfaceTmp) > 0) AND (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllUpgradablesColumns) = 0)
		 -- OR (@ivaCodInterface = 99 AND CHARINDEX('REPLENISHMENT_FREQUENCY', @AllUpgradablesColumns) = 0))
		-- BEGIN
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  	
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for REPLENISHMENT_FREQUENCY column ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.REPLENISHMENT_FREQUENCY IS NULL AND @REPLENISHMENT_FREQUENCY_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; ' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		--  OHLO 20181212: Since v4.10.0, add field Replenishment Frequency and SBC Buffer Size
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '					-- If it is a new record @REPLENISHMENT_FREQUENCY_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@REPLENISHMENT_FREQUENCY_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If new @REPLENISHMENT_FREQUENCY has a value, then mark it as "changed" ' + CHAR(13)
			+ '						SET @HasRulesChanges = 1; ' + CHAR(13)
			+ CHAR(13)
			+ '						-- If new @REPLENISHMENT_FREQUENCY has not a value, then set it with its default value ' + CHAR(13)
			+ '						IF (@REPLENISHMENT_FREQUENCY IS NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @REPLENISHMENT_FREQUENCY = 1; -- default ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13) 
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);

		IF (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						SET @REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '						-- If the new @REPLENISHMENT_FREQUENCY has a value and it is different than the old @REPLENISHMENT_FREQUENCY_OLD, then mark it as "changed" ' + CHAR(13)
				+ '						IF (@REPLENISHMENT_FREQUENCY IS NOT NULL AND @REPLENISHMENT_FREQUENCY <> @REPLENISHMENT_FREQUENCY_OLD) ' + CHAR(13)
				+ '						BEGIN ' + CHAR(13)
				+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
				+ '						END ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13) 
			+ '					SET @REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);
				
		IF (CHARINDEX('REPLENISHMENT_FREQUENCY', @AllUpgradablesColumns) = 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				ELSE IF (@HasRulesChanges = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					-- OHLO 20200705: Since v5.1.0, get the value from the automation rule.    ' + CHAR(13)
				+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
				+ '					IF EXISTS (SELECT 1 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '								WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '								  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '								  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate ' + CHAR(13)
				+ '								  AND BUFFER.REPLENISHMENT_FREQUENCY <> @REPLENISHMENT_FREQUENCY) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @REPLENISHMENT_FREQUENCY = (SELECT BUFFER.REPLENISHMENT_FREQUENCY ' + CHAR(13)
				+ '									 FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
				+ '									WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
				+ '									  AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
				+ '									  AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13);

			IF (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') 
			BEGIN
				SET @AllUpgradablesColumns = @AllUpgradablesColumns + '							   ';
			END			
			SET @AllUpgradablesColumns = @AllUpgradablesColumns  + 'REPLENISHMENT_FREQUENCY = @REPLENISHMENT_FREQUENCY, ' + CHAR(13);
		END
		
		-- -----------------------------------------------------------------------------------
		--  OHLO 20191021: Since v4.13.0, add custom columns setting values
		-- -----------------------------------------------------------------------------------
		DECLARE @RulesForCF NVARCHAR(MAX) = '';
		DECLARE @RulesForCFEnd NVARCHAR(MAX) = '';

		-- a) "Checking for Rules" start syntax
		SET @RulesForCF  = ''
			+ '				-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- Setting the proper value for CUSTOM_FIELD column' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @HasRulesChanges = (SELECT CASE WHEN ((BUFFER.CUSTOM_FIELD = @CUSTOM_FIELD_OLD)  ' + CHAR(13)
			+ '													  OR (BUFFER.CUSTOM_FIELD IS NULL AND @CUSTOM_FIELD_OLD IS NULL))  ' + CHAR(13)
			+ '													THEN 0 ELSE 1 END ' + CHAR(13)
			+ '										  FROM TempUpdRulesTbl BUFFER  ' + CHAR(13)
			+ '										 WHERE BUFFER.SKU      = @SKU ' + CHAR(13)
			+ '										   AND BUFFER.LOCATION = @LOCATION ' + CHAR(13)
			+ '										   AND BUFFER.UPDATE_MOVEMENTS = @ivaTempLoadDate); ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @HasRulesChanges = 0; '  + CHAR(13)			
			+ '					-- If it is a new record @CUSTOM_FIELD_OLD must be NULL  ' + CHAR(13)
			+ '					IF (@CUSTOM_FIELD_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						-- If the new @CUSTOM_FIELD has a value, then mark it as "changed" ' + CHAR(13)
			+ '						IF (@CUSTOM_FIELD IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @HasRulesChanges = 1; ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13);
			
		-- b) "Checking for Rules" ending syntax
		SET @RulesForCFEnd = ''
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@HasRulesChanges = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @CUSTOM_FIELD = @CUSTOM_FIELD_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13);

		-- c) "Checking for Rules" add Principal non-upgradable Columns syntax
		SET @SPMasterLoad = @SPMasterLoad
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N' '
						   + ' ' + CHAR(13)
						   + ' ' + REPLACE(@RulesForCF, 'CUSTOM_FIELD', TBL.CDCOLUMN)
						   + (CASE WHEN (CHARINDEX(TBL.CDCOLUMN, @AllUpgradablesColumns) = 0) THEN
								 '						SET @' + TBL.CDCOLUMN + ' = @' + TBL.CDCOLUMN + '_OLD; ' + CHAR(13)
							 ELSE 
							   '						-- If the new @' + TBL.CDCOLUMN + ' has a value and it is different than the old @' + TBL.CDCOLUMN + '_OLD, then mark it as "changed" ' + CHAR(13)
							 + '						IF (@' + TBL.CDCOLUMN + ' IS NOT NULL AND @' + TBL.CDCOLUMN + ' <> @' + TBL.CDCOLUMN + '_OLD) ' + CHAR(13)
							 + '						BEGIN ' + CHAR(13)
							 + '							SET @HasRulesChanges = 1; ' + CHAR(13)
							 + '						END ' + CHAR(13)
							 END)
							+ ' ' + REPLACE(@RulesForCFEnd, 'CUSTOM_FIELD', TBL.CDCOLUMN)							
							--+ ' ' + CHAR(13)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE 
							  AND B.IS_UPGRADEABLE = 'N')
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1,1, N'')), '');
 
		 -- d) "Checking for Rules" add Principal upgradable Columns syntax
		SET @SPMasterLoad = @SPMasterLoad
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N' '
						   + ' ' + CHAR(13)
						   + ' ' + REPLACE(@RulesForCF, 'CUSTOM_FIELD', TBL.CDCOLUMN)
						   --+ '						SET @' + TBL.CDCOLUMN + ' = @' + TBL.CDCOLUMN + '_OLD; ' + CHAR(13)
						   + '						-- If the new @' + TBL.CDCOLUMN + ' has a value and it is different than the old @' + TBL.CDCOLUMN + '_OLD, then mark it as "changed" ' + CHAR(13)
						   + '						IF (@' + TBL.CDCOLUMN + ' IS NOT NULL AND @' + TBL.CDCOLUMN + ' <> @' + TBL.CDCOLUMN + '_OLD) ' + CHAR(13)
						   + '						BEGIN ' + CHAR(13)
						   + '							SET @HasRulesChanges = 1; ' + CHAR(13)
						   + '						END ' + CHAR(13)
						   + ' ' + REPLACE(@RulesForCFEnd, 'CUSTOM_FIELD', TBL.CDCOLUMN) 
						   --+ CHAR(13)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
						FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
						  ON A.CDINTERFACE = @interfaceForCustom
						 AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
						 AND A.CDINTERFACE = B.CDINTERFACE 
						 AND B.IS_UPGRADEABLE = 'Y')
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1,1, N'')), '');
				
		-- 	a) "Checking for Rules" add OLD not-included Columns syntax
		SET @SPMasterLoad = @SPMasterLoad
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N' ' 
						   + ' ' + CHAR(13)
						   + ' ' + REPLACE(@RulesForCF, 'CUSTOM_FIELD', TBL.CDCOLUMN) 
						   + '						SET @' + TBL.CDCOLUMN + ' = @' + TBL.CDCOLUMN + '_OLD; ' + CHAR(13)
						   + ' ' + REPLACE(@RulesForCFEnd, 'CUSTOM_FIELD', TBL.CDCOLUMN)
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT DISTINCT B.CDFIELD  
							FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							  ON A.CDINTERFACE = @interfaceForCustom
							 AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							 AND A.CDINTERFACE = B.CDINTERFACE)
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1,1, N'')), '');
		-- -----------------------------------------------------------------------------------	

		-- -----------------------------------------------------------------------------------
		--  OHLO 20191021: Since v4.13.0, add custom columns into the update list
		-- -----------------------------------------------------------------------------------
		-- a) add Principal upgradable/non-upgradable Columns update syntax
		SET @AllUpgradablesColumns = @AllUpgradablesColumns  
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N' ' 
						  + (CASE WHEN (CHARINDEX(TBL.CDCOLUMN, @AllUpgradablesColumns) = 0) THEN
								      (CASE WHEN (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') THEN
										      '							   '
										    ELSE 
										      ''
									  END) 		
									+ TBL.CDCOLUMN + ' = @' + TBL.CDCOLUMN + ', ' 
									+ '' + CHAR(13)
								ELSE 
								  ''
							  END) 					    
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE)
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1,1, N'')), '');

		-- b) add Principal not-included Columns update syntax
		SET @AllUpgradablesColumns = @AllUpgradablesColumns  
			+ ISNULL((SELECT STUFF((
				 SELECT DISTINCT N' ' 
						  + (CASE WHEN (CHARINDEX(TBL.CDCOLUMN, @AllUpgradablesColumns) = 0) THEN
								      (CASE WHEN (LTRIM(RTRIM(@AllUpgradablesColumns)) <> 'SET') THEN
										      '							   '
										    ELSE 
										      ''
									  END) 		
									+ TBL.CDCOLUMN + ' = @' + TBL.CDCOLUMN + ', ' 
									+ '' + CHAR(13)
								ELSE 
								  ''
							  END) 					    
				   FROM TFSCM_COM_COL_TABLE  TBL
				  WHERE LEN(TBL.CDCOLUMN) >= 6 AND SUBSTRING(TBL.CDCOLUMN, 0, 7) = 'CF_BF_'
					AND TBL.CDTABLE  IN (SELECT A.CDTABLE FROM TFSCM_DEX_INTERFACES A WHERE A.CDINTERFACE = @interfaceForCustom)
					AND TBL.CDCOLUMN NOT IN 
						  (SELECT DISTINCT B.CDFIELD  
							 FROM TFSCM_DEX_INTERFACES A JOIN TFSCM_DEX_INT_DETAIL B 
							   ON A.CDINTERFACE = @interfaceForCustom
							  AND LEN(B.CDFIELD) >= 6 AND SUBSTRING(B.CDFIELD, 0, 7) = 'CF_BF_'
							  AND A.CDINTERFACE = B.CDINTERFACE)
					ORDER BY 1
				FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1,1, N'')), '');
		-- -----------------------------------------------------------------------------------
				
		--SET @SPMasterLoad = @SPMasterLoad
		--	+ '			END ' + CHAR(13)
		--	+ CHAR(13);

		IF (CHARINDEX('UNIT_PRICE', @AllUpgradablesColumns) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '			SET @UNIT_THROUGHPUT = @UNIT_PRICE - @TVC; ' + CHAR(13);
		END
		ELSE
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '			IF (@UNIT_PRICE_OLD IS NOT NULL) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @UNIT_THROUGHPUT = @UNIT_PRICE - @TVC; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ '			ELSE ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @UNIT_THROUGHPUT = null; ' + CHAR(13)
				+ '			END ' + CHAR(13);
		END

		-- SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				-- + '			SET @UNIT_THROUGHPUT = @UNIT_PRICE - @TVC; ' + CHAR(13);
		
		-- -----------------------------------------------------------------------------------
		-- ENDING FOR SETTING INITIAL VALUES AND BEGINING OF PRE-VALIDATIONS
		-- -----------------------------------------------------------------------------------

		-- -----------------------------------------------------------------------------------
		-- OHLO 20170405: If buffer changes, then log the alert and also expire pending 
		--                suggestions 
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13)  
			+ '			-- -------------------------------------------------------------------------------'+ CHAR(13)
			+ '			-- OHLO 20170405: If buffer changes, then log the alert and also expire pending' + CHAR(13) 
			+ '			--	  		      suggestions ' + CHAR(13) 
			+ '			-- -------------------------------------------------------------------------------'+ CHAR(13)
			+ '			SET @IsBufferChanged = 0; ' + CHAR(13)
			+ '			IF (@BUFFER IS NOT NULL AND @BUFFER_OLD IS NOT NULL AND @BUFFER != @BUFFER_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @IsBufferChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13);
		-- -----------------------------------------------------------------------------------
 
		/*
		-- -----------------------------------------------------------------------------------
		-- OHLO 20191206: Since 4.14.0, this part is removed because this validations are 
		--                made during the "default values" section
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190613: Since v4.13.0, in order to recalculate buffers related OC and 
		--                     OP priorities, check if columns involved in the calculation
		--                     have changed. 
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad
			+ CHAR(13) 
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13) 
			+ '			-- OHLO 20190613: Since v4.13.0, in order to recalculate buffers related OC ' + CHAR(13) 
			+ '			--                     and OP priorities, check if columns involved in the  ' + CHAR(13)
			+ '			--					   calculation have changed. ' + CHAR(13) 
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13) 
			+ '			SET @HasSecurityStockChanged = 0;' + CHAR(13)
			+ '			IF (@SECURITY_STOCK IS NOT NULL AND @SECURITY_STOCK_OLD IS NOT NULL AND @SECURITY_STOCK != @SECURITY_STOCK_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @HasSecurityStockChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13)
			+ CHAR(13)  			
			+ '			SET @HasInventoryOnSiteChanged = 0;' + CHAR(13)
			+ '			IF (@TOTAL_INVENTORY_ON_SITE IS NOT NULL AND @TOTAL_INVENTORY_ON_SITE_OLD IS NOT NULL AND @TOTAL_INVENTORY_ON_SITE != @TOTAL_INVENTORY_ON_SITE_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @HasInventoryOnSiteChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13)
			+ CHAR(13)  			
			+ '			SET @HasInventoryOnTransitChanged = 0;' + CHAR(13)
			+ '			IF (@TOTAL_INVENTORY_ON_TRANSIT IS NOT NULL AND @TOTAL_INVENTORY_ON_TRANSIT_OLD IS NOT NULL AND @TOTAL_INVENTORY_ON_TRANSIT != @TOTAL_INVENTORY_ON_TRANSIT_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @HasInventoryOnTransitChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13)
			+ CHAR(13)  			
			+ '			SET @HasInventoryOnProductionChanged = 0;' + CHAR(13) -- @ <> @ 
			+ '			IF (@TOTAL_INVENTORY_ON_PRODUCTION IS NOT NULL AND @TOTAL_INVENTORY_ON_PRODUCTION_OLD IS NOT NULL AND @TOTAL_INVENTORY_ON_PRODUCTION != @TOTAL_INVENTORY_ON_PRODUCTION_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @HasInventoryOnProductionChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13)
			+ CHAR(13)  			
			+ '			SET @HasPendingDemandChanged = 0;' + CHAR(13) -- @ <> @
			+ '			IF (@PENDING_DEMAND IS NOT NULL AND @PENDING_DEMAND_OLD IS NOT NULL AND @PENDING_DEMAND != @PENDING_DEMAND_OLD)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @HasPendingDemandChanged = 1; ' + CHAR(13) 
			+ '			END' + CHAR(13)
			+ CHAR(13)  			
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)		
		-- -----------------------------------------------------------------------------------
		*/
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170523: If minimum buffer changes, then log the alert and also expire pending 
		--				  suggestions in which suggested buffer is less than minimum buffer.
		--				  This only apply if Minimum Buffer is part of the interface
		-- -----------------------------------------------------------------------------------
		IF (CHARINDEX('MINIMUM_BUFFER', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ CHAR(13) 
				+ '			/* OHLO 20170523: If minimum buffer changes, then log the alert and also expire' + CHAR(13) 
				+ '				  				   pending suggestions in which suggested buffer is less than'  + CHAR(13)
				+ '				  				   minimum buffer */' + CHAR(13) 
				+ '			SET @IsMinBufferChanged = 0; ' + CHAR(13)
				+ CHAR(13) 
				+ '			SET @IsMinBufferChanged = ' + CHAR(13)
				+ '				(SELECT CASE WHEN ((@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER_OLD IS NOT NULL' + CHAR(13)
				+ '							  AND @MINIMUM_BUFFER != @MINIMUM_BUFFER_OLD) AND (COUNT(1) > 0)) THEN ' + CHAR(13)  
				+ '						   1 ' + CHAR(13) 
				+ '					   ELSE '  + CHAR(13)
				+ '						   0 ' + CHAR(13)
				+ '					   END '   + CHAR(13)
				+ '				   FROM TFSCM_CLI_BUFFER B ' + CHAR(13)
				+ '				  WHERE B.ADJUSTMENT_ACTION = @AdjustmentActionAnalyze' + CHAR(13)
				+ '				    AND B.SKU               = @SKU' + CHAR(13)
				+ '				    AND B.LOCATION          = @LOCATION' + CHAR(13)
				+ '				    AND B.SUGGESTED_BUFFER  < @MINIMUM_BUFFER);' + CHAR(13)
				+ CHAR(13)				
				+ '			--IF (@MINIMUM_BUFFER IS NOT NULL AND @MINIMUM_BUFFER_OLD IS NOT NULL ' + CHAR(13) 
				+ '			--AND @MINIMUM_BUFFER != @MINIMUM_BUFFER_OLD)' + CHAR(13) 
				+ '			--BEGIN' + CHAR(13)
				+ '			--	SET @IsMinBufferChanged = 1; ' + CHAR(13) 
				+ '			--END' + CHAR(13);
		END 
		-------------------------------------------------------------	
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20201026: Since v5.2.1, move the code for changing UPDATE_MOVEMENTS column. ' + CHAR(13)
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13) 
			+ '			-- OHLO 20191212: Since v4.14.0, UPDATE_MOVEMENTS date column is modified, only ' + CHAR(13)
			+ '			--				  when at least one of movements columns has changes. If it is a ' + CHAR(13)
			+ '			--  			  DataExchange process, assummed it as changed. ' + CHAR(13)
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			SET @AreMovementsColumnsChanged = 1; ' + CHAR(13);
				
		IF (@ivaCodInterface = 99)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '			SET @UPDATE_MOVEMENTS = @DATE_SERVER_NO_TIME; ' + CHAR(13)
				+ CHAR(13)
				+ '			IF ((@SKU_OLD IS NOT NULL) ' + CHAR(13)
				+ '			AND (@IsConsolidatedReplenishmentChanged = 0) ' + CHAR(13)
				+ '			AND (@IsPositiveAdjustmentsChanged       = 0) ' + CHAR(13)
				+ '			AND (@IsConsumptionChanged               = 0) ' + CHAR(13)
				+ '			AND (@IsNegativeAdjustmentsChanged       = 0) ' + CHAR(13)
				+ '			AND (@IsExcludedOutsChanged              = 0) ' + CHAR(13)
				+ '			AND (@IsInventoryOnSiteChanged           = 0) ' + CHAR(13)
				+ '			AND (@IsInventoryOnTransitChanged        = 0) ' + CHAR(13)
				+ '			AND (@IsInventoryOnProductionChanged     = 0) ' + CHAR(13)
				+ '			AND (@IsInventoryOnPurchasingChanged     = 0) ' + CHAR(13)
				+ '			AND (@IsPendingDemandChanged             = 0))' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @AreMovementsColumnsChanged = 0; ' + CHAR(13)
				+ '			END ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			IF (@AreMovementsColumnsChanged = 0) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS_OLD; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			-- OHLO 20201019: Since v5.2.1, fix the Previous Inventory on Site calculation. ' + CHAR(13)
			+ '			-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			IF (@SKU_OLD IS NOT NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @LAST_TOTAL_INVENTORY_ON_SITE = (CASE WHEN @UPDATE_MOVEMENTS_OLD < @UPDATE_MOVEMENTS THEN ' + CHAR(13)
			+ '													 	@TOTAL_INVENTORY_ON_SITE_OLD ' + CHAR(13)
			+ '													 ELSE ' + CHAR(13)
			+ '													 	@LAST_TOTAL_INVENTORY_ON_SITE_OLD ' + CHAR(13)
			+ '													 END); ' + CHAR(13)
			+ '			END ' + CHAR(13);
		-- -----------------------------------------------------------------------------------
		
		--VALIDATIONS:
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			SET @PassesValidations = 1 '+ CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @LOCATION IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0; ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND OUTPUT; ' + CHAR(13)
			+ CHAR(13)							
			-- '				SELECT @LOCATION = LOCATION FROM TFSCM_CLI_BUFFER_TEMP WHERE ID = @ID ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU, @LOCATION_TEMP,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @LOCATION_TEMP, 105), @FILE_ROW_NUMBER, ''LOCATION'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_NOT_FOUND+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13);

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20201119: Since v5.3.0, avoid this validation if it''s a reactivation. ' + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			IF ((@PassesValidations != 0 AND @ivaIsDataExchangeForScreen = 1 AND @IS_CREATION = 1) ' + CHAR(13)
			+ '			AND (@INACTIVE_OLD IS NOT NULL AND @INACTIVE_OLD = 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    NULL, @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ ' 			--IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				--BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_TO_CREATE_EXIST+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				--END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@SKU IS NULL OR LTRIM(RTRIM(replace(@SKU, '' '', ''''))) = ''''))' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR OUTPUT;' + CHAR(13)							 							
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_SKU_NULL_ERROR+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)							
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@LOCATION_TYPE IS NULL OR (@LOCATION_TYPE != ''WH'' AND @LOCATION_TYPE != ''CL'' AND @LOCATION_TYPE != ''PS''))) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @LOCATION, 105), @FILE_ROW_NUMBER, ''LOCATION'', @FILE_NAME, @UPDATE_MOVEMENTS); ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_LOCATION_TYPE_INVALID+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @CDBUFFER_FAMILY_DB IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0; ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_FAMILY_NOT_FOUND'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND OUTPUT; ' + CHAR(13)
			+ CHAR(13)							
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @FAMILY, 105), @FILE_ROW_NUMBER, ''FAMILY'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1; ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_FAMILY_NOT_FOUND+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @CDLOCATION_ORIGIN_DB IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND OUTPUT;' + CHAR(13)	
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, ''ORIGIN_LOCATION'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_NOT_FOUND+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			-- ------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20180110: Since v4.8.1 Origin location should not be equal to   ' + CHAR(13)
			+ '			--				  location ' + CHAR(13)
			+ '			-- ------------------------------------------------------------------------' + CHAR(13)	
			+ '			IF (@PassesValidations!=0 AND @ORIGIN_LOCATION = @LOCATION) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR OUTPUT;' + CHAR(13)	
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @ORIGIN_LOCATION, 105), @FILE_ROW_NUMBER, ''ORIGIN_LOCATION'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_ORIGIN_LOCATION_EQUALS_LOCATION_ERROR+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @CDCALENDAR IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @CDCALENDAR, 105), @FILE_ROW_NUMBER, ''CDCALENDAR'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_CDCALENDAR_NOT_FOUND+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ @OptionalStructureValidateCDUNITStr
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@REPLENISHMENT_TIME IS NULL OR @REPLENISHMENT_TIME <= 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0 OUTPUT;' + CHAR(13)	
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @REPLENISHMENT_TIME' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REPLENISHMENT_TIME_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REPLENISHMENT_TIME'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_REPLENISHMENT_TIME_LE_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@BUFFER IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER) < 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_BUFFER_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0 OUTPUT;' + CHAR(13)	
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @BUFFER' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'BUFFER_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''BUFFER'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ @OptionalStructureValidateMINIMUM_BUFFERStr
			+ CHAR(13)
			+ @OptionalStructureValidateSECURITY_STOCKStr
			+ CHAR(13)
			+ @OptionalStructureValidatePACKAGING_UNITStr
			+ CHAR(13)
			+ @OptionalStructureValidateMINIMUM_REPLENISHMENTStr
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @REPLENISHMENT_ROUNDING_MODE = ''MS'' AND ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)) > (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)) + (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK))))' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR'', @Language, '''', '''', '''', @MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR OUTPUT;' + CHAR(13)
			+ CHAR(13)							
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @MINIMUM_REPLENISHMENT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'MINIMUM_REPLENISHMENT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''MINIMUM_REPLENISHMENT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DEX_BUFFERS_MINIMUM_REPLENISHMENT_GT_BUF_AND_SECUR+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ @OptionalStructureValidateUNIT_PRICEStr
			+ CHAR(13)
			+ @OptionalStructureValidateTVCStr
			+ CHAR(13)
			+ @OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr
			+ CHAR(13)
			+ @OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr
			+ CHAR(13)
			+ @OptionalStructureValidateCONSUMPTIONStr
			+ CHAR(13)
			+ @OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr
			-- ---------------------------------------------------------------
			-- OHLO 20170623: Since v4.7.0 add the field Pending Demand and 
			--				  its validations
			-- ---------------------------------------------------------------
			+ CHAR(13)
			+ @OptionalStructureValidatePendingDemandStr
			-- ---------------------------------------------------------------
			-- OHLO 20180223: Since v4.8.3 add the field Excluded Outs and 
			--				  its validations
			-- ---------------------------------------------------------------
			+ CHAR(13)
			+ @OptionalStructureValidateExcludedOutsStr
			-- ---------------------------------------------------------------
			-- OHLO 20170920: Since v4.8.0 add the field Replenishment Priority  
			--				  and its validations
			-- ---------------------------------------------------------------
			+ CHAR(13)
			+ @OptionalStructureValidateReplenishmentPriorityStr
			-- ---------------------------------------------------------------
			--  OHLO 20181212: Since v4.10.0 add the field Replenishment Frequency  
			--				  and its validations
			-- ---------------------------------------------------------------
			+ CHAR(13)
			+ @OptionalStructureValidateReplenishmentFrequencyStr			
			-- ---------------------------------------------------------------
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_SITE IS NULL OR dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) < 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_INVENTORY_ON_SITE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TOTAL_INVENTORY_ON_SITE'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			-- OHLO 20201019: Since v5.2.1, fix Previous Inventory on Site calculation. ' + CHAR(13)
			+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @LAST_TOTAL_INVENTORY_ON_SITE IS NOT NULL) ' + CHAR(13) 
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @TempTOTAL_INVENTORY_ON_SITE = (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE)) ';
			
		--IF (LEN(@OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr) > 0)
		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '                                                 '
				+ '+ (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)) ';
		END
		--IF (LEN(@OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr) > 0)
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad+ CHAR(13)
				+ '                                                 '
				+ '+ (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS)) ';
		END
		--IF (LEN(@OptionalStructureValidateCONSUMPTIONStr) > 0)
		IF (CHARINDEX('CONSUMPTION', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad+ CHAR(13)
				+ '                                                 '
				+ '- (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)) ';
		END
		--IF (LEN(@OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr) > 0)
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '                                                 '
				+ '- (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS)) ';
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20180302: Since v4.8.3, add Excluded Outs to the calculation
		-- -----------------------------------------------------------------------------------
 		--IF (LEN(@OptionalStructureValidateExcludedOutsStr) > 0)
		IF (CHARINDEX('EXCLUDED_OUTS', @AllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '                                                 '
				+ '/* OHLO 20180302: Since v4.8.3, add Excluded Outs to the calculation */' + CHAR(13) 
				+ '                                                 '
				+ '- (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@EXCLUDED_OUTS)) ';
		END
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)							
			+ '				IF ((dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TempTOTAL_INVENTORY_ON_SITE)) != (dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE))) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					--SET @PassesValidations = 0;' + CHAR(13)
			+ '					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '						''DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF, NULL, ''A'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '						   CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_SITE' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_INVENTORY_ON_SITE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TOTAL_INVENTORY_ON_SITE'', @FILE_NAME, @UPDATE_MOVEMENTS)' + CHAR(13)
			+ CHAR(13)
			+ '					--SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '					--SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>A</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_TOTAL_INVENTORY_ON_SITE_DIFF+''</td></tr>''; ' + CHAR(13)
			+ '						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '						VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_TRANSIT IS NULL OR @TOTAL_INVENTORY_ON_TRANSIT < 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_TRANSIT' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_INVENTORY_ON_TRANSIT_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TOTAL_INVENTORY_ON_TRANSIT'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFF_TOTAL_INVENTORY_ON_TRANSIT_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PURCHASING IS NULL OR @TOTAL_INVENTORY_ON_PURCHASING < 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PURCHASING' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_INVENTORY_ON_PURCHASING_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TOTAL_INVENTORY_ON_PURCHASING'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PURCHASING_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@TOTAL_INVENTORY_ON_PRODUCTION IS NULL OR @TOTAL_INVENTORY_ON_PRODUCTION < 0)) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PassesValidations = 0;' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0 OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @TOTAL_INVENTORY_ON_PRODUCTION' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_INVENTORY_ON_PRODUCTION_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''TOTAL_INVENTORY_ON_PRODUCTION'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_B_TOTAL_INVENTORY_ON_PRODUCTION_LT_0+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND (@UPDATE_MOVEMENTS IS NULL OR @UPDATE_MOVEMENTS > @DATE_SERVER_NO_TIME)) ' + CHAR(13)
			+ '			BEGIN   ' + CHAR(13)
			+ '				SET @PassesValidations = 0; ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13) 
			+ '					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_MOVEMENTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_MOVEMENTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_UPDATE_MOVEMENTS_GT_NOW+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) ' + CHAR(13)
			+ '			BEGIN   ' + CHAR(13)
			+ '				SET @PassesValidations = 0; ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST'', @Language, '''', '''', '''', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_MOVEMENTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_MOVEMENTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LT_VALUE_LAST+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by Update ' + CHAR(13)
			+ '			--                     Movements column  ' + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			IF (@PassesValidations!=0 AND @UPDATE_MOVEMENTS_OLD IS NOT NULL AND @UPDATE_MOVEMENTS < @UPDATE_MOVEMENTS_OLD) ' + CHAR(13)
			+ '			BEGIN   ' + CHAR(13)
			+ '				SET @PassesValidations = 0; ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '					''DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE'', @Language, '''', '''', '''', @MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    CONVERT(VARCHAR, @UPDATE_MOVEMENTS' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_MOVEMENTS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_MOVEMENTS'', @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1   ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DEX_BUFFER_UPDATE_MOVEMENTS_LESS_THAN_PREVIOUS_ONE+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ @RemoveBufferWithError
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@PassesValidations = 1) ' + CHAR(13)
			+ '			BEGIN '+ CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				SET @BUFFER = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER)' + CHAR(13)
			+ '				SET @TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_SITE) ' + CHAR(13)
			+ '				SET @TOTAL_INVENTORY_ON_TRANSIT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_TRANSIT)  ' + CHAR(13)
			+ '				SET @TOTAL_INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PURCHASING)' + CHAR(13)
			+ '				SET @TOTAL_INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@TOTAL_INVENTORY_ON_PRODUCTION) ' + CHAR(13)
			+ '				SET @LAST_TOTAL_INVENTORY_ON_SITE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@LAST_TOTAL_INVENTORY_ON_SITE) ' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- OHLO 20191206: Since v4.14.0, SBC Buffer Size updating, only occurs when buffer is
		--                actually changed     
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190214: Since v4.11.0, fix SBC Buffer Size updating
		-- -----------------------------------------------------------------------------------
		-- OHLO 20181212: Since v4.10.0 add the field SBC Buffer Size
		-- -----------------------------------------------------------------------------------
		IF (PATINDEX('%[^_]BUFFER[^_]%', @AllUpgradablesColumns) > 0)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
												   
				+ '				SET @SBC_BUFFER_SIZE = NULL; ' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@IsBufferChanged = 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); ' + CHAR(13)
				+ '				END ' + CHAR(13);
		END
		ELSE 
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '				SET @SBC_BUFFER_SIZE = @SBC_BUFFER_SIZE_OLD; ' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
				+ '				IF (@SBC_BUFFER_SIZE IS NULL) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					IF (@SBC_BUFFER_SIZE_OLD IS NULL) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @SBC_BUFFER_SIZE = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@BUFFER); '+ CHAR(13)
				+ '					END ' + CHAR(13)
				+ '					ELSE ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @SBC_BUFFER_SIZE = @SBC_BUFFER_SIZE_OLD; '+ CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ CHAR(13);
				
		--IF (LEN(@OptionalStructureValidateSECURITY_STOCKStr) > 0)
		IF (CHARINDEX('SECURITY_STOCK', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @SECURITY_STOCK = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@SECURITY_STOCK) ' + CHAR(13);
		END
		
		--IF (LEN(@OptionalStructureValidateMINIMUM_REPLENISHMENTStr) > 0)
		IF (CHARINDEX('MINIMUM_REPLENISHMENT', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @MINIMUM_REPLENISHMENT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@MINIMUM_REPLENISHMENT)' + CHAR(13);
		END
		
		--IF (LEN(@OptionalStructureValidatePACKAGING_UNITStr) > 0)
		IF (CHARINDEX('PACKAGING_UNIT', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @PACKAGING_UNIT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PACKAGING_UNIT)' + CHAR(13);
		END							
		
		--IF (LEN(@OptionalStructureValidateCONSOLIDATED_REPLENISHMENTStr) > 0)
		IF (CHARINDEX('CONSOLIDATED_REPLENISHMENT', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad  
				+ '				SET @CONSOLIDATED_REPLENISHMENT = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSOLIDATED_REPLENISHMENT)' + CHAR(13);
		END
		
		--IF (LEN(@OptionalStructureValidatePOSITIVE_ADJUSTMENTSStr) > 0)
		IF (CHARINDEX('POSITIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @POSITIVE_ADJUSTMENTS = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@POSITIVE_ADJUSTMENTS)' + CHAR(13);
		END
		
		--IF (LEN(@OptionalStructureValidateCONSUMPTIONStr) > 0)
		IF (CHARINDEX('CONSUMPTION', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @CONSUMPTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@CONSUMPTION)' + CHAR(13);
		END
		
		--IF (LEN(@OptionalStructureValidateNEGATIVE_ADJUSTMENTSStr) > 0)
		IF (CHARINDEX('NEGATIVE_ADJUSTMENTS', @AllColumnsInterfaceTmp) > 0)
		BEGIN 
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @NEGATIVE_ADJUSTMENTS = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@NEGATIVE_ADJUSTMENTS)' + CHAR(13);
		END
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				IF (@REPLENISHMENT_ROUNDING_MODE = ''MS'') ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @ALLOWED_OVERSTOCKING = 0 ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE IF (@REPLENISHMENT_ROUNDING_MODE = ''MA'') ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @ALLOWED_OVERSTOCKING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @MINIMUM_REPLENISHMENT) ' + CHAR(13) 
			+ '											  - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @FORMULA_INVENTORY_ACCURACY) ' + CHAR(13) 
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @ALLOWED_OVERSTOCKING = 0 ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- OHLO 20170623: Since v4.7.0, the Pending demand is added to the Allowed    ' + CHAR(13)
			+ '				--                Overstocking ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				SET @ALLOWED_OVERSTOCKING = @ALLOWED_OVERSTOCKING ' + CHAR(13) 
			+ '					+ dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND) ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @EFFECTIVE_BUFFER        = dbo.GET_CALCULATE_BUFFER_EFFECTIVE_BUFFER(@INVENTORY_ACCURACY, @BUFFER, @SECURITY_STOCK, @ALLOWED_OVERSTOCKING)' + CHAR(13)
			+ '				SET @INVENTORY_ON_SITE       = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_SITE)' + CHAR(13)
			+ '				SET @INVENTORY_ON_TRANSIT    = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_TRANSIT)' + CHAR(13)
			+ '				SET @INVENTORY_ON_PURCHASING = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PURCHASING)' + CHAR(13)
			+ '				SET @INVENTORY_ON_PRODUCTION = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @TOTAL_INVENTORY_ON_PRODUCTION)' + CHAR(13)
			+ '				SET @INVENTORY_ON_CHAIN      = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_TRANSIT) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PURCHASING) + dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@INVENTORY_ON_PRODUCTION) ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- JEBE 20200824: Since v5.2.0, Net Inventory formula is modified ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- OHLO 20170623: Since v4.7.0, Calculate the Net Inventori   ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				SET @NET_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_CHAIN) ' + CHAR(13)
			+ '				                   - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND); ' + CHAR(13)
			+ '				SET @SITE_PRIORITY       = dbo.GET_CALCULATE_BUFFER_SITE_PRIORITY(@BUFFER, @SECURITY_STOCK, @INVENTORY_ON_SITE);' + CHAR(13)											
			+ '				SET @SITE_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@SITE_PRIORITY, @INVENTORY_ON_SITE, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @NET_PRIORITY       = dbo.GET_CALCULATE_BUFFER_NET_PRIORITY(@BUFFER, @SECURITY_STOCK, @NET_INVENTORY);' + CHAR(13)
			+ '				SET @NET_PRIORITY_COLOR = dbo.BUFFER_GET_CALCULATE_PRIORITY_COLOR(@NET_PRIORITY, @INVENTORY_ON_CHAIN, @EFFECTIVE_BUFFER, @YELLOW_ZONE_START, @RED_ZONE_START); ' + CHAR(13);

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- OHLO 20200820: Since v5.2.0, add Available Inventory calculated column ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				SET @AVAILABLE_INVENTORY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @INVENTORY_ON_SITE) ' + CHAR(13)
			+ '				                   		 - dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY, @PENDING_DEMAND);' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- JEBE 20201109: Since v5.3.0, add Origin Inventory On Site, Origin Net Inventory, and Origin Buffer Family calculated columns ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				/*SET @ORIGIN_INVENTORY_ON_SITE = ORIGIN_INVENTORY_ON_SITE;' + CHAR(13)
			+ '				SET @ORIGIN_NET_INVENTORY = SELECT NET_INVENTORY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;' + CHAR(13)
			+ '				SET @ORIGIN_BUFFER_FAMILY = SELECT FAMILY FROM dbo.TFSCM_CLI_BUFFER AS a WHERE a.SKU = SKU AND a.LOCATION = ORIGIN_LOCATION;*/' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ CHAR(13)			
			
		
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				SET @TOTAL_CONSOLIDATED_INPUTS = 0; ' + CHAR(13)
			+ CHAR(13)			
			-- ---------------------------------------------------------------
			-- OHLO 20170112: Set Replenishment Problem value according to 
			--                Site Priority Color changes 
			-- ---------------------------------------------------------------
			-- BEFORE:
			-- '				IF (@SITE_PRIORITY_COLOR != ''Blue'' AND @SITE_PRIORITY_COLOR != ''Red'' AND @SITE_PRIORITY_COLOR != ''Black'')' + CHAR(13)
			-- '				BEGIN ' + CHAR(13)
			-- '					SET @REPLENISHMENT_PROBLEM = @CD_NONE_CAUSE' + CHAR(13)
			-- '				END' + CHAR(13)		
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- OHLO 20170112: Restart value for Replenishment Problem ' + CHAR(13)
			+ '				-- 				  If Site Priority Color is neither anymore blue, nor red,    ' + CHAR(13)
			+ '				-- 				  nor black, it is because the problem already passed and     ' + CHAR(13)
			+ '				-- 				  the field is restarted to its default value.                ' + CHAR(13)
			+ '				-- 				                                                              ' + CHAR(13) 
			+ '				-- 				  Or if the color changes from ''Blue'' to ''Red''/''Black''  ' + CHAR(13)
			+ '				-- 				  or vice versa.											  ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				SET @RESTART = dbo.FN_GET_RESTART_REPLENISHMENT_PROBLEM_VALUE(@SITE_PRIORITY_COLOR_OLD, ' + CHAR(13)
			+ '																			  @SITE_PRIORITY_COLOR); ' + CHAR(13)
			+ '				IF (@RESTART = ''Y'') ' + CHAR(13)
			+ '				BEGIN  ' + CHAR(13)
			+ '					SET @REPLENISHMENT_PROBLEM = @CD_NONE_CAUSE; ' + CHAR(13)
			+ '				END  ' + CHAR(13)
            + CHAR(13)
			+ '				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @LAST_COLOR_CHANGE_DATE = NULL ' + CHAR(13)
			+ '					SET @MANAGED = 1 ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @LAST_COLOR_CHANGE_DATE = dbo.BUFFER_GET_CALCULATE_LAST_COLOR_CHANGE_DATE(@LAST_COLOR_CHANGE_DATE_OLD,@SITE_PRIORITY_COLOR_OLD,@SITE_PRIORITY_COLOR, @UPDATE_MOVEMENTS) ' + CHAR(13)
			+ '					SET @MANAGED = dbo.BUFFER_GET_CALCULATE_MANAGED(@SITE_PRIORITY_COLOR_OLD, @SITE_PRIORITY_COLOR) ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @CDGROUP = dbo.BUFFER_GET_CDGROUP() ' + CHAR(13)
			+ CHAR(13)
			+ '  			-- Computed columns 2.2.1' + CHAR(13)
			+ '				IF (@SKU_OLD IS NULL)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
			+ '					-- OHLO 20200409: Since v5.0.0, set the first value for Worst Inventory on ' + CHAR(13)
			+ '					--                site with the current Inventory on Site value            ' + CHAR(13)
			+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
			+ '					SET @WORST_INVENTORY_ON_SITE    = @INVENTORY_ON_SITE;' + CHAR(13)
			+ '					SET @LAST_INVENTORY_ON_SITE     = NULL;' + CHAR(13)
			+ '					SET @DAYS_SINCE_LAST_OUT        = NULL;' + CHAR(13)
			+ '					SET @LAST_TOTAL_OUTS_MAX_SUM    = NULL;' + CHAR(13)
			+ '					SET @PROTECTION_FACTOR          = @MIDDLE_PROTECTION_FACTOR;' + CHAR(13)
			+ '					SET @ADJUSTMENT_TYPE            = ''EMPTY'';' + CHAR(13)
			+ '					SET @RT_ADJUSTMENT_TYPE         = ''EMPTY'';' + CHAR(13)
			+ '					SET @SUGGESTED_BUFFER           = NULL;' + CHAR(13)
			+ '					SET @APPROVED_BUFFER            = NULL;' + CHAR(13)
			+ '					SET @ADJUSTMENT_ACTION          = ''IGNORE'';' + CHAR(13)
			+ '					SET @SUGGESTION_DATE            = NULL;' + CHAR(13)
			+ '					SET @SUGGESTION_REJECTION_CAUSE = NULL;' + CHAR(13)
			+ '					SET @SUGGESTION_EXPIRATION_DATE = NULL;' + CHAR(13)
			+ '					SET @SUGGESTION_ALERTS          = NULL;' + CHAR(13) 
			+ CHAR(13)
			+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
			+ '					-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculated  ' + CHAR(13)
			+ '					--                column ' + CHAR(13)
			+ '					-- ----------------------------------------------------------------------- ' + CHAR(13)
			+ '					SET @DAILY_AVERAGE_CONSUMPTION  = NULL;' + CHAR(13)
			+ CHAR(13)
			+ '					IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)' + CHAR(13)
			+ '					BEGIN					' + CHAR(13)
			+ '						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '					ELSE' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @UPDATE_MOVEMENTS);' + CHAR(13)
			+ '					END				' + CHAR(13)
			+ '				END' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@SKU_OLD IS NOT NULL)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD;' + CHAR(13)
			+ '					-- ---------------------------------------------------------------------- ' + CHAR(13)
			+ '					-- It is not possible that the field @REPLENISHMENT_TIME_OLD is null when ' + CHAR(13)
			+ '					-- the field @SKU_OLD is not empty' + CHAR(13)
			+ '					-- ---------------------------------------------------------------------- ' + CHAR(13)
			+ '					IF (@REPLENISHMENT_TIME > @REPLENISHMENT_TIME_OLD)' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						IF (@TIME_BETWEEN_BUFFER_RECALCULATIONS > @REPLENISHMENT_TIME + 6)' + CHAR(13)
			+ '						BEGIN' + CHAR(13)
			+ '							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @TIME_BETWEEN_BUFFER_RECALCULATIONS, @BUFFER_INITIAL_DATE_OLD)' + CHAR(13)
			+ '						END' + CHAR(13)
			+ '						ELSE' + CHAR(13)
			+ '						BEGIN' + CHAR(13)
			+ '							SET @RT_NEXT_BUFFER_ANALYSIS = DATEADD(d, @REPLENISHMENT_TIME + 6 , @BUFFER_INITIAL_DATE_OLD)' + CHAR(13)
													   
			+ '						END' + CHAR(13)	
			+ '						IF (@NEXT_BUFFER_ANALYSIS_OLD > @RT_NEXT_BUFFER_ANALYSIS)' + CHAR(13)
			+ '						BEGIN' + CHAR(13)
			+ '							SET @NEXT_BUFFER_ANALYSIS = @NEXT_BUFFER_ANALYSIS_OLD' + CHAR(13)
			+ '						END' + CHAR(13)
			+ '						ELSE' + CHAR(13)
			+ '						BEGIN' + CHAR(13)
			+ '							SET @NEXT_BUFFER_ANALYSIS = @RT_NEXT_BUFFER_ANALYSIS' + CHAR(13)
			+ '						END' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '				END' + CHAR(13); 
		/*
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				-- -------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- OHLO 20191212: Since v4.14.0, UPDATE_MOVEMENTS date column is modified,  ' + CHAR(13)
			+ '				--				  only when at least one of movements columns has changes ' + CHAR(13)
			+ '				--  			  If it is a DataExchange process, assummed it as changed ' + CHAR(13)
			+ '				-- -------------------------------------------------------------------------- ' + CHAR(13)
			+ '				SET @AreMovementsColumnsChanged = 1; ' + CHAR(13);
				
		IF (@ivaCodInterface = 99)
		BEGIN
			SET @SPMasterLoad = @SPMasterLoad
				+ '				SET @UPDATE_MOVEMENTS = GETDATE(); ' + CHAR(13)
				+ CHAR(13)
				+ '				IF ((@SKU_OLD IS NOT NULL) ' + CHAR(13)
				+ '				AND (@IsConsolidatedReplenishmentChanged = 0) ' + CHAR(13)
				+ '				AND (@IsPositiveAdjustmentsChanged       = 0) ' + CHAR(13)
				+ '				AND (@IsConsumptionChanged               = 0) ' + CHAR(13)
				+ '				AND (@IsNegativeAdjustmentsChanged       = 0) ' + CHAR(13)
				+ '				AND (@IsExcludedOutsChanged              = 0) ' + CHAR(13)
				+ '				AND (@IsInventoryOnSiteChanged           = 0) ' + CHAR(13)
				+ '				AND (@IsInventoryOnTransitChanged        = 0) ' + CHAR(13)
				+ '				AND (@IsInventoryOnProductionChanged     = 0) ' + CHAR(13)
				+ '				AND (@IsInventoryOnPurchasingChanged     = 0) ' + CHAR(13)
				+ '				AND (@IsPendingDemandChanged             = 0))' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @AreMovementsColumnsChanged = 0; ' + CHAR(13)
				+ '				END ' + CHAR(13);
		END

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				IF (@AreMovementsColumnsChanged = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @UPDATE_MOVEMENTS = @UPDATE_MOVEMENTS_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
		*/
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- OHLO 20200419: Since v5.0.0, set new and old Movements Date for later use   ' + CHAR(13)
			+ '				--                in Inputs and Outs Update. ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				INSERT INTO BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS], [UPDATE_MOVEMENTS_OLD]) ' + CHAR(13)
			+ '				VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @UPDATE_MOVEMENTS_OLD); ' + CHAR(13);
			
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				IF (@SKU_OLD IS NULL OR @LOCATION_OLD IS NULL)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					INSERT INTO '+@TableRealName+'('+@AllColumnsInsert+')' + CHAR(13)
			+ '					VALUES('+@AllValuesInsert+')' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE '+	CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------' + CHAR(13)
			+ '					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by ' + CHAR(13)
			+ '					--                     Update Movements column  ' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------' + CHAR(13)
			+ '					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]' + CHAR(13)
			+ '					   SET [REPLENISHMENT_PROBLEM] = @REPLENISHMENT_PROBLEM_OLD' + CHAR(13)
			+ '					 WHERE [SKU]              = @SKU ' + CHAR(13)
			+ '					   AND [LOCATION]         = @LOCATION' + CHAR(13)
			+ '					   AND [UPDATE_MOVEMENTS] = @UPDATE_MOVEMENTS_OLD' + CHAR(13)							
			+ CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen=0) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						UPDATE '+@TableRealName + CHAR(13)
			+ '						'+@AllUpgradablesColumns + CHAR(13) +@AllSetsColumnsAndValuesUpdate + CHAR(13)
			+ '						WHERE '+@CDPKFIELD1+' = @'+@CDPKFIELD1+ ' AND '+@CDPKFIELD2+' = @'+@CDPKFIELD2 + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						UPDATE '+@TableRealName + CHAR(13)
			+ '						'+@AllUpgradablesColumnsDataExchangeForScreen + CHAR(13) +@AllSetsColumnsAndValuesUpdate + CHAR(13)
			+ '						WHERE '+@CDPKFIELD1+' = @'+@CDPKFIELD1+ ' AND '+@CDPKFIELD2+' = @'+@CDPKFIELD2 + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				'+ CHAR(13);
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)							
			+ '				-- If buffer value changes, the buffer related orders priority have to be updated ' + CHAR(13)
			+ '				--IF (@BUFFER <> @BUFFER_OLD)' + CHAR(13)
			+ '				--BEGIN' + CHAR(13)
			/* OHLO 20170405: Alert user and Expire non-managed suggestions */	
			+ '				IF (@IsBufferChanged = 1)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					/* OHLO 20170405: Alert user and Expire non-managed suggestions */	' + CHAR(13)
			+ '					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '						''DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED OUTPUT;' + CHAR(13)
			+  CHAR(13)	
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED, NULL, ''A'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);' 
			+  CHAR(13)
			+ '					/* In order to manage the expired sku-location, add it to the list */' + CHAR(13)
			+ '					IF (@BufferList <> '''')' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @BufferList = @BufferList + @DelimiterForRecords;' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ CHAR(13)						   
			+ '					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; ' + CHAR(13)
			+ CHAR(13)
			+ '					/* Expire any prior non-managed suggestion */' + CHAR(13)
			+ '					UPDATE TFSCM_CLI_BUFFER' + CHAR(13)
			+ '					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,' + CHAR(13)
			+ '						   SUGGESTION_REJECTION_CAUSE = @ExpiredSuggestionCause,' + CHAR(13)
			+ '						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP' + CHAR(13)
			+ '					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze' + CHAR(13)
			+ '					   AND SKU               = @SKU' + CHAR(13)
			+ '					   AND LOCATION          = @LOCATION;' + CHAR(13)
			+ CHAR(13)					
			+ '					/* If it is a dataexchange from Master window */' + CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen = 1)' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>A</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_BUFFER_CHANGED+''</td></tr>''; ' + CHAR(13)
			+ '						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)				
			+ '						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '						VALUES (@AlertNotificationsId, @MessageTableErrors);' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------'+ CHAR(13)
			+ '				END' + CHAR(13)
			+ CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13) 
			+ '				-- OHLO 20190613: Since v4.13.0, if columns involved in the calculation ' + CHAR(13) 
			+ '				-- 					   have changed, then recalculate buffers related OC and ' + CHAR(13) 
			+ '				--                     OP priorities' + CHAR(13) 
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)			
			+ '				IF (@IsBufferChanged = 1 ' + CHAR(13)
			+ '				 OR @IsSecurityStockChanged = 1 ' + CHAR(13)
			+ '				 OR @IsInventoryOnSiteChanged = 1 ' + CHAR(13)
			+ '				 OR @IsInventoryOnTransitChanged = 1 ' + CHAR(13)
			+ '				 OR @IsInventoryOnProductionChanged = 1 ' + CHAR(13)
			+ '				 OR @IsPendingDemandChanged = 1) ' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					DECLARE @recalcPriorityResult  VARCHAR(1);' + CHAR(13)
			+ '					DECLARE @recalcPriorityMessage NVARCHAR(max);' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------' + CHAR(13)
			+ '					-- TODO OHLO 20200319: Since v5.0.0, replace Buffer Update Date column by ' + CHAR(13)
			+ '					--                     Update Movements column  ' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------' + CHAR(13)
			+ '					EXEC USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY @SKU, @LOCATION, @UPDATE_MOVEMENTS,' + CHAR(13)
			+ '						@recalcPriorityResult OUTPUT, @recalcPriorityMessage OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '					-- If there is an error recalculating the priority, then raise it.' + CHAR(13)
			+ '					IF (@recalcPriorityResult = ''1'')' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @ovaResult = ''1'';' + CHAR(13)
			+ '						-- (@ErMessage, @ErSeverity, @ErState)' + CHAR(13)
			+ '						RAISERROR (@recalcPriorityMessage, 10, 1);' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)  			
			+ CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- OHLO 20170523: Alert user and Expire non-managed suggestions
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)		
			+ '				IF (@IsMinBufferChanged = 1)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					/* OHLO 20170523: Alert user and Expire non-managed suggestions */	' + CHAR(13)
			+ '					EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '						''DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED OUTPUT;' + CHAR(13)
			+ CHAR(13)	
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										      RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '					VALUES (@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED, NULL, ''A'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '						    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)
			+ '					/* In order to manage the expired sku-location, add it to the list */' + CHAR(13)
			+ '					IF (@BufferList <> '''')' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @BufferList = @BufferList + @DelimiterForRecords;' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ CHAR(13)						   
			+ '					SET @BufferList = @BufferList + @SKU + @DelimeterPk + @LOCATION; ' + CHAR(13)
			+ CHAR(13)
			+ '					/* Expire any prior non-managed suggestion */' + CHAR(13)
			+ '					UPDATE TFSCM_CLI_BUFFER' + CHAR(13)
			+ '					   SET ADJUSTMENT_ACTION          = @AdjustmentActionExpire,' + CHAR(13)
			+ '						   SUGGESTION_REJECTION_CAUSE = @ExpiredMinBufferChange,' + CHAR(13)
			+ '						   SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP' + CHAR(13)
			+ '					 WHERE ADJUSTMENT_ACTION = @AdjustmentActionAnalyze' + CHAR(13)
			+ '					   AND SKU               = @SKU' + CHAR(13)
			+ '					   AND LOCATION          = @LOCATION' + CHAR(13)
			+ '					   AND SUGGESTED_BUFFER  < MINIMUM_BUFFER;' + CHAR(13)
			+ CHAR(13)					
			+ '					/* If it is a dataexchange from Master window */' + CHAR(13)
			+ '					IF (@ivaIsDataExchangeForScreen = 1)' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>A</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_MIN_BUFFER_CHANGED+''</td></tr>''; ' + CHAR(13)
			+ '						SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)				
			+ '						INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '						VALUES (@AlertNotificationsId, @MessageTableErrors);' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '					-- -----------------------------------------------------------------------'+ CHAR(13)
			+ '				END' + CHAR(13) 
			+ CHAR(13);

		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values. ' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
			+ '				IF (@IsOrigin > 0)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					INSERT INTO #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS, INVENTORY_ON_SITE, NET_INVENTORY, FAMILY)' + CHAR(13)
			+ '					VALUES (@SKU, @LOCATION, @UPDATE_MOVEMENTS, @INVENTORY_ON_SITE, @NET_INVENTORY, @FAMILY); ' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '				-- ---------------------------------------------------------------------------' + CHAR(13)
		
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '				IF (@LOCATION != @locationTemp) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @locationsListTemp = @locationsListTemp + @LOCATION + @DelimiterForLocations; ' + CHAR(13)
			+ '					SET @locationTemp = @LOCATION; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@LOCATION != @locationTempOnlyWorkDay AND @LOCATION != @locationTempNoWorkDay) ' + CHAR(13)
										   
			+ '				BEGIN ' + CHAR(13)
			+ '					IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@UPDATE_MOVEMENTS, @CDCALENDAR)) = 0) ' + CHAR(13)
			+ '					BEGIN  ' + CHAR(13)
			+ '						SET @locationsListTempOnlyWorkDay = @locationsListTempOnlyWorkDay + @LOCATION + @DelimiterForLocations; ' + CHAR(13)
			+ '						SET @locationTempOnlyWorkDay = @LOCATION; ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN  ' + CHAR(13)
			+ '						SET @locationTempNoWorkDay = @LOCATION; ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				END  ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @ovaHasProcessed = ''1'';'	 + CHAR(13)
			+ '				SET @ProcessBuffersCount = @ProcessBuffersCount + 1 ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '		END TRY' + CHAR(13)
			+ '		BEGIN CATCH ' + CHAR(13)
			+ '			SET @ErrorsBuffersCount = @ErrorsBuffersCount + 1;' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			SET @ovaMessage = '' ERROR_MESSAGE: ''+ERROR_MESSAGE(); ' + CHAR(13)
			+ CHAR(13)
			+ '			BEGIN TRY ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '				''DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '				VALUES (@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR + ''<br><br>'' + @ovaMessage, NULL, ''E'', GETDATE(), @SKU, @LOCATION,' + CHAR(13)
			+ '					    NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)							
			+ '				IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @MessageTableErrors = ''<tr><td>''+@LOCATION+''</td><td>''+@SKU+''</td><td>E</td><td>''+@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR+''</td></tr>''; ' + CHAR(13)
			+ '					SET @ovaMessageTableErrors = @ovaMessageTableErrors + @MessageTableErrors; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL (ID_MESSAGESNOTIFICATIONS, MESSAGES)' + CHAR(13)
			+ '					VALUES (@ID_MESSAGESNOTIFICATIONS,@MessageTableErrors);' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '			END TRY ' + CHAR(13)
			+ '			BEGIN CATCH ' + CHAR(13)
			+ '			END CATCH ' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @COMMIT_COUNT = @COMMIT_COUNT + 1' + CHAR(13)
			+ CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13) 
			+ '		-- OHLO 20200106: Since v4.14.0, the commit batch is set to 10 instead of 100 ' + CHAR(13) 
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13) 
			+ '		IF (@COMMIT_COUNT = 10)' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			COMMIT;' + CHAR(13)
			+ '			SET @COMMIT_COUNT = 0;' + CHAR(13)
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		FETCH NEXT FROM cDataTempCursor INTO '+@AllVariablesFetch + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13)
			+ '	-- ---------------------------------------------------------------------------------------' + CHAR(13) 
			+ '	-- OHLO 20200106: Since v4.14.0, close cursor right after its usage ' + CHAR(13) 
			+ '	-- ---------------------------------------------------------------------------------------' + CHAR(13) 
			+ '	CLOSE cDataTempCursor;' + CHAR(13)
			+ '	DEALLOCATE cDataTempCursor;' + CHAR(13)					
			+ CHAR(13)					
			+ '	CREATE INDEX IDX_BUFFER_DATES_TEMP ON BUFFER_DATES_TEMP ([SKU], [LOCATION], [UPDATE_MOVEMENTS]);' + CHAR(13)					
			+ CHAR(13)
			+ '	-- ---------------------------------------------------------------------------------------' + CHAR(13)
			+ '	-- OHLO 20201120: Since v5.3.0, Update origin columns with temporary values.' + CHAR(13)
			+ '	-- ---------------------------------------------------------------------------------------' + CHAR(13)
			+ '	CREATE INDEX IDX_OriginBuffersTemp ON #OriginBuffersTemp (SKU, LOCATION, UPDATE_MOVEMENTS);' + CHAR(13)
			+ CHAR(13)	
			+ '	UPDATE [BUFFER]' + CHAR(13)
			+ '	   SET [BUFFER].[ORIGIN_INVENTORY_ON_SITE] = [OBUFFER].[INVENTORY_ON_SITE], ' + CHAR(13)
			+ '		   [BUFFER].[ORIGIN_NET_INVENTORY]     = [OBUFFER].[NET_INVENTORY], ' + CHAR(13)
			+ '		   [BUFFER].[ORIGIN_BUFFER_FAMILY]     = [OBUFFER].[FAMILY]' + CHAR(13)
			+ '	  FROM [dbo].[TFSCM_CLI_BUFFER] AS [BUFFER]' + CHAR(13)
			+ '	  JOIN #OriginBuffersTemp AS [OBUFFER] ON ([OBUFFER].[SKU]              = [BUFFER].[SKU]' + CHAR(13)
			+ '										   AND [OBUFFER].[LOCATION]         = [BUFFER].[ORIGIN_LOCATION]' + CHAR(13)
			+ '										   AND [OBUFFER].[UPDATE_MOVEMENTS] = [BUFFER].[UPDATE_MOVEMENTS]);' + CHAR(13)
			+ '	-- ---------------------------------------------------------------------------------------' + CHAR(13)
			+ CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20170405: Manage the expired suggestions 
			-- -------------------------------------------------------------------------------
			+ '	/* Manage the expired suggestions */' + CHAR(13)
			+ '	IF (@BufferList <> '''')' + CHAR(13)
			+ '	BEGIN' + CHAR(13)
			+ '		EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferList, @ivaCreatorOrModifyUser, @ManagementWay,' + CHAR(13)
			+ '												  @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;' + CHAR(13)
			+ '		SET @ovaResult  = @ovaGBASResult;' + CHAR(13)
			+ '		SET @ovaMessage = @ovaGBASMessage;' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ '	-- USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS: ' + CHAR(13)
			+ '	IF (LEN(@locationsListTemp) > 0) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		SET @locationsListTemp = SUBSTRING (@locationsListTemp, 1, LEN(@locationsListTemp)-LEN(@DelimiterForLocations)) ' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ '	IF (LEN(@locationsListTempOnlyWorkDay) > 0) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		SET @locationsListTempOnlyWorkDay = SUBSTRING (@locationsListTempOnlyWorkDay, 1, LEN(@locationsListTempOnlyWorkDay)-LEN(@DelimiterForLocations)) ' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13);

		SET @SPMasterLoad = @SPMasterLoad
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	-- OHLO 20200404: Since v5.0.0, send the variable @ManagementWay  ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13);
			
		IF (@ivaCodInterface = 99)
		BEGIN
			-- -------------------------------------------------------------------------------
			-- F if this process was called from Focuss Buffer Master  
			-- -------------------------------------------------------------------------------		
			SET @SPMasterLoad = @SPMasterLoad
				+ '	SET @ManagementWay = ''F''' + CHAR(13);
		END
		ELSE 
		BEGIN
			-- -------------------------------------------------------------------------------
			-- A if this process was called from Buffer Data Exchange  
			-- -------------------------------------------------------------------------------		
			SET @SPMasterLoad = @SPMasterLoad
				+ '	SET @ManagementWay = ''A''' + CHAR(13);
		END
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20191219: Since v4.14.0, send the variable @ivaTempLoadDate instead of 
		--             	  @UPDATE_MOVEMENTS
		-- -----------------------------------------------------------------------------------
		SET @SPMasterLoad = @SPMasterLoad + CHAR(13)
			+ '	EXEC USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS ' + CHAR(13)
			+ '		@locationsListTemp, @DelimiterForLocations, @ivaTempLoadDate, @ivaCreatorOrModifyUser, @ManagementWay, ' + CHAR(13)
			+ '		@ovaResultPseudocodes OUTPUT, @ovaMessagePseudocodes OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessagePseudocodesTotal = @ovaMessagePseudocodesTotal + '', '' + @ovaMessagePseudocodes; ' + CHAR(13)
			+ '	IF @ovaResultPseudocodes = ''1'' '  + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		SET @ovaResult = ''1'' '  + CHAR(13)
			+ '	END ' + CHAR(13)	
			+ CHAR(13)
			+ '	SET @Trace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)
			+ CHAR(13) 
			+ '	IF (@ovaHasProcessed = ''1'')'  + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		UPDATE TBL ' + CHAR(13)
			+ '		SET TBL.UPGRADE_TABLE_DATE = GETDATE() ' + CHAR(13)
			+ '		FROM TFSCM_COM_TABLES TBL '  + CHAR(13)
			+ '		JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) ' + CHAR(13) 
			+ '		AND INTER.CDINTERFACE = '+CAST(@ivaCodInterface AS VARCHAR)+'' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13) 
			+ '	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '		''DATA_EXCHANGE_BUFFERS_SUCESSFUL'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '	EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '		''DATA_EXCHANGE_BUFFERS_ERROR'', @Language, '''', '''', '''', @MSG_DATA_EXCHANGE_BUFFERS_ERROR OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessage =  @MSG_DATA_EXCHANGE_BUFFERS_SUCESSFUL+'':'' + CAST (@ProcessBuffersCount AS varchar) + '', ''+ @MSG_DATA_EXCHANGE_BUFFERS_ERROR+'':'' + CAST (@ErrorsBuffersCount AS varchar) + @ovaMessagePseudocodesTotal '
			+ CHAR(13) 
			+ '	IF (@ivaIsDataExchangeForScreen = 1) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		UPDATE TFSCM_CLI_MESSAGESNOTIFICATIONS SET MESSAGE = @ovaMessage WHERE ID_MESSAGESNOTIFICATIONS = @ID_MESSAGESNOTIFICATIONS ; ' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13)							
			+ '	SET @TotalErrorsBuffers = (@ErrorsBuffersCount + @ivaErrorValidations)' + CHAR(13)
			+ '	SELECT @MessagesAfterDataExchange = P.PARAM_VALUE FROM TFSCM_COM_PARAMS P ' + CHAR(13)
			+ '		WHERE P.CDPARAM = ''MESSAGES_AFTER_DATAEXCHANGE''' + CHAR(13)
			+ '	IF (@TotalErrorsBuffers > 0 AND @MessagesAfterDataExchange = ''Y'')' + CHAR(13)
			+ '	BEGIN' + CHAR(13)	
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''BDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ CHAR(13)	
			+ '		-- If there is an error, then raise it.' + CHAR(13)
			+ '		IF (@ovaResultRemoveViewNot = ''1'')' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			-- (@ErMessage, @ErSeverity, @ErState)' + CHAR(13)
			+ '			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);' + CHAR(13)
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @TotalErrorsBuffers, ''BDE'', ''BUFFER_GENERAL_PRIORIZATION'', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT' + CHAR(13)
			+ CHAR(13)	
			+ '		-- If there is an error, then raise it.' + CHAR(13)
			+ '		IF (@ovaResultAddViewNot = ''1'')' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			-- (@ErMessage, @ErSeverity, @ErState)' + CHAR(13)
			+ '			RAISERROR (@ovaMessageAddViewNot, 11, 1);' + CHAR(13)
			+ '		END' + CHAR(13)
			+ '	END	' + CHAR(13)	
			+ CHAR(13)	
			+ '	IF (@TotalErrorsBuffers = 0 AND @MessagesAfterDataExchange = ''Y'' AND @ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''BDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ CHAR(13)	
			+ '		-- If there is an error, then raise it.' + CHAR(13)
			+ '		IF (@ovaResultRemoveViewNot = ''1'')' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			-- (@ErMessage, @ErSeverity, @ErState)' + CHAR(13)
			+ '			RAISERROR (@ovaMessageRemoveViewNot, 11, 1);' + CHAR(13)
			+ '		END' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ 'END TRY ' + CHAR(13)							
			+ 'BEGIN CATCH ' + CHAR(13)
			+ '	SET @ovaResult = ''1'';' + CHAR(13)
			+ '	SET @ovaMessage =  '' ERROR_NUMBER: '' + CAST(ERROR_NUMBER() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_SEVERITY: '' + CAST(ERROR_SEVERITY() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_STATE: '' + CAST(ERROR_STATE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_PROCEDURE: '' + ISNULL(ERROR_PROCEDURE(), ''[dbo].[' + @procedureName + ']'') ' + CHAR(13)
			+ '		+ '' ERROR_LINE: '' + CAST(ERROR_LINE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_MESSAGE: '' + ERROR_MESSAGE(); ' + CHAR(13)
			+ CHAR(13)
			+ '	IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (-1,0,1))' + CHAR(13) 
			+ '	BEGIN ' + CHAR(13)
			+ '		IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (0,1)) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			CLOSE cDataTempCursor; ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		DEALLOCATE cDataTempCursor; ' + CHAR(13)
			+ '	END ' + CHAR(13)			
			+ 'END CATCH ' + CHAR(13)
			+ 'END ';
			
		-------------------------------------------------------
 
		EXEC (@SPMasterLoad)
		
		SET @Trace = 'End of the cInterfaceColumnConfiguration  '  
		--Procedure result
		SET @ovaResult = '0';
		SET @ovaMessage = 'sucessBufferDataExchangeProcess';
	    --PRINT	@Trace	
	END TRY
	
	BEGIN CATCH
		--PRINT	@Trace	
		SET @ovaResult = '1';
					  
		SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_BUFFER_BUILDER]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();

		RAISERROR (@ovaMessage, 
				   16, 
				   @ovaResult 
				  );  
	END CATCH
END 
GO
/****** Object:  StoredProcedure [dbo].[MASTER_BUFFER_CHANGES_BUILDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Johan Berrio
-- Upgrade date: 29/03/2021
-- Description : preparationStartDate equal to server
-- Version     : 5.4.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 13/01/2021
-- Description : Add varchar variables that actually are numeric
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 18/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 21/05/2020
-- Description : Check if the event is not processed, otherwise insert an error message.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Dynamic queries parametrization
--               = NULL rewritten to IS NULL
--               Full column names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/11/2018
-- Description : - Remove columns NEXT_CHANGE_DATE, APPLIED_CHANGES and ACTIVE
--               - Add columns PROCESSING_DATE amd ATYPICAL_CONSUMPTION_STATUS
--               - Add/modify columns validations
-- Version     : 4.10.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 31/07/2018
-- Description : Add case for Mode validation (Issue 6933)
-- Version     : 4.9.2
-- -------------------------------------------------------------------------------------------
-- Author     : Oscar Londoño
-- Create date: 27/05/2015 
-- Description:	Procedure for creating SP masters of Buffer Changes
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MASTER_BUFFER_CHANGES_BUILDER] 
   /* Input Parameters */
    @ivaCodInterface AS SMALLINT,
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
-- WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @vSPMasterLoad                     NVARCHAR(MAX);
	DECLARE @vTableTempName                    VARCHAR(50);
	DECLARE @vTableRealName                    VARCHAR(50);
	DECLARE @vTrace                            NVARCHAR(MAX)= '';
	
	DECLARE @CDFIELD                           NVARCHAR(50);
	DECLARE @CDPKFIELD                         NVARCHAR(50);
	DECLARE @DSTYPE                            VARCHAR(50);
	DECLARE @COLUMN_SIZE                       SMALLINT;
	DECLARE @COLUMN_ACCURACY                   SMALLINT;
	DECLARE @IS_UPGRADEABLE                    VARCHAR(1);
	
	DECLARE @vAllDeclareColumnOld              NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnInterfaceTmp     NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnCalc             NVARCHAR(MAX) = '';
	DECLARE @vAllColumnsBuildSelectByCursor    NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesInterfaceTmp         NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesFetch                NVARCHAR(MAX) = '';
	
	DECLARE @vAllColumnsInterfaceTmp           NVARCHAR(MAX) = '';
	
	DECLARE @vAllColumnsInsert                 NVARCHAR(MAX) = '';
	DECLARE @vAllValuesInsert                  NVARCHAR(MAX) = '';
	
	DECLARE @vAllUpgradablesColumns            NVARCHAR(MAX) = '   SET ';
	DECLARE @vAllSetsColumnsAndValuesUpdate    NVARCHAR(MAX) = '';
	DECLARE @skuNotUpgradable                  VARCHAR(1) = 'Y';
	DECLARE @locationNotUpgradable             VARCHAR(1) = 'Y';
	
	DECLARE @vHadComma                         NUMERIC(10)= 0;
	DECLARE @vHadCommaAllUpgradablesColumns    NUMERIC(10)= 0;
	
BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		IF OBJECT_ID('TempChgNumToStrTbl') IS NOT NULL 
			DROP TABLE TempChgNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempChgNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempChgNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR'  AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_BUFFER_CHANGES_TEMP' 
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');
				  
		SET @vTrace = 'getting the table name and table name temp'
		
		SELECT @vTableRealName = TBL.TABLE_NAME, @vTableTempName = TBL.TABLE_NAME_TEMP
		  FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
		 WHERE INTERFACE.CDTABLE     = TBL.CDTABLE
		   AND INTERFACE.CDINTERFACE = @ivaCodInterface;
	 
		SET @CDPKFIELD = ( SELECT TBL.CDCOLUMN 
		                     FROM TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE 
						    WHERE INTERFACE.CDTABLE     = TBL.CDTABLE
							  AND TBL.IS_PRIMARY_KEY    = 'Y'
							  AND INTERFACE.CDINTERFACE = @ivaCodInterface );
		
		--SET @vTrace = 'Declaring the cursor with the @ivaCodInterface= '+ CAST(@ivaCodInterface AS VARCHAR)
		DECLARE cColumnConfiguration CURSOR FAST_FORWARD FOR 
		 SELECT TBL.CDCOLUMN, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, DETAIL.IS_UPGRADEABLE
		   FROM TFSCM_DEX_INT_DETAIL DETAIL, TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE
		  WHERE INTERFACE.CDINTERFACE = @ivaCodInterface
			AND DETAIL.CDINTERFACE    = INTERFACE.CDINTERFACE
			AND INTERFACE.CDTABLE     = TBL.CDTABLE 
			AND TBL.CDCOLUMN          = DETAIL.CDFIELD
		
		OPEN cColumnConfiguration;
		
		FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE;
		
		WHILE (@@FETCH_STATUS = 0 )
		BEGIN
			IF(@vHadComma = 0)
			BEGIN
				SET @vAllColumnsInterfaceTmp        = @vAllColumnsInterfaceTmp+''+@CDFIELD;
				SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+'TMP.'+@CDFIELD;
				SET @vAllVariablesInterfaceTmp      = @vAllVariablesInterfaceTmp+'@'+@CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
						
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' BIT ';
						
			END
			ELSE 
			BEGIN
				SET @vAllColumnsInterfaceTmp        = @vAllColumnsInterfaceTmp+ ','+@CDFIELD; 
				SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+',TMP.'+@CDFIELD;
				SET @vAllVariablesInterfaceTmp      = @vAllVariablesInterfaceTmp+', @'+@CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
				 						
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' BIT ';
			
					
			END;
			SET @vHadComma = 1;
			
			IF (@IS_UPGRADEABLE = 'Y')
			BEGIN
				IF (LTRIM(RTRIM(@vAllUpgradablesColumns)) <> 'SET')
				BEGIN 
					SET @vAllUpgradablesColumns = @vAllUpgradablesColumns +  '						   ';
				END 
				SET @vAllUpgradablesColumns = @vAllUpgradablesColumns + 
					@CDFIELD + REPLICATE( ' ', 22 - LEN(@CDFIELD))+' = @'+@CDFIELD+',' + CHAR(13);
			END 
			
			-- Reading the new row
			FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE;

		END
		-- Cierre del cursor
		CLOSE cColumnConfiguration;

		-- Liberar los recursos
		DEALLOCATE cColumnConfiguration;
		
		/* SE ARMAN LAS VARIABLES QUE CONTENDRAN LOS DATOS ORIGINALES (OLD, si es que aplica) */
		SET @vAllVariablesFetch = @vAllVariablesInterfaceTmp
			+ ', @EVENT_OLD'
			+ ', @SKU_OLD';

		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('LOCATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vAllVariablesFetch = @vAllVariablesFetch
				+ ', @BUFFER_NOT_UPGRADEABLE';
		END	
		
		SET @skuNotUpgradable      = 'Y';
		SET @locationNotUpgradable = 'Y';
		
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0)
		BEGIN
			SET @skuNotUpgradable = 'N';
		END 
		IF (CHARINDEX('LOCATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @locationNotUpgradable = 'N';
		END 

		SET @vAllVariablesFetch = @vAllVariablesFetch
			+ ', @CHANGE_TYPE_OLD'
			+ ', @LOCATION_OLD'
			+ ', @LOCATION_IS_ACTIVE_OLD'
			+ ', @LOCATION_TYPE_OLD'
			+ ', @CDCALENDAR_DEST_OLD'
			+ ', @SHIPPING_TIME_DEST_OLD'
			+ ', @REQUIRED_CHANGE_OLD'
			+ ', @PREPARATION_START_DATE_OLD'
			+ ', @EVENT_STARTING_DATE_OLD'
			+ ', @EVENT_ENDING_DATE_OLD'
			+ ', @CHANGE_STEPS_OLD'
			+ ', @PREPARATION_END_DATE_OLD'
			+ ', @MODE_OLD'								     
			+ ', @FILTER_OLD'								     
			+ ', @JSON_FILTER_OLD'
			+ ', @CREATION_DATE_OLD'
			+ ', @CREATION_USER_OLD'
			+ ', @DAYS_BETWEEN_CHANGES_OLD'
			+ ', @MODIFICATION_DATE_OLD'
			+ ', @MODIFICATION_USER_OLD'										     
			+ ', @PROCESSING_DATE_OLD'										     
			+ ', @ATYPICAL_CONSUMPTION_STATUS_OLD'										     
			+ ', @ID_TEMP'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number  
			-- -------------------------------------------------------------------------------
			+ ', @FILE_NAME'
			+ ', @FILE_ROW_NUMBER';
			
		/* SE ARMAN LAS VARIABLES QUE CONTENDRAN LOS DATOS ADICIONALES */
		SET @vAllVariablesFetch = @vAllVariablesFetch
			+ ', @BUFFER_SKU'
			+ ', @LOCATION_IS_ACTIVE'
			+ ', @LOCATION_TYPE'
			+ ', @CDCALENDAR_DEST'
			+ ', @SHIPPING_TIME_DEST'
			+ ', @BUFFER'
			+ ', @REPLENISHMENT_TIME'
			+ ', @MINIMUM_BUFFER'
			+ ', @existChangeType'
			+ ', @existChangeMode';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200113: Since v5.3.0, add varchar variables that actually are numeric to 
		-- 				  fetch
		-- -----------------------------------------------------------------------------------
		SET @vAllVariablesFetch = @vAllVariablesFetch  
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', @' + [NTS].[VARCHAR_COLUMN], '') AS FETCH_SENTENCE
				 FROM TempChgNumToStrTbl AS [NTS]), ''));
				
		/* -------------------------------------------------------------------------- */		
		/* SE DECLARAN LOS CAMPOS QUE TENDRAN LOS DATOS ORIGINALES (OLD) DEL REGISTRO */		
		/* -------------------------------------------------------------------------- */		
		SET @vAllDeclareColumnOld = ''
			+ '@EVENT_OLD                       VARCHAR(50),'  + CHAR(13)
			+ '         @SKU_OLD                         VARCHAR(50),'  + CHAR(13)
			+ '         @BUFFER_NOT_UPGRADEABLE          VARCHAR(50),'  + CHAR(13)
			+ '         @CHANGE_TYPE_OLD                 VARCHAR(1),'   + CHAR(13)
			+ '         @LOCATION_OLD                    VARCHAR(50),'  + CHAR(13)
			+ '         @LOCATION_IS_ACTIVE_OLD          BIT,'          + CHAR(13)
			+ '         @LOCATION_TYPE_OLD               VARCHAR(50),'  + CHAR(13)		
			+ '         @CDCALENDAR_DEST_OLD             NUMERIC(4,0),' + CHAR(13)
			+ '         @SHIPPING_TIME_DEST_OLD          VARCHAR(5),'   + CHAR(13)  
		    + '         @REQUIRED_CHANGE_OLD             NUMERIC(17,5),'+ CHAR(13)
			+ '         @PREPARATION_START_DATE_OLD      DATE,'         + CHAR(13)
			+ '         @EVENT_STARTING_DATE_OLD         DATE,'         + CHAR(13)
			+ '         @EVENT_ENDING_DATE_OLD           DATE,'         + CHAR(13)
			+ '         @CHANGE_STEPS_OLD                NUMERIC(10,0),'+ CHAR(13)
			+ '         @PREPARATION_END_DATE_OLD        DATE,'         + CHAR(13)
			+ '         @MODE_OLD                        VARCHAR(50),'  + CHAR(13)
			+ '         @FILTER_OLD                      VARCHAR(MAX),' + CHAR(13)
			+ '         @JSON_FILTER_OLD                 VARCHAR(MAX),' + CHAR(13)
			+ '         @CREATION_DATE_OLD               DATETIME,'     + CHAR(13)
			+ '         @CREATION_USER_OLD               VARCHAR(50),'  + CHAR(13)
			+ '         @DAYS_BETWEEN_CHANGES_OLD        NUMERIC(17,5),'+ CHAR(13)
			+ '         @MODIFICATION_DATE_OLD           DATETIME,'     + CHAR(13)
			+ '         @MODIFICATION_USER_OLD           VARCHAR(50),'  + CHAR(13)
			+ '         @PROCESSING_DATE_OLD             DATETIME,'     + CHAR(13)
			+ '         @ATYPICAL_CONSUMPTION_STATUS_OLD VARCHAR(1),'   + CHAR(13)
			+ '         @ID_TEMP                     INT';
			
		/* SE DECLARAN LOS CAMPOS QUE SE NECESITAN PERO QUE NO ESTAN EN LA ESTRUCTURA */		
		SET @vAllDeclareColumnCalc = 
			+ '@BUFFER_SKU                  VARCHAR(50),'   + CHAR(13)
			+ '         @LOCATION_IS_ACTIVE          BIT,'           + CHAR(13)
			+ '         @LOCATION_TYPE               VARCHAR(50),'   + CHAR(13)
			+ '         @CDCALENDAR_DEST             NUMERIC(4,0),'  + CHAR(13)
			+ '         @SHIPPING_TIME_DEST          VARCHAR(5),'    + CHAR(13)
			+ '         @BUFFER                      NUMERIC(17,5),' + CHAR(13)
			+ '         @REPLENISHMENT_TIME          INT,'           + CHAR(13)
			+ '         @MINIMUM_BUFFER              NUMERIC(17,5),' + CHAR(13)
		    + '         @existChangeType             VARCHAR(50),'   + CHAR(13)
		    + '         @existChangeMode             VARCHAR(50),'   + CHAR(13);
		    			
		/* SE DECLARAN LOS CAMPOS QUE SON CALCULADOS */		
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc+
			+ '         -- Buffer Changes computed fields '                                    + CHAR(13)		
			+ '         @CREATION_DATE               DATETIME,'                                + CHAR(13)
			+ '         @CREATION_USER               VARCHAR(50)   = ''FOCUSSSCM'','           + CHAR(13)
			+ '         @DAYS_BETWEEN_CHANGES        NUMERIC(17,5) = 0,'                       + CHAR(13)
			+ '         @FILTER                      VARCHAR(MAX)  = NULL,'                    + CHAR(13)
			+ '         @JSON_FILTER                 VARCHAR(MAX)  = NULL,'                    + CHAR(13)
			+ '         @MODIFICATION_DATE           DATETIME      = ''1901-01-01 00:00:00'',' + CHAR(13)
			+ '         @MODIFICATION_USER           VARCHAR(50)   = ''FOCUSSSCM'','           + CHAR(13)
			+ '         @PROCESSING_DATE             DATETIME      = ''1901-01-01 00:00:00'',' + CHAR(13)
			+ '         @ATYPICAL_CONSUMPTION_STATUS VARCHAR(1)    = ''N'''; 
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric 
		--                to vAllDeclareColumnCalc
		-- -----------------------------------------------------------------------------------
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc + CHAR(13)    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('        ,' + LEFT('@' + [NTS].[VARCHAR_COLUMN] + REPLICATE(' ', 56), 56)  + 'AS VARCHAR(50)',  CHAR(13)) AS DECLARE_SENTENCE
				 FROM TempChgNumToStrTbl AS [NTS]),  ''));	
			
        /* ---------------------------------------------------------------- */
        /* SE INCLUYEN EN LA SELECCION LOS CAMPOS ADICIONALES               */
        /* ---------------------------------------------------------------- */					 							
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', BCHOLD.EVENT'
			+ ', BCHOLD.SKU_CHG';
								
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('LOCATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
				+ ', B_OLD.SKU AS BUFFER_NOT_UPGRADEABLE';
		END
		
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor			
			+ ', BCHOLD.CHANGE_TYPE'
			+ ', BCHOLD.LOCATION_CHG'
			+ ', LDESTOLD.IS_ACTIVE'
			+ ', LDESTOLD.LOCATION_TYPE'
			+ ', CAL_DEST_OLD.CDCALENDAR'
			+ ', CAL_DEST_OLD.SHIPPING_TIME'
			+ ', BCHOLD.REQUIRED_CHANGE'
			+ ', BCHOLD.PREPARATION_START_DATE'
			+ ', BCHOLD.EVENT_STARTING_DATE'
			+ ', BCHOLD.EVENT_ENDING_DATE'
			+ ', BCHOLD.CHANGE_STEPS'
			+ ', BCHOLD.PREPARATION_END_DATE'
			+ ', BCHOLD.MODE'
			+ ', BCHOLD.FILTER'
			+ ', BCHOLD.JSON_FILTER'
			+ ', BCHOLD.CREATION_DATE'
			+ ', BCHOLD.CREATION_USER'
			+ ', BCHOLD.DAYS_BETWEEN_CHANGES'
			+ ', BCHOLD.MODIFICATION_DATE'
			+ ', BCHOLD.MODIFICATION_USER'
			+ ', BCHOLD.PROCESSING_DATE'
			+ ', BCHOLD.ATYPICAL_CONSUMPTION_STATUS'
			+ ', TMP.ID'
			-- --------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add columns File_name and FIle_row_number 
			-- --------------------------------------------------------------------------------
			+ ', TMP.FILE_NAME'
			+ ', TMP.FILE_ROW_NUMBER';
			
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', B.SKU AS BUFFER_SKU'
			+ ', LDEST.IS_ACTIVE'
			+ ', LDEST.LOCATION_TYPE'
			+ ', CAL_DEST.CDCALENDAR'
			+ ', CAL_DEST.SHIPPING_TIME'
			+ ', B.BUFFER'
			+ ', B.REPLENISHMENT_TIME'
			+ ', B.MINIMUM_BUFFER'
			+ ', CHANGE_TYPES.CODE'
			+ ', CHANGE_MODES.CODE';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric to
        --                Select
		-- -----------------------------------------------------------------------------------
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', TMP.' + [NTS].[VARCHAR_COLUMN], '') AS SELECT_SENTENCE
				 FROM TempChgNumToStrTbl AS [NTS]), ''));
			
        /* ================================================================ */
		/* INICIO DE CONSTRUCCION DEL INSERT                                */
		/* ---------------------------------------------------------------- */
		
		/* SE INCLUYEN LOS CAMPOS DE LA ESTRUCTURA */
		SET @vAllColumnsInsert = @vAllColumnsInterfaceTmp;
		
 		/* Y LUEGO SE INCLUYEN LOS CAMPOS CALCULADOS */ 		 
		SET @vAllColumnsInsert = @vAllColumnsInsert 
			+ ', CREATION_DATE'
			+ ', CREATION_USER'
			+ ', DAYS_BETWEEN_CHANGES'
			+ ', FILTER'
			+ ', JSON_FILTER'
			+ ', MODIFICATION_DATE'
			+ ', MODIFICATION_USER'
			+ ', PROCESSING_DATE'
			+ ', ATYPICAL_CONSUMPTION_STATUS';

		/* SE ADICIONAN LOS VALORES DE LOS CAMPOS DE LA ESTRUCTURA */
		SET @vAllValuesInsert = @vAllVariablesInterfaceTmp
		
		/* Y LUEGO SE ADICIONAN LOS VALORES DE LOS CAMPOS CALCULADOS */		
		SET @vAllValuesInsert = @vAllValuesInsert 
			+ ', @CREATION_DATE'
			+ ', @CREATION_USER'
			+ ', @DAYS_BETWEEN_CHANGES'
			+ ', @FILTER'
			+ ', @JSON_FILTER'
			+ ', @MODIFICATION_DATE'
			+ ', @MODIFICATION_USER'
			+ ', @PROCESSING_DATE'
			+ ', @ATYPICAL_CONSUMPTION_STATUS';
		/* ---------------------------------------------------------------- */
		/* FIN DE CONSTRUCCION DEL INSERT                                   */
		/* ================================================================ */
		
		/* ================================================================ */
		/* INICIO DE CONSTRUCCION DEL UPDATE                                */
		/* ---------------------------------------------------------------- */
		
		/* SE INCLUYEN LOS CAMPOS DE LA ESTRUCTURA */
		SET @vAllSetsColumnsAndValuesUpdate = @vAllUpgradablesColumns;
		
		/* Y LUEGO SE INCLUYEN LOS CAMPOS CALCULADOS */		 
		SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + 
			+ '						   DAYS_BETWEEN_CHANGES        = @DAYS_BETWEEN_CHANGES,' + CHAR(13)
			+ '						   FILTER                      = @FILTER,'               + CHAR(13)
			+ '						   JSON_FILTER                 = @JSON_FILTER,'          + CHAR(13) 
			+ '						   MODIFICATION_DATE           = GETDATE(),'             + CHAR(13)
			+ '						   MODIFICATION_USER           = @MODIFICATION_USER,'    + CHAR(13)
			+ '						   PROCESSING_DATE             = @PROCESSING_DATE,'      + CHAR(13)
			+ '						   ATYPICAL_CONSUMPTION_STATUS = @ATYPICAL_CONSUMPTION_STATUS';
		
		/* ---------------------------------------------------------------- */
		/* FIN DE CONSTRUCCION DEL UPDATE                                   */
		/* ================================================================ */
		
		SET @vTrace = 'building the vSPMasterLoad '	
		/* ================================================================ */
		/* INICIO DE CONSTRUCCION DEL PROCEDIMIENTO                         */
		/* ---------------------------------------------------------------- */
				
		IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'BUFFER_CHANGES')
			SET @vSPMasterLoad = 'ALTER PROCEDURE [dbo].[BUFFER_CHANGES] ' + CHAR(13)	
		ELSE
			SET @vSPMasterLoad = 'CREATE PROCEDURE [dbo].[BUFFER_CHANGES] ' + CHAR(13)
 		
		SET @vSPMasterLoad = @vSPMasterLoad+								
			+ '	@ivaIdExchange          NUMERIC(10), '                        + CHAR(13)
			+ '	@ivaTempLoadDate        DATE , '                              + CHAR(13)
			+ '	@ivaCreatorOrModifyUser NVARCHAR(MAX), '                      + CHAR(13)
			+ '	@ivaErrorValidations	NUMERIC(10), '                        + CHAR(13)
			+ '	@ovaResult              VARCHAR(1) OUTPUT, '                  + CHAR(13)
			+ '	@ovaMessage             NVARCHAR(MAX) OUTPUT, '               + CHAR(13)
			+ '	@ovaHasProcessed        VARCHAR(1) OUTPUT '                   + CHAR(13)
			+ 'AS '                                                           + CHAR(13)
			+ 'DECLARE @vTrace                   NVARCHAR(MAX); '             + CHAR(13)
			+ 'DECLARE @countEvent               INT; '                       + CHAR(13)
			+ 'DECLARE @ovaOverlapped            VARCHAR(1); '                + CHAR(13)
		    + 'DECLARE @ovaCheckResult           VARCHAR(1); '                + CHAR(13)
		    + 'DECLARE @ovaCheckMessage          NVARCHAR(MAX); '             + CHAR(13)
		    + 'DECLARE @preparationRealEndDate   DATE; '                      + CHAR(13)
		    + 'DECLARE @differenceDays           NUMERIC(14,4); '             + CHAR(13)
		    + 'DECLARE @stepsAverage             INT; '                       + CHAR(13)
		    + 'DECLARE @charIndex                INT; '                       + CHAR(13)
		   	+ 'DECLARE @skuOld                   VARCHAR(50); '               + CHAR(13)
			+ 'DECLARE @skuNew                   VARCHAR(50); '               + CHAR(13)
			+ 'DECLARE @locationOld              VARCHAR(50); '               + CHAR(13)
			+ 'DECLARE @locationNew              VARCHAR(50); '               + CHAR(13)
			+ CHAR(13)
			+ 'DECLARE @vDuplicatedEventCountTemp  INT = 0; '                 + CHAR(13)
			+ 'DECLARE @vErrorsBufferChangesCount  INT = 0; '                 + CHAR(13)
			+ 'DECLARE @vProcessBufferChangesCount INT = 0; '                 + CHAR(13)
			+ 'DECLARE @ovaResultFinished          VARCHAR(1); '              + CHAR(13)
			+ 'DECLARE @ovaMessageFinished         NVARCHAR(MAX); '           + CHAR(13)
			+ 'DECLARE @ovaMessageFinishedTotal    NVARCHAR(MAX) = ''''; '    + CHAR(13)
			+ 'DECLARE @vPassesValidations         SMALLINT = 1; '            + CHAR(13)
			+ 'DECLARE @vCountIntTmp               INT = 0; '                 + CHAR(13)
			+ 'DECLARE @NON_WORKING_DAYS           NUMERIC(10,2); '           + CHAR(13)
			+ 'DECLARE @DATE_SERVER_NO_TIME        DATE; '                    + CHAR(13)
			+ 'DECLARE @DATE_CALCULATION           DATETIME; '                + CHAR(13)
			+ 'DECLARE @vCOMMIT_COUNT              NUMERIC(4) = 0; '          + CHAR(13)
			+ 'DECLARE @CDUNIT_DEFAULT             VARCHAR(50); '             + CHAR(13)
			+ 'DECLARE @INVENTORY_ACCURACY_DEFAULT NUMERIC(3,0); '            + CHAR(13)
			+ 'DECLARE @ovaResultAfthetF           VARCHAR(1);'               + CHAR(13)
			+ 'DECLARE @ovaMessageAfthetF          VARCHAR(MAX);'             + CHAR(13)
			+ 'DECLARE @vDummy                     VARCHAR(10) = ''''; '      + CHAR(13)
			+ 'DECLARE @ovaResultRemoveViewNot	   VARCHAR(1); '              + CHAR(13)
			+ 'DECLARE @ovaMessageRemoveViewNot	   VARCHAR(MAX); '            + CHAR(13)
			+ 'DECLARE @ovaResultAddViewNot		   VARCHAR(1); '              + CHAR(13)
			+ 'DECLARE @ovaMessageAddViewNot	   VARCHAR(MAX); '            + CHAR(13)
			+ 'DECLARE @vTotalErrorsBufferChanges  NUMERIC(8) = 0; '          + CHAR(13)
			+ 'DECLARE @vMessagesAfterDataExchange VARCHAR = ''N''; '         + CHAR(13)
			+ 'DECLARE @cursor_buffer_change_sql   NVARCHAR(MAX);'            + CHAR(13)
			+ 'DECLARE @sql_cursor				   NVARCHAR(MAX);'            + CHAR(13)
			+ 'DECLARE @actualFilter			   NVARCHAR(MAX);'            + CHAR(13)
			+ 'DECLARE @vPreparationStartDate	   DATE;'                     + CHAR(13)
			+ 'DECLARE @vEventDate				   DATE;'                     + CHAR(13)
			+ 'DECLARE @vOtherEvent				   VARCHAR(50);'              + CHAR(13)
			+ 'DECLARE @twoApostrophe			   CHAR(2) = '''''''''''';'   + CHAR(13)
			+ 'DECLARE @oneApostrophe			   CHAR(1) = '''''''';'       + CHAR(13)
			+ 'DECLARE @NewBufferSize              NUMERIC(17,5) = 0;'        + CHAR(13)
			+ 'DECLARE @PreparationWindow          NUMERIC(10,0) = 0;'        + CHAR(13)
            + CHAR(13)
			+ 'DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( '                + CHAR(13)
			+ '	SKU VARCHAR(50), LOCATION VARCHAR(50), '                      + CHAR(13)
			+ '	PRIMARY KEY (SKU, LOCATION) '                                 + CHAR(13)
			+ ') '                                                            + CHAR(13)
			+ CHAR(13);
							
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ 'BEGIN '     + CHAR(13) 
			+ CHAR(13)
			+ 'BEGIN TRY ' + CHAR(13)
			+ '	-- SET NOCOUNT ON added to prevent extra result sets from ' + CHAR(13)
			+ '	-- interfering with SELECT statements. ' + CHAR(13)
			+ '	SET NOCOUNT ON; '                        + CHAR(13)
			+ '	SET @ovaResult       = ''0'';'           + CHAR(13)
			+ '	SET @ovaMessage      = '''';'            + CHAR(13)
			+ '	SET @ovaHasProcessed = ''0'';'           + CHAR(13)
			+ '	SET @vTrace          = ''Setting the cursor cDataTempCursor  '';' + CHAR(13)
			+ '	SET @DATE_SERVER_NO_TIME = GETDATE(); '  + CHAR(13)
			+ '	SET @DATE_CALCULATION    = GETDATE(); '  + CHAR(13)
			+ '	SELECT @CDUNIT_DEFAULT = CDUNIT, @INVENTORY_ACCURACY_DEFAULT = INVENTORY_ACCURACY FROM TFSCM_CLI_UNITS WHERE (IS_DEFAULT_UNIT = 1 AND IS_ACTIVE = 1); ' + CHAR(13)
			+ CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnInterfaceTmp + ';' + CHAR(13);	
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnCalc + ';' + CHAR(13);
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnOld + ';' + CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	BEGIN TRY ' + CHAR(13)+
			+ CHAR(13)+
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		-- MESSAGES ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		DECLARE @vLanguage                                 VARCHAR(2) = ''es'';' + CHAR(13)
			+ '		DECLARE @vCodErrorResultMessages                   VARCHAR(1);'          + CHAR(13)
			+ CHAR(13)
			+ '		DECLARE @vMessageErrorResultMessages               NVARCHAR(MAX);' + CHAR(13)
			+ '		SELECT @vLanguage = [P].[PARAM_VALUE]' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_COM_PARAMS] [P] ' + CHAR(13)
			+ '		 WHERE [P].[CDPARAM] = ''DEFAULT_LANGUAGE'';' + CHAR(13)
			+ CHAR(13)+				
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_DUPLICATED         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_COUNT_EVENT_DUPL         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_IS_NULL            NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_SKU_NULL                 NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_BUFFER_NOT_FOUND         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_LOCATION_NOT_FOUND       NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_SKU_IS_NULL              NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL       NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND     NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_INVALID       NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID     NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL     NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID     NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR  NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_PREP_DATE_IS_NULL        NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_PREP_DATE_INVALID        NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_PREP_END_ERROR           NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_PREP_REAL_END_ERROR      NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR     NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_MODE_IS_NULL             NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME   NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_SKU_CHANGES              NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_LOCATION_CHANGES         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_START_DATE_NULL    NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR   NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR  NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_STARTED			  NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_SUCESSFUL_EVENTS         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_ERROR_EVENTS             NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_UNEXPECTED_ERROR         NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @MSG_DEX_CHANGES_EVENT_PROCESSED          NVARCHAR(MAX);' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ CHAR(13)+			
			+ '		SET @MSG_DEX_CHANGES_EVENT_DUPLICATED        = ''DEX_CHANGES_EVENT_DUPLICATED'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_COUNT_EVENT_DUPL        = ''DEX_CHANGES_COUNT_EVENT_DUPL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_EVENT_IS_NULL           = ''DEX_CHANGES_EVENT_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_SKU_NULL                = ''DEX_CHANGES_SKU_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_BUFFER_NOT_FOUND        = ''DEX_CHANGES_BUFFER_NOT_FOUND'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_LOCATION_NOT_FOUND      = ''DEX_CHANGES_LOCATION_NOT_FOUND'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID   = ''DEX_CHANGES_LOCATION_TYPE_INVALID'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_SKU_IS_NULL             = ''DEX_CHANGES_SKU_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND   = ''DEX_CHANGES_CHANGE_TYPE_NOT_FOUND'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL      = ''DEX_CHANGES_REQ_CHANGE_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND    = ''DEX_CHANGES_CDCALENDAR_NOT_FOUND'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_REQ_CHANGE_INVALID      = ''DEX_CHANGES_REQ_CHANGE_INVALID'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID    = ''DEX_CHANGES_REQ_CHANGE_P_INVALID'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT   = ''DEX_CHANGES_REQ_CHANGE_TYPE_ALERT'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL    = ''DEX_CHANGES_CHANGE_STEPS_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID    = ''DEX_CHANGES_CHANGE_STEPS_INVALID'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR = ''DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_PREP_DATE_IS_NULL       = ''DEX_CHANGES_PREP_DATE_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_PREP_DATE_INVALID       = ''DEX_CHANGES_PREP_DATE_INVALID'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL   = ''DEX_CHANGES_PREP_END_DATE_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_PREP_END_ERROR          = ''DEX_CHANGES_PREP_END_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_PREP_REAL_END_ERROR     = ''DEX_CHANGES_PREP_REAL_END_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR    = ''DEX_CHANGES_EVENT_END_DATE_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_MODE_IS_NULL            = ''DEX_CHANGES_MODE_IS_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR   = ''DEX_CHANGES_REDU_EVENT_MODE_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME  = ''DEX_CHANGES_BIG_REPLENISHMENT_TIME'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_SKU_CHANGES             = ''DEX_CHANGES_SKU_CHANGES'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_LOCATION_CHANGES        = ''DEX_CHANGES_LOCATION_CHANGES'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_EVENT_START_DATE_NULL   = ''DEX_CHANGES_EVENT_START_DATE_NULL'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR  = ''DEX_CHANGES_EVENT_START_DATE_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR = ''DEX_CHANGES_OVERLAPPED_EVENTS_ERROR'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_EVENT_STARTED           = ''DEX_CHANGES_EVENT_STARTED'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_SUCESSFUL_EVENTS        = ''DEX_CHANGES_SUCESSFUL_EVENTS'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_ERROR_EVENTS            = ''DEX_CHANGES_ERROR_EVENTS'';' + CHAR(13)
			+ '		SET @MSG_DEX_CHANGES_UNEXPECTED_ERROR        = ''DEX_CHANGES_UNEXPECTED_ERROR'';' + CHAR(13);			
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_DUPLICATED'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_DUPLICATED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_COUNT_EVENT_DUPL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_COUNT_EVENT_DUPL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DEX_CHANGES_SKU_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_SKU_NULL OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DEX_CHANGES_BUFFER_NOT_FOUND'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_BUFFER_NOT_FOUND OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_LOCATION_NOT_FOUND'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_LOCATION_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_LOCATION_TYPE_INVALID'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_LOCATION_TYPE_INVALID OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_SKU_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_SKU_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_CHANGE_TYPE_NOT_FOUND'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_REQ_CHANGE_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_CDCALENDAR_NOT_FOUND'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_REQ_CHANGE_INVALID'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_REQ_CHANGE_INVALID OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_REQ_CHANGE_P_INVALID'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_CHANGE_STEPS_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_CHANGE_STEPS_INVALID'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_CHANGE_STEPS_INVALID OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_PREP_DATE_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_PREP_DATE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_PREP_DATE_INVALID'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_PREP_DATE_INVALID OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_PREP_END_DATE_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_PREP_END_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_PREP_END_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_PREP_REAL_END_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_PREP_REAL_END_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_END_DATE_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_END_DATE_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_MODE_IS_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_MODE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_BIG_REPLENISHMENT_TIME'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_SKU_CHANGES'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_SKU_CHANGES OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_LOCATION_CHANGES'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_LOCATION_CHANGES OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_START_DATE_NULL'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_START_DATE_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_START_DATE_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_START_DATE_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_OVERLAPPED_EVENTS_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_OVERLAPPED_EVENTS_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_EVENT_STARTED'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_STARTED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_SUCESSFUL_EVENTS'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_SUCESSFUL_EVENTS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_ERROR_EVENTS'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_ERROR_EVENTS OUTPUT ' + CHAR(13)
			+  CHAR(13)
			+ '		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_CHANGES_UNEXPECTED_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_UNEXPECTED_ERROR OUTPUT ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13);
	SET @vSPMasterLoad = @vSPMasterLoad
			+ CHAR(13)
			+ CHAR(13)
			+ '		DECLARE @PK_EVENT_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ '		DECLARE @FILE_NAME AS VARCHAR(500); ' + CHAR(13)
			+ '		DECLARE @FILE_ROW_NUMBER AS INT; ' + CHAR(13)
			+ CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  ' + CHAR(13)
			+ '		-- ---------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		IF OBJECT_ID(''tempdb..#DuplicateChangesTemp'') IS NOT NULL  ' + CHAR(13)
			+ '			DROP TABLE #DuplicateChangesTemp; ' + CHAR(13)
			+ CHAR(13)	
			+ '		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  INTO #DuplicateChangesTemp ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_COM_LOG] ' + CHAR(13)
			+ '		 WHERE 1 = 2; ' + CHAR(13)
			+ CHAR(13)	
			+ '		INSERT INTO #DuplicateChangesTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT [BCTDUP].[COUNTER1], @MSG_DEX_CHANGES_EVENT_DUPLICATED + CAST([BCTDUP].[COUNTER1] AS VARCHAR) + ''.'', NULL, ''E'', GETDATE(), [BCT].[SKU_CHG], [BCT].[LOCATION_CHG],' + CHAR(13) 
			+ '			   [BCT].[EVENT], [BCT].[FILE_ROW_NUMBER], ''EVENT'', [BCT].[FILE_NAME], @ivaTempLoadDate ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [BCT] ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[EVENT], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]             = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[PREPARATION_START_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[EVENT]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [BCTDUP] ' + CHAR(13)
			+ '			ON ([BCT].[IDEXCHANGE]             = @ivaIdExchange ' + CHAR(13)
			+ '			AND [BCT].[PREPARATION_START_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [BCTDUP].[EVENT]               = [BCT].[EVENT] ' + CHAR(13)
			+ '			AND [BCT].[FILE_ROW_NUMBER]        = [BCTDUP].[FILE_ROW_NUMBER]); ' + CHAR(13)	
			+ CHAR(13)
			+ '		SELECT @vDuplicatedEventCountTemp = SUM(COUNTER1) FROM #DuplicateChangesTemp;' + CHAR(13)
			+ '		SET @vErrorsBufferChangesCount    = @vErrorsBufferChangesCount + ISNULL(@vDuplicatedEventCountTemp, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		-- Counting repeated events ' + CHAR(13)
			+ '		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  FROM #DuplicateChangesTemp; ' + CHAR(13)	
			+ CHAR(13)
			+ '		DELETE [BCT] ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [BCT] ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[EVENT] ' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]             = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[PREPARATION_START_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[EVENT]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [BCTDUP] ' + CHAR(13)
			+ '			ON ([BCT].[IDEXCHANGE]             = @ivaIdExchange ' + CHAR(13)
			+ '			AND [BCT].[PREPARATION_START_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [BCTDUP].[EVENT]               = [BCT].[EVENT]); ' + CHAR(13)	
			+ CHAR(13)
			+ '		/*DECLARE cErrorLogCursor CURSOR FAST_FORWARD FOR' + CHAR(13)
			+ '		SELECT TEMPO.COUNTER1, TEMPO.EVENT, TEMPO.FILE_NAME, TEMPO.FILE_ROW_NUMBER ' + CHAR(13)
			+ '		  FROM (  SELECT COUNT(1) AS COUNTER1, TMP.EVENT, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ' + CHAR(13)
			+ '					FROM TFSCM_CLI_BUFFER_CHANGES_TEMP TMP ' + CHAR(13)
			+ '				   WHERE TMP.IDEXCHANGE             = @ivaIdExchange ' + CHAR(13)
			+ '					 AND TMP.PREPARATION_START_DATE = @ivaTempLoadDate' + CHAR(13)
			+ '				   GROUP BY TMP.EVENT, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ' + CHAR(13)
			+ '				) TEMPO ' + CHAR(13)
			+ '		 WHERE TEMPO.COUNTER1 > 1 ' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN cErrorLogCursor;' + CHAR(13)
			+ '		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedEventCountTemp, @PK_EVENT_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER;' + CHAR(13)
			+ CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '									  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)			
			+ '			VALUES (@MSG_DEX_CHANGES_EVENT_DUPLICATED, NULL, ''E'', GETDATE(), @PK_EVENT_ERROR_LOG, NULL,' + CHAR(13) 
			+ '				    @PK_EVENT_ERROR_LOG, @FILE_ROW_NUMBER, ''EVENT'', @FILE_NAME, @ivaTempLoadDate );' + CHAR(13)
			+ CHAR(13)
			+ '			SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + @vDuplicatedEventCountTemp;' + CHAR(13)
			+ '			SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedEventCountTemp, @PK_EVENT_ERROR_LOG;' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		CLOSE cErrorLogCursor;' + CHAR(13)
			+ '		DEALLOCATE cErrorLogCursor;*/' + CHAR(13)
			+ '	END TRY ' + CHAR(13)
			+ '	BEGIN CATCH ' + CHAR(13)
			+ '	END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '    -- -------------------------------------------------------------------------------' + CHAR(13)
			+ '    -- Method to get all programmed buffer changes in order to performance improvement' + CHAR(13)
			+ '    -- -------------------------------------------------------------------------------' + CHAR(13)
			+ '	BEGIN TRY	' + CHAR(13)
			+ '		--declare temporal table' + CHAR(13)
			+ '		DECLARE @tempSKUBuffer AS tempSKUBuffer;' + CHAR(13)
			+ '		-- tener en cuenta el evento' + CHAR(13)
			+ '		SET @cursor_buffer_change_sql = N''DECLARE c_event_buffer_change CURSOR FAST_FORWARD FOR '';' + CHAR(13)
			+ '		SET @sql_cursor = N'' SELECT CH.EVENT, CH.PREPARATION_START_DATE,''+' + CHAR(13)
			+ '						   ''        CASE WHEN CH.EVENT_ENDING_DATE IS NULL OR CH.EVENT_ENDING_DATE = '''''''' OR CH.EVENT_ENDING_DATE = ''''1901-01-01'''' ''+' + CHAR(13)
			+ '						   ''             THEN CH.EVENT_STARTING_DATE ''+' + CHAR(13)
			+ '						   ''        ELSE CH.EVENT_ENDING_DATE END AS EVENT_DATE, CH.FILTER ''+' + CHAR(13)
			+ '						   ''	FROM TFSCM_CLI_BUFFER_CHANGES CH ''+' + CHAR(13)
			+ '						   ''  WHERE CH.PROCESSING_DATE = ''''1901-01-01 00:00'''''';' + CHAR(13)
			+ CHAR(13)+
			+ '			EXEC(@cursor_buffer_change_sql + @sql_cursor);' + CHAR(13)
			+ '			OPEN c_event_buffer_change;' + CHAR(13)
			+ '			FETCH NEXT FROM c_event_buffer_change INTO @vOtherEvent, @vPreparationStartDate, @vEventDate, @actualFilter;' + CHAR(13)
			+ CHAR(13)
			+ '			WHILE(@@FETCH_STATUS = 0)' + CHAR(13)
			+ '			BEGIN	' + CHAR(13)
			+ '				SET @actualFilter = REPLACE(@actualFilter, @twoApostrophe, @oneApostrophe);' + CHAR(13)
			+ '				' + CHAR(13)
			+ '				' + CHAR(13)
			+ '				DECLARE @sqlSKUBuffer AS NVARCHAR(MAX) =  N''SELECT BUFFER.SKU, BUFFER.LOCATION, ''''''+@vOtherEvent+'''''', ''''''+CAST(@vPreparationStartDate AS VARCHAR)+'''''',''''''+CAST(@vEventDate AS VARCHAR)+''''''''+' + CHAR(13)
			+ '														   ''  FROM TFSCM_CLI_BUFFER BUFFER ''+' + CHAR(13)
			+ '														   ''       INNER JOIN TFSCM_CLI_LOCATION LOCATION ''+' + CHAR(13)
			+ '														   ''          ON LOCATION.CDLOCATION = BUFFER.LOCATION ''+' + CHAR(13)
			+ '														   '' WHERE BUFFER.INACTIVE = 0 AND ''+@actualFilter;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO @tempSKUBuffer EXECUTE (@sqlSKUBuffer);' + CHAR(13)
			+ CHAR(13)
			+ '			FETCH NEXT FROM c_event_buffer_change INTO @vOtherEvent, @vPreparationStartDate, @vEventDate, @actualFilter;' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			CLOSE c_event_buffer_change;' + CHAR(13)
			+ '			DEALLOCATE c_event_buffer_change;' + CHAR(13)
			+ '	END TRY' + CHAR(13)
			+ '	BEGIN CATCH  ' + CHAR(13)
			+ '   	' + CHAR(13)
    		+ '		IF ((SELECT CURSOR_STATUS(''global'',''c_event_buffer_change'')) IN (-1,0,1))' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			IF ((SELECT CURSOR_STATUS(''global'',''c_event_buffer_change'')) IN (0,1))' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				CLOSE c_event_buffer_change;  		' + CHAR(13)
			+ '			END' + CHAR(13)
			+ '			DEALLOCATE c_event_buffer_change;  ' + CHAR(13)
			+ '		END			' + CHAR(13)
			+ '	END CATCH' + CHAR(13)
			+ CHAR(13)
			+ '	-- Cursor for reading all events loaded to the temporal ' + CHAR(13)		
			+ '	DECLARE cDataTempCursor CURSOR FAST_FORWARD ' + CHAR(13)
			+ '	FOR ' + CHAR(13)
			+ '	SELECT ';
			
		SET @vSPMasterLoad = @vSPMasterLoad + @vAllColumnsBuildSelectByCursor + CHAR(13)
			+ '	  FROM '+@vTableTempName+ ' TMP ' + CHAR(13)
			+ '	  LEFT OUTER JOIN '+@vTableRealName+' BCHOLD ON (BCHOLD.EVENT = TMP.EVENT) ' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  LEFT OUTER JOIN TFSCM_CLI_BUFFER B ON (B.SKU = TMP.SKU_CHG AND B.LOCATION = TMP.LOCATION_CHG AND B.INACTIVE = 0)  ' + CHAR(13);
			
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) > 0 AND CHARINDEX('LOCATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '	  LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = TMP.SKU_CHG AND B_OLD.LOCATION = BCHOLD.LOCATION_CHG AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('LOCATION', @vAllUpgradablesColumns) > 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '	  LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = BCHOLD.SKU_CHG AND B_OLD.LOCATION = TMP.LOCATION_CHG AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('LOCATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '	  LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = BCHOLD.SKU_CHG AND B_OLD.LOCATION = BCHOLD.LOCATION_CHG AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  LEFT OUTER JOIN TFSCM_CLI_LOCATION LDEST ON (LDEST.CDLOCATION = TMP.LOCATION_CHG) ' +CHAR(13)+
			+ '	  LEFT OUTER JOIN TFSCM_CLI_LOCATION LDESTOLD ON (LDESTOLD.CDLOCATION = BCHOLD.LOCATION_CHG) ' +CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST ON (CAL_DEST.CDCALENDAR = LDEST.CDCALENDAR AND CAL_DEST.IS_ACTIVE = 1) '  + CHAR(13)
			+ '	  LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST_OLD ON (CAL_DEST_OLD.CDCALENDAR = LDESTOLD.CDCALENDAR AND CAL_DEST_OLD.IS_ACTIVE = 1) '  + CHAR(13);		
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  LEFT OUTER JOIN TFSCM_CLI_COLUMN_LIST CHANGE_TYPES ON (CHANGE_TYPES.CODE = TMP.CHANGE_TYPE AND CHANGE_TYPES.LIST_TYPE = ''CHANGE_TYPE'') ' + CHAR(13);

		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  LEFT OUTER JOIN TFSCM_CLI_COLUMN_LIST CHANGE_MODES ON (CHANGE_MODES.CODE = TMP.MODE AND CHANGE_MODES.LIST_TYPE = ''CHANGE_MODE'') ' + CHAR(13);

		SET @vSPMasterLoad = @vSPMasterLoad 
			+ CHAR(13)
			+ '	 WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13) 
			+ '	   AND TMP.ID IN ' + CHAR(13)
			+ '		( ' + CHAR(13)
			+ '		  SELECT TEMPO.ID ' + CHAR(13)
			+ '			FROM ' + CHAR(13)
			+ '				( SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID ' + CHAR(13)
			+ '					FROM '+@vTableTempName+ ' TMPAUX ' + CHAR(13)
			+ '				   WHERE TMPAUX.IDEXCHANGE             = @ivaIdExchange ' + CHAR(13)
			+ '					 AND TMPAUX.PREPARATION_START_DATE = @ivaTempLoadDate' +CHAR(13)
			+ '				   GROUP BY TMPAUX.EVENT ' + CHAR(13)
			+ '				) TEMPO ' + CHAR(13)
			+ '		   WHERE TEMPO.COUNTER1 = 1 ' + CHAR(13)
			+ '		) ' + CHAR(13)
			+ '	 ORDER BY TMP.EVENT ' + CHAR(13)
			+ CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	OPEN cDataTempCursor;' + CHAR(13)
			+ '	FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ CHAR(13)
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor'';' + CHAR(13)
			+ CHAR(13)
			+ '	WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		BEGIN TRY ' + CHAR(13);
 
		-- SET OLD VALUES FIELDS OVER ACTUAL VALUES FIELDS
		SET @vSPMasterLoad = @vSPMasterLoad  
			+ '			-- If the event exists ' + CHAR(13)
			+ '			IF (@EVENT_OLD IS NOT NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vDummy      = ''''; ' + CHAR(13)
			+ '				SET @FILTER      = @FILTER_OLD;' + CHAR(13)
			+ '				SET @JSON_FILTER = @JSON_FILTER_OLD;' + CHAR(13)
			+ CHAR(13)
			+ '				-- If the event already started, it is not possible to modify it' + CHAR(13)
			/*'				IF (@APPLIED_CHANGES_OLD > 0)' +CHAR(13) +
			'				BEGIN ' + CHAR(13) +
			'					SET @vPassesValidations = 0;' + CHAR(13)+
			'					INSERT INTO TFSCM_COM_LOG(DSLOG,LOG_DETAIL,CDTYPE,LOG_TIME)  ' + CHAR(13)+
			'					VALUES (@MSG_DEX_CHANGES_EVENT_STARTED, NULL, ''E'', GETDATE());' + CHAR(13)+
			'					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)+
			'					SET @ovaResult = ''1'';' + CHAR(13)+ 
			'					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)+
			'					CONTINUE; ' + CHAR(13)+
			'				END' +CHAR(13) +*/			
			+ '			END' + CHAR(13);
		
		/* -------------------------------------------------------------------------- */		
		/* ARMAR LAS VALIDACIONES DE LOS CAMPOS                                       */		
		/* -------------------------------------------------------------------------- */	
		DECLARE @validateEVENTStr AS NVARCHAR(MAX) = '';
		 
		SET @validateEVENTStr = ''
			+ '			-- Validate if event is empty' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @EVENT IS NULL)' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				SET @vPassesValidations = 0;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_EVENT_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, ' + CHAR(13)
			+ '					    @EVENT, @FILE_ROW_NUMBER, ''EVENT'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13);
		
		DECLARE @validateEVENTExistsStr AS NVARCHAR(MAX) = '';
		SET @validateEVENTExistsStr = ''		                
            + '			SELECT @countEvent = COUNT(1) ' + CHAR(13)
            + '			  FROM ' + @vTableRealName + ' ' + CHAR(13)
            + '			 WHERE EVENT = @EVENT;' +CHAR(13); 
             
		DECLARE @validateProcessedEventStr AS NVARCHAR(MAX) = '';		 
		SET @validateProcessedEventStr = ''
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			-- OHLO 20200521: Since v5.1.0, check if the event is already processed. ' + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @EVENT_OLD IS NOT NULL AND @PROCESSING_DATE_OLD IS NOT NULL AND @PROCESSING_DATE_OLD != ''1901-01-01 00:00'')' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				SET @vPassesValidations = 0;' + CHAR(13)
			+ CHAR(13)
			+ '				EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '					''DEX_CHANGES_EVENT_PROCESSED'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_EVENT_PROCESSED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_EVENT_PROCESSED, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, ' + CHAR(13)
			+ '						@EVENT_OLD, @FILE_ROW_NUMBER, ''EVENT'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ '			-- -------------------------------------------------------------------------------' + CHAR(13);
 
		DECLARE @validateSKU_CHGStr AS NVARCHAR(MAX) = '';	
		DECLARE @tabTmp VARCHAR(50) = '';
		
		IF (@skuNotUpgradable = 'N')
		BEGIN 	
			SET @tabTmp = '	';	
			SET @validateSKU_CHGStr = ''
				+ '			IF (@countEvent = 0) ' + CHAR(13)+
				+ '			BEGIN ' + CHAR(13);
		END	
		
		SET @validateSKU_CHGStr += ''
			+ @tabTmp + '			-- Validate if sku is empty' + CHAR(13)
			+ @tabTmp + '			IF (@vPassesValidations != 0 AND @SKU_CHG IS NULL)' + CHAR(13)
			+ @tabTmp + '			BEGIN ' + CHAR(13)
			+ @tabTmp + '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, ' + CHAR(13)
			+ @tabTmp + '										  RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ @tabTmp + '				VALUES (@MSG_DEX_CHANGES_SKU_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, ' + CHAR(13)
			+ @tabTmp + '					    @SKU_CHG, @FILE_ROW_NUMBER, ''SKU_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ @tabTmp + '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ @tabTmp + '				CONTINUE; ' + CHAR(13)
			+ @tabTmp + '			END' + CHAR(13);
			
		IF (@skuNotUpgradable = 'N')
		BEGIN 	
			SET @validateSKU_CHGStr += 
				'			END ' + CHAR(13);
		END	
		
		DECLARE @validateLOCATION_CHGStr AS NVARCHAR(MAX) = '';		 
		SET @tabTmp = '';
		
		IF (@locationNotUpgradable = 'N')
		BEGIN 	
			SET @tabTmp = '	';	
			SET @validateLOCATION_CHGStr = 
				'			IF (@countEvent = 0) ' + CHAR(13)+
				'			BEGIN ' + CHAR(13);			
		END	
		
		SET @validateLOCATION_CHGStr += ''
			+ @tabTmp + '			-- Validate if location is empty or inactive' + CHAR(13)
			+ @tabTmp + '			IF (@vPassesValidations != 0 AND (@LOCATION_CHG IS NULL OR @LOCATION_IS_ACTIVE IS NULL OR @LOCATION_IS_ACTIVE = 0) )' + CHAR(13)
			+ @tabTmp + '			BEGIN' + CHAR(13)
			+ @tabTmp + '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ @tabTmp + '				VALUES (@MSG_DEX_CHANGES_LOCATION_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, ''LOCATION_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ @tabTmp + '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ @tabTmp + '				CONTINUE;' + CHAR(13)
			+ @tabTmp + '			END' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '			-- Validate if location has a valid type' + CHAR(13)
			+ @tabTmp + '			IF (@vPassesValidations != 0 AND ( @LOCATION_TYPE IS NULL OR (@LOCATION_TYPE != ''WH'' AND @LOCATION_TYPE != ''CL'' AND @LOCATION_TYPE != ''PS'') ) )' + CHAR(13)
			+ @tabTmp + '			BEGIN' + CHAR(13)
			+ @tabTmp + '				SET @vPassesValidations = 0;' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ @tabTmp + '				VALUES (@MSG_DEX_CHANGES_LOCATION_TYPE_INVALID, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, ''LOCATION_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ @tabTmp + '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ @tabTmp + '				CONTINUE;' + CHAR(13)
			+ @tabTmp + '			END' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '			-- Validate if the calendar related to the location is empty or inactive' + CHAR(13)
			+ @tabTmp + '			IF (@vPassesValidations != 0 AND @CDCALENDAR_DEST IS NULL)' + CHAR(13)
			+ @tabTmp + '			BEGIN' + CHAR(13)
			+ @tabTmp + '				SET @vPassesValidations = 0;' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ @tabTmp + '				VALUES (@MSG_DEX_CHANGES_CDCALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_CHG, 105), @FILE_ROW_NUMBER, ''LOCATION_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ @tabTmp + '				SET @ovaResult = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ @tabTmp + '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ @tabTmp + '				CONTINUE;' + CHAR(13)
			+ @tabTmp + '			END' + CHAR(13);
			
 		IF (@locationNotUpgradable = 'N')
		BEGIN 	 
			SET @validateLOCATION_CHGStr += 
				'			END ' + CHAR(13);			
		END	
 		
		DECLARE @validateBUFFERExistsStr AS NVARCHAR(MAX) = '';
		-- IF (@locationNotUpgradable = 'Y' OR @skuNotUpgradable = 'Y')
		-- BEGIN 	
		SET @validateBUFFERExistsStr = ''
			+ '			-- Validate if buffer is empty or inactive' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND (@BUFFER_SKU IS NULL))  ' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				SET @vPassesValidations = 0;' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_BUFFER_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @SKU_CHG + ''; '' + @LOCATION_CHG, 105), @FILE_ROW_NUMBER, ''SKU_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE;' + CHAR(13)
			+ '			END' + CHAR(13);
 		--END 
 		
 		DECLARE @validateTYPEExistsStr AS NVARCHAR(MAX) = '';
		SET @validateTYPEExistsStr = ''
 			+ '			-- Validate if change type is empty or invalid' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND (@CHANGE_TYPE IS NULL OR @existChangeType IS NULL))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER,  COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_CHANGE_TYPE_NOT_FOUND, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_TYPE, 105), @FILE_ROW_NUMBER, ''CHANGE_TYPE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ '			' + CHAR(13)
 			+ '			-- Validate if required change is empty' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)+
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_REQ_CHANGE_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REQUIRED_CHANGE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REQUIRED_CHANGE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			ELSE ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				-- Depending on the change type, validate the required change value' + CHAR(13)
			+ '				DECLARE @changeTypeMsg VARCHAR(MAX) = ''''; ' + CHAR(13)
			+ '				IF (@vPassesValidations != 0 AND @CHANGE_TYPE = ''P'' AND @REQUIRED_CHANGE < -1) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @vPassesValidations = 0; ' + CHAR(13)
			+ '					SET @changeTypeMsg = @MSG_DEX_CHANGES_REQ_CHANGE_P_INVALID;' +CHAR(13) 
			+ '				END ' + CHAR(13)
			+ '				ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @vPassesValidations = 0; ' + CHAR(13)
			+ '					SET @changeTypeMsg = @MSG_DEX_CHANGES_REQ_CHANGE_INVALID;' +CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE < 0)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					IF (@CHANGE_TYPE = ''P'') ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @NewBufferSize = (1 + @REQUIRED_CHANGE) * @BUFFER; ' + CHAR(13) 
			+ '					END ' + CHAR(13)
			+ '					ELSE IF (@CHANGE_TYPE = ''A'') ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @NewBufferSize = @REQUIRED_CHANGE + @BUFFER; ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ CHAR(13)
			+ '					IF (@NewBufferSize <= @MINIMUM_BUFFER) '
			+ '					BEGIN ' + CHAR(13)			
			+ '						EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '							''DEX_CHANGES_REQ_CHANGE_TYPE_ALERT'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '						VALUES (@MSG_DEX_CHANGES_REQ_CHANGE_TYPE_ALERT + @EVENT + ''.'', NULL, ''A'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REQUIRED_CHANGE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REQUIRED_CHANGE'', @FILE_NAME, @ivaTempLoadDate) ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				IF (@vPassesValidations = 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '					VALUES (@changeTypeMsg, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REQUIRED_CHANGE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REQUIRED_CHANGE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''REQUIRED_CHANGE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '					SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '					CONTINUE; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '			END ' + CHAR(13);
	
		DECLARE @validatePREP_DATEStr AS NVARCHAR(MAX) = '';
	    SET @validatePREP_DATEStr = ''
			+ '			-- Validate if preparation start date is empty, else, if it has a value less than current date' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @PREPARATION_START_DATE IS NULL) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_PREP_DATE_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_START_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PREPARATION_START_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PREPARATION_START_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			ELSE IF (@vPassesValidations != 0 AND @PREPARATION_START_DATE < @DATE_SERVER_NO_TIME) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_PREP_DATE_INVALID, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_START_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PREPARATION_START_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PREPARATION_START_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13);

		DECLARE @validatePREP_END_DATEStr AS NVARCHAR(MAX) = '';
	    SET @validatePREP_END_DATEStr = ''
		    + '			-- Validate if preparation start date is empty, else, if it has a value less than preparation start date' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @PREPARATION_END_DATE IS NULL) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_PREP_END_DATE_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_END_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PREPARATION_END_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PREPARATION_END_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
		    + '			ELSE IF (@vPassesValidations != 0 AND @PREPARATION_END_DATE < @PREPARATION_START_DATE ) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)+
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_PREP_END_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @PREPARATION_END_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PREPARATION_END_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PREPARATION_END_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			' + CHAR(13);
			
		/* SET @validatePREP_END_DATEStr = @validatePREP_END_DATEStr +		
		    '			-- Get the real preparation end date' + CHAR(13)+
			'			SET @differenceDays  = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PREPARATION_END_DATE, @PREPARATION_START_DATE); ' + CHAR(13) +
		    '			SET @stepsAverage    = (@differenceDays * (@CHANGE_STEPS - 1)) / @CHANGE_STEPS; ' + CHAR(13) +
		    '			SET @preparationRealEndDate = DATEADD(dd, @stepsAverage + @REPLENISHMENT_TIME, @PREPARATION_START_DATE);' + CHAR(13)+
			'			' + CHAR(13);
			
		SET @validatePREP_END_DATEStr = @validatePREP_END_DATEStr +
			'			-- Validate if real preparation end date is greater than preparation end date ' + CHAR(13)+
			'			IF (@vPassesValidations != 0 AND @preparationRealEndDate > @PREPARATION_END_DATE) ' + CHAR(13)+
			'			BEGIN ' + CHAR(13)+
			'				SET @vPassesValidations = 0; ' + CHAR(13)+
			'				INSERT INTO TFSCM_COM_LOG(DSLOG,LOG_DETAIL,CDTYPE,LOG_TIME)  ' + CHAR(13)+
			'				VALUES (@MSG_DEX_CHANGES_PREP_REAL_END_ERROR, NULL, ''E'', GETDATE());' + CHAR(13)+
			'		   		SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)+
			'				SET @ovaResult = ''1''; ' + CHAR(13)+ 
			'				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)+
			'				CONTINUE; ' + CHAR(13)+
			'			END ' + CHAR(13) ;*/

		DECLARE @validateSTEPSStr AS NVARCHAR(MAX) = '';
	    SET @validateSTEPSStr = ''
			+ '			-- Validate if steps is empty, else, if it has a value less than or equal to zero' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @CHANGE_STEPS IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_CHANGE_STEPS_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'CHANGE_STEPS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''CHANGE_STEPS'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
		    + CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO ' + @vAllVariablesFetch + ';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13) 
			+ '			ELSE IF (@vPassesValidations != 0 AND @CHANGE_STEPS <= 0) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_CHANGE_STEPS_INVALID, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'CHANGE_STEPS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''CHANGE_STEPS'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
		    + CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13) 
			+ '			END ' + CHAR(13)
			+ '			ELSE  IF (@vPassesValidations != 0) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @PreparationWindow = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PREPARATION_END_DATE, @PREPARATION_START_DATE) + 1; ' + CHAR(13)
		    + CHAR(13)
			+ '				IF (@CHANGE_STEPS > @PreparationWindow) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '					EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '						''DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR OUTPUT ' + CHAR(13)
			+  CHAR(13)+
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '					VALUES (@MSG_DEX_CHANGES_STEPS_BUFFER_SIZE_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @CHANGE_STEPS' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'CHANGE_STEPS_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''CHANGE_STEPS'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
		    + CHAR(13)
			+ '					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '					SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '					CONTINUE; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '			END ' + CHAR(13);
			

		DECLARE @validateEVENT_START_DATEStr AS NVARCHAR(MAX) = '';
	    SET @validateEVENT_START_DATEStr = ''
		    + '			-- Validate if event starting date is empty, else, if it has a value less than preparation end date' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @EVENT_STARTING_DATE IS NULL) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_EVENT_START_DATE_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_STARTING_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EVENT_STARTING_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EVENT_STARTING_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			ELSE IF (@vPassesValidations != 0 AND @EVENT_STARTING_DATE < @PREPARATION_END_DATE) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_EVENT_START_DATE_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_STARTING_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EVENT_STARTING_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EVENT_STARTING_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13);
			
		DECLARE @validateEVENT_END_DATEStr AS NVARCHAR(MAX) = '';
	    SET @validateEVENT_END_DATEStr = ''
		    + '			-- If event ending date is empty, set it to 1901-01-01, else, validate if it has a value less than event starting date' + CHAR(13)
			+ '			IF (@EVENT_ENDING_DATE IS NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @EVENT_ENDING_DATE = ''1901/01/01''; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			ELSE IF (@vPassesValidations != 0 AND @EVENT_ENDING_DATE <> ''1901/01/01'' AND @EVENT_ENDING_DATE < @EVENT_STARTING_DATE ) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_EVENT_END_DATE_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EVENT_ENDING_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EVENT_ENDING_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13);
			

		DECLARE @validateMODEStr AS NVARCHAR(MAX) = '';
	    SET @validateMODEStr = ''
		    + '			-- Validate if mode is empty or has an invalid value' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND (@MODE IS NULL OR @existChangeMode IS NULL)) ' +CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				-- If event ending date is empty, assigne mode NONE by default' + CHAR(13)
			+ '				IF (@EVENT_ENDING_DATE = ''1901/01/01'') ' + CHAR(13)
			+ '				BEGIN' +CHAR(13)
			+ '					SET @MODE = ''NONE''; ' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '				ELSE' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '					VALUES (@MSG_DEX_CHANGES_MODE_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @MODE, 105), @FILE_ROW_NUMBER, ''MODE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '					SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '					SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '					CONTINUE; ' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			-- If event ending date is not empty and the mode is nor Partial or Total' + CHAR(13)
			+ '			IF (@vPassesValidations != 0 AND @EVENT_ENDING_DATE <> ''1901/01/01'' AND (@MODE <> ''PARTIAL'' AND @MODE <> ''TOTAL'')) ' + CHAR(13)+  
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_MODE_IS_NULL, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EVENT_ENDING_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EVENT_ENDING_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '			ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE < 0 AND @MODE = ''TOTAL'') ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '					''DEX_CHANGES_REDU_EVENT_MODE_ERROR'', @vLanguage, '''', '''', '''', @MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_REDU_EVENT_MODE_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @MODE, 105), @FILE_ROW_NUMBER, ''MODE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ '			-- If event ending date is not empty and the mode is equal to Partial, validate if replenishment time is too big' + CHAR(13)
			+ '			ELSE IF (@vPassesValidations != 0 AND @REQUIRED_CHANGE > 0 AND @EVENT_ENDING_DATE <> ''1901/01/01'' AND @MODE = ''PARTIAL'') ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @differenceDays  = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@EVENT_ENDING_DATE, @EVENT_STARTING_DATE);' + CHAR(13)
		    + CHAR(13)
			+ '				IF (@vPassesValidations != 0 AND @differenceDays < @REPLENISHMENT_TIME ) ' +CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '					VALUES (@MSG_DEX_CHANGES_BIG_REPLENISHMENT_TIME, NULL, ''A'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @REPLENISHMENT_TIME, 105), @FILE_ROW_NUMBER, ''REPLENISHMENT_TIME'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)+
			+ '				END ' + CHAR(13)
			+ '			END ' + CHAR(13);
			
		DECLARE @validateSameEventStr VARCHAR(MAX);
		SET @validateSameEventStr = ''
			+ '			-- If event already exists, check if sku and/or location have changed'+ CHAR(13)
			+ '			-- in order to change the column Filter'+ CHAR(13)
			+ '			IF (@EVENT_OLD IS NOT NULL AND LTRIM(RTRIM(@EVENT_OLD)) <> '''') ' + CHAR(13)
			+ '			BEGIN' + CHAR(13);
		
		IF (@skuNotUpgradable = 'Y')
		BEGIN 		
			SET @validateSameEventStr = @validateSameEventStr 
				+ '				SET @skuOld      = @SKU_CHG;' + CHAR(13)
				+ '				SET @skuNew      = @SKU_CHG;' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@SKU_OLD IS NOT NULL AND LTRIM(RTRIM(@SKU_OLD)) <> '''') ' + CHAR(13)
				+ '				BEGIN' + CHAR(13)
				+ '					IF(@SKU_OLD <> @SKU_CHG) ' + CHAR(13)
				+ '					BEGIN' + CHAR(13)
				+ '						SET @skuOld = @SKU_OLD;' + CHAR(13)
				+ CHAR(13)
				+ '						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '						VALUES (@MSG_DEX_CHANGES_SKU_CHANGES, NULL, ''I'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @SKU_OLD, 105), @FILE_ROW_NUMBER, ''SKU_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
				+ '					END'+ CHAR(13)
				+ '				END  ' + CHAR(13)
				+ CHAR(13);
		END 
		ELSE
		BEGIN
			SET @validateSameEventStr = @validateSameEventStr	
				+ '				SET @skuOld      = @SKU_OLD;' + CHAR(13)
				+ '				SET @skuNew      = @SKU_OLD;' + CHAR(13);		
		END	
			
		IF (@locationNotUpgradable = 'Y')
		BEGIN 		
			SET @validateSameEventStr = @validateSameEventStr
				+ '				SET @locationOld = @LOCATION_CHG;' + CHAR(13)
				+ '				SET @locationNew = @LOCATION_CHG;' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@LOCATION_OLD IS NOT NULL AND LTRIM(RTRIM(@LOCATION_OLD)) <> '''') ' + CHAR(13)
				+ '				BEGIN' + CHAR(13)
				+ '					IF(@LOCATION_OLD <> @LOCATION_CHG) ' + CHAR(13)
				+ '					BEGIN' + CHAR(13)
				+ '						SET @locationOld = @LOCATION_OLD;' + CHAR(13)
				+ CHAR(13)
				+ '						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '						VALUES (@MSG_DEX_CHANGES_LOCATION_CHANGES, NULL, ''I'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @LOCATION_OLD, 105), @FILE_ROW_NUMBER, ''LOCATION_CHG'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
				+ '					END' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ CHAR(13);
		END
		ELSE
		BEGIN
			SET @validateSameEventStr = @validateSameEventStr
				+ '				SET @locationOld = @LOCATION_OLD;' + CHAR(13)
				+ '				SET @locationNew = @LOCATION_OLD;' + CHAR(13);			
		END 
		 
		SET @validateSameEventStr = @validateSameEventStr
			+ '			END ' + CHAR(13)
			+ '			ELSE ' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				SET @skuNew      = @SKU_CHG;' + CHAR(13)
			+ '				SET @locationNew = @LOCATION_CHG;' + CHAR(13)
            + '			END ' + CHAR(13)
			+ '           ' + CHAR(13)
			+ '			SET @FILTER      = ''(   BUFFER.SKU =''''''+REPLACE(@skuNew, '''''''','''''''''''')+''''''  AND BUFFER.LOCATION =''''''+REPLACE(@locationNew, '''''''','''''''''''')+''''''  ) '';' + CHAR(13)
			+ '			SET @JSON_FILTER = ''{    "_constructor":"AdvancedCriteria",'' +'+ CHAR(13)
			+ '							   ''     "operator":"and",'' +'+ CHAR(13)
			+ '							   ''     "criteria":[''+'+ CHAR(13)
			+ '							   ''        {            "operator":"iEquals",             "fieldName":"SKU",             "value":"''+@skuNew+''"        },''+'+ CHAR(13)
			+ '							   ''        {            "operator":"iEquals",             "fieldName":"LOCATION",             "value":"''+@locationNew+''"        }''+'+ CHAR(13)
			+ '							   ''    ]}''; ' + CHAR(13) ;
		
		DECLARE @computeDaysBetweenChangesStr AS NVARCHAR(MAX) = '';
	    SET @computeDaysBetweenChangesStr = ''
			+ '			IF (@vPassesValidations != 0) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @differenceDays = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@PREPARATION_END_DATE, @PREPARATION_START_DATE) + 1; ' + CHAR(13) 
			+ '				SET @DAYS_BETWEEN_CHANGES  = (@differenceDays / @CHANGE_STEPS);  ' + CHAR(13)
	        + '			END' + CHAR(13); 
	    
			
		DECLARE @checkIfBufferExistsStr AS NVARCHAR(MAX) = '';
	    SET @checkIfBufferExistsStr = ''
			+ '			-- Validate if the buffer exists ' + CHAR(13)
			+ '			DECLARE @EVENT_DATE DATE; ' + CHAR(13)
			+ '			SET @EVENT_DATE = @EVENT_ENDING_DATE;' + CHAR(13)
			+ CHAR(13)
	        + '			IF (@EVENT_ENDING_DATE IS NULL OR @EVENT_ENDING_DATE = ''1901/01/01'') ' + CHAR(13)
	        + '			BEGIN ' + CHAR(13)
	        + '				SET @EVENT_DATE = @EVENT_STARTING_DATE;' + CHAR(13)
	        + '			END' + CHAR(13)
	        + '           ' + CHAR(13)    
	        + '			EXEC dbo.VALIDATE_EVENT_BUFFER_CHANGE @tempSKUBuffer, @FILTER, @PREPARATION_START_DATE, '+ CHAR(13)
		    + '				@EVENT_DATE, @EVENT, @vLanguage, @ovaCheckResult OUTPUT, '+ CHAR(13)
		    + '				@ovaCheckMessage OUTPUT ;'+ CHAR(13)
	        + CHAR(13)
	        + '			IF (@ovaCheckResult = 1) ' + CHAR(13)
	        + '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0; ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@ovaCheckMessage, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, CONVERT(VARCHAR, @EVENT_ENDING_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempChgNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'EVENT_ENDING_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''EVENT_ENDING_DATE'', @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
	        + CHAR(13)
			+ '				SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
	        + '			END' + CHAR(13) ;
		
		/* Se adicionan las validaciones al MasterLoad */
		-- VALIDATIONS:
 		SET @vSPMasterLoad = @vSPMasterLoad 
			+ CHAR(13)
			+ '			SET @vPassesValidations = 1; ' + CHAR(13)
			+ CHAR(13)
			+ @validateEVENTStr             + CHAR(13)
			+ @validateEVENTExistsStr       + CHAR(13)
			+ @validateProcessedEventStr    + CHAR(13)
			+ @validateSKU_CHGStr           + CHAR(13)
			+ @validateLOCATION_CHGStr      + CHAR(13)
			+ @validateBUFFERExistsStr      + CHAR(13)
			+ @validateTYPEExistsStr        + CHAR(13)
			+ @validatePREP_DATEStr         + CHAR(13)
			+ @validatePREP_END_DATEStr     + CHAR(13)
			+ @validateSTEPSStr             + CHAR(13)
			+ @validateEVENT_START_DATEStr  + CHAR(13)
			+ @validateEVENT_END_DATEStr    + CHAR(13)
			+ @validateMODEStr              + CHAR(13)
			+ @validateSameEventStr         + CHAR(13)
			+ @checkIfBufferExistsStr  	    + CHAR(13)
			+ @computeDaysBetweenChangesStr + CHAR(13)
			+ CHAR(13)  ;
			
		SET @vSPMasterLoad = @vSPMasterLoad +
			+ '			-- If validations pass, then update or insert the event' + CHAR(13)
			+ '			IF(@vPassesValidations = 1) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + 
			+ '				IF (@EVENT_OLD IS NOT NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @vDummy = ''''; ' + CHAR(13);
	 
		SET @vSPMasterLoad = @vSPMasterLoad + 
			+ '					-- Set inicial values for computed columns'                            + CHAR(13)
			+ '					SET @CREATION_DATE               = @CREATION_DATE_OLD;'                + CHAR(13)
			+ '					SET @CREATION_USER               = @CREATION_USER_OLD;'                + CHAR(13)
			+ '					SET @DAYS_BETWEEN_CHANGES        = @DAYS_BETWEEN_CHANGES_OLD;'         + CHAR(13)
			+ '					--SET @FILTER                    = @FILTER_OLD;'                       + CHAR(13)
			+ '					--SET @JSON_FILTER               = @JSON_FILTER_OLD;'                  + CHAR(13)
			+ '					SET @MODIFICATION_DATE           = GETDATE() ;'                        + CHAR(13)
			+ '					SET @MODIFICATION_USER           = ''FOCUSSSCM''; '                    + CHAR(13)
			+ '					SET @PROCESSING_DATE             = @PROCESSING_DATE_OLD; '             + CHAR(13)
			+ '					SET @ATYPICAL_CONSUMPTION_STATUS = @ATYPICAL_CONSUMPTION_STATUS_OLD; ' + CHAR(13)
			+ '				END' + CHAR(13);
	 
		SET @vSPMasterLoad = @vSPMasterLoad + 
			'				ELSE ' + CHAR(13)+
			'				BEGIN ' + CHAR(13)+
			'					SET @CREATION_DATE        = GETDATE();' + CHAR(13)+
			'					SET @CREATION_USER        = ''FOCUSSSCM'';' + CHAR(13)+
			'					SET @MODIFICATION_DATE    = GETDATE() ;' + CHAR(13)+
			'					SET @MODIFICATION_USER    = ''FOCUSSSCM''; ' + CHAR(13) +
			'				END' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ CHAR(13)
			+ '				-- If event does not exist, insert it, else, update it' + CHAR(13)
			+ '				IF @EVENT_OLD IS NULL' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					INSERT INTO '+@vTableRealName+'('+@vAllColumnsInsert+')' + CHAR(13)
			+ '					VALUES('+@vAllValuesInsert+')'+';' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '				ELSE '+	CHAR(13)
			+ '				BEGIN '+	CHAR(13)
			+ '					UPDATE '+@vTableRealName+CHAR(13)
			+ '					'+@vAllSetsColumnsAndValuesUpdate+CHAR(13)
			+ '					 WHERE '+@CDPKFIELD+' = @'+@CDPKFIELD +';'+ CHAR(13)
			+ '				END '+	CHAR(13)
			+ CHAR(13)
			--+CHAR(13)+
			--'				IF (@BCH_TYPE = ''S'')' + CHAR(13)+
			--'				BEGIN' + CHAR(13)+
			--'					IF NOT EXISTS (SELECT TOP 1 1 FROM @vTEMPORARY_ASSOCIATED_BUFFER WHERE SKU = @SKU_CHG AND LOCATION = @LOCATION_CHG)' + CHAR(13)+
			--'					BEGIN' + CHAR(13)+
			--'						INSERT INTO @vTEMPORARY_ASSOCIATED_BUFFER VALUES (@SKU_CHG, @LOCATION_CHG)' + CHAR(13)+
			--'					END' + CHAR(13)+
			--'				END' + CHAR(13)+
			--+CHAR(13)+
			+ '				SET @ovaHasProcessed = ''1'';'	+CHAR(13)
			+ CHAR(13)
			+ '				UPDATE '+@vTableTempName+CHAR(13)
			+ '				   SET STATUS = 1 ' + CHAR(13)
			+ '				 WHERE ID = @ID_TEMP; '+ CHAR(13)
			+ CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '				SET @vProcessBufferChangesCount = @vProcessBufferChangesCount + 1;' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '		END TRY' + CHAR(13)
			+ '		BEGIN CATCH ' + CHAR(13)
			+ '			SET @vErrorsBufferChangesCount = @vErrorsBufferChangesCount + 1;' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			SET @ovaMessage = '' ERROR_MESSAGE: ''+ERROR_MESSAGE(); ' + CHAR(13)
			+ '			' + CHAR(13)
			+ '			BEGIN TRY ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@MSG_DEX_CHANGES_UNEXPECTED_ERROR, NULL, ''E'', GETDATE(), @SKU_CHG, @LOCATION_CHG, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @ivaTempLoadDate);' + CHAR(13)
			+ '			END TRY ' + CHAR(13)
			+ '			BEGIN CATCH ' + CHAR(13)
			+ '			END CATCH ' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ '		' + CHAR(13)
			+ '		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;' + CHAR(13)
			+ '		IF(@vCOMMIT_COUNT = 10)' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			COMMIT;' + CHAR(13)
			+ '			SET @vCOMMIT_COUNT = 0;' + CHAR(13)
			+ '		END' + CHAR(13)
			+ '		' + CHAR(13)
			+ '		FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+';' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
 			+ CHAR(13)
			+ '	CLOSE cDataTempCursor' + CHAR(13)
			+ '	DEALLOCATE cDataTempCursor' + CHAR(13)
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor'';' + CHAR(13)
			+ CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ CHAR(13)
			+ '	IF(@ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		UPDATE TBL ' + CHAR(13)
			+ '		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() ' + CHAR(13)
			+ '		  FROM TFSCM_COM_TABLES TBL ' +CHAR(13)
			+ '		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) ' + CHAR(13)
			+ '		   AND INTER.CDINTERFACE = '+CAST(@ivaCodInterface AS VARCHAR)+''+';' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessage = @MSG_DEX_CHANGES_SUCESSFUL_EVENTS+'': '' + CAST ( @vProcessBufferChangesCount AS varchar ) + '', ''+ @MSG_DEX_CHANGES_ERROR_EVENTS+'': '' + CAST ( @vErrorsBufferChangesCount AS varchar );'
			+ CHAR(13)
			+ '	SET @vTotalErrorsBufferChanges = (@vErrorsBufferChangesCount + @ivaErrorValidations)' + CHAR(13)
			+ '	SELECT @vMessagesAfterDataExchange = PARAM_VALUE FROM   TFSCM_COM_PARAMS' + CHAR(13)
			+ '		WHERE CDPARAM = ''MESSAGES_AFTER_DATAEXCHANGE''' + CHAR(13)
			+ '	IF( @vTotalErrorsBufferChanges > 0 AND @vMessagesAfterDataExchange = ''Y'')' + CHAR(13)
			+ '	BEGIN' + CHAR(13)
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''CDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsBufferChanges, ''CDE'', ''BUFFER_CHANGES_UNPROCESSED_EVENTS'', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT' + CHAR(13)
			+ '	END	' + CHAR(13)
			+ '	IF(@vTotalErrorsBufferChanges = 0 AND @vMessagesAfterDataExchange = ''Y'' AND @ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN' +CHAR(13)
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''CDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ 'END TRY ' + CHAR(13)			
			+ 'BEGIN CATCH ' + CHAR(13)
			+ '	SET @ovaResult = ''1'';' + CHAR(13)
			+ '	SET @ovaMessage =  ''BUFFER_CHANGES: ERROR_NUMBER: ''+CAST ( ERROR_NUMBER() AS varchar )+' + CHAR(13)
			+ '		'' ERROR_SEVERITY: ''+CAST ( ERROR_SEVERITY() AS varchar )+'' ERROR_STATE: ''+CAST ( ERROR_STATE() AS varchar )+' + CHAR(13)
			+ '		'' ERROR_PROCEDURE: ''+ ERROR_PROCEDURE()+'' ERROR_LINE: ''+CAST ( ERROR_LINE() AS varchar )+'' ERROR_MESSAGE: ''+ERROR_MESSAGE();' + CHAR(13)
			+ CHAR(13)
			+ '	IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (-1,0,1)) ' + CHAR(13)
  			+ '	BEGIN ' + CHAR(13)
  			+ '		IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (0,1)) ' + CHAR(13)
  			+ '		BEGIN ' + CHAR(13)
  			+ '			CLOSE cDataTempCursor; ' + CHAR(13)
   			+ '		END ' + CHAR(13)
   			+ '		DEALLOCATE cDataTempCursor; ' + CHAR(13)
   			+ '	END ' + CHAR(13)
			+ 'END CATCH ' + CHAR(13)
			+ 'END ';			
		-- -----------------------------------------------------------------------------------
		--PRINT @vSPMasterLoad
		/*
		DECLARE @Counter INT
		SET @Counter = 0
		DECLARE @TotalPrints INT
		SET @TotalPrints = (LEN(@vSPMasterLoad) / 4000) + 1
		WHILE @Counter < @TotalPrints 
		BEGIN
		    -- Do your printing...
		    
		    PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, (@Counter * 4000) + 4000)
		    PRINT '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
		    SET @Counter = @Counter + 1
		    
		END
		--PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, LEN(@vSPMasterLoad) )
		*/
		-- -----------------------------------------------------------------------------------
		
		EXEC (@vSPMasterLoad)
		
		SET @vTrace = 'End of the cInterfaceColumnConfiguration  '  
		--Procedure result
		SET @ovaResult = '0';
		SET @ovaMessage = 'bufferChangesGenerationProcessSucceed';
		--PRINT	@vTrace	
	END TRY	
	BEGIN CATCH
		-- PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_BUFFER_CHANGES_BUILDER]') 
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		RAISERROR (@ovaMessage, 
				   16, 
				   @ovaResult 
				   );  
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[MASTER_BUILDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Johan Berrio
-- Upgrade date: 13/01/2020
-- Description : Add varchar variables that actually are numeric
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Auhor      : Isaac Florez
-- Upgrade date: 20/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Full column names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author:		Julian Andres Gonzalez Velez
-- Create date: 08/24/2013 
-- Description:	Procedure for creating SP masters
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MASTER_BUILDER] 
   /* Input Parameters */
    @ivaCodInterface AS SMALLINT,
    --sequence value
    --@ivaIdExchange NUMERIC(10),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @vSPMasterLoad          AS NVARCHAR(MAX);
	DECLARE @vTableTempName         AS VARCHAR(50);
	DECLARE @vTableRealName         AS VARCHAR(50);
	DECLARE @vTrace                 AS NVARCHAR(MAX) = '';

	DECLARE @CDFIELD                AS NVARCHAR(50);
	DECLARE @CDPKFIELD              AS NVARCHAR(50);
	DECLARE @DSTYPE                 AS VARCHAR(50);
	DECLARE @COLUMN_SIZE            AS SMALLINT;
	DECLARE @COLUMN_ACCURACY        AS SMALLINT;
	DECLARE @DECIMAL_ACCURACY       AS SMALLINT;
	DECLARE @IS_UPGRADEABLE         AS VARCHAR(1);
	
	DECLARE @vAllColumns            AS NVARCHAR(MAX) = '';
	DECLARE @vAllInsertColumns      AS NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesByColumn  AS NVARCHAR(MAX) = '';
	DECLARE @vAllFetchedColumns     AS NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumn      AS NVARCHAR(MAX) = '	DECLARE ';
	DECLARE @vUpdateColumns         AS NVARCHAR(MAX) = '';
	DECLARE @vHadComma              AS NUMERIC(10)   = 0;
	DECLARE @vHadCommaUpdateColumns AS NUMERIC(1)    = 0;
	DECLARE @TmpColumn              AS NVARCHAR(50);
	--DECLARE @cdLocation AS NVARCHAR(50), @cdCalendar NUMERIC(4), @locationType VARCHAR(2);
	
	
BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON; 

		IF OBJECT_ID('TempLocNumToStrTbl') IS NOT NULL 
			DROP TABLE TempLocNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempLocNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempLocNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR' AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_LOCATION_TEMP' 
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');	
				  
		SET @vTrace = 'getting the table name'
		SET @DECIMAL_ACCURACY = 5
		
		SET @vTableRealName = (SELECT TBL.TABLE_NAME FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
								WHERE INTERFACE.CDTABLE = TBL.CDTABLE
								AND INTERFACE.CDINTERFACE = @ivaCodInterface);
		
		SET @vTrace = 'getting the table name temp'								
		SET @vTableTempName = (SELECT TBL.TABLE_NAME_TEMP FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
								WHERE INTERFACE.CDTABLE = TBL.CDTABLE
								AND INTERFACE.CDINTERFACE = @ivaCodInterface);
								
		SET @CDPKFIELD =	  (SELECT TBL.CDCOLUMN FROM TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE 
									WHERE INTERFACE.CDTABLE = TBL.CDTABLE
									AND TBL.IS_PRIMARY_KEY = 'Y'
									AND INTERFACE.CDINTERFACE = @ivaCodInterface);
								
		SET @vTrace = 'building the vSPMasterLoad ' 
		
		/* OHLO 20201204: since v5.3.0, Extract stored procedure name construction */
		DECLARE @StoredProcedureName AS NVARCHAR(MAX) = '';
		SET @StoredProcedureName = 'MASTER_LOAD_' + CAST(@ivaCodInterface AS VARCHAR);
		
		IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = @StoredProcedureName)
		BEGIN
			SET @vSPMasterLoad = 'ALTER PROCEDURE [dbo].[' + @StoredProcedureName + '] '+CHAR(13)	
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = 'CREATE PROCEDURE [dbo].[' + @StoredProcedureName + '] '+CHAR(13)
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ '	@ivaIdExchange NUMERIC(10), ' + CHAR(13)
			+ '	@ivaTempLoadDate DATE , ' + CHAR(13)
			+ '	@ivaErrorValidations NUMERIC(10),  ' + CHAR(13)
			+ '	@ovaResult VARCHAR(1) OUTPUT, ' + CHAR(13)
			+ '	@ovaMessage NVARCHAR(MAX) OUTPUT ' + CHAR(13)
			+ 'AS ' + CHAR(13)
			+ '	DECLARE @vExistTempRecord 									AS INT = 0;' + CHAR(13)
			+ '	DECLARE @vExistRecord 										AS NVARCHAR(MAX); ' + CHAR(13)
			+ '	DECLARE @vExistLocationRecord 								AS NVARCHAR(MAX); ' + CHAR(13)
			+ '	DECLARE @vTrace 											AS NVARCHAR(MAX); ' + CHAR(13) 
			+ '	DECLARE @vMSG_LOCATION_TYPE_NOT_FOUND 						AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_CALENDAR_NOT_FOUND 							AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE				AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_ERROR_LOCATION_DATA_EXCHANGE 					AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD 				AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW 	AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED 				AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE 			AS NVARCHAR(MAX);' + CHAR(13)							
			+ '	DECLARE @vErrorsLocationCount 								AS INT = 0;' + CHAR(13)
			+ '	DECLARE @vProcessLocationCount 								AS INT = 0;' + CHAR(13)
			+ '	DECLARE @vValidationErrors 									AS INT = 0;' + CHAR(13)
			+ '	DECLARE @vCodErrorResultMessages							AS VARCHAR(1);' + CHAR(13)
			+ '	DECLARE @vMessageErrorResultMessages 						AS NVARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @ovaResultRemoveViewNot 							AS VARCHAR(1);' + CHAR(13)
			+ '	DECLARE @ovaMessageRemoveViewNot 							AS VARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @ovaResultAddViewNot 								AS VARCHAR(1);' + CHAR(13)
			+ '	DECLARE @ovaMessageAddViewNot 								AS VARCHAR(MAX);' + CHAR(13)
			+ '	DECLARE @vTotalErrorsProductionOrders 						AS NUMERIC(8) = 0; ' + CHAR(13)
			+ '	DECLARE @vMessagesAfterDataExchange 						AS VARCHAR = ''N'';' + CHAR(13)
			+ '	DECLARE @vLanguage 											AS VARCHAR(2)= ''es'';' + CHAR(13)
			+ '	DECLARE @ovaHasProcessed 									AS VARCHAR(1)  = ''0'';' + CHAR(13)
			+ '	DECLARE @vMSG_DEFAULT_CALENDAR_NOT_FOUND 					AS NVARCHAR(MAX);' + CHAR(13); 
			
		--SET @vTrace = 'Declaring the cursor with the @ivaCodInterface= '+ CAST(@ivaCodInterface AS VARCHAR)
		DECLARE cColumnConfiguration CURSOR FOR 
		 SELECT [DETAIL].[CDFIELD], [TBL].[DSTYPE], [TBL].[COLUMN_SIZE], [TBL].[COLUMN_ACCURACY], [DETAIL].[IS_UPGRADEABLE]
		   FROM [dbo].[TFSCM_COM_COL_TABLE] AS [TBL], [dbo].[TFSCM_DEX_INTERFACES] AS [INTERFACE], [dbo].[TFSCM_DEX_INT_DETAIL] AS [DETAIL]
		  WHERE [DETAIL].[CDINTERFACE] = @ivaCodInterface
			AND [DETAIL].[CDINTERFACE] = [INTERFACE].[CDINTERFACE]
			AND [INTERFACE].[CDTABLE]  = [TBL].[CDTABLE]
			AND [TBL].[CDCOLUMN]       = [DETAIL].[CDFIELD]
		OPEN cColumnConfiguration
		
		FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE,@COLUMN_ACCURACY, @IS_UPGRADEABLE
		
		WHILE (@@FETCH_STATUS = 0 )
		BEGIN
			--PRINT @CDFIELD
			--DECLARE @cdLocation AS NVARCHAR(50), @cdCalendar NUMERIC(4), @locationType VARCHAR(2);
			SET @TmpColumn  = LEFT(@CDFIELD + REPLICATE(' ', 55), 55);

			IF (@vHadComma = 0)
			BEGIN
				SET @vTrace = 'entra a hadcoma con @DSTYPE ='+@DSTYPE
				SET @vAllColumns           = @vAllColumns + '' + @CDFIELD;
				SET @vAllVariablesByColumn = @vAllVariablesByColumn + '@' + @CDFIELD;
				SET @vAllInsertColumns     = @vAllInsertColumns + '' + @CDFIELD;
				SET @vAllFetchedColumns    = @vAllFetchedColumns + '@' + @CDFIELD;			
				
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' AS NUMERIC('+CAST (@COLUMN_SIZE+@DECIMAL_ACCURACY AS VARCHAR)+','+CAST (@COLUMN_ACCURACY AS VARCHAR)+')';
					
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+')';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' AS SMALLINT';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' AS DATETIME';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' AS DATE';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumn = @vAllDeclareColumn + '@' + @TmpColumn + ' BIT';
						
				IF (@IS_UPGRADEABLE = 'Y' AND @CDFIELD != 'LOCATION_TYPE')
				BEGIN
					SET @vUpdateColumns = @vUpdateColumns + @CDFIELD + ' = @' + @CDFIELD + CHAR(13);
					SET @vHadCommaUpdateColumns = 1
				END	
			END
			ELSE 
			BEGIN
				SET @vTrace = 'NO entra a hadcoma con @DSTYPE ='+@DSTYPE
				SET @vAllColumns           = @vAllColumns + ', ' + @CDFIELD; 
				SET @vAllVariablesByColumn = @vAllVariablesByColumn + ', @' + @CDFIELD;				
				SET @vAllInsertColumns     = @vAllInsertColumns + ', ' + @CDFIELD;
				SET @vAllFetchedColumns    = @vAllFetchedColumns + ', @' + @CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS NUMERIC('+CAST (@COLUMN_SIZE+@DECIMAL_ACCURACY AS VARCHAR)+','+CAST (@COLUMN_ACCURACY AS VARCHAR)+')';
						
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+')';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS SMALLINT';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS DATETIME';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS DATE';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumn = @vAllDeclareColumn + ',' + CHAR(13) + '			@' + @TmpColumn + ' AS BIT';
			
				-- ----------------------------------------------------------------------
				-- OHLO: 2014-10-20 this in comments is re-written
				-- ----------------------------------------------------------------------
				/*
				IF (@IS_UPGRADEABLE = 'Y' AND @vHadCommaUpdateColumns =0 AND @CDFIELD != 'LOCATION_TYPE')
				BEGIN
					SET @vUpdateColumns = @vUpdateColumns+@CDFIELD+' = @'+@CDFIELD+CHAR(13);
					SET @vHadCommaUpdateColumns = 1
				END
				IF (@IS_UPGRADEABLE = 'Y' AND @vHadCommaUpdateColumns =1 AND @CDFIELD != 'LOCATION_TYPE')
				BEGIN
					SET @vUpdateColumns = @vUpdateColumns+','+@CDFIELD+' = @'+@CDFIELD+CHAR(13);
					SET @vHadCommaUpdateColumns = 1	
				END
				*/
				IF (@IS_UPGRADEABLE = 'Y'  AND @CDFIELD != 'LOCATION_TYPE')
				BEGIN
					IF @vHadCommaUpdateColumns = 1
						SET @vUpdateColumns = @vUpdateColumns + '						 , ';
					ELSE
						SET @vHadCommaUpdateColumns = 1
					SET @vUpdateColumns = @vUpdateColumns + @CDFIELD + ' = @' + @CDFIELD + CHAR(13);
				END				
			END;
			SET @vHadComma = 1		
			-- Reading the new row
			FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE

		END
		-- Cierre del cursor
		CLOSE cColumnConfiguration
		-- Liberar los recursos
		DEALLOCATE cColumnConfiguration
		
		-- -----------------------------------------------------------------------------------
		-- IAFG 20201204: Since v5.3.0, add new columns in TFSCM_COM_LOG with value  */
		-- -----------------------------------------------------------------------------------
		-- For DECLARE, SELECT and FETCH variables statements
		SET @vAllDeclareColumn  = @vAllDeclareColumn 
			+ ',' + CHAR(13) + '			@' + LEFT('FILE_NAME' + REPLICATE(' ', 50), 50) + ' AS VARCHAR(500)'
			+ ',' + CHAR(13) + '			@' + LEFT('FILE_ROW_NUMBER' + REPLICATE(' ', 50), 50) + ' AS INT' 
		SET @vAllColumns        = @vAllColumns + ', TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ';
		SET @vAllFetchedColumns = @vAllFetchedColumns  + ', @FILE_NAME, @FILE_ROW_NUMBER ';  
		
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric 
		-- 				  to vAllDeclareColumn
		-- -----------------------------------------------------------------------------------
		SET @vAllDeclareColumn = @vAllDeclareColumn
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (',' + CHAR(13) + '			@' + LEFT([NTS].[VARCHAR_COLUMN] + REPLICATE(' ', 50), 50) + ' AS VARCHAR(50)', '') AS DECLARE_SENTENCE
				 FROM TempLocNumToStrTbl AS [NTS]),  ''));
				 
		-- -------------------------------------------------------------------------------------
		-- JEBE 20200113: Since v5.3.0, add varchar variables that actually are numeric to fetch
		-- -------------------------------------------------------------------------------------
		SET @vAllFetchedColumns = @vAllFetchedColumns    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', @' + [NTS].[VARCHAR_COLUMN], '') AS FETCH_SENTENCE
				 FROM TempLocNumToStrTbl AS [NTS]),  ''));
				 
		-- -------------------------------------------------------------------------------------
		-- JEBE 20200113: Since v5.3.0, add varchar variables that actually are numeric to select
		-- -------------------------------------------------------------------------------------
		SET @vAllColumns = @vAllColumns
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', TMP.' + [NTS].[VARCHAR_COLUMN], '') AS SELECT_SENTENCE
				 FROM TempLocNumToStrTbl AS [NTS]), ''));

		SET @vTrace = 'sale del cursor con @vUpdateColumns '+@vUpdateColumns
		SET @vTrace = 'sale del cursor con @vAllDeclareColumn '+@vAllDeclareColumn
  
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ @vAllDeclareColumn + CHAR(13)
 			+ 'BEGIN ' + CHAR(13)
			+ '	BEGIN TRY ' + CHAR(13)
			+ '		BEGIN TRY ' + CHAR(13)
			+ CHAR(13)
			+ '			SELECT @vLanguage = [P].PARAM_VALUE  ' + CHAR(13)
			+ '			  FROM [dbo].[TFSCM_COM_PARAMS] AS [P] ' + CHAR(13)
			+ '			 WHERE [P].CDPARAM = ''DEFAULT_LANGUAGE'' AND [P].DSPARAM = ''default_language''; ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''LOCATION_TYPE_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_LOCATION_TYPE_NOT_FOUND OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''CALENDAR_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_CALENDAR_NOT_FOUND OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13) 
			+ '				''SUCESSFULL_LOCATION_DATA_EXCHANGE'', @vLanguage, '''', '''', '''', @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)  
			+ '				''ERROR_LOCATION_DATA_EXCHANGE'', @vLanguage, '''', '''', '''', @vMSG_ERROR_LOCATION_DATA_EXCHANGE OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''DATA_EXCHANGE_DUPLICATED_RECORD'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''LOCATION_TYPE_CAN_NOT_CHANGED'', @vLanguage, '''', '''', '''', @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''DATA_EXCHANGE_LOCATION_MODIFY_DATE'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE OUTPUT' + CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,' + CHAR(13)
			+ '				''DEFAULT_CALENDAR_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEFAULT_CALENDAR_NOT_FOUND OUTPUT' + CHAR(13)
			+ '		END TRY' + CHAR(13)  
			+ '		BEGIN CATCH	' + CHAR(13)
			+ '			SET @vMSG_LOCATION_TYPE_NOT_FOUND = ''LOCATION_TYPE_NOT_FOUND''' + CHAR(13)
			+ '			SET @vMSG_CALENDAR_NOT_FOUND = ''CALENDAR_NOT_FOUND''' + CHAR(13)
			+ '			SET @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE	 = ''SUCESSFULL_LOCATION_DATA_EXCHANGE''' + CHAR(13)
			+ '			SET @vMSG_ERROR_LOCATION_DATA_EXCHANGE	 = ''ERROR_LOCATION_DATA_EXCHANGE''' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD	 = ''DATA_EXCHANGE_DUPLICATED_RECORD''' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW	 = ''DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW''' + CHAR(13)
			+ '			SET @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED	 = ''LOCATION_TYPE_CAN_NOT_CHANGED''' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE = ''@DATA_EXCHANGE_LOCATION_MODIFY_DATE''' + CHAR(13)
			+ '			SET @vMSG_DEFAULT_CALENDAR_NOT_FOUND = ''DEFAULT_CALENDAR_NOT_FOUND''' + CHAR(13)
			+ '		END CATCH' + CHAR(13)					
			+ CHAR(13)	
			+ '		SET NOCOUNT ON; ' + CHAR(13)	
			+ '		SET @vTrace = ''Setting the cursor cDataTempCursor  ''' + CHAR(13)
			+ '		SET @ovaResult = ''0'';' + CHAR(13)
			/*
			+ CHAR(13)
			+ '		SELECT @vExistTempRecord = COUNT(1) FROM TFSCM_CLI_LOCATION_TEMP TMP ' + CHAR(13)
			+ '		 WHERE TMP.IDEXCHANGE = @ivaIdExchange' + CHAR(13)
			+ '		   AND TMP.CDLOCATION = @CDLOCATION' + CHAR(13)
			+ '		   AND TMP.LOCATION_MODIFY_DATE = @LOCATION_MODIFY_DATE' + CHAR(13)
			+ CHAR(13)
			+ '		INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '		VALUES (@vMSG_DATA_EXCHANGE_DUPLICATED_RECORD + CONVERT(VARCHAR, @vExistTempRecord, 105), ''CDLOCATION:''+@CDLOCATION+'', IDEXCHANGE:''+CAST(@ivaIdExchange AS VARCHAR), ''E'', GETDATE(),' + CHAR(13) 
			+ '				    NULL, @CDLOCATION, NULL, @FILE_ROW_NUMBER, ''CDLOCATION'', @FILE_NAME, @LOCATION_MODIFY_DATE)' + CHAR(13)
			+ '		SET @vErrorsLocationCount = @vErrorsLocationCount + @vExistTempRecord ' + CHAR(13)
			*/
			+ CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  ' + CHAR(13)
			+ '		-- ---------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		IF OBJECT_ID(''tempdb..#DuplicateLocationTemp'') IS NOT NULL  ' + CHAR(13)
			+ '			DROP TABLE #DuplicateLocationTemp; ' + CHAR(13)
			+ CHAR(13)	
			+ '		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  INTO #DuplicateLocationTemp ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_COM_LOG] ' + CHAR(13)
			+ '		 WHERE 1 = 2; ' + CHAR(13)
			+ CHAR(13)	
			+ '		INSERT INTO #DuplicateLocationTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '											RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT [LCTDUP].[COUNTER1], @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD + CAST([LCTDUP].[COUNTER1] AS VARCHAR) + ''.'', NULL, ''E'', GETDATE(),' + CHAR(13)
			+ '			   NULL, [LCT].[CDLOCATION], NULL, [LCT].[FILE_ROW_NUMBER], ''CDLOCATION'', [LCT].[FILE_NAME], @ivaTempLoadDate ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [LCT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDLOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]           = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[CDLOCATION]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [LCTDUP] ' + CHAR(13)
			+ '			ON ([LCT].[IDEXCHANGE]           = @ivaIdExchange ' + CHAR(13)
			+ '			AND [LCT].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [LCTDUP].[CDLOCATION]        = [LCT].[CDLOCATION] ' + CHAR(13)
			+ '			AND [LCT].[FILE_ROW_NUMBER]      = [LCTDUP].[FILE_ROW_NUMBER]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT @vExistTempRecord  = SUM(COUNTER1) FROM #DuplicateLocationTemp;' + CHAR(13)
			+ '		SET @vErrorsLocationCount = @vErrorsLocationCount + ISNULL(@vExistTempRecord, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		-- Counting repeated events ' + CHAR(13)
			+ '		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  FROM #DuplicateLocationTemp; ' + CHAR(13)	
			+ CHAR(13)
			+ '		DELETE [LCT] '+ CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [LCT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDLOCATION] ' + CHAR(13)
			+ '		  	      FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [TMP] ' + CHAR(13)
			+ '		  	     WHERE [TMP].[IDEXCHANGE]           = @ivaIdExchange ' + CHAR(13)
			+ '		  	       AND [TMP].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '		  	     GROUP BY [TMP].[CDLOCATION]  ' + CHAR(13)
			+ '		  	    HAVING COUNT(1) > 1) AS [LCTDUP] ' + CHAR(13)
			+ '		    ON ([LCT].[IDEXCHANGE]           = @ivaIdExchange ' + CHAR(13)
			+ '		    AND [LCT].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '		    AND [LCTDUP].[CDLOCATION]        = [LCT].[CDLOCATION]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vProcessLocationCount = @vProcessLocationCount + ISNULL(@vExistTempRecord, 0);' + CHAR(13)		
			+ '		-- ---------------------------------------------------------------------------------- ' + CHAR(13)
			+ CHAR(13)	
			+ '		DECLARE cDataTempCursor CURSOR FOR ' + CHAR(13)
			+ '		 SELECT ';

		SET @vSPMasterLoad = @vSPMasterLoad + @vAllColumns + CHAR(13)		
			+ '	  	   FROM ' + @vTableTempName + ' TMP ' + CHAR(13)
			+ '	  	  WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '	  	    AND TMP.LOCATION_MODIFY_DATE = @ivaTempLoadDate ' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN cDataTempCursor ' + CHAR(13)
			+ '		FETCH cDataTempCursor INTO ' + @vAllFetchedColumns + CHAR(13)
			+ CHAR(13)
			+ '		SET @vTrace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)
			+ CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			SET @vProcessLocationCount = @vProcessLocationCount + 1;' + CHAR(13)		
			+ '			SET @ovaResult             = ''0'';' + CHAR(13)
			+ '			SET @vValidationErrors     = 0;' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@LOCATION_MODIFY_DATE > GETDATE())' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    NULL, @CDLOCATION, CONVERT(VARCHAR, @LOCATION_MODIFY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempLocNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'LOCATION_MODIFY_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''LOCATION_MODIFY_DATE'', @FILE_NAME, @LOCATION_MODIFY_DATE)' + CHAR(13)
			+ CHAR(13) 
			+ '				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				SET @vValidationErrors = @vValidationErrors + 1;' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13) 
			+ '			SET @vExistRecord = (SELECT ' + @CDPKFIELD + CHAR(13)
			+ '								   FROM ' + @vTableRealName + ' TRN ' + CHAR(13)
			+ '								  WHERE TRN.' + @CDPKFIELD+' = @'+@CDPKFIELD+')' + CHAR(13)
			+ CHAR(13)
			+ '			SET @vExistLocationRecord = (SELECT L.LOCATION_TYPE ' + CHAR(13)
			+ '										   FROM TFSCM_CLI_LOCATION L ' + CHAR(13)
			+ '										  WHERE L.CDLOCATION = @CDLOCATION)' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vValidationErrors = 0 AND @vExistLocationRecord != @LOCATION_TYPE) ' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '				VALUES (@vMSG_LOCATION_TYPE_CAN_NOT_CHANGED, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '			    		NULL, @CDLOCATION, @LOCATION_TYPE, @FILE_ROW_NUMBER, ''LOCATION_TYPE'', @FILE_NAME, @LOCATION_MODIFY_DATE)' + CHAR(13) 
			+ CHAR(13)
			+ '				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				SET @vValidationErrors = @vValidationErrors + 1;' + CHAR(13)
			+ '			END' + CHAR(13);

		IF (CHARINDEX('CDCALENDAR', @vAllColumns) > 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad 
				+ '			IF (@vValidationErrors = 0 AND NOT EXISTS (SELECT 1 FROM TFSCM_CLI_CALENDAR C ' + CHAR(13)
				+ '							WHERE C.DSCALENDAR = @CDCALENDAR AND C.IS_ACTIVE = 1)) ' + CHAR(13)
				+ '			BEGIN' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_CALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '					    NULL, @CDLOCATION, @CDCALENDAR, @FILE_ROW_NUMBER, ''CDCALENDAR'', @FILE_NAME, @LOCATION_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ '				SET @vValidationErrors = @vValidationErrors + 1;' + CHAR(13)
				+ '			END' + CHAR(13)		
				+ '			ELSE ' + CHAR(13)
				+ '			BEGIN' + CHAR(13)
				+ '				SET @CDCALENDAR = (SELECT C.CDCALENDAR FROM TFSCM_CLI_CALENDAR C' + CHAR(13)
				+ '									WHERE C.DSCALENDAR = @CDCALENDAR AND C.IS_ACTIVE = 1); ' + CHAR(13)
				+ '			END' + CHAR(13);	
		END

		SET @vSPMasterLoad = @vSPMasterLoad 
			+ '			IF (@vValidationErrors = 0 AND NOT EXISTS (SELECT CL.CODE FROM TFSCM_CLI_COLUMN_LIST CL ' + CHAR(13)
			+ '							WHERE CL.LIST_TYPE = ''LOCATION_TYPE''' + CHAR(13)
			+ '							  AND CL.CODE = @LOCATION_TYPE))' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_LOCATION_TYPE_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    NULL, @CDLOCATION, @LOCATION_TYPE, @FILE_ROW_NUMBER, ''LOCATION_TYPE'', @FILE_NAME, @LOCATION_MODIFY_DATE) ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				SET @vValidationErrors = @vValidationErrors + 1;' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vValidationErrors = 0)' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				IF (@vExistRecord IS NULL) ' + CHAR(13);
		
		IF (CHARINDEX('CDCALENDAR', @vAllColumns) > 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad 
				+ '					INSERT INTO ' +  @vTableRealName + '(' + @vAllInsertColumns + ')' + CHAR(13)
				+ '					VALUES (' + @vAllVariablesByColumn + ')' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '					IF ((SELECT C.CDCALENDAR FROM TFSCM_CLI_CALENDAR C WHERE C.IS_DEFAULT = 1 AND C.IS_ACTIVE = 1) IS NULL) ' + CHAR(13)
				+ '					BEGIN' + CHAR(13)
				+ '						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '						VALUES (@vMSG_DEFAULT_CALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '							    NULL, @CDLOCATION, NULL, @FILE_ROW_NUMBER, ''CDCALENDAR'', @FILE_NAME, @LOCATION_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '						SET @vErrorsLocationCount = @vErrorsLocationCount + 1 ' + CHAR(13)
				+ '						SET @ovaResult = ''1'';' + CHAR(13)
				+ '						SET @vValidationErrors = @vValidationErrors + 1;' + CHAR(13)							
				+ '					END' + CHAR(13)
				+ '					ELSE ' + CHAR(13)
				+ '					BEGIN' + CHAR(13)
				+ '						INSERT INTO ' + @vTableRealName + '(CDCALENDAR,' + @vAllInsertColumns + ')' + CHAR(13)
				+ '						VALUES((SELECT C.CDCALENDAR FROM TFSCM_CLI_CALENDAR C WHERE C.IS_DEFAULT = 1 AND C.IS_ACTIVE = 1), ' + @vAllVariablesByColumn + ')' + CHAR(13)
				+ '					END' + CHAR(13);	
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ '				ELSE ' +	CHAR(13)			
			+ '					UPDATE ' + @vTableRealName + CHAR(13) 
			+ '					   SET ' + @vUpdateColumns;

		IF(LEN(@vUpdateColumns) > 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '					     , IS_ACTIVE = 1 ' + CHAR(13);
		END 
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + 'IS_ACTIVE = 1 ' + CHAR(13);
		END 

		SET @vSPMasterLoad = @vSPMasterLoad
			+ '					 WHERE '+@CDPKFIELD+' = @'+@CDPKFIELD + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			SET @ovaHasProcessed = ''1'';' + CHAR(13)
			+ CHAR(13)
			+ '			FETCH cDataTempCursor INTO '+@vAllFetchedColumns + CHAR(13)
			+ '		END -- End for While cDataTempCursor ' + CHAR(13)
			+ CHAR(13)
			+ '		CLOSE cDataTempCursor' + CHAR(13)
			+ '		DEALLOCATE cDataTempCursor' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vTrace = ''go outside of the cursor cDataTempCursor  ''' + CHAR(13)	
			+ CHAR(13)
			+ '		UPDATE TBL ' + CHAR(13)
			+ '		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() ' + CHAR(13)
			+ '		  FROM TFSCM_COM_TABLES TBL ' + CHAR(13)
			+ '		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) ' + CHAR(13) 
			+ '		   AND INTER.CDINTERFACE = ' + CAST(@ivaCodInterface AS VARCHAR) + '' + CHAR(13)
			+ CHAR(13)
			--'		SET @ovaMessage =  ''<br>''+@vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE+'' ''+CONVERT(VARCHAR, @ivaTempLoadDate, 105)+'':''' + CHAR(13)
			+ '		SET @ovaMessage = @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE+'':'' + CAST ( (@vProcessLocationCount-@vErrorsLocationCount) AS varchar ) + '', ''+ @vMSG_ERROR_LOCATION_DATA_EXCHANGE+'':'' + CAST ( @vErrorsLocationCount AS varchar )' + CHAR(13)
			+ '		SET @vTotalErrorsProductionOrders = (@vErrorsLocationCount + @ivaErrorValidations)' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT @vMessagesAfterDataExchange = P.PARAM_VALUE ' + CHAR(13)
			+ '		  FROM TFSCM_COM_PARAMS P ' + CHAR(13)
			+ '		 WHERE P.CDPARAM = ''MESSAGES_AFTER_DATAEXCHANGE'';' + CHAR(13)
			+ CHAR(13)
			+ '		IF (@vTotalErrorsProductionOrders > 0 AND @vMessagesAfterDataExchange = ''Y'')' + CHAR(13)
			+ '		BEGIN	' + CHAR(13)
			+ '			EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''LDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '			EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsProductionOrders, ''LDE'', ''LOCATION'', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT' + CHAR(13)
			+ '		END	' + CHAR(13)
			+ CHAR(13)
			+ '		IF (@vTotalErrorsProductionOrders = 0 AND @vMessagesAfterDataExchange = ''Y'' AND @ovaHasProcessed = ''1'')' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''LDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '		END' + CHAR(13)
			+ '	END TRY ' + CHAR(13)							
			+ '	BEGIN CATCH ' + CHAR(13)
			+ '		SET @ovaResult = ''1'';' + CHAR(13)
			+ '		SET @ovaMessage =  '' ERROR_NUMBER: '' + CAST(ERROR_NUMBER() AS VARCHAR) ' + CHAR(13)
			+ '			+ '' ERROR_SEVERITY: '' + CAST(ERROR_SEVERITY() AS VARCHAR) ' + CHAR(13)
			+ '			+ '' ERROR_STATE: '' + CAST(ERROR_STATE() AS VARCHAR)' + CHAR(13)
			+ '			+ '' ERROR_PROCEDURE: '' + ISNULL(ERROR_PROCEDURE(), ''[dbo].[' + @StoredProcedureName + ']'') ' + CHAR(13)
			+ '			+ '' ERROR_LINE: '' + CAST(ERROR_LINE() AS VARCHAR) ' + CHAR(13)
			+ '			+ '' ERROR_MESSAGE: '' + ERROR_MESSAGE() ' + CHAR(13)
			+ CHAR(13)
    		+ '		IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (-1,0,1))' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (0,1))' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				CLOSE cDataTempCursor;  		' + CHAR(13)
			+ '			END' + CHAR(13)
			+ '			DEALLOCATE cDataTempCursor;  ' + CHAR(13)
			+ '		END			' + CHAR(13)
			+ '	END CATCH ' + CHAR(13)
			+ 'END ';
			
		SET @vTrace = '@vSPMasterLoad ES : '+@vSPMasterLoad
		--PRINT SUBSTRING(@vSPMasterLoad, 3000, LEN (@vSPMasterLoad))
		--PRINT 'FIN MASTERLOAD'
		EXEC (@vSPMasterLoad)
		SET @vTrace = 'EJECUTA EL @vSPMasterLoad  '
		--PRINT @vTrace
		--EXEC MASTER_LOAD @ivaIdExchange, '', '';
		
		--SET @vTrace = 'End of the cInterfaceColumnConfiguration  '  
		--Procedure result
		SET @ovaResult = '0';
		SET @ovaMessage = 'sucessDataExchangeProcess';
	    --PRINT	@vTrace	
	END TRY
	
	BEGIN CATCH
		--PRINT	@vTrace	
		--PRINT SUBSTRING(@vTrace, 1, 4000)
		--PRINT '---------------------------------------------------------------------'
		--PRINT SUBSTRING(@vTrace, 4000, LEN(@vTrace))
		--PRINT '---------------------------------------------------------------------'
		SET @ovaResult = '1';
		SET @ovaMessage =  ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_BUILDER]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
 		
		IF ((SELECT CURSOR_STATUS('global','cColumnConfiguration')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cColumnConfiguration')) IN (0,1))
			BEGIN
				CLOSE cColumnConfiguration;  		
			END
			DEALLOCATE cColumnConfiguration;  
		END	
		
 		--RAISERROR (@ovaMessage, 
		--		   16, 
		--		   @ovaResult 
		--		   ); 
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[MASTER_LOAD_2]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MASTER_LOAD_2] 
	@ivaIdExchange NUMERIC(10), 
	@ivaTempLoadDate DATE , 
	@ivaErrorValidations NUMERIC(10),  
	@ovaResult VARCHAR(1) OUTPUT, 
	@ovaMessage NVARCHAR(MAX) OUTPUT 
AS 
	DECLARE @vExistTempRecord 									AS INT = 0;
	DECLARE @vExistRecord 										AS NVARCHAR(MAX); 
	DECLARE @vExistLocationRecord 								AS NVARCHAR(MAX); 
	DECLARE @vTrace 											AS NVARCHAR(MAX); 
	DECLARE @vMSG_LOCATION_TYPE_NOT_FOUND 						AS NVARCHAR(MAX);
	DECLARE @vMSG_CALENDAR_NOT_FOUND 							AS NVARCHAR(MAX);
	DECLARE @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE				AS NVARCHAR(MAX);
	DECLARE @vMSG_ERROR_LOCATION_DATA_EXCHANGE 					AS NVARCHAR(MAX);
	DECLARE @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD 				AS NVARCHAR(MAX);
	DECLARE @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW 	AS NVARCHAR(MAX);
	DECLARE @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED 				AS NVARCHAR(MAX);
	DECLARE @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE 			AS NVARCHAR(MAX);
	DECLARE @vErrorsLocationCount 								AS INT = 0;
	DECLARE @vProcessLocationCount 								AS INT = 0;
	DECLARE @vValidationErrors 									AS INT = 0;
	DECLARE @vCodErrorResultMessages							AS VARCHAR(1);
	DECLARE @vMessageErrorResultMessages 						AS NVARCHAR(MAX);
	DECLARE @ovaResultRemoveViewNot 							AS VARCHAR(1);
	DECLARE @ovaMessageRemoveViewNot 							AS VARCHAR(MAX);
	DECLARE @ovaResultAddViewNot 								AS VARCHAR(1);
	DECLARE @ovaMessageAddViewNot 								AS VARCHAR(MAX);
	DECLARE @vTotalErrorsProductionOrders 						AS NUMERIC(8) = 0; 
	DECLARE @vMessagesAfterDataExchange 						AS VARCHAR = 'N';
	DECLARE @vLanguage 											AS VARCHAR(2)= 'es';
	DECLARE @ovaHasProcessed 									AS VARCHAR(1)  = '0';
	DECLARE @vMSG_DEFAULT_CALENDAR_NOT_FOUND 					AS NVARCHAR(MAX);
	DECLARE @CDLOCATION                                         AS VARCHAR(50),
			@LOCATION_MODIFY_DATE                               AS DATETIME,
			@LOCATION_TYPE                                      AS VARCHAR(2),
			@FILE_NAME                                          AS VARCHAR(500),
			@FILE_ROW_NUMBER                                    AS INT,
			@LOCATION_MODIFY_DATE_STR                           AS VARCHAR(50)
BEGIN 
	BEGIN TRY 
		BEGIN TRY 

			SELECT @vLanguage = [P].PARAM_VALUE  
			  FROM [dbo].[TFSCM_COM_PARAMS] AS [P] 
			 WHERE [P].CDPARAM = 'DEFAULT_LANGUAGE' AND [P].DSPARAM = 'default_language'; 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'LOCATION_TYPE_NOT_FOUND', @vLanguage, '', '', '', @vMSG_LOCATION_TYPE_NOT_FOUND OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'CALENDAR_NOT_FOUND', @vLanguage, '', '', '', @vMSG_CALENDAR_NOT_FOUND OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'SUCESSFULL_LOCATION_DATA_EXCHANGE', @vLanguage, '', '', '', @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'ERROR_LOCATION_DATA_EXCHANGE', @vLanguage, '', '', '', @vMSG_ERROR_LOCATION_DATA_EXCHANGE OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'DATA_EXCHANGE_DUPLICATED_RECORD', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'LOCATION_TYPE_CAN_NOT_CHANGED', @vLanguage, '', '', '', @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'DATA_EXCHANGE_LOCATION_MODIFY_DATE', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE OUTPUT
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'DEFAULT_CALENDAR_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEFAULT_CALENDAR_NOT_FOUND OUTPUT
		END TRY
		BEGIN CATCH	
			SET @vMSG_LOCATION_TYPE_NOT_FOUND = 'LOCATION_TYPE_NOT_FOUND'
			SET @vMSG_CALENDAR_NOT_FOUND = 'CALENDAR_NOT_FOUND'
			SET @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE	 = 'SUCESSFULL_LOCATION_DATA_EXCHANGE'
			SET @vMSG_ERROR_LOCATION_DATA_EXCHANGE	 = 'ERROR_LOCATION_DATA_EXCHANGE'
			SET @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD	 = 'DATA_EXCHANGE_DUPLICATED_RECORD'
			SET @vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW	 = 'DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW'
			SET @vMSG_LOCATION_TYPE_CAN_NOT_CHANGED	 = 'LOCATION_TYPE_CAN_NOT_CHANGED'
			SET @vMSG_DATA_EXCHANGE_LOCATION_MODIFY_DATE = '@DATA_EXCHANGE_LOCATION_MODIFY_DATE'
			SET @vMSG_DEFAULT_CALENDAR_NOT_FOUND = 'DEFAULT_CALENDAR_NOT_FOUND'
		END CATCH

		SET NOCOUNT ON; 
		SET @vTrace = 'Setting the cursor cDataTempCursor  '
		SET @ovaResult = '0';

		-- ----------------------------------------------------------------------------------- 
		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  
		-- ---------------------------------------------------------------------------------- 
		IF OBJECT_ID('tempdb..#DuplicateLocationTemp') IS NOT NULL  
			DROP TABLE #DuplicateLocationTemp; 

		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  INTO #DuplicateLocationTemp 
		  FROM [dbo].[TFSCM_COM_LOG] 
		 WHERE 1 = 2; 

		INSERT INTO #DuplicateLocationTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
											RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT [LCTDUP].[COUNTER1], @vMSG_DATA_EXCHANGE_DUPLICATED_RECORD + CAST([LCTDUP].[COUNTER1] AS VARCHAR) + '.', NULL, 'E', GETDATE(),
			   NULL, [LCT].[CDLOCATION], NULL, [LCT].[FILE_ROW_NUMBER], 'CDLOCATION', [LCT].[FILE_NAME], @ivaTempLoadDate 
		  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [LCT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDLOCATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
				  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]           = @ivaIdExchange 
				   AND [TMP].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[CDLOCATION]  
				HAVING COUNT(1) > 1) AS [LCTDUP] 
			ON ([LCT].[IDEXCHANGE]           = @ivaIdExchange 
			AND [LCT].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate 
			AND [LCTDUP].[CDLOCATION]        = [LCT].[CDLOCATION] 
			AND [LCT].[FILE_ROW_NUMBER]      = [LCTDUP].[FILE_ROW_NUMBER]); 

		SELECT @vExistTempRecord  = SUM(COUNTER1) FROM #DuplicateLocationTemp;
		SET @vErrorsLocationCount = @vErrorsLocationCount + ISNULL(@vExistTempRecord, 0);

		-- Counting repeated events 
		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  FROM #DuplicateLocationTemp; 

		DELETE [LCT] 
		  FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [LCT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDLOCATION] 
		  	      FROM [dbo].[TFSCM_CLI_LOCATION_TEMP] AS [TMP] 
		  	     WHERE [TMP].[IDEXCHANGE]           = @ivaIdExchange 
		  	       AND [TMP].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate 
		  	     GROUP BY [TMP].[CDLOCATION]  
		  	    HAVING COUNT(1) > 1) AS [LCTDUP] 
		    ON ([LCT].[IDEXCHANGE]           = @ivaIdExchange 
		    AND [LCT].[LOCATION_MODIFY_DATE] = @ivaTempLoadDate 
		    AND [LCTDUP].[CDLOCATION]        = [LCT].[CDLOCATION]); 

		SET @vProcessLocationCount = @vProcessLocationCount + ISNULL(@vExistTempRecord, 0);
		-- ---------------------------------------------------------------------------------- 

		DECLARE cDataTempCursor CURSOR FOR 
		 SELECT CDLOCATION, LOCATION_MODIFY_DATE, LOCATION_TYPE, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER , TMP.LOCATION_MODIFY_DATE_STR
	  	   FROM TFSCM_CLI_LOCATION_TEMP TMP 
	  	  WHERE TMP.IDEXCHANGE = @ivaIdExchange 
	  	    AND TMP.LOCATION_MODIFY_DATE = @ivaTempLoadDate 

		OPEN cDataTempCursor 
		FETCH cDataTempCursor INTO @CDLOCATION, @LOCATION_MODIFY_DATE, @LOCATION_TYPE, @FILE_NAME, @FILE_ROW_NUMBER , @LOCATION_MODIFY_DATE_STR

		SET @vTrace = 'go inside the cursor cDataTempCursor  '

		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			SET @vProcessLocationCount = @vProcessLocationCount + 1;
			SET @ovaResult             = '0';
			SET @vValidationErrors     = 0;

			IF (@LOCATION_MODIFY_DATE > GETDATE())
			BEGIN
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_LOCATIONS_UPDATE_DATE_GT_NOW, NULL, 'E', GETDATE(),
					    NULL, @CDLOCATION, CONVERT(VARCHAR, @LOCATION_MODIFY_DATE_STR, 105), @FILE_ROW_NUMBER, 'LOCATION_MODIFY_DATE', @FILE_NAME, @LOCATION_MODIFY_DATE)

				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 
				SET @ovaResult = '1';
				SET @vValidationErrors = @vValidationErrors + 1;
			END

			SET @vExistRecord = (SELECT CDLOCATION
								   FROM TFSCM_CLI_LOCATION TRN 
								  WHERE TRN.CDLOCATION = @CDLOCATION)

			SET @vExistLocationRecord = (SELECT L.LOCATION_TYPE 
										   FROM TFSCM_CLI_LOCATION L 
										  WHERE L.CDLOCATION = @CDLOCATION)

			IF (@vValidationErrors = 0 AND @vExistLocationRecord != @LOCATION_TYPE) 
			BEGIN
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_LOCATION_TYPE_CAN_NOT_CHANGED, NULL, 'E', GETDATE(),
			    		NULL, @CDLOCATION, @LOCATION_TYPE, @FILE_ROW_NUMBER, 'LOCATION_TYPE', @FILE_NAME, @LOCATION_MODIFY_DATE)

				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 
				SET @ovaResult = '1';
				SET @vValidationErrors = @vValidationErrors + 1;
			END
			IF (@vValidationErrors = 0 AND NOT EXISTS (SELECT CL.CODE FROM TFSCM_CLI_COLUMN_LIST CL 
							WHERE CL.LIST_TYPE = 'LOCATION_TYPE'
							  AND CL.CODE = @LOCATION_TYPE))
			BEGIN
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_LOCATION_TYPE_NOT_FOUND, NULL, 'E', GETDATE(),
					    NULL, @CDLOCATION, @LOCATION_TYPE, @FILE_ROW_NUMBER, 'LOCATION_TYPE', @FILE_NAME, @LOCATION_MODIFY_DATE) 

				SET @vErrorsLocationCount = @vErrorsLocationCount + 1 
				SET @ovaResult = '1';
				SET @vValidationErrors = @vValidationErrors + 1;
			END

			IF (@vValidationErrors = 0)
			BEGIN
				IF (@vExistRecord IS NULL) 
					IF ((SELECT C.CDCALENDAR FROM TFSCM_CLI_CALENDAR C WHERE C.IS_DEFAULT = 1 AND C.IS_ACTIVE = 1) IS NULL) 
					BEGIN
						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
						VALUES (@vMSG_DEFAULT_CALENDAR_NOT_FOUND, NULL, 'E', GETDATE(),
							    NULL, @CDLOCATION, NULL, @FILE_ROW_NUMBER, 'CDCALENDAR', @FILE_NAME, @LOCATION_MODIFY_DATE) 

						SET @vErrorsLocationCount = @vErrorsLocationCount + 1 
						SET @ovaResult = '1';
						SET @vValidationErrors = @vValidationErrors + 1;
					END
					ELSE 
					BEGIN
						INSERT INTO TFSCM_CLI_LOCATION(CDCALENDAR,CDLOCATION, LOCATION_MODIFY_DATE, LOCATION_TYPE)
						VALUES((SELECT C.CDCALENDAR FROM TFSCM_CLI_CALENDAR C WHERE C.IS_DEFAULT = 1 AND C.IS_ACTIVE = 1), @CDLOCATION, @LOCATION_MODIFY_DATE, @LOCATION_TYPE)
					END
				ELSE 
					UPDATE TFSCM_CLI_LOCATION
					   SET LOCATION_MODIFY_DATE = @LOCATION_MODIFY_DATE
					     , IS_ACTIVE = 1 
					 WHERE CDLOCATION = @CDLOCATION
			END

			SET @ovaHasProcessed = '1';

			FETCH cDataTempCursor INTO @CDLOCATION, @LOCATION_MODIFY_DATE, @LOCATION_TYPE, @FILE_NAME, @FILE_ROW_NUMBER , @LOCATION_MODIFY_DATE_STR
		END -- End for While cDataTempCursor 

		CLOSE cDataTempCursor
		DEALLOCATE cDataTempCursor

		SET @vTrace = 'go outside of the cursor cDataTempCursor  '

		UPDATE TBL 
		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		  FROM TFSCM_COM_TABLES TBL 
		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		   AND INTER.CDINTERFACE = 2

		SET @ovaMessage = @vMSG_SUCESSFULL_LOCATION_DATA_EXCHANGE+':' + CAST ( (@vProcessLocationCount-@vErrorsLocationCount) AS varchar ) + ', '+ @vMSG_ERROR_LOCATION_DATA_EXCHANGE+':' + CAST ( @vErrorsLocationCount AS varchar )
		SET @vTotalErrorsProductionOrders = (@vErrorsLocationCount + @ivaErrorValidations)

		SELECT @vMessagesAfterDataExchange = P.PARAM_VALUE 
		  FROM TFSCM_COM_PARAMS P 
		 WHERE P.CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE';

		IF (@vTotalErrorsProductionOrders > 0 AND @vMessagesAfterDataExchange = 'Y')
		BEGIN	
			EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'LDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
			EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsProductionOrders, 'LDE', 'LOCATION', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT
		END	

		IF (@vTotalErrorsProductionOrders = 0 AND @vMessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
		BEGIN 
			EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'LDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
		END
	END TRY 
	BEGIN CATCH 
		SET @ovaResult = '1';
		SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_LOAD_2]') 
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR) 
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE() 

		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1))
			BEGIN
				CLOSE cDataTempCursor;  		
			END
			DEALLOCATE cDataTempCursor;  
		END			
	END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[MASTER_PRODUCTION_ORDERS_BUILDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Johan Berrio
-- Upgrade date: 12/01/2020
-- Description : Add varchar variables that actualy are numeric
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 18/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Oscar Londoño
-- Upgrade date: 29/01/2020
-- Description : Rename AFTHER_FINISHED_PRODUCTION_ORDERS_ACTIONS to 
--               USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS 
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 24/12/2019
-- Description : * Add columns Release Problem and Release Problem Date and their default 
--                 values assignment
--				 * Remove RELEASE_STATUS column update for child orders
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Full column names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño 
-- Upgrade date: 17/01/2019
-- Description : * Issue (8427)
--                 Take the code of the Plant from the one related to the Family Code, even if  
--                 the Family Code does not change or is marked as Not Upgradable in the 
--                 interface.
--               * Change the keyword FAST_FORWARD by LOCAL STATIC READ_ONLY FORWARD_ONLY
-- Version     : 4.11.0
-- -------------------------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 04/08/2016
-- Description: adding a new condition due to the production family can be change.
-- -------------------------------------------------------------------------------------------
-- Modified   : Jag
-- Date       : 01/08/2016
-- Description: Allows Focuss to Modify FAMILY field via data exchange.
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Date       : 04/09/2015
-- Description: Modify TOUCH_TIME from Production Families to OPs
-- -------------------------------------------------------------------------------------------
-- Modified   : JAG
-- Date       : 04/03/2015
-- Description: Change cCdOrderChildCursor cursor for update. It would improve the performance
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Date       : 08/01/2015
-- Description: Change DSFAMILY for CDFAMILY
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 27/11/2014
-- Description: Modifying SP in order to improve the performance
-- -------------------------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 09/11/2013 
-- Description:	Procedure for creating SP masters
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MASTER_PRODUCTION_ORDERS_BUILDER] 
   /* Input Parameters */
    @ivaCodInterface AS SMALLINT,
    /* Output Parameters */
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @vSPMasterLoad 			NVARCHAR(MAX);
	DECLARE @vTableTempName			VARCHAR(50);
	DECLARE @vTableRealName			VARCHAR(50);
	DECLARE @vTrace					NVARCHAR(MAX)= '';

	DECLARE @CDFIELD				NVARCHAR(50);
	DECLARE @CDPKFIELD				NVARCHAR(50);
	DECLARE @DSTYPE					VARCHAR(50);
	DECLARE @COLUMN_SIZE			SMALLINT;
	DECLARE @COLUMN_ACCURACY		SMALLINT;
	DECLARE @IS_UPGRADEABLE			VARCHAR(1);

	DECLARE @vAllDeclareColumnOld			NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnInterfaceTmp	NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnCalc			NVARCHAR(MAX) = '';
	DECLARE @vAllColumnsBuildSelectByCursor	NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesInterfaceTmp		NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesFetch				NVARCHAR(MAX) = '';

	DECLARE @vAllColumnsInterfaceTmp		NVARCHAR(MAX) = '';

	DECLARE @vAllColumnsInsert				NVARCHAR(MAX) = '';
	DECLARE @vAllValuesInsert				NVARCHAR(MAX) = '';

	DECLARE @vAllUpgradablesColumns			NVARCHAR(MAX) = '   SET ';
	DECLARE @vAllSetsColumnsAndValuesUpdate	NVARCHAR(MAX) = '';

	DECLARE @vHadComma 						NUMERIC(10)= 0;
	DECLARE @vTotalColumnSize  				NUMERIC(2) = 0;

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		IF OBJECT_ID('TempPdnNumToStrTbl') IS NOT NULL 
			DROP TABLE TempPdnNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempPdnNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempPdnNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR'  AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_PRODUCTION_ORDERS_TEMP' 
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');
				  
		SET @vTrace = 'getting the table name and table name temp';
		
		SELECT @vTableRealName = TBL.TABLE_NAME, @vTableTempName = TBL.TABLE_NAME_TEMP 
		  FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
		 WHERE INTERFACE.CDTABLE     = TBL.CDTABLE
		   AND INTERFACE.CDINTERFACE = @ivaCodInterface;
								
		SET @CDPKFIELD = (SELECT TBL.CDCOLUMN 
							FROM TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE 
						   WHERE INTERFACE.CDTABLE = TBL.CDTABLE
							 AND TBL.IS_PRIMARY_KEY    = 'Y'
							 AND INTERFACE.CDINTERFACE = @ivaCodInterface);

		--SET @vTrace = 'Declaring the cursor with the @ivaCodInterface= '+ CAST(@ivaCodInterface AS VARCHAR)
		DECLARE cColumnConfiguration CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
		 SELECT DETAIL.CDFIELD, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, DETAIL.IS_UPGRADEABLE
		   FROM TFSCM_DEX_INT_DETAIL DETAIL, TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE
		  WHERE DETAIL.CDINTERFACE = @ivaCodInterface
			AND DETAIL.CDINTERFACE = INTERFACE.CDINTERFACE
			AND INTERFACE.CDTABLE  = TBL.CDTABLE 
			AND TBL.CDCOLUMN       = CDFIELD
		
		OPEN cColumnConfiguration;
		
		FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE,@COLUMN_ACCURACY, @IS_UPGRADEABLE;
		
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			--PRINT @CDFIELD
			IF (@vHadComma = 0)
			BEGIN
				SET @vAllColumnsInterfaceTmp = @vAllColumnsInterfaceTmp+''+@CDFIELD;
				SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+'TMP.'+@CDFIELD;
				SET @vAllVariablesInterfaceTmp = @vAllVariablesInterfaceTmp+'@'+@CDFIELD;
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
						
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD +' BIT ';
			END
			ELSE 
			BEGIN
				SET @vAllColumnsInterfaceTmp = @vAllColumnsInterfaceTmp+ ','+@CDFIELD; 
				SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+',TMP.'+@CDFIELD;
				SET @vAllVariablesInterfaceTmp = @vAllVariablesInterfaceTmp+', @'+@CDFIELD;
				
				IF (@DSTYPE = 'numeric')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
										
				IF (@DSTYPE = 'varchar')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
				
				IF (@DSTYPE = 'smallint')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' AS SMALLINT ';
				
				IF (@DSTYPE = 'datetime')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' AS DATETIME ';
					
				IF (@DSTYPE = 'date')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' AS DATE ';
					
				IF (@DSTYPE = 'boolean')
					SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD +' BIT ';
			END;

			SET @vHadComma = 1;
			
			IF (@IS_UPGRADEABLE = 'Y')
			BEGIN
				IF (LTRIM(RTRIM(@vAllUpgradablesColumns)) <> 'SET')
				BEGIN
					SET @vAllUpgradablesColumns = @vAllUpgradablesColumns +  '						   ';
				END 
				SET @vAllUpgradablesColumns = @vAllUpgradablesColumns + @CDFIELD +' = @'+@CDFIELD +',' + CHAR(13);
			END			
			-- -------------------------------------------------------------------------------
			-- Reading the new row
			-- -------------------------------------------------------------------------------
			FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE,@COLUMN_ACCURACY, @IS_UPGRADEABLE;
		END
		-- -----------------------------------------------------------------------------------
		-- Close cursor and release resources
		-- -----------------------------------------------------------------------------------
		CLOSE cColumnConfiguration;
		DEALLOCATE cColumnConfiguration;
		-- -----------------------------------------------------------------------------------
		
		SET @vAllVariablesFetch = @vAllVariablesInterfaceTmp + 
			+ ', @CDFAMILY_DB'
			+ ', @SHIPPING_TIME'
			+ ', @CDCALENDAR'
			+ ', @CDPLANT'
			+ ', @INITIAL_BUFFER'
			+ ', @CLEARENCE_BUFFER'
			+ ', @FINALIZATION_DATE'
			+ ', @ID_TEMP'
			+ ', @CDLOCATION'
			+ ', @YELLOW_ZONE_START'
			+ ', @RED_ZONE_START'
			+ ', @LOCATION_TYPE'
			+ ', @BUFFER_SKU'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number  
			-- -------------------------------------------------------------------------------
			+ ', @FILE_NAME'
			+ ', @FILE_ROW_NUMBER'
			+ '';
			
		IF (CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0)
		BEGIN
			SET @vAllVariablesFetch = @vAllVariablesFetch
				+ ', @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE ';
		END
		
		SET @vAllVariablesFetch = @vAllVariablesFetch
			+ ', @CDORDER_OLD'
			+ ', @CDFAMILY_OLD'
			+ ', @CDPLANT_OLD'
			+ ', @PRIORITY_COLOR_OLD'
			+ ', @LAST_COLOR_UPDATE_OLD'
			+ ', @INITIAL_BUFFER_OLD'
			+ ', @CLEARENCE_BUFFER_OLD'
			+ ', @FINALIZATION_DATE_OLD'
			+ ', @SHIPPING_TIME_OLD'
			+ ', @CDCALENDAR_OLD'
			+ ', @CDPARENT_ORDER_OLD'
			+ ', @CDORDER_TYPE_OLD'
			+ ', @SKU_OLD'
			+ ', @CDDESTINATION_OLD'
			+ ', @PROMISED_DELIVERY_DATE_OLD'
			+ ', @REAL_RELEASE_DATE_OLD'
			+ ', @TOTAL_AMOUNT_OLD'
			+ ', @PENDING_AMOUNT_OLD'
			+ ', @ORDER_VALUE_OLD'
			+ ', @CDWORKPLACE_OLD'
			+ ', @ORDER_MODIFY_DATE_OLD'
			+ ', @RECOMMENDED_RELEASE_DATE_OLD'
			+ ', @PRIORITY_OLD'
			+ ', @RELEASE_STATUS_OLD'
			+ ', @MANAGED_ORDER_OLD'								
			+ ', @PROGRESS_PERCENTAGE_OLD'
			+ ', @TOUCH_TIME'
			+ ', @FAMILY_TOUCH_TIME'
			+ ', @DATE_INSERTION'								
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Old Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ ', @RELEASE_PROBLEM_OLD'
			+ ', @RELEASE_PROBLEM_DATE_OLD';
			
		-- ----------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric 
		-- to fetch
		-- ----------------------------------------------------------------------------
		SET @vAllVariablesFetch = @vAllVariablesFetch    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', @' + [NTS].[VARCHAR_COLUMN], '') AS FETCH_SENTENCE
				 FROM TempPdnNumToStrTbl AS [NTS]),  ''))
			+ CHAR(13);
		
		DECLARE @vOptionalStructureValidateORDER_VALUEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('ORDER_VALUE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateORDER_VALUEStr = ''
				+ '			IF (@vPassesValidations!=0 AND @ORDER_VALUE IS NULL  ) ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @ORDER_VALUE = 0  ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
			    + '			IF (@vPassesValidations!=0 AND (@ORDER_VALUE IS NULL OR @ORDER_VALUE < 0) )  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						@CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_VALUE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_VALUE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''ORDER_VALUE'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ';
		END
		
		DECLARE @vOptionalStructureValidatePROGRESS_PERCENTAGEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('PROGRESS_PERCENTAGE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidatePROGRESS_PERCENTAGEStr = ''	
				+ '			IF (@vPassesValidations!=0 AND @TOUCH_TIME <> 0 AND  (@PROGRESS_PERCENTAGE IS NULL OR @PROGRESS_PERCENTAGE < 0 OR @PROGRESS_PERCENTAGE > 100) )  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PROGRESS_PERCENTAGE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROGRESS_PERCENTAGE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PROGRESS_PERCENTAGE'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ';
		END
		
		DECLARE @vOptionalStructureValidateCDWORKPLACEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('CDWORKPLACE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateCDWORKPLACEStr ='  ' + CHAR(13);			
		END		
		
		DECLARE @vOptionalStructureValidateCDPARENT_ORDERStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('CDPARENT_ORDER', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateCDPARENT_ORDERStr = '' + CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDPARENT_ORDER IS NOT NULL)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vCountIntTmp = 0; ' + CHAR(13)
				+ '				' + CHAR(13)
				+ '				-- Child order passes only if partent order was loaded into temp, ' + CHAR(13)
				+ '				-- but without errors ' + CHAR(13)
				+ '				SELECT @vCountIntTmp = COUNT(T.CDORDER)  ' + CHAR(13)
				+ '				  FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP T ' + CHAR(13)
				+ '				 WHERE T.IDEXCHANGE        = @ivaIdExchange ' + CHAR(13)
				+ '				   AND T.CDORDER           = @CDPARENT_ORDER ' + CHAR(13)
				+ '				   AND T.ORDER_MODIFY_DATE = @ORDER_MODIFY_DATE  ' + CHAR(13)
				+ '				   AND T.STATUS            = 1; ' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@vCountIntTmp < 1) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '					VALUES (@vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDPARENT_ORDER, 105), @FILE_ROW_NUMBER, ''CDPARENT_ORDER'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '					SET @vErrorsOrphansProductionOrdersCount = @vErrorsOrphansProductionOrdersCount + 1 ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@vPassesValidations!=0) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @vCountIntTmp = 0; ' + CHAR(13)
				+ CHAR(13)
				+ '					SELECT @vCountIntTmp = COUNT(TMP.CDORDER) ' + CHAR(13)
				+ '					  FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP ' + CHAR(13)
				+ '					 WHERE TMP.IDEXCHANGE = @ivaIdExchange AND TMP.CDPARENT_ORDER = @CDORDER AND TMP.ORDER_MODIFY_DATE = @ORDER_MODIFY_DATE ' + CHAR(13)
				+ CHAR(13)
				+ '					IF (@vCountIntTmp > 0) ' + CHAR(13)
				+ '					BEGIN ' + CHAR(13)
				+ '						SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '						INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '						VALUES (@vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '							    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDPARENT_ORDER, 105), @FILE_ROW_NUMBER, ''CDPARENT_ORDER'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '						SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '						SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '						FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '						CONTINUE; ' + CHAR(13)
				+ '					END ' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ '			END ';
		END
	
		-- -----------------------------------------------------------------------------------
		-- Add columns that need to be included but that are not into the interface structure
		-- -----------------------------------------------------------------------------------
		SET @vAllDeclareColumnCalc = ''
			+ ' @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE AS VARCHAR(50)' + CHAR(13)
			+ '		, @CDFAMILY_DB 					VARCHAR(50)' + CHAR(13)
			+ '		, @SHIPPING_TIME 				VARCHAR(5)' + CHAR(13)
			+ '		, @CDCALENDAR 					NUMERIC(4,0) ' + CHAR(13)
			+ '		, @CDPLANT 						VARCHAR(50)' + CHAR(13)
			+ '		, @INITIAL_BUFFER 				NUMERIC(8,0)' + CHAR(13)
			+ '		, @CLEARENCE_BUFFER 				NUMERIC(10,0)' + CHAR(13)
			+ '		, @PRODUCTION_BUFFER				NUMERIC(10,0)' + CHAR(13)
			+ '		, @RECOMMENDED_RELEASE_DATE 		DATETIME' + CHAR(13)
			+ '		, @RELEASE_STATUS 				VARCHAR(1)' + CHAR(13)
			+ '		, @FINALIZATION_DATE				DATETIME' + CHAR(13)
			+ '		, @PRIORITY 						NUMERIC(17,2)' + CHAR(13)
			+ '		, @PRIORITY_COLOR 				VARCHAR(50)' + CHAR(13)
			+ '		, @LAST_COLOR_UPDATE				DATETIME' + CHAR(13)
			+ '		, @MANAGED_ORDER 				BIT' + CHAR(13)
			+ '		, @ID_TEMP 						NUMERIC(18,0)' + CHAR(13)
			+ '		, @CDLOCATION 					VARCHAR(50)' + CHAR(13)
			+ '		, @YELLOW_ZONE_START 			NUMERIC(5,2)' + CHAR(13)
			+ '		, @RED_ZONE_START 				NUMERIC(5,2)' + CHAR(13)
			+ '		, @NEW_CREATION_DATE 			DATETIME' + CHAR(13)
			+ '		, @CURRENT_NEW_CREATION_DATE 	DATETIME = GETDATE()' + CHAR(13)
			+ '		, @PRODUCTION_PROBLEM_DATE 		DATETIME = ''1901-01-01''' + CHAR(13)
			+ '		, @QUARANTINE_DATE 				DATETIME = ''1901-01-01''' + CHAR(13)
			+ '		, @PRODUCTION_PROBLEM_CAUSE 		VARCHAR(10)' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ '		, @RELEASE_PROBLEM            	VARCHAR(10)' + CHAR(13)
			+ '		, @RELEASE_PROBLEM_DATE       	DATETIME = ''1901-01-01''' + CHAR(13)
			+ '		, @RELEASE_PROBLEM_BY_DEFAULT	VARCHAR(10)' + CHAR(13)
			+ '		, @RELEASE_PROBLEM_NOT_ASSIGNED	VARCHAR(10)' + CHAR(13)
			+ '		, @vCOMMIT_COUNT               	NUMERIC(4) = 0' + CHAR(13);
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric to 
		--                vAllDeclareColumnCalc
		-- -----------------------------------------------------------------------------------
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc   
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('		, ' + LEFT('@' + [NTS].[VARCHAR_COLUMN] + REPLICATE(' ', 56), 56)  + 'AS VARCHAR(50)',  CHAR(13)) AS DECLARE_SENTENCE
				 FROM TempPdnNumToStrTbl AS [NTS]), ''));

		SET @vAllDeclareColumnOld = ''
			+ ' @CDORDER_OLD 					VARCHAR(50)' + CHAR(13)
			+ '		, @CDFAMILY_OLD 					VARCHAR(50)' + CHAR(13)
			+ '		, @CDPLANT_OLD 					VARCHAR(50)' + CHAR(13)
			+ '		, @PRIORITY_COLOR_OLD 			VARCHAR(50)' + CHAR(13)
			+ '		, @LAST_COLOR_UPDATE_OLD 		DATETIME' + CHAR(13)
			+ '		, @INITIAL_BUFFER_OLD 			NUMERIC(8,0)' + CHAR(13)
			+ '		, @CLEARENCE_BUFFER_OLD 			NUMERIC(10,0)' + CHAR(13)
			+ '		, @FINALIZATION_DATE_OLD 		DATETIME' + CHAR(13)
			+ '		, @SHIPPING_TIME_OLD 			VARCHAR(5)' + CHAR(13)
			+ '		, @CDCALENDAR_OLD 				NUMERIC(4,0)' + CHAR(13)
			+ '		, @CDPARENT_ORDER_OLD 			VARCHAR(50)' + CHAR(13)
			+ '		, @CDORDER_TYPE_OLD 				VARCHAR(1)' + CHAR(13)
			+ '		, @SKU_OLD 						VARCHAR(50)' + CHAR(13)
			+ '		, @CDDESTINATION_OLD 			VARCHAR(50)' + CHAR(13)
			+ '		, @PROMISED_DELIVERY_DATE_OLD 	DATETIME' + CHAR(13)
			+ '		, @REAL_RELEASE_DATE_OLD 		DATETIME' + CHAR(13)
			+ '		, @TOTAL_AMOUNT_OLD 				NUMERIC(17,2)' + CHAR(13)
			+ '		, @PENDING_AMOUNT_OLD 			NUMERIC(17,2)' + CHAR(13)
			+ '		, @ORDER_VALUE_OLD 				NUMERIC(17,2)' + CHAR(13)
			+ '		, @CDWORKPLACE_OLD 				VARCHAR(50)' + CHAR(13)
			+ '		, @ORDER_MODIFY_DATE_OLD			DATETIME' + CHAR(13)
			+ '		, @RECOMMENDED_RELEASE_DATE_OLD 	DATETIME' + CHAR(13)
			+ '		, @PRIORITY_OLD 					NUMERIC(20,5)' + CHAR(13)
			+ '		, @RELEASE_STATUS_OLD 			VARCHAR(1)' + CHAR(13)
			+ '		, @MANAGED_ORDER_OLD				BIT' + CHAR(13)
			+ '		, @PROGRESS_PERCENTAGE_OLD 		NUMERIC(17,5)' + CHAR(13)
			+ '		, @TOUCH_TIME 					NUMERIC(17,5)' + CHAR(13)
			+ '		, @FAMILY_TOUCH_TIME 			NUMERIC(17,5)' + CHAR(13)
			+ '		, @DATE_INSERTION 				DATETIME' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Old Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ '		, @RELEASE_PROBLEM_OLD         	VARCHAR(10)' + CHAR(13) 
			+ '		, @RELEASE_PROBLEM_DATE_OLD    	DATETIME ';								

		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor 
			+ ', CPF.CDFAMILY'
			+ ', CC.SHIPPING_TIME'
			+ ', CC.CDCALENDAR'
			+ ', CPF.CDLOCATION'
			+ ', CPF.BUFFER'
			+ ', 0'	    --CLEARENCE_BUFFER
			+ ', NULL'	--FINALIZATION_DATE
			+ ', TMP.ID'
			+ ', CL.CDLOCATION'
			+ ', CPF.YELLOW_ZONE_START'
			+ ', CPF.RED_ZONE_START'
			+ ', CL.LOCATION_TYPE'
			+ ', B.SKU AS BUFFER_SKU'
			-- -------------------------------------------------------------------------------
			--  IAFJ 20201118: Since v5.3.0, add columns File_name and File_row_number */
			-- -------------------------------------------------------------------------------
			+ ', TMP.FILE_NAME'
			+ ', TMP.FILE_ROW_NUMBER';

		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
				+ ', B_OLD.SKU AS BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE';
		END
		
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', POOLD.CDORDER'
			+ ', POOLD.CDFAMILY'
			+ ', POOLD.CDPLANT'
			+ ', POOLD.PRIORITY_COLOR'
			+ ', POOLD.LAST_COLOR_UPDATE'
			+ ', POOLD.INITIAL_BUFFER'
			+ ', POOLD.CLEARENCE_BUFFER'
			+ ', POOLD.FINALIZATION_DATE'
			+ ', CC_OLD.SHIPPING_TIME'
			+ ', CC_OLD.CDCALENDAR'
			+ ', POOLD.CDPARENT_ORDER'
			+ ', POOLD.CDORDER_TYPE'
			+ ', POOLD.SKU'
			+ ', POOLD.CDDESTINATION'
			+ ', POOLD.PROMISED_DELIVERY_DATE'
			+ ', POOLD.REAL_RELEASE_DATE'
			+ ', POOLD.TOTAL_AMOUNT'
			+ ', POOLD.PENDING_AMOUNT'
			+ ', POOLD.ORDER_VALUE'
			+ ', POOLD.CDWORKPLACE'
			+ ', POOLD.ORDER_MODIFY_DATE'
			+ ', POOLD.RECOMMENDED_RELEASE_DATE'
			+ ', POOLD.PRIORITY'
			+ ', POOLD.RELEASE_STATUS'
			+ ', POOLD.MANAGED_ORDER'
			+ ', POOLD.PROGRESS_PERCENTAGE'
			+ ', POOLD.TOUCH_TIME'
			+ ', CPF.TOUCH_TIME'
			+ ', TMP.DATE_INSERTION'
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Old Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ ', POOLD.RELEASE_PROBLEM'
			+ ', POOLD.RELEASE_PROBLEM_DATE'
			+ '';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric to 
		--                Select
		-- -----------------------------------------------------------------------------------
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor   
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', TMP.' + [NTS].[VARCHAR_COLUMN], '') AS SELECT_SENTENCE
				 FROM TempPdnNumToStrTbl AS [NTS]), ''));

		-- -----------------------------------------------------------------------------------
		-- 								  Start build INSERT 
		-- -----------------------------------------------------------------------------------		
		SET @vAllColumnsInsert = @vAllColumnsInterfaceTmp
			+ ',CDPLANT'
			+ ',INITIAL_BUFFER'
			+ ',CLEARENCE_BUFFER'								
			+ ',PRODUCTION_PROBLEM_CAUSE'
			+ ',PRODUCTION_PROBLEM_DATE'
			+ ',PRODUCTION_BUFFER'
			+ ',RECOMMENDED_RELEASE_DATE'
			+ ',RELEASE_STATUS'
			+ ',FINALIZATION_DATE'
			+ ',PRIORITY'
			+ ',PRIORITY_COLOR'
			+ ',LAST_COLOR_UPDATE'
			+ ',MANAGED_ORDER'
			+ ',CREATION_DATE'
			+ ',CREATOR_USER'
			+ ',MODIFY_DATE'
			+ ',MODIFY_USER'
			+ ',EXCHANGES_IN_QUARANTINE'
			+ ',QUARANTINE_DATE'
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ ',RELEASE_PROBLEM'
			+ ',RELEASE_PROBLEM_DATE'
			+ '';

		IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',ORDER_VALUE'
		END
		IF(LEN(@vOptionalStructureValidateCDWORKPLACEStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',CDWORKPLACE'
		END	
		IF(LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',CDPARENT_ORDER'
		END		
		
		IF(LEN(@vOptionalStructureValidatePROGRESS_PERCENTAGEStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',PROGRESS_PERCENTAGE'
		END	
		
		SET @vAllColumnsInsert = @vAllColumnsInsert + ', TOUCH_TIME'
		SET @vAllColumnsInsert = @vAllColumnsInsert + ', DATE_INSERTION'
		
		SET @vAllValuesInsert = @vAllVariablesInterfaceTmp
			+ ', @CDPLANT'
			+ ', @INITIAL_BUFFER'
			+ ', @CLEARENCE_BUFFER'								
			+ ', @PRODUCTION_PROBLEM_CAUSE'
			+ ', @PRODUCTION_PROBLEM_DATE'								
			+ ', @PRODUCTION_BUFFER'
			+ ', @RECOMMENDED_RELEASE_DATE'
			+ ', @RELEASE_STATUS'
			+ ', @FINALIZATION_DATE'
			+ ', @PRIORITY, @PRIORITY_COLOR'
			+ ', @LAST_COLOR_UPDATE'
			+ ', @MANAGED_ORDER'
			+ ', @NEW_CREATION_DATE'
			+ ', @ivaCreatorOrModifyUserAux'
			+ ', GETDATE()'
			+ ', @ivaCreatorOrModifyUserAux'
			+ ', 0'
			+ ', @QUARANTINE_DATE'
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ ', @RELEASE_PROBLEM'
			+ ', @RELEASE_PROBLEM_DATE'
			+ '';

		IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ',1'		--ORDER_VALUE
		END
		IF(LEN(@vOptionalStructureValidateCDWORKPLACEStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ',null'		--CDWORKPLACE
		END
		IF(LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ',null'		--CDPARENT_ORDER
		END
		
		IF(LEN(@vOptionalStructureValidatePROGRESS_PERCENTAGEStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ',0'        --PROGRESS_PERCENTAGE
		END	
		
		SET @vAllValuesInsert = @vAllValuesInsert + ', @TOUCH_TIME ';
		SET @vAllValuesInsert = @vAllValuesInsert + ', @DATE_INSERTION ';
		-- -----------------------------------------------------------------------------------		
		--                              End build INSERT 
		-- -----------------------------------------------------------------------------------		

		-- -----------------------------------------------------------------------------------		
		--                             Start build UPDATE 
		-- -----------------------------------------------------------------------------------		
		SET @vAllSetsColumnsAndValuesUpdate = @vAllUpgradablesColumns 
			+ '						   RECOMMENDED_RELEASE_DATE	= @RECOMMENDED_RELEASE_DATE' + CHAR(13)
			+ '						   ,RELEASE_STATUS			= @RELEASE_STATUS' + CHAR(13)
			+ '						   ,PRIORITY 				= @PRIORITY' + CHAR(13)
			+ '						   ,PRIORITY_COLOR 			= @PRIORITY_COLOR' + CHAR(13)
			+ '						   ,LAST_COLOR_UPDATE 		= @LAST_COLOR_UPDATE' + CHAR(13)
			+ '						   ,MANAGED_ORDER			= @MANAGED_ORDER' + CHAR(13)
			+ '						   ,MODIFY_DATE				= GETDATE()' + CHAR(13)
			+ '						   ,MODIFY_USER				= @ivaCreatorOrModifyUserAux ' + CHAR(13)
			+ '						   ,DATE_INSERTION			= @DATE_INSERTION ' + CHAR(13)
			+ '						   ,TOUCH_TIME				= @TOUCH_TIME ' + CHAR(13)
			+ '						   ,INITIAL_BUFFER			= @INITIAL_BUFFER ' + CHAR(13)
			+ '						   ,PRODUCTION_BUFFER		= @PRODUCTION_BUFFER ' + CHAR(13)
			+ '						   ,CDPLANT					= @CDPLANT ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date 
			-- -------------------------------------------------------------------------------
			+ '						   ,RELEASE_PROBLEM			= @RELEASE_PROBLEM ' + CHAR(13)
			+ '						   ,RELEASE_PROBLEM_DATE	= @RELEASE_PROBLEM_DATE ';
								
		--IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0) -- si no existe en la estructura si se debe insertar el valor 1 pero si el registro ya existia no se debe modificar el registro (si ya existe se debe dejar el valor que tenia), por eso se comentan estas lineas
		--BEGIN 
		--	SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + ',ORDER_VALUE = 1 '
		--END
		--IF(LEN(@vOptionalStructureValidateCDWORKPLACEStr) = 0)
		--BEGIN 
		--	SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + ',CDWORKPLACE = null '
		--END
		--IF(LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) = 0)
		--BEGIN 
		--	SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + ',CDPARENT_ORDER = null '
		--END
		
		-- -----------------------------------------------------------------------------------		
		--                                End build UPDATE
		-- -----------------------------------------------------------------------------------		

		SET @vTrace = 'building the vSPMasterLoad ';
		
		IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'PRODUCTION_ORDERS')
			SET @vSPMasterLoad = 'ALTER PROCEDURE [dbo].[PRODUCTION_ORDERS] ' + CHAR(13);
		ELSE
			SET @vSPMasterLoad = 'CREATE PROCEDURE [dbo].[PRODUCTION_ORDERS] ' + CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	@ivaIdExchange NUMERIC(10), ' + CHAR(13)
			+ '	@ivaTempLoadDate DATE , ' + CHAR(13)
			+ '	@ivaCreatorOrModifyUser NVARCHAR(MAX), ' + CHAR(13)
			+ '	@ivaErrorValidations NUMERIC(10), ' + CHAR(13)
			+ '	@ovaResult VARCHAR(1) OUTPUT, ' + CHAR(13)
			+ '	@ovaMessage NVARCHAR(MAX) OUTPUT, ' + CHAR(13)
			+ '	@ovaHasProcessed VARCHAR(1) OUTPUT ' + CHAR(13)
			+ 'AS ' + CHAR(13)
			+ 'DECLARE @vTrace AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @CDORDER_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ 'DECLARE @vDuplicatedOrdersCountTemp AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @vErrorsProductionOrdersCount AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @vProcessProductionOrdersCount AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @vErrorsOrphansProductionOrdersCount AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ovaResultFinished AS VARCHAR(1); ' + CHAR(13)
			+ 'DECLARE @ovaMessageFinished AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @ovaResultQuarantine AS NVARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaMessageQuarantine AS NVARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaMessageFinishedTotal AS NVARCHAR(MAX) = ''''; ' + CHAR(13)
			+ 'DECLARE @vPassesValidations AS SMALLINT = 1; ' + CHAR(13)
			+ 'DECLARE @vCountIntTmp AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ivaCreatorOrModifyUserAux AS VARCHAR(50); ' + CHAR(13)
			+ 'DECLARE @NON_WORKING_DAYS AS NUMERIC(10,2); ' + CHAR(13)
			+ 'DECLARE @ORDER_MODIFY_DATE_BEFORE AS DATETIME; ' + CHAR(13)
			+ 'DECLARE @DATE_SERVER_NO_TIME AS DATE; ' + CHAR(13)
			+ 'DECLARE @DATE_CALCULATION AS DATETIME; ' + CHAR(13)
			+ 'DECLARE @DATE_CALCULATION_FINALIZATION AS DATETIME; ' + CHAR(13)
			+ 'DECLARE @ovaPriorityResul NUMERIC(10,2) ;' + CHAR(13)
			+ 'DECLARE @ovaYellowZoneStart NUMERIC(5,2);' + CHAR(13)
			+ 'DECLARE @ovaRedZoneStart NUMERIC(5,2);' + CHAR(13)
			+ 'DECLARE @skuBefore AS VARCHAR(50);' + CHAR(13)
			+ 'DECLARE @cdDestinationBefore AS VARCHAR(50);' + CHAR(13)
			+ 'DECLARE @sumProductionStock NUMERIC(38,5);' + CHAR(13)
			+ 'DECLARE @ovaResultAfthetF VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageAfthetF VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaResultRemoveViewNot VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageRemoveViewNot VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaResultAddViewNot VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageAddViewNot VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @vTotalErrorsProductionOrders NUMERIC(8) = 0; ' + CHAR(13)
			+ 'DECLARE @vMessagesAfterDataExchange VARCHAR = ''N''; ' + CHAR(13)
			+ 'DECLARE @LOCATION_TYPE AS VARCHAR(50);' + CHAR(13)
			+ 'DECLARE @BUFFER_SKU AS VARCHAR(50);' + CHAR(13)
			+ 'DECLARE @PROGRESS_PERCENTAGE_AUX AS NUMERIC(17,5) = 0; ' + CHAR(13)
			+ 'DECLARE @CDORDER_CHILD AS VARCHAR(50), @MODIFY_DATE_CHILD AS DATETIME, @MODIFY_USER_CHILD AS VARCHAR(50), @TOTAL_AMOUNT_CHILD AS NUMERIC(17,2); ' + CHAR(13)
			+ 'DECLARE @vDummy AS VARCHAR(10) = ''''; ' + CHAR(13)
			+ 'DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( ' + CHAR(13)
			+ '	CDORDER         VARCHAR(50), ' + CHAR(13)
			+ '	SKU             VARCHAR(50), ' + CHAR(13)
			+ '	LOCATION        VARCHAR(50), ' + CHAR(13)
			+ '	FILE_NAME       VARCHAR(500), ' + CHAR(13)
			+ '	FILE_ROW_NUMBER INT, ' + CHAR(13)
			+ '	PRIMARY KEY (CDORDER, SKU, LOCATION) ' + CHAR(13)
			+ ') ' + CHAR(13)
			+ CHAR(13);
			 
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
		    + 'BEGIN ' + CHAR(13)+ CHAR(13)
			+ 'BEGIN TRY ' + CHAR(13)
			+ '	-- SET NOCOUNT ON added to prevent extra result sets from ' + CHAR(13)
			+ '	-- interfering with SELECT statements. ' + CHAR(13)
			+ '	SET NOCOUNT ON; ' + CHAR(13)
			+ '	SET @ovaResult = ''0'';' + CHAR(13)
			+ '	SET @ovaMessage = '''';' + CHAR(13)
			+ '	SET @ovaHasProcessed = ''0'';' + CHAR(13)
			+ '	SET @ivaCreatorOrModifyUserAux = @ivaCreatorOrModifyUser; ' + CHAR(13)
			+ '	SET @ORDER_MODIFY_DATE_BEFORE = NULL; ' + CHAR(13)
			+ '	SET @vTrace = ''Setting the cursor cDataTempCursor  ''' + CHAR(13)
			+ '	SET @DATE_SERVER_NO_TIME = GETDATE(); ' + CHAR(13)
			+ '	SET @DATE_CALCULATION = GETDATE(); ' + CHAR(13)
			+ '	SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION; ' + CHAR(13)
			+ '	SET @skuBefore= '''';' + CHAR(13)
			+ '	SET @cdDestinationBefore ='''';' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnInterfaceTmp + ';' + CHAR(13);
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnCalc + ';' + CHAR(13);
		SET @vSPMasterLoad = @vSPMasterLoad + ' DECLARE ' + @vAllDeclareColumnOld + ';' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	BEGIN TRY ' + CHAR(13)
			+ CHAR(13)
			+ '		---------- MESSAGES ---------------------------------------- ' + CHAR(13)
			+ '		DECLARE @vLanguage AS VARCHAR(2) = ''es'';  ' + CHAR(13)
			+ '		DECLARE @vCodErrorResultMessages AS VARCHAR(1); ' + CHAR(13)
			+ '		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_PRODUCTION_ORDERS_ORPHANS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT AS NVARCHAR(MAX);' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY AS NVARCHAR(MAX); ' + CHAR(13)
			+ CHAR(13)
			+ '		BEGIN TRY  ' + CHAR(13)
			+ CHAR(13)
			+ '			SELECT @vLanguage = PARAM_VALUE  ' + CHAR(13)
			+ '			  FROM TFSCM_COM_PARAMS ' + CHAR(13)
			+ '			WHERE CDPARAM = ''DEFAULT_LANGUAGE'' ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT, ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_TYPE_INVAL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''PRODUCTION_ORDERS_ORPHANS'', @vLanguage, '''', '''', '''', @vMSG_PRODUCTION_ORDERS_ORPHANS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_PARENT_CHILD_ERROR'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NOWD'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LE0'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LE0'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GT_NOW'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LT_0'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY'', @vLanguage, '''', '''', '''', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '		END TRY  ' + CHAR(13)
			+ '		BEGIN CATCH  ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPLICATED'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL = ''DATA_EXCHANGE_PRODUCTIONORDER_CDORDER_TYPE_INVALID'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW = ''DATA_EXCHANGE_REAL_RELEASE_DATE_GREATER_THAN_NOW'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR = ''DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS = ''SUCESSFUL_ORDERS'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS = ''ERRORS_ORDERS'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS = ''ELIMINATED_ORPHANS_ORDERS'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_ORPHANS'' ' + CHAR(13)
			+ '			SET @vMSG_PRODUCTION_ORDERS_ORPHANS = ''CDORDER_ORPHANS'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_ORDER_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_SHOULD_NOT_BE_PARENT_AND_CHILD'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DELIVERY_DATE_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD = ''DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NO_WORK_DAY'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 = ''DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LESS_THAN_OR_EQUAL_TO_Zero'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 = ''DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LESS_THAN_OR_EQUAL_TO_Zero'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW = ''DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GREATER_THAN_NOW'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 = ''DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LESS_THAN_ZERO'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND = ''DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL = ''DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL = ''DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL'' ' + CHAR(13)
	 		+ '			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT = ''DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT''' + CHAR(13)
	 		+ '			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD = ''DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD''' + CHAR(13)
	 		+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT = ''DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT''' + CHAR(13)
	 		+ '			SET @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR = ''DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR''' + CHAR(13)
	 		+ '			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY = ''DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY''' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number   ' + CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		DECLARE @FILE_NAME AS VARCHAR(500); ' + CHAR(13)
			+ '		DECLARE @FILE_ROW_NUMBER AS INT; ' + CHAR(13)	
		    + CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  ' + CHAR(13)
			+ '		-- ---------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		IF OBJECT_ID(''tempdb..#DuplicateProductionTemp'') IS NOT NULL  ' + CHAR(13)
			+ '			DROP TABLE #DuplicateProductionTemp; ' + CHAR(13)
			+ CHAR(13)	
			+ '		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ ' 	       RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  INTO #DuplicateProductionTemp ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_COM_LOG] ' + CHAR(13)
			+ '		 WHERE 1 = 2; ' + CHAR(13)
			+ CHAR(13)	
			+ '		INSERT INTO #DuplicateProductionTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '                                 RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT [POTDUP].[COUNTER1], @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED + CAST([POTDUP].[COUNTER1] AS VARCHAR) + ''.'', NULL, ''E'', GETDATE(), ' + CHAR(13)
			+ '			   [POT].[CDORDER], [POT].[CDDESTINATION], NULL, [POT].[FILE_ROW_NUMBER], ''CDORDER'', [POT].[FILE_NAME], @ivaTempLoadDate ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [POT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDORDER], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]        = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[ORDER_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[CDORDER]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [POTDUP] ' + CHAR(13)
			+ '			ON ([POT].[IDEXCHANGE]        = @ivaIdExchange ' + CHAR(13)
			+ '			AND [POT].[ORDER_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [POTDUP].[CDORDER]        = [POT].[CDORDER] ' + CHAR(13)
			+ '			AND [POT].[FILE_ROW_NUMBER]   = [POTDUP].[FILE_ROW_NUMBER]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT @vDuplicatedOrdersCountTemp = SUM(COUNTER1) FROM #DuplicateProductionTemp;' + CHAR(13)
			+ '		SET @vErrorsProductionOrdersCount  = @vErrorsProductionOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		-- Counting repeated events ' + CHAR(13)
			+ '		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  FROM #DuplicateProductionTemp; ' + CHAR(13)	
			+ CHAR(13)
			+ '		DELETE [POT] ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [POT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDORDER]' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]        = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[ORDER_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[CDORDER]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [POTDUP] ' + CHAR(13)
			+ '			ON ([POT].[IDEXCHANGE]        = @ivaIdExchange ' + CHAR(13)
			+ '			AND [POT].[ORDER_MODIFY_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [POTDUP].[CDORDER]        = [POT].[CDORDER]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vProcessProductionOrdersCount = @vProcessProductionOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		/*DECLARE cErrorLogCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR ' + CHAR(13)
			+ '		 SELECT tempo.COUNTER1, tempo.CDORDER, tempo.FILE_NAME, tempo.FILE_ROW_NUMBER  ' + CHAR(13)
			+ '		   FROM ( SELECT COUNT(TMP.CDORDER) AS COUNTER1, TMP.CDORDER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ' + CHAR(13)
			+ '				    FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP ' + CHAR(13)
			+ '				   WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '				 	 AND TMP.ORDER_MODIFY_DATE = @ivaTempLoadDate' + CHAR(13)
			+ '				   GROUP BY TMP.CDORDER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ' + CHAR(13)
			+ '				 ) tempo ' + CHAR(13)
			+ '		  WHERE tempo.COUNTER1 >1 ' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN cErrorLogCursor ' + CHAR(13)
			+ '		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @CDORDER_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER ' + CHAR(13)
			+ CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '			VALUES (@vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED, NULL, ''E'', GETDATE(), ' + CHAR(13)
			+ '				    @CDORDER_ERROR_LOG, NULL, CONVERT(VARCHAR, @CDORDER_ERROR_LOG, 105), @FILE_ROW_NUMBER, ''CDORDER_ERROR_LOG'', @FILE_NAME, @ivaTempLoadDate) ' + CHAR(13)
			+ CHAR(13)
			+ '			SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + @vDuplicatedOrdersCountTemp ' + CHAR(13)
			+ '			SET @ovaResult = ''1''; ' + CHAR(13)
			+ CHAR(13)
			+ '			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @CDORDER_ERROR_LOG ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		CLOSE cErrorLogCursor ' + CHAR(13)
			+ '		DEALLOCATE cErrorLogCursor */ ' + CHAR(13)
			+ '	END TRY ' + CHAR(13)
			+ '	BEGIN CATCH ' + CHAR(13)
			+ '	END CATCH ' + CHAR(13)
			+ CHAR(13) 
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ CHAR(13) 
			+ '	SELECT TOP(1) @PRODUCTION_PROBLEM_CAUSE = C.CDCAUSE ' + CHAR(13)
			+ '	  FROM TFSCM_CLI_CAUSES C ' + CHAR(13)
			+ '	 WHERE C.DSCAUSE   = ''cause_none_type'' ' + CHAR(13)
			+ '	   AND C.IS_SYSTEM = ''Y''; ' + CHAR(13)
			+ CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ '	SELECT TOP(1) @RELEASE_PROBLEM_BY_DEFAULT = C.CDCAUSE ' + CHAR(13)
			+ '	  FROM TFSCM_CLI_CAUSES C ' + CHAR(13)
			+ '	 WHERE C.DSCAUSE   = ''release_problem_none_cause'' ' + CHAR(13)
			+ '	   AND C.IS_SYSTEM = ''Y''; ' + CHAR(13)
			+ CHAR(13)
			+ '	SELECT TOP(1) @RELEASE_PROBLEM_NOT_ASSIGNED = C.CDCAUSE ' + CHAR(13)
			+ '	  FROM TFSCM_CLI_CAUSES C ' + CHAR(13)
			+ '	 WHERE C.DSCAUSE   = ''release_problem_not_assigned_cause'' ' + CHAR(13)
			+ '	   AND C.IS_SYSTEM = ''Y''; ' + CHAR(13)
			+ '	-- --------------------------------------------------------------------------------------- ' + CHAR(13)
			+ CHAR(13)
			+ '	DECLARE cDataTempCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR ' + CHAR(13)
			+ '	 SELECT ';
			
		SET @vSPMasterLoad = @vSPMasterLoad + @vAllColumnsBuildSelectByCursor + CHAR(13)
			+ '	   FROM '+@vTableTempName + ' TMP ' + CHAR(13) 
			+ '	   LEFT OUTER JOIN '+@vTableRealName +' POOLD  ON (TMP.CDORDER = POOLD.CDORDER) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF    ON (CPF.CDFAMILY = TMP.CDFAMILY AND CPF.IS_ACTIVE = 1) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION		   CL     ON (CL.CDLOCATION = CPF.CDLOCATION AND CL.IS_ACTIVE = 1) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION		   CL_OLD ON (CL_OLD.CDLOCATION = POOLD.CDPLANT AND CL_OLD.IS_ACTIVE = 1) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR		   CC     ON (CC.CDCALENDAR = CL.CDCALENDAR AND CC.IS_ACTIVE = 1) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR		   CC_OLD ON (CC_OLD.CDCALENDAR = CL_OLD.CDCALENDAR AND CC_OLD.IS_ACTIVE = 1) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER  		   B      ON (B.SKU = TMP.SKU AND B.LOCATION = TMP.CDDESTINATION AND B.INACTIVE = 0)  ' + CHAR(13);
			
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) > 0 AND CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = TMP.SKU AND B_OLD.LOCATION = POOLD.CDDESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) > 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = POOLD.SKU AND B_OLD.LOCATION = TMP.CDDESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = POOLD.SKU AND B_OLD.LOCATION = POOLD.CDDESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	  WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13) 
			+ '		AND TMP.ORDER_MODIFY_DATE = @ivaTempLoadDate' + CHAR(13)
			+ '		AND TMP.CDORDER NOT IN ' + CHAR(13)
			+ '		   ( ' + CHAR(13)
			+ '			SELECT TEMPO.CDORDER ' + CHAR(13)
			+ '			  FROM ' + CHAR(13)
			+ '			      ( ' + CHAR(13)
			+ '				   SELECT COUNT(TMPAUX.CDORDER) AS COUNTER1, TMPAUX.CDORDER ' + CHAR(13)
			+ '				     FROM ' + @vTableTempName + ' TMPAUX ' + CHAR(13)
			+ '				    WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '					  AND TMPAUX.ORDER_MODIFY_DATE = @ivaTempLoadDate ' + CHAR(13)
			+ '				    GROUP BY TMPAUX.CDORDER ' + CHAR(13)
			+ '			      ) TEMPO ' + CHAR(13) 
			+ '			 WHERE TEMPO.COUNTER1 >1 ' + CHAR(13)
			+ '		   ) ' + CHAR(13)
			+ '	  ORDER BY TMP.ORDER_MODIFY_DATE';
			
		IF(LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) > 0) 
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + ',TMP.CDPARENT_ORDER ASC ';
		END
							
		SET @vSPMasterLoad = @vSPMasterLoad + ',TMP.SKU, TMP.CDDESTINATION ' + CHAR(13)
			+ CHAR(13)			
			+ '	OPEN cDataTempCursor; ' + CHAR(13)
			+ CHAR(13)
			+ '	FETCH NEXT FROM cDataTempCursor INTO ' + @vAllVariablesFetch + CHAR(13)
			+ CHAR(13)
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor  '';' + CHAR(13)
			+ CHAR(13)
			+ '	WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		BEGIN TRY ' + CHAR(13)
			-------------------------------------------------------------
			+ CHAR(13);
			-- Start SET VALUES INITIALS (OVERRIDE VALUES) IN SPECIALS CONDITIONS:
			
			-- End SET VALUES INITIALS (OVERRIDE VALUES) IN SPECIALS CONDITIONS 
			
		-- -----------------------------------------------------------------------------------
		--- Set old values fields over actual values fields
		-- -----------------------------------------------------------------------------------
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13) 
			+ '			SET @vPassesValidations = 1 ' + CHAR(13)
			+ '			SET @ORDER_MODIFY_DATE_BEFORE = @ORDER_MODIFY_DATE;' + CHAR(13)
		    + CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @FINALIZATION_DATE_OLD IS NOT NULL) ' + CHAR(13)
			+ '			BEGIN   ' + CHAR(13)
			+ '				SET @vPassesValidations = 0  ' + CHAR(13)
			+ CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)   ' + CHAR(13)
			+ '				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED, NULL, ''E'', GETDATE(), ' + CHAR(13)
			+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @FINALIZATION_DATE_OLD, 105), @FILE_ROW_NUMBER, ''FINALIZATION_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)   ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1   ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';  ' + CHAR(13)
			+ CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ CHAR(13)
			+ '			IF @CDORDER_OLD IS NOT NULL' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vDummy = ''''; ' + CHAR(13);
			
		IF( (LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) > 0) AND (CHARINDEX('CDPARENT_ORDER', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDPARENT_ORDER = @CDPARENT_ORDER_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('CDORDER_TYPE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDORDER_TYPE = @CDORDER_TYPE_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @SKU = @SKU_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @BUFFER_SKU = @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE; ' + CHAR(13);
		END
			
		IF( CHARINDEX('CDDESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDDESTINATION = @CDDESTINATION_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('PROMISED_DELIVERY_DATE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PROMISED_DELIVERY_DATE = @PROMISED_DELIVERY_DATE_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('REAL_RELEASE_DATE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @REAL_RELEASE_DATE = @REAL_RELEASE_DATE_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('CDFAMILY', @vAllUpgradablesColumns) > 0 )
		BEGIN
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ '				IF ( @CDFAMILY != @CDFAMILY_OLD AND @CDFAMILY_DB IS NOT NULL)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @TOUCH_TIME = @FAMILY_TOUCH_TIME' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
			+ '					VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY, NULL, ''A'', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
			+ '				END' + CHAR(13)
			+ CHAR(13)
			+ '				IF ( @CDFAMILY = @CDFAMILY_OLD)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)					  
			+ '					SET @CDFAMILY = @CDFAMILY_OLD ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20190117: Since v4.11.0, do not reset the Plant code by the old value 
			-- -------------------------------------------------------------------------------
			--+ '					SET @CDPLANT = @CDPLANT_OLD ' + CHAR(13)
			--+ '					SET @CDCALENDAR = @CDCALENDAR_OLD ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			+ '					SET @INITIAL_BUFFER = @INITIAL_BUFFER_OLD ' + CHAR(13)		
			+ '					SET @SHIPPING_TIME  = @SHIPPING_TIME_OLD ' + CHAR(13)
			+ '				END' + CHAR(13);
		END 
		
		IF( CHARINDEX('CDFAMILY', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDFAMILY = @CDFAMILY_OLD ' + CHAR(13);
			-- -------------------------------------------------------------------------------
			-- OHLO 20190117: Since v4.11.0, do not reset the Plant code by the old value 
			-- -------------------------------------------------------------------------------
			--SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDPLANT = @CDPLANT_OLD ' + CHAR(13);
			--SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDCALENDAR = @CDCALENDAR_OLD ' + CHAR(13);
			-- -------------------------------------------------------------------------------
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @INITIAL_BUFFER = @INITIAL_BUFFER_OLD ' + CHAR(13);			
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @SHIPPING_TIME  = @SHIPPING_TIME_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('TOTAL_AMOUNT', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @TOTAL_AMOUNT = @TOTAL_AMOUNT_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('PENDING_AMOUNT', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PENDING_AMOUNT = @PENDING_AMOUNT_OLD ' + CHAR(13);
		END
		
		IF( (LEN(@vOptionalStructureValidateORDER_VALUEStr) > 0) AND (CHARINDEX('ORDER_VALUE', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @ORDER_VALUE = @ORDER_VALUE_OLD ' + CHAR(13);
		END
		
		IF( (LEN(@vOptionalStructureValidateCDWORKPLACEStr) > 0) AND (CHARINDEX('CDWORKPLACE', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @CDWORKPLACE = @CDWORKPLACE_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('ORDER_MODIFY_DATE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @ORDER_MODIFY_DATE = @ORDER_MODIFY_DATE_OLD ' + CHAR(13);
		END
		
		IF( CHARINDEX('PROGRESS_PERCENTAGE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PROGRESS_PERCENTAGE_AUX = @PROGRESS_PERCENTAGE_OLD ' + CHAR(13);
		END

		SET @vSPMasterLoad = @vSPMasterLoad + 
			'			END ' + CHAR(13);
			IF( (LEN(@vOptionalStructureValidatePROGRESS_PERCENTAGEStr) > 0) AND (CHARINDEX('PROGRESS_PERCENTAGE', @vAllUpgradablesColumns) > 0) )
			BEGIN		
				SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PROGRESS_PERCENTAGE_AUX = @PROGRESS_PERCENTAGE ' + CHAR(13);			
			END
			-- -------------------------------------------------------------------------------
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '			-- ------------------------------------------------------------------------------- ' + CHAR(13)
				--'			SET @CDDESTINATION_TMP = NULL; ' + CHAR(13)+
				--+ CHAR(13)+
				--'			SELECT @CDDESTINATION_TMP = CDLOCATION ' + CHAR(13)+
				--'			  FROM  TFSCM_CLI_LOCATION ' + CHAR(13)+
				--'			 WHERE (CDLOCATION=@CDDESTINATION) ' + CHAR(13)+
				--+ CHAR(13)+						
				--'			IF @CDDESTINATION_TMP IS NULL ' + CHAR(13)+
				--'			BEGIN  ' + CHAR(13)+
				--'				SET @vPassesValidations = 0 ' + CHAR(13)+ 
				--'				INSERT INTO TFSCM_COM_LOG(DSLOG,LOG_DETAIL,CDTYPE,LOG_TIME) ' + CHAR(13)+
				--'				VALUES (@vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND, ''CDORDER:''+@CDORDER+'', ORDER_MODIFY_DATE:''+CONVERT(VARCHAR, @ORDER_MODIFY_DATE, 105)+'', CDDESTINATION:''+@CDDESTINATION, ''E'', GETDATE())  ' + CHAR(13)+
				--'				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)+
				--'				SET @ovaResult = ''1''; ' + CHAR(13)+
				--'			END ' + CHAR(13)+
				--'   		-- ------------------------------------------------------------------------------- ' + CHAR(13)+			
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NULL)' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL, NULL, ''E'', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_MODIFY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''ORDER_MODIFY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NOT NULL AND @ORDER_MODIFY_DATE > GETDATE())' + CHAR(13)
				+ '			BEGIN' + CHAR(13)
				+ '				SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT, NULL, ''E'', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_MODIFY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''ORDER_MODIFY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NOT NULL AND @ORDER_MODIFY_DATE <= GETDATE() AND @ORDER_MODIFY_DATE_OLD IS NOT NULL AND @ORDER_MODIFY_DATE < @ORDER_MODIFY_DATE_OLD)' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD, NULL, ''E'', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_MODIFY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''ORDER_MODIFY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDFAMILY_DB IS NULL) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13)
				+ '				        @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDPLANT IS NULL) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND (@CDORDER_TYPE IS NULL OR (@CDORDER_TYPE != ''O'' AND @CDORDER_TYPE != ''T'' AND @CDORDER_TYPE != ''E'' AND @CDORDER_TYPE != ''S'')) ) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDLOCATION IS NULL ) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDCALENDAR IS NULL ) ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, ''CDFAMILY'', @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND (@PROMISED_DELIVERY_DATE IS NULL AND @CDORDER_TYPE != ''S'') )  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0  ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @REAL_RELEASE_DATE > @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @REAL_RELEASE_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'REAL_RELEASE_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''REAL_RELEASE_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @PENDING_AMOUNT <= 0)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PENDING_AMOUNT' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PENDING_AMOUNT_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''PENDING_AMOUNT'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @TOTAL_AMOUNT <= 0)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @TOTAL_AMOUNT' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'TOTAL_AMOUNT_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''TOTAL_AMOUNT'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE > @DATE_SERVER_NO_TIME) ' + CHAR(13)
				+ '			BEGIN   ' + CHAR(13)
				+ '				SET @vPassesValidations = 0  ' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)   ' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_MODIFY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''ORDER_MODIFY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)   ' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1   ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';  ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ @vOptionalStructureValidateORDER_VALUEStr+ CHAR(13)
				+ @vOptionalStructureValidatePROGRESS_PERCENTAGEStr+ CHAR(13)
				+ @vOptionalStructureValidateCDPARENT_ORDERStr+ CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND (@PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != ''S'' ))  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@PROMISED_DELIVERY_DATE, @CDCALENDAR)) > 0) ' + CHAR(13)
				+ '				BEGIN  ' + CHAR(13)
				+ '					SET @vPassesValidations = 0  ' + CHAR(13)
				+ CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '					VALUES (@vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPdnNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @ORDER_MODIFY_DATE)  ' + CHAR(13)
				+ CHAR(13)
				+ '					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END  ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDDESTINATION IS NULL)' + CHAR(13)
				+ '			BEGIN			' + CHAR(13)
				+ '				SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDDESTINATION, 105), @FILE_ROW_NUMBER, ''CDDESTINATION'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @CDDESTINATION IS NOT NULL AND @CDORDER_TYPE IS NOT NULL AND @CDORDER_TYPE = ''S'')' + CHAR(13)
				+ '			BEGIN			' + CHAR(13)
				+ '				IF (@LOCATION_TYPE = ''WH'' OR @LOCATION_TYPE = ''CL'' OR @LOCATION_TYPE = ''PS'')' + CHAR(13)
				+ '				BEGIN' + CHAR(13)
				+ '					SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '					VALUES (@vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDDESTINATION, 105), @FILE_ROW_NUMBER, ''CDDESTINATION'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '					SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @SKU IS NULL)' + CHAR(13)
				+ '			BEGIN			' + CHAR(13)
				+ '				SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END' + CHAR(13);							

		IF(LEN(@vOptionalStructureValidateCDPARENT_ORDERStr) > 0) 
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '' + CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @SKU IS NOT NULL AND @CDORDER_TYPE IS NOT NULL AND @CDORDER_TYPE = ''S'' AND @CDPARENT_ORDER IS NULL AND @CDDESTINATION IS NOT NULL)' + CHAR(13)
				+ '			BEGIN' + CHAR(13)
				+ '				IF (@BUFFER_SKU IS NULL)' + CHAR(13)
				+ '				BEGIN' + CHAR(13)
				+ '					SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '					VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @SKU + ''; '' + @CDDESTINATION, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '					SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END' + CHAR(13)
				+ '			END' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '' + CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @SKU IS NOT NULL AND @CDORDER_TYPE IS NOT NULL AND @CDORDER_TYPE = ''S'' AND @CDPARENT_ORDER_OLD IS NULL AND @CDDESTINATION IS NOT NULL)' + CHAR(13)
				+ '			BEGIN' + CHAR(13)
				+ '				IF (@BUFFER_SKU IS NULL)' + CHAR(13)
				+ '				BEGIN' + CHAR(13)
				+ '					SET @vPassesValidations = 0' + CHAR(13)
				+ CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)' + CHAR(13)
				+ '					VALUES (@vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @ORDER_MODIFY_DATE)' + CHAR(13)
				+ CHAR(13)
				+ '					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1' + CHAR(13)
				+ '					SET @ovaResult = ''1'';' + CHAR(13)
				+ CHAR(13)
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END' + CHAR(13)
				+ '			END' + CHAR(13);
		END 
				
		SET @vSPMasterLoad = @vSPMasterLoad + '' + CHAR(13)
			+ '			IF(@vPassesValidations = 1) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				IF (@CDORDER_TYPE = ''S'')' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @PROMISED_DELIVERY_DATE = NULL' + CHAR(13)
			+ '					IF NOT EXISTS (SELECT * FROM @vTEMPORARY_ASSOCIATED_BUFFER WHERE CDORDER = @CDORDER AND SKU = @SKU AND LOCATION = @CDDESTINATION)' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						INSERT INTO @vTEMPORARY_ASSOCIATED_BUFFER (CDORDER, SKU, LOCATION, FILE_NAME, FILE_ROW_NUMBER ) ' + CHAR(13)
			+ '						VALUES (@CDORDER, @SKU, @CDDESTINATION, @FILE_NAME, @FILE_ROW_NUMBER)' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '				END' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@ORDER_MODIFY_DATE < @DATE_SERVER_NO_TIME) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@ORDER_MODIFY_DATE,@SHIPPING_TIME) ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE IF (@ORDER_MODIFY_DATE = @DATE_SERVER_NO_TIME) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = GETDATE() ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR)) > 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION ,@CDCALENDAR) ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION ' + CHAR(13)+ CHAR(13)
			+ CHAR(13)
			+ '				-- If it is a new order, then use the Touch Time from the Family related, ' + CHAR(13)
			+ '				-- otherwise, use the Touch Time from the order ' + CHAR(13)
			+ '				IF(@TOUCH_TIME IS NULL) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @TOUCH_TIME = @FAMILY_TOUCH_TIME; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @PRODUCTION_BUFFER = @INITIAL_BUFFER + @CLEARENCE_BUFFER; ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != ''S'') ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @PROMISED_DELIVERY_DATE   = dbo.ADD_TIME_TO_DATE(@PROMISED_DELIVERY_DATE,@SHIPPING_TIME);' + CHAR(13) 
			+ '					SET @RECOMMENDED_RELEASE_DATE = dbo.GET_CALCULATE_RECOMMENDED_RELEASE_DATE(@PROMISED_DELIVERY_DATE, @PRODUCTION_BUFFER, @CDCALENDAR, @CDORDER_TYPE, NULL, NULL, NULL, NULL);' + CHAR(13)
			+ '					SET @PRIORITY                 = @PRIORITY_OLD;' + CHAR(13)
			+ '					SET @PRIORITY_COLOR           = @PRIORITY_COLOR_OLD;' + CHAR(13)
			+ '					SET @LAST_COLOR_UPDATE        = @LAST_COLOR_UPDATE_OLD;' + CHAR(13)
			+ '					SET @MANAGED_ORDER            = @MANAGED_ORDER_OLD;' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE IF(@CDORDER_TYPE=''S'')' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @PROMISED_DELIVERY_DATE   = @PROMISED_DELIVERY_DATE_OLD;' + CHAR(13)
			+ '					SET @NON_WORKING_DAYS         = NULL;' + CHAR(13)
			+ '					SET @RECOMMENDED_RELEASE_DATE = @RECOMMENDED_RELEASE_DATE_OLD;' + CHAR(13)
			--+ '					SET @RELEASE_STATUS           = @RELEASE_STATUS_OLD;' + CHAR(13)
			+ '					SET @PRIORITY                 = @PRIORITY_OLD;' + CHAR(13)
			+ '					SET @PRIORITY_COLOR           = @PRIORITY_COLOR_OLD;' + CHAR(13)
			+ '					SET @LAST_COLOR_UPDATE        = @LAST_COLOR_UPDATE_OLD;' + CHAR(13)
			+ '					SET @MANAGED_ORDER            = @MANAGED_ORDER_OLD;' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @PROMISED_DELIVERY_DATE   = NULL;' + CHAR(13)
			+ '					SET @NON_WORKING_DAYS         = NULL;' + CHAR(13)
			+ '					SET @RECOMMENDED_RELEASE_DATE = NULL;' + CHAR(13)
			--+ '					SET @RELEASE_STATUS           = NULL;' + CHAR(13)
			+ '					SET @PRIORITY                 = NULL;' + CHAR(13)
			+ '					SET @PRIORITY_COLOR           = NULL;' + CHAR(13)
			+ '					SET @LAST_COLOR_UPDATE        = NULL;' + CHAR(13)
			+ '					SET @MANAGED_ORDER            = NULL;' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				SET @RELEASE_STATUS = dbo.GET_CALCULATE_RELEASE_STATUS(@REAL_RELEASE_DATE,@RECOMMENDED_RELEASE_DATE,@ORDER_MODIFY_DATE);' + CHAR(13)
			+ CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- OHLO 20191224: Since v4.14.0, update new columns Release Problem and ' + CHAR(13)
			+ '				-- 				  Release Problem Date ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				IF (@CDORDER_OLD IS NULL)' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					-- SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_BY_DEFAULT; ' + CHAR(13)
			+ '					-- SET @RELEASE_PROBLEM_DATE = ''1901-01-01''; ' + CHAR(13)
			+ '					SET @RELEASE_PROBLEM      = NULL; ' + CHAR(13)
			+ '					SET @RELEASE_PROBLEM_DATE = NULL; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE  ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_OLD; ' + CHAR(13)
			+ '					SET @RELEASE_PROBLEM_DATE = @RELEASE_PROBLEM_DATE_OLD; ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- When release status is equal to Early or Late then set both Release Problem ' + CHAR(13)
			+ '				-- and Release Problem Date columns ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- IF ((@FINALIZATION_DATE IS NULL OR @FINALIZATION_DATE = ''1901-01-01'') ' + CHAR(13)
			+ '				-- AND (@RELEASE_PROBLEM_OLD IS NULL OR @RELEASE_PROBLEM_OLD = @RELEASE_PROBLEM_BY_DEFAULT) ' + CHAR(13)
			+ '				-- AND @RELEASE_STATUS IN (''E'', ''O'')) ' + CHAR(13)
			+ '				-- BEGIN  ' + CHAR(13)
			+ '				-- 	SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_NOT_ASSIGNED; ' + CHAR(13)
			+ '				-- 	SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; ' + CHAR(13)
			+ '				-- END  ' + CHAR(13)
			+ CHAR(13)      -- 
			+ '				-- IF (@REAL_RELEASE_DATE IS NOT NULL ' + CHAR(13)
			--+ '			-- 	AND @REAL_RELEASE_DATE_OLD IS NOT NULL ' + CHAR(13)
			+ '				-- AND @REAL_RELEASE_DATE <> @REAL_RELEASE_DATE_OLD ' + CHAR(13)
			+ '				-- AND @RELEASE_PROBLEM_DATE <> @REAL_RELEASE_DATE ' + CHAR(13)
			+ '				-- AND @RELEASE_PROBLEM_DATE <> ''1901-01-01'')  ' + CHAR(13)
			+ '				-- BEGIN  ' + CHAR(13)
			+ '				-- 	SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; ' + CHAR(13)
			+ '				-- END  ' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ CHAR(13)
			+ '				IF (@CDORDER_OLD IS NULL)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @NEW_CREATION_DATE = GETDATE();' + CHAR(13)
			+ CHAR(13)
			+ '					IF(@CDORDER_TYPE = ''S'')' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						IF(@NEW_CREATION_DATE <= @CURRENT_NEW_CREATION_DATE )' + CHAR(13)
			+ '						BEGIN' + CHAR(13)+ CHAR(13)
			+ '							SET @NEW_CREATION_DATE = DATEADD(MS, 6, @CURRENT_NEW_CREATION_DATE);' + CHAR(13)
			+ '						END' + CHAR(13)
			+ '					END' + CHAR(13)
			+ CHAR(13)
			+ '					SET @CURRENT_NEW_CREATION_DATE = @NEW_CREATION_DATE;' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO '+@vTableRealName +'('+@vAllColumnsInsert+')' + CHAR(13)
			+ '					VALUES('+@vAllValuesInsert+');' + CHAR(13)
			+ '               END' + CHAR(13)
			+ '				ELSE '+	CHAR(13)
			+ '				BEGIN '+	CHAR(13)
			+ '					UPDATE '+@vTableRealName + CHAR(13)
			+ '					'+@vAllSetsColumnsAndValuesUpdate + CHAR(13)
			+ '					WHERE '+@CDPKFIELD +' = @'+@CDPKFIELD + ' --AND FINALIZATION_DATE IS NULL ' + CHAR(13)
			+ '				END '+	CHAR(13)
			+ CHAR(13)
			+ '				SET @ovaHasProcessed = ''1'';'	+ CHAR(13)
			+ CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				-- If the record has passed structural and business validations, then status   ' + CHAR(13)
			+ '				-- will be 1, oherwise 0' + CHAR(13)
			+ '				-- --------------------------------------------------------------------------- ' + CHAR(13)
			+ '				UPDATE '+@vTableTempName + CHAR(13)
			+ '				   SET STATUS = 1 ' + CHAR(13)
			+ '				 WHERE ID = @ID_TEMP; ' + CHAR(13)
			+ CHAR(13);
							
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '				SET @vProcessProductionOrdersCount = @vProcessProductionOrdersCount + 1 ' + CHAR(13)
			+ '				SET @ivaCreatorOrModifyUserAux = @ivaCreatorOrModifyUser; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '		END TRY' + CHAR(13)
			+ '		BEGIN CATCH ' + CHAR(13)
			+ '			SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 ' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			SET @ovaMessage = '' ERROR_MESSAGE: ''+ERROR_MESSAGE(); ' + CHAR(13)
			+ CHAR(13)
			+ '			BEGIN TRY ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR, NULL, ''E'', GETDATE(), ' + CHAR(13)
			+ '					    @CDORDER, @CDDESTINATION, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @ORDER_MODIFY_DATE) ' + CHAR(13)
			+ '			END TRY ' + CHAR(13)
			+ '			BEGIN CATCH ' + CHAR(13)
			+ '			END CATCH ' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;' + CHAR(13)
			+ CHAR(13)
			+ '		IF(@vCOMMIT_COUNT = 10)' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			COMMIT;' + CHAR(13)
			+ '			SET @vCOMMIT_COUNT = 0;' + CHAR(13)
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch+ CHAR(13)
			+ '	END' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ CHAR(13)
			+ '	-- Update child orders values with Parent values' + CHAR(13)
			+ '	UPDATE H ' + CHAR(13)
			+ '	   SET H.PROMISED_DELIVERY_DATE   = P.PROMISED_DELIVERY_DATE, ' + CHAR(13)
			+ '		   H.PRIORITY                 = P.PRIORITY, ' + CHAR(13)
			+ '		   H.PRIORITY_COLOR           = P.PRIORITY_COLOR, ' + CHAR(13)
			+ '		   H.RECOMMENDED_RELEASE_DATE = P.RECOMMENDED_RELEASE_DATE, ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			-- OHLO 20191224: Since v4.14.0, remove RELEASE STATUS column update for child
			--                orders 
			-- -------------------------------------------------------------------------------
			--+ '		   H.RELEASE_STATUS           = P.RELEASE_STATUS, ' + CHAR(13)
			-- -------------------------------------------------------------------------------
			+ '		   H.LAST_COLOR_UPDATE        = P.LAST_COLOR_UPDATE, ' + CHAR(13)
			+ '		   H.MANAGED_ORDER            = P.MANAGED_ORDER, ' + CHAR(13)
			+ '		   H.MODIFY_DATE              = P.MODIFY_DATE, ' + CHAR(13)
			+ '		   H.MODIFY_USER              = P.MODIFY_USER ' + CHAR(13)
			+ '	  FROM TFSCM_CLI_PRODUCTION_ORDERS P JOIN ' + CHAR(13)
			+ '		   TFSCM_CLI_PRODUCTION_ORDERS H ON ( H.CDPARENT_ORDER = P.CDORDER AND P.ORDER_MODIFY_DATE = @ivaTempLoadDate AND H.FINALIZATION_DATE IS NULL); ' + CHAR(13)
			+ '	' + CHAR(13)
			+ '	IF (@ORDER_MODIFY_DATE_BEFORE IS NOT NULL) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		EXEC QUARANTINE_PRODUCTION_ORDERS @ivaIdExchange, @ORDER_MODIFY_DATE_BEFORE, @ivaCreatorOrModifyUserAux,@vErrorsProductionOrdersCount,@ivaErrorValidations,@ovaResultQuarantine OUTPUT, @ovaMessageQuarantine OUTPUT ' + CHAR(13)
			+ '		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageQuarantine; ' + CHAR(13)
			+ '		IF @ovaResultQuarantine = ''1'' ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			SET @ovaResult = ''1'' ' + CHAR(13)
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC FINISHED_PRODUCTION_ORDERS @ivaIdExchange, @ORDER_MODIFY_DATE_BEFORE, @ivaCreatorOrModifyUserAux, @ovaResultFinished OUTPUT, @ovaMessageFinished OUTPUT ' + CHAR(13)
			+ '		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageFinished; ' + CHAR(13)
			+ '		IF @ovaResultFinished = ''1'' ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			SET @ovaResult = ''1'' ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ CHAR(13)
			+ '		EXEC USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS @DATE_CALCULATION_FINALIZATION, @ovaResultAfthetF OUTPUT , @ovaMessageAfthetF OUTPUT' + CHAR(13)
			+ '		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageAfthetF;' + CHAR(13)
			+ '		IF @ovaResultAfthetF = ''1''' + CHAR(13)
			+ '		BEGIN' + CHAR(13)
			+ '			SET @ovaResult = ''1''' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '	END ' + CHAR(13)+ CHAR(13)
			+ '	CLOSE cDataTempCursor' + CHAR(13)
			+ '	DEALLOCATE cDataTempCursor' + CHAR(13)
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)
			+ CHAR(13)
			+ '	IF EXISTS (SELECT TOP 1 * FROM @vTEMPORARY_ASSOCIATED_BUFFER)' + CHAR(13)
			+ '	BEGIN' + CHAR(13)
			+ '		DECLARE @CDORDER_TEMP    AS VARCHAR(50)' + CHAR(13)
			+ '		DECLARE @SKU_TEMP        AS VARCHAR(50)' + CHAR(13)
			+ '		DECLARE @LOCATION_TEMP   AS VARCHAR(50)' + CHAR(13)
			+ '		DECLARE @FILE_NAME_TEMP  AS VARCHAR(500)' + CHAR(13)
			+ '		DECLARE @FILE_ROW_NUMBER_TMP AS INT ' + CHAR(13)
			+ '		DECLARE @SUM_PENDING_AMOUNT_TEMP AS NUMERIC(17,5)' + CHAR(13)
			+ '		DECLARE @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER AS NUMERIC(17,5)' + CHAR(13)
			+ CHAR(13)
			+ '		DECLARE SUM_PENDING_AMOUNT_CURSOR CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR  ' + CHAR(13)
			+ '		 SELECT CDORDER, SKU, LOCATION, FILE_NAME, FILE_ROW_NUMBER ' + CHAR(13)
			+ '		  FROM @vTEMPORARY_ASSOCIATED_BUFFER' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN SUM_PENDING_AMOUNT_CURSOR   ' + CHAR(13)
			+ '		FETCH SUM_PENDING_AMOUNT_CURSOR INTO @CDORDER_TEMP, @SKU_TEMP, @LOCATION_TEMP, @FILE_NAME_TEMP, @FILE_ROW_NUMBER_TMP ' + CHAR(13)
			+ CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			SET @SUM_PENDING_AMOUNT_TEMP = (SELECT SUM(PO.PENDING_AMOUNT) AS SUM_PENDING_AMOUNT ' + CHAR(13)
			+ '			                                  FROM TFSCM_CLI_PRODUCTION_ORDERS PO, TFSCM_CLI_BUFFER BUFFER ' + CHAR(13)
			+ '			                                 WHERE PO.FINALIZATION_DATE IS NULL AND PO.SKU = @SKU_TEMP AND PO.CDDESTINATION = @LOCATION_TEMP ' + CHAR(13)
			+ '		                                       AND PO.CDORDER_TYPE = ''S''  AND PO.EXCHANGES_IN_QUARANTINE = 0 ' + CHAR(13)
			+ '			                                   AND PO.SKU = BUFFER.SKU AND PO.CDDESTINATION = BUFFER.LOCATION AND BUFFER.INACTIVE = 0); ' + CHAR(13)
			+ CHAR(13)
			+ '			SET @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER = (SELECT TOP 1 B.TOTAL_INVENTORY_ON_PRODUCTION  ' + CHAR(13)
			+ '			                                               FROM TFSCM_CLI_BUFFER B WHERE B.SKU = @SKU_TEMP AND B.LOCATION = @LOCATION_TEMP); ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@SUM_PENDING_AMOUNT_TEMP <> @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER)' + CHAR(13)
			+ '			BEGIN' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT, ' + CHAR(13)
			+ '					    NULL, ''A'', GETDATE(), @CDORDER_TEMP, @LOCATION_TEMP, CONVERT(VARCHAR, FORMAT(CONVERT(NUMERIC(12,2), @SUM_PENDING_AMOUNT_TEMP, 105),  ''#0.00''), 105), @FILE_ROW_NUMBER_TMP, ''PENDING_AMOUNT'', @FILE_NAME_TEMP, @ORDER_MODIFY_DATE) ' + CHAR(13)
			+ '			END' + CHAR(13)   
			+ CHAR(13)
			+ '			FETCH NEXT FROM SUM_PENDING_AMOUNT_CURSOR INTO @CDORDER_TEMP, @SKU_TEMP, @LOCATION_TEMP, @FILE_NAME_TEMP, @FILE_ROW_NUMBER_TMP ' + CHAR(13)
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		CLOSE SUM_PENDING_AMOUNT_CURSOR			' + CHAR(13)
			+ '		DEALLOCATE SUM_PENDING_AMOUNT_CURSOR	' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ -- Colocar script que recorra la tabla temporal y verifique la sumatoria de
			+ -- las ordenes de produccion
			+ CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	IF(@ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		UPDATE TBL ' + CHAR(13)
			+ '		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() ' + CHAR(13)
			+ '		  FROM TFSCM_COM_TABLES TBL ' + CHAR(13)
			+ '		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) ' + CHAR(13)
			+ '		   AND INTER.CDINTERFACE = '+CAST(@ivaCodInterface AS VARCHAR)+'' + CHAR(13)
			+ '	END ' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessage =  @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS+'':'' + CAST ( @vProcessProductionOrdersCount AS varchar ) + '', ''+ @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS+'':'' + CAST ( @vErrorsProductionOrdersCount AS varchar ) + '', '' + @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS +'':'' +  CAST ( @vErrorsOrphansProductionOrdersCount AS varchar ) + @ovaMessageFinishedTotal '
			+ CHAR(13)
			+ '	SET @vTotalErrorsProductionOrders = (@vErrorsProductionOrdersCount + @ivaErrorValidations + @vErrorsOrphansProductionOrdersCount)' + CHAR(13)
			+ CHAR(13)
			+ '	SELECT @vMessagesAfterDataExchange = PARAM_VALUE FROM   TFSCM_COM_PARAMS' + CHAR(13)
			+ '		WHERE CDPARAM = ''MESSAGES_AFTER_DATAEXCHANGE''' + CHAR(13)
			+ CHAR(13)
			+ '	IF( @vTotalErrorsProductionOrders > 0 AND @vMessagesAfterDataExchange = ''Y'')' + CHAR(13)
			+ '	BEGIN	' + CHAR(13)
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''PDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsProductionOrders, ''PDE'', ''OP_GENERAL_PRIORITIZING'', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT' + CHAR(13)
			+ '	END		' + CHAR(13)
			+ CHAR(13)
			+ '	IF(@vTotalErrorsProductionOrders = 0 AND @vMessagesAfterDataExchange = ''Y'' AND @ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''PDE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)
			+ '	END' + CHAR(13)
			+ 'END TRY ' + CHAR(13)
			+ 'BEGIN CATCH ' + CHAR(13)
			+ '	SET @ovaResult = ''1'';' + CHAR(13)
			+ '	SET @ovaMessage =  '' ERROR_NUMBER: '' + CAST(ERROR_NUMBER() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_SEVERITY: '' + CAST(ERROR_SEVERITY() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_STATE: '' + CAST(ERROR_STATE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_PROCEDURE: '' + ISNULL(ERROR_PROCEDURE(), ''[dbo].[PRODUCTION_ORDERS]'') ' + CHAR(13)
			+ '		+ '' ERROR_LINE: '' + CAST(ERROR_LINE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_MESSAGE: '' + ERROR_MESSAGE(); ' + CHAR(13)
			+ CHAR(13)
			+ '	IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (-1,0,1))' + CHAR(13) 
			+ '	BEGIN ' + CHAR(13)
			+ '		IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (0,1)) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			CLOSE cDataTempCursor; ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		DEALLOCATE cDataTempCursor; ' + CHAR(13)
			+ '	END ' + CHAR(13)	
			+ CHAR(13)
			+ '	IF ((SELECT CURSOR_STATUS(''global'',''SUM_PENDING_AMOUNT_CURSOR'')) IN (-1,0,1))' + CHAR(13) 
			+ '	BEGIN ' + CHAR(13)
			+ '		IF ((SELECT CURSOR_STATUS(''global'',''SUM_PENDING_AMOUNT_CURSOR'')) IN (0,1)) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			CLOSE SUM_PENDING_AMOUNT_CURSOR; ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		DEALLOCATE SUM_PENDING_AMOUNT_CURSOR; ' + CHAR(13)
			+ '	END ' + CHAR(13)	
			+ 'END CATCH ' + CHAR(13)
			+ 'END ';
		
		
		-------------------------------------------------------
		--PRINT @vSPMasterLoad
		
		/*DECLARE @Counter INT
		SET @Counter = 0
		DECLARE @TotalPrints INT
		SET @TotalPrints = (LEN(@vSPMasterLoad) / 4000) + 1
		WHILE @Counter < @TotalPrints 
		BEGIN
		    -- Do your printing...
		    
		    PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, (@Counter * 4000) + 4000)
		    --PRINT '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
		    SET @Counter = @Counter + 1
		    
		END*/
		--PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, LEN(@vSPMasterLoad) )
		
		-------------------------------------------------------
		EXEC (@vSPMasterLoad)
		
		SET @vTrace = 'End of the cInterfaceColumnConfiguration  '  
		--Procedure result
		SET @ovaResult = '0';
		SET @ovaMessage = 'sucessDataExchangeProcess';
	    --PRINT	@vTrace	
	END TRY
	BEGIN CATCH
	PRINT	@vTrace
		IF ((SELECT CURSOR_STATUS('global','cColumnConfiguration')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cColumnConfiguration')) IN (0,1))
			BEGIN
				CLOSE cColumnConfiguration;  		
			END
			DEALLOCATE cColumnConfiguration;  
		END	
		
		SET @ovaResult = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_PRODUCTION_ORDERS_BUILDER]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		RAISERROR (@ovaMessage, 16, @ovaResult);   
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[MASTER_PURCHASE_ORDERS_BUILDER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Johan Berrio
-- Upgrade date: 12/01/2020
-- Description : Add varchar variables that actually are numeric
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 22/12/2020
-- Description : Fixed the value in the inserts in TFSCM_COM_LOG
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 20/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Full column names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Londoño
-- Modify date: 30/10/2015
-- Description: Filter non finalized orders in SUM(PO.PENDING_QUANTITY) 
-- -------------------------------------------------------------------------------------------
-- Modified   : Oscar Hernán Londoño Ospina
-- Modify date: 26/10/2015
-- Description: Call SP to Set Purchasing Orders in Quarantine
-- -------------------------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 21/04/2015 
-- Description:	Procedure for creating SP masters
-- ===========================================================================================
CREATE PROCEDURE [dbo].[MASTER_PURCHASE_ORDERS_BUILDER] 
   /* Input Parameters */
    @ivaCodInterface AS SMALLINT,
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
	--Fields use for calculation
	DECLARE @vSPMasterLoad AS NVARCHAR(MAX);
	DECLARE @vTableTempName AS VARCHAR(50);
	DECLARE @vTableRealName AS VARCHAR(50);
	DECLARE @vTrace AS NVARCHAR(MAX)= '';
	
	DECLARE @CDFIELD AS NVARCHAR(50);
	DECLARE @CDPKFIELD1 AS NVARCHAR(50);
	DECLARE @CDPKFIELD2 AS NVARCHAR(50);
	DECLARE @DSTYPE AS VARCHAR(50);
	DECLARE @COLUMN_SIZE AS SMALLINT;
	DECLARE @COLUMN_ACCURACY AS SMALLINT;
	DECLARE @IS_UPGRADEABLE AS VARCHAR(1);
	
	DECLARE @vAllDeclareColumnOld AS NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnInterfaceTmp AS NVARCHAR(MAX) = '';
	DECLARE @vAllDeclareColumnCalc AS NVARCHAR(MAX) = '';
	DECLARE @vAllColumnsBuildSelectByCursor AS NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesInterfaceTmp AS NVARCHAR(MAX) = '';
	DECLARE @vAllVariablesFetch AS NVARCHAR(MAX) = '';
	
	DECLARE @vAllColumnsInterfaceTmp AS NVARCHAR(MAX) = '';
	
	DECLARE @vAllColumnsInsert AS NVARCHAR(MAX) = '';
	DECLARE @vAllValuesInsert AS NVARCHAR(MAX) = '';
	
	DECLARE @vAllUpgradablesColumns AS NVARCHAR(MAX) = '   SET ';
	DECLARE @vAllSetsColumnsAndValuesUpdate AS NVARCHAR(MAX) = '';
	
	DECLARE @vHadComma NUMERIC(10)= 0;
	DECLARE @vHadCommaAllUpgradablesColumns NUMERIC(10)= 0;
	DECLARE @vPRE_FUNCTIONS AS NVARCHAR(MAX) = '';
	
	DECLARE @vTotalColumnSize  NUMERIC(2) = 0;
BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		IF OBJECT_ID('TempPchNumToStrTbl') IS NOT NULL 
			DROP TABLE TempPchNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempPchNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempPchNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR'  AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = 'TFSCM_CLI_PURCHASE_ORDERS_TEMP' 
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');

		SET @vTrace = 'getting the table name and table name temp'
		
		SELECT @vTableRealName = TBL.TABLE_NAME, @vTableTempName = TBL.TABLE_NAME_TEMP FROM TFSCM_COM_TABLES TBL, TFSCM_DEX_INTERFACES INTERFACE 
								WHERE INTERFACE.CDTABLE = TBL.CDTABLE
								AND INTERFACE.CDINTERFACE = @ivaCodInterface;

		/*
		SET @CDPKFIELD =	  (SELECT TBL.CDCOLUMN FROM TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE 
									WHERE INTERFACE.CDTABLE = TBL.CDTABLE
									AND TBL.IS_PRIMARY_KEY = 'Y'
									AND INTERFACE.CDINTERFACE = @ivaCodInterface);
		*/
		SET @CDPKFIELD1 = 'CDPURCHASE_ORDER';
		SET @CDPKFIELD2 = 'SUPPLIER';
		
		--SET @vTrace = 'Declaring the cursor with the @ivaCodInterface= '+ CAST(@ivaCodInterface AS VARCHAR)
		DECLARE cColumnConfiguration CURSOR FOR 
		 SELECT TBL.CDCOLUMN, TBL.DSTYPE,TBL.COLUMN_SIZE, TBL.COLUMN_ACCURACY, DETAIL.IS_UPGRADEABLE
		   FROM TFSCM_DEX_INT_DETAIL DETAIL, TFSCM_COM_COL_TABLE TBL, TFSCM_DEX_INTERFACES INTERFACE
		  WHERE INTERFACE.CDINTERFACE = @ivaCodInterface
			AND DETAIL.CDINTERFACE = INTERFACE.CDINTERFACE
			AND INTERFACE.CDTABLE = TBL.CDTABLE 
			AND TBL.CDCOLUMN = DETAIL.CDFIELD
		
		OPEN cColumnConfiguration
		
		FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE
		
		WHILE (@@FETCH_STATUS = 0 )
		BEGIN
			--PRINT @CDFIELD
			--IF(@CDFIELD!='NOMBRE_CAMPO')
			--BEGIN
			IF(@vHadComma = 0)
				BEGIN
					SET @vAllColumnsInterfaceTmp = @vAllColumnsInterfaceTmp+''+@CDFIELD;
					SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+'TMP.'+@CDFIELD;
					SET @vAllVariablesInterfaceTmp = @vAllVariablesInterfaceTmp+'@'+@CDFIELD;
					IF (@DSTYPE = 'numeric')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
							
					IF (@DSTYPE = 'varchar')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
					
					IF (@DSTYPE = 'smallint')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS SMALLINT ';
					
					IF (@DSTYPE = 'datetime')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATETIME ';
						
					IF (@DSTYPE = 'date')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' AS DATE ';
						
					IF (@DSTYPE = 'boolean')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+'@'+@CDFIELD+' BIT ';
							
				END
			ELSE 
				BEGIN
					SET @vAllColumnsInterfaceTmp = @vAllColumnsInterfaceTmp+ ','+@CDFIELD; 
					SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor+',TMP.'+@CDFIELD;
					SET @vAllVariablesInterfaceTmp = @vAllVariablesInterfaceTmp+', @'+@CDFIELD;
					
					IF (@DSTYPE = 'numeric')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS NUMERIC('+CAST ((@COLUMN_SIZE + @COLUMN_ACCURACY) AS VARCHAR)+','+CAST ( @COLUMN_ACCURACY AS VARCHAR)+') ';
					 						
					IF (@DSTYPE = 'varchar')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS VARCHAR('+CAST (@COLUMN_SIZE AS VARCHAR)+') ';
					
					IF (@DSTYPE = 'smallint')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS SMALLINT ';
					
					IF (@DSTYPE = 'datetime')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATETIME ';
						
					IF (@DSTYPE = 'date')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' AS DATE ';
						
					IF (@DSTYPE = 'boolean')
						SET @vAllDeclareColumnInterfaceTmp = @vAllDeclareColumnInterfaceTmp+', @'+@CDFIELD+' BIT ';

				END;
			SET @vHadComma = 1
			
			IF (@IS_UPGRADEABLE = 'Y')
			BEGIN
				IF (LTRIM(RTRIM(@vAllUpgradablesColumns)) <> 'SET')
				BEGIN
					SET @vAllUpgradablesColumns = @vAllUpgradablesColumns +  '						   ';
				END 
				SET @vAllUpgradablesColumns = @vAllUpgradablesColumns + @CDFIELD+' = @'+@CDFIELD+',' + CHAR(13);
			END
			--END
			-- Reading the new row
			FETCH cColumnConfiguration INTO @CDFIELD, @DSTYPE, @COLUMN_SIZE, @COLUMN_ACCURACY, @IS_UPGRADEABLE

		END
		-- Cierre del cursor
		CLOSE cColumnConfiguration
		-- Liberar los recursos
		DEALLOCATE cColumnConfiguration

		SET @vAllVariablesFetch = @vAllVariablesInterfaceTmp
			+ ', @CDPURCHASE_ORDER_OLD'
			+ ', @PO_TYPE_OLD'
			+ ', @SKU_OLD'
			+ ', @BUFFER_SKU ';

		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vAllVariablesFetch = @vAllVariablesFetch
				+ '			, @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE ';
		END

		SET @vAllVariablesFetch = @vAllVariablesFetch
			+ ', @DESTINATION_OLD'
			+ ', @DESTINATION_IS_ACTIVE'
			+ ', @DESTINATION_IS_ACTIVE_OLD'
			+ ', @DESTINATION_LOCATION_TYPE '
			+ ', @DESTINATION_LOCATION_TYPE_OLD '
			+ ', @SUPPLIER_OLD'
			+ ', @LSUPPLIER_DB_CDLOCATION '
			+ ', @LSUPPLIER_DB_LOCATION_TYPE '						
			+ ', @ORDER_CREATION_DATE_OLD '
			+ ', @CDCALENDAR_DEST'
			+ ', @CDCALENDAR_DEST_OLD'
			+ ', @SHIPPING_TIME_DEST'
			+ ', @SHIPPING_TIME_DEST_OLD'
			+ ', @PROMISED_DELIVERY_DATE_OLD'
			+ ', @NECESSITY_DATE_OLD'
			+ ', @PENDING_QUANTITY_OLD'
			+ ', @ORDER_VALUE_OLD'
			+ ', @UPDATE_DATE_OLD'
			+ ', @UNITS_OLD'
			+ ', @INVENTORY_ACCURACY'
			+ ', @INVENTORY_ACCURACY_OLD'
			+ ', @FINALIZATION_DATE_OLD'
			+ ', @ORDER_CREATION_DATETIME_OLD'
			+ ', @PROMISED_DELIVERY_DATETIME_OLD'
			+ ', @PRIORITY_OLD'
			+ ', @PRIORITY_COLOR_OLD'
			+ ', @COLOR_CHANGE_DATE_OLD'
			+ ', @MANAGED_OLD'
			+ ', @ID_TEMP'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number
			-- -------------------------------------------------------------------------------
			+ ', @FILE_NAME'
			+ ', @FILE_ROW_NUMBER'
			+ '';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric to 
		--                fetch
		-- -----------------------------------------------------------------------------------
		SET @vAllVariablesFetch = @vAllVariablesFetch    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', @' + [NTS].[VARCHAR_COLUMN], '') AS FETCH_SENTENCE
				 FROM TempPchNumToStrTbl AS [NTS]), ''));
		
		DECLARE @vOptionalStructureValidateORDER_CREATION_DATEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('ORDER_CREATION_DATE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateORDER_CREATION_DATEStr = ''
				+ '			IF (@vPassesValidations!=0 AND @ORDER_CREATION_DATE IS NULL)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL, NULL, ''E'', GETDATE(),' + CHAR(13)
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @ORDER_CREATION_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_CREATION_DATE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''ORDER_CREATION_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @ORDER_CREATION_DATE > @UPDATE_DATE)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @ORDER_CREATION_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_CREATION_DATE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''ORDER_CREATION_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '				FETCH NEXT FROM cDataTempCursor INTO ' + @vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND (SELECT dbo.VALIDATE_NON_WORK_DAY(@ORDER_CREATION_DATE, @CDCALENDAR_DEST)) > 0)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0  ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @ORDER_CREATION_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_CREATION_DATE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''ORDER_CREATION_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '				FETCH NEXT FROM cDataTempCursor INTO ' + @vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ';
		END
		
		DECLARE @vOptionalStructureValidateNECESSITY_DATEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('NECESSITY_DATE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateNECESSITY_DATEStr = ''
				+ '			IF (@PO_TYPE != ''S'') ' + CHAR(13)
				+ '			BEGIN ' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@vPassesValidations!=0 AND @NECESSITY_DATE IS NULL)  ' + CHAR(13)
				+ '				BEGIN  ' + CHAR(13)
				+ '					SET @vPassesValidations = 0 ' + CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '					VALUES (@vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13)
				+ '					        @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @NECESSITY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NECESSITY_DATE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''NECESSITY_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '					FETCH NEXT FROM cDataTempCursor INTO ' + @vAllVariablesFetch + CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END  ' + CHAR(13)
				+ CHAR(13);
				
			IF( LEN(@vOptionalStructureValidateORDER_CREATION_DATEStr) > 0 )
			BEGIN	
				 SET @vOptionalStructureValidateNECESSITY_DATEStr = @vOptionalStructureValidateNECESSITY_DATEStr
					+ '				IF (@vPassesValidations!=0 AND @NECESSITY_DATE <= @ORDER_CREATION_DATE)  ' + CHAR(13)
					+ '				BEGIN  ' + CHAR(13)
					+ '					SET @vPassesValidations = 0 ' + CHAR(13)
					+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
					+ '					VALUES (@vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE, NULL, ''E'', GETDATE(), ' + CHAR(13)
					+ '					        @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @NECESSITY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NECESSITY_DATE_STR') THEN '_STR' ELSE  '' END)
					+ ', 105), @FILE_ROW_NUMBER, ''NECESSITY_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
					+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
					+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
					+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
					+ '					CONTINUE; ' + CHAR(13)
					+ '				END  ' + CHAR(13)
					+ CHAR(13);
			END
			ELSE
			BEGIN
				 SET @vOptionalStructureValidateNECESSITY_DATEStr = @vOptionalStructureValidateNECESSITY_DATEStr +
					+ '				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NOT NULL AND  @NECESSITY_DATE <= @ORDER_CREATION_DATETIME_OLD )  ' + CHAR(13)
					+ '				BEGIN  ' + CHAR(13)
					+ '					SET @vPassesValidations = 0 ' + CHAR(13)
					+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
					+ '					VALUES (@vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME, NULL, ''E'', GETDATE(), ' + CHAR(13) 
					+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @NECESSITY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NECESSITY_DATE_STR') THEN '_STR' ELSE  '' END)
					+ ', 105), @FILE_ROW_NUMBER, ''NECESSITY_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
					+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
					+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
					+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
					+ '					CONTINUE; ' + CHAR(13)
					+ '				END  ' + CHAR(13)
					+ CHAR(13)
					+ '				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NULL AND  @NECESSITY_DATE <= @UPDATE_DATE )  ' + CHAR(13)
					+ '				BEGIN  ' + CHAR(13)
					+ '					SET @vPassesValidations = 0 ' + CHAR(13)
					+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
					+ '					VALUES (@vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE, NULL, ''E'', GETDATE(), ' + CHAR(13) 
					+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @NECESSITY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NECESSITY_DATE_STR') THEN '_STR' ELSE  '' END)
					+ ', 105), @FILE_ROW_NUMBER, ''NECESSITY_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
					+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
					+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
					+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
					+ '					CONTINUE; ' + CHAR(13)
					+ '				END  ' + CHAR(13)
					+ CHAR(13);
			END
			
			
			SET @vOptionalStructureValidateNECESSITY_DATEStr = @vOptionalStructureValidateNECESSITY_DATEStr 
				+ '				IF (@vPassesValidations!=0 AND (SELECT dbo.VALIDATE_NON_WORK_DAY(@NECESSITY_DATE, @CDCALENDAR_DEST)) > 0)  ' + CHAR(13)
				+ '				BEGIN  ' + CHAR(13)
				+ '					SET @vPassesValidations = 0  ' + CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '					VALUES (@vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD, NULL, ''E'', GETDATE(), ' + CHAR(13) 
				+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @NECESSITY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'NECESSITY_DATE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''NECESSITY_DATE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END  ' + CHAR(13)
				+ CHAR(13)
				+ '			END ';
		END
		
		DECLARE @vOptionalStructureValidateORDER_VALUEStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('ORDER_VALUE', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateORDER_VALUEStr = ''
				+ '			IF (@vPassesValidations!=0 AND @ORDER_VALUE IS NULL) ' + CHAR(13) 
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @ORDER_VALUE = 0; ' + CHAR(13)
				+ '			END' + CHAR(13)
				+ CHAR(13)
				+ '			IF ( @vPassesValidations!=0 AND @ORDER_VALUE < 0 )  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0, NULL, ''E'', GETDATE(), ' + CHAR(13) 
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @ORDER_VALUE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'ORDER_VALUE_STR') THEN '_STR' ELSE  '' END)
			    + ', 105), @FILE_ROW_NUMBER, ''ORDER_VALUE'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ';				
		END
		
		DECLARE @vOptionalStructureValidateUNITSStr AS NVARCHAR(MAX) = '';
		IF (CHARINDEX('UNITS', @vAllColumnsInterfaceTmp) > 0)
		BEGIN
			SET @vOptionalStructureValidateUNITSStr = ''
				+ '			IF (@vPassesValidations!=0 AND (@UNITS IS NULL OR @INVENTORY_ACCURACY IS NULL))  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_UNITS_IS_NULL, NULL, ''E'', GETDATE(), ' + CHAR(13) 
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UNITS, 105), @FILE_ROW_NUMBER, ''UNITS'', @FILE_NAME, @UPDATE_DATE)  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13)
				+ '			IF (@vPassesValidations!=0 AND @UNITS_OLD IS NOT NULL AND @INVENTORY_ACCURACY_OLD > @INVENTORY_ACCURACY)  ' + CHAR(13)
				+ '			BEGIN  		' + CHAR(13)					
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UNITS, 105), @FILE_ROW_NUMBER, ''UNITS'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13) 
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1'';' + CHAR(13)
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13);
		END

		/* EDITAR LOS SIGUIENTES PARA AGREGAR CAMPOS QUEMADOS: */
		SET @vAllDeclareColumnCalc = ''
			+ ' @BUFFER_SKU AS VARCHAR(50)' + CHAR(13)
			+ '		  , @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE AS VARCHAR(50)' + CHAR(13)
			+ '		  , @DESTINATION_IS_ACTIVE      AS BIT' + CHAR(13)
			+ '		  , @DESTINATION_LOCATION_TYPE  AS VARCHAR(50)' + CHAR(13)
			+ '		  , @LSUPPLIER_DB_CDLOCATION    AS VARCHAR(50)' + CHAR(13)
			+ '		  , @LSUPPLIER_DB_LOCATION_TYPE AS VARCHAR(50)' + CHAR(13)
			+ '		  , @CDCALENDAR_DEST            AS NUMERIC(4,0)' + CHAR(13)
			+ '		  , @SHIPPING_TIME_DEST         AS VARCHAR(5)' + CHAR(13);
			
		IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0)
		BEGIN 
			SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc 
				+ '		  , @ORDER_VALUE AS NUMERIC(17,2) = 1' + CHAR(13);
		END
		
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc 
			+ '		  , @INVENTORY_ACCURACY AS NUMERIC(3,0) = @INVENTORY_ACCURACY_DEFAULT' + CHAR(13);
									
		IF(LEN(@vOptionalStructureValidateUNITSStr) = 0)
		BEGIN 
			SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc 
				+ '		  , @UNITS AS VARCHAR(50) = @CDUNIT_DEFAULT' + CHAR(13);
		END
		
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc 
			+ '		  , @FINALIZATION_DATE AS DATETIME = ''1901-01-01 00:00:00''' + CHAR(13)
			+ '		  , @CREATION_DATE AS DATETIME' + CHAR(13)
			+ '		  , @ORDER_CREATION_DATETIME AS DATETIME = NULL' + CHAR(13)
			+ '		  , @PROMISED_DELIVERY_DATETIME AS DATETIME = NULL' + CHAR(13)
			+ '		  , @NECESSITY_DATETIME AS DATETIME = NULL' + CHAR(13)
			+ '		  , @PRIORITY AS NUMERIC(17,2) = NULL' + CHAR(13)
			+ '		  , @PRIORITY_COLOR AS VARCHAR(50) = NULL' + CHAR(13)
			+ '		  , @COLOR_CHANGE_DATE AS DATE = ''1901-01-01 00:00:00''' + CHAR(13)
			+ '		  , @MANAGED AS BIT = 1' + CHAR(13)
			+ '		  , @ID_TEMP AS INT' + CHAR(13)
			+ '		  , @EXCHANGES_IN_QUARANTINE AS NUMERIC(10,0) = 0' + CHAR(13)
			+ '		  , @QUARANTINE_DATE AS DATETIME = ''1901-01-01 00:00:00''';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric 
		-- 				  to vAllDeclareColumnCalc
		-- -----------------------------------------------------------------------------------
		SET @vAllDeclareColumnCalc = @vAllDeclareColumnCalc + CHAR(13)    
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('		  , ' + LEFT('@' + [NTS].[VARCHAR_COLUMN] + REPLICATE(' ', 56), 56)  + 'AS VARCHAR(50)',  CHAR(13)) AS DECLARE_SENTENCE
				 FROM TempPchNumToStrTbl AS [NTS]), ''));
		
		SET @vAllDeclareColumnOld = ''
			+ ' @CDPURCHASE_ORDER_OLD AS VARCHAR(50)' + CHAR(13)
			+ '		  , @PO_TYPE_OLD AS VARCHAR(1)' + CHAR(13)
			+ '		  , @SKU_OLD AS VARCHAR(50)' + CHAR(13)
			+ '		  , @DESTINATION_OLD AS VARCHAR(50)' + CHAR(13)
			+ '		  , @DESTINATION_IS_ACTIVE_OLD AS BIT' + CHAR(13)
			+ '		  , @DESTINATION_LOCATION_TYPE_OLD AS VARCHAR(50)' + CHAR(13)		
			+ '		  , @SUPPLIER_OLD AS VARCHAR(50)' + CHAR(13)
			+ '		  , @ORDER_CREATION_DATE_OLD AS DATE' + CHAR(13)
			+ '		  , @CDCALENDAR_DEST_OLD AS NUMERIC(4,0)' + CHAR(13)
			+ '		  , @SHIPPING_TIME_DEST_OLD AS VARCHAR(5)' + CHAR(13)
			+ '		  , @PROMISED_DELIVERY_DATE_OLD AS DATE' + CHAR(13)
			+ '		  , @NECESSITY_DATE_OLD AS DATE' + CHAR(13)
			+ '		  , @PENDING_QUANTITY_OLD AS NUMERIC(17,5)' + CHAR(13)
			+ '		  , @ORDER_VALUE_OLD AS NUMERIC(17,2)' + CHAR(13)
			+ '		  , @UPDATE_DATE_OLD AS DATE' + CHAR(13)
			+ '		  , @UNITS_OLD AS VARCHAR(50)' + CHAR(13)
			+ '		  , @INVENTORY_ACCURACY_OLD AS NUMERIC(3,0)' + CHAR(13)
			+ '		  , @FINALIZATION_DATE_OLD AS DATETIME' + CHAR(13)
			+ '		  , @ORDER_CREATION_DATETIME_OLD AS DATETIME' + CHAR(13)
			+ '		  , @PROMISED_DELIVERY_DATETIME_OLD AS DATETIME' + CHAR(13)
			+ '		  , @PRIORITY_OLD AS NUMERIC(17,2) = NULL' + CHAR(13)
			+ '		  , @PRIORITY_COLOR_OLD AS VARCHAR(50) = NULL' + CHAR(13)
			+ '		  , @COLOR_CHANGE_DATE_OLD AS DATE = ''1901-01-01 00:00:00''' + CHAR(13)
			+ '		  , @MANAGED_OLD BIT = 1';
			
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', POOLD.CDPURCHASE_ORDER'
			+ ', POOLD.PO_TYPE'
			+ ', POOLD.SKU'
			+ ', B.SKU AS BUFFER_SKU';
			
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
				+ ', B_OLD.SKU AS BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE';
		END
		
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', POOLD.DESTINATION'
			+ ', LDEST.IS_ACTIVE'
			+ ', LDESTOLD.IS_ACTIVE'
			+ ', LDEST.LOCATION_TYPE'
			+ ', LDESTOLD.LOCATION_TYPE'
			+ ', POOLD.SUPPLIER'
			+ ', LSUPPLIER.CDLOCATION'
			+ ', LSUPPLIER.LOCATION_TYPE'
			+ ', POOLD.ORDER_CREATION_DATE'
			+ ', CAL_DEST.CDCALENDAR'
			+ ', CAL_DEST_OLD.CDCALENDAR'
			+ ', CAL_DEST.SHIPPING_TIME'
			+ ', CAL_DEST_OLD.SHIPPING_TIME'
			+ ', POOLD.PROMISED_DELIVERY_DATE'
			+ ', POOLD.NECESSITY_DATE'
			+ ', POOLD.PENDING_QUANTITY'
			+ ', POOLD.ORDER_VALUE'
			+ ', POOLD.UPDATE_DATE'
			+ ', POOLD.UNITS';

		IF(LEN(@vOptionalStructureValidateUNITSStr) > 0)
		BEGIN
			SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
				+ ', CLI_UNITS.INVENTORY_ACCURACY'
		END
		ELSE
		BEGIN
			SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
				+ ', @INVENTORY_ACCURACY_DEFAULT'
		END
		
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor
			+ ', CLI_UNITS_OLD.INVENTORY_ACCURACY'
			+ ', POOLD.FINALIZATION_DATE'
			+ ', POOLD.ORDER_CREATION_DATETIME'
			+ ', POOLD.PROMISED_DELIVERY_DATETIME'
			+ ', POOLD.PRIORITY'
			+ ', POOLD.PRIORITY_COLOR'
			+ ', POOLD.COLOR_CHANGE_DATE'
			+ ', POOLD.MANAGED'
			+ ', TMP.ID'
			-- -------------------------------------------------------------------------------
			-- IAFJ 20201118: Since v5.3.0, add columns File_name and FIle_row_number 
			-- -------------------------------------------------------------------------------
			+ ', TMP.FILE_NAME'
			+ ', TMP.FILE_ROW_NUMBER'
			+ '';
			
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200112: Since v5.3.0, add varchar variables that actually are numeric to 
		--				  Select
		-- -----------------------------------------------------------------------------------
		SET @vAllColumnsBuildSelectByCursor = @vAllColumnsBuildSelectByCursor  
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG (', TMP.' + [NTS].[VARCHAR_COLUMN], '') AS SELECT_SENTENCE
				 FROM TempPchNumToStrTbl AS [NTS]), ''));
			
		-- -----------------------------------------------------------------------------------
		-- START BUILD INSERT 
		-- -----------------------------------------------------------------------------------
		SET @vAllColumnsInsert = @vAllColumnsInterfaceTmp;
		
		IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',ORDER_VALUE'
		END
		
		IF(LEN(@vOptionalStructureValidateUNITSStr) = 0)
		BEGIN 
			SET @vAllColumnsInsert = @vAllColumnsInsert + ',UNITS'
		END
		
		SET @vAllColumnsInsert = @vAllColumnsInsert 
			+ ',FINALIZATION_DATE'
			+ ',CREATION_DATE'
			+ ',CREATION_USER'
			+ ',MODIFICATION_DATE'
			+ ',MODIFICATION_USER'
			+ ',ORDER_CREATION_DATETIME'
			+ ',PROMISED_DELIVERY_DATETIME'
			+ ',NECESSITY_DATETIME'
			+ ',PRIORITY'
			+ ',PRIORITY_COLOR'
			+ ',COLOR_CHANGE_DATE'
			+ ',MANAGED'
			+ ',EXCHANGES_IN_QUARANTINE'
			+ ',QUARANTINE_DATE'
			+ '';

		SET @vAllValuesInsert = @vAllVariablesInterfaceTmp
		
		IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ', @ORDER_VALUE'
		END
		
		IF(LEN(@vOptionalStructureValidateUNITSStr) = 0)
		BEGIN 
			SET @vAllValuesInsert = @vAllValuesInsert + ', @UNITS'
		END
		
		SET @vAllValuesInsert = @vAllValuesInsert 	
			+ ', @FINALIZATION_DATE'
			+ ', @CREATION_DATE'	--CREATION_DATE
			+ ', @ivaCreatorOrModifyUser' --CREATION_USER
			+ ', @CREATION_DATE'		--MODIFICATION_DATE
			+ ', @ivaCreatorOrModifyUser' --MODIFICATION_USER
			+ ', @ORDER_CREATION_DATETIME'
			+ ', @PROMISED_DELIVERY_DATETIME'
			+ ', @NECESSITY_DATETIME'
			+ ', @PRIORITY'
			+ ', @PRIORITY_COLOR'
			+ ', @COLOR_CHANGE_DATE'
			+ ', @MANAGED'
			+ ', @EXCHANGES_IN_QUARANTINE'
			+ ', @QUARANTINE_DATE'
			+ '';
		
		-- -----------------------------------------------------------------------------------
		-- END BUILD INSERT 
		-- -----------------------------------------------------------------------------------
		
		-- -----------------------------------------------------------------------------------
		-- START BUILD UPDATE 
		-- -----------------------------------------------------------------------------------
		SET @vAllSetsColumnsAndValuesUpdate = @vAllUpgradablesColumns;
		
		----IF(LEN(@vOptionalStructureValidateORDER_VALUEStr) = 0) -- si no existe en la estructura si se debe insertar el valor 1 pero si el registro ya existia no se debe modificar el registro (si ya existe se debe dejar el valor que tenia), por eso se comentan estas lineas
		----BEGIN 
		----	SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + ',ORDER_VALUE = 1 '
		----END

		----IF(LEN(@vOptionalStructureValidateUNITSStr) = 0) -- si no existe en la estructura si se debe insertar el valor por defecto pero si el registro ya existia no se debe modificar el registro (si ya existe se debe dejar el valor que tenia), por eso se comentan estas lineas
		----BEGIN 
		----	SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate + ',UNITS = @CDUNIT_DEFAULT '
		----END
		
		SET @vAllSetsColumnsAndValuesUpdate = @vAllSetsColumnsAndValuesUpdate 
			+ '						   MODIFICATION_DATE = GETDATE()' + CHAR(13)
			+ '						   ,MODIFICATION_USER = @ivaCreatorOrModifyUser' + CHAR(13)
			+ '						   ,ORDER_CREATION_DATETIME = @ORDER_CREATION_DATETIME' + CHAR(13)
			+ '						   ,PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME' + CHAR(13)
			+ '						   ,NECESSITY_DATETIME = @NECESSITY_DATETIME' + CHAR(13)
			+ '						   ,PRIORITY = @PRIORITY' + CHAR(13)
			+ '						   ,PRIORITY_COLOR = @PRIORITY_COLOR' + CHAR(13)
			+ '						   ,COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE' + CHAR(13)
			+ '						   ,MANAGED = @MANAGED' + CHAR(13)
			+ '';
		
		-- -----------------------------------------------------------------------------------
		-- END BUILD UPDATE 
		-- -----------------------------------------------------------------------------------
		
		SET @vTrace = 'building the vSPMasterLoad '	
		
		
		IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'PURCHASE_ORDERS')
			SET @vSPMasterLoad = 'ALTER PROCEDURE [dbo].[PURCHASE_ORDERS] ' + CHAR(13)	
		ELSE
			SET @vSPMasterLoad = 'CREATE PROCEDURE [dbo].[PURCHASE_ORDERS] ' + CHAR(13)
		
		SET @vSPMasterLoad = @vSPMasterLoad								
			+ '	@ivaIdExchange NUMERIC(10), ' + CHAR(13)
			+ '	@ivaTempLoadDate DATE , ' + CHAR(13)
			+ '	@ivaCreatorOrModifyUser NVARCHAR(MAX), ' + CHAR(13)
			+ '	@ivaErrorValidations NUMERIC(10), ' + CHAR(13)
			+ '	@ovaResult VARCHAR(1) OUTPUT, ' + CHAR(13)
			+ '	@ovaMessage NVARCHAR(MAX) OUTPUT, ' + CHAR(13)
			+ '	@ovaHasProcessed VARCHAR(1) OUTPUT ' + CHAR(13)
			+ 'AS ' + CHAR(13)
			+ 'DECLARE @vTrace AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @vDuplicatedOrdersCountTemp AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @vErrorsPurchaseOrdersCount AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @vProcessPurchaseOrdersCount AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @ovaResultQuarantine     AS VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageQuarantine    AS NVARCHAR(MAX);' + CHAR(13)							
			+ 'DECLARE @ovaResultFinished       AS VARCHAR(1); ' + CHAR(13)
			+ 'DECLARE @ovaMessageFinished      AS NVARCHAR(MAX); ' + CHAR(13)
			+ 'DECLARE @ovaMessageFinishedTotal AS NVARCHAR(MAX) = ''''; ' + CHAR(13)
			+ 'DECLARE @vPassesValidations AS SMALLINT = 1; ' + CHAR(13)
			+ 'DECLARE @vCountIntTmp AS INT = 0; ' + CHAR(13)
			+ 'DECLARE @NON_WORKING_DAYS AS NUMERIC(10,2); ' + CHAR(13)
			+ 'DECLARE @DATE_SERVER_NO_TIME AS DATE; ' + CHAR(13)
			+ 'DECLARE @DATE_CALCULATION AS DATETIME; ' + CHAR(13)
			+ 'DECLARE @DATE_CALCULATION_FINALIZATION AS DATETIME; ' + CHAR(13)
			+ 'DECLARE @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK AS DATETIME; ' + CHAR(13)					
			+ 'DECLARE @ovaResultRemoveViewNot VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageRemoveViewNot VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @ovaResultAddViewNot VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageAddViewNot VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @vTotalErrorsPurchaseOrders NUMERIC(8) = 0; ' + CHAR(13)
			+ 'DECLARE @vMessagesAfterDataExchange VARCHAR = ''N''; ' + CHAR(13)							
			+ 'DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0; ' + CHAR(13)
			+ 'DECLARE @CDUNIT_DEFAULT AS VARCHAR(50); ' + CHAR(13)
			+ 'DECLARE @INVENTORY_ACCURACY_DEFAULT AS NUMERIC(3,0); ' + CHAR(13)
			+ 'DECLARE @ovaResultAfthetF VARCHAR(1);' + CHAR(13)
			+ 'DECLARE @ovaMessageAfthetF VARCHAR(MAX);' + CHAR(13)
			+ 'DECLARE @vDummy AS VARCHAR(10) = ''''; ' + CHAR(13)
			+ 'DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( ' + CHAR(13)
			+ '                                          	SKU VARCHAR(50), LOCATION VARCHAR(50), ' + CHAR(13)
			+ '	                                            PRIMARY KEY (SKU, LOCATION) ' + CHAR(13)
			+ '                                            ) ' + CHAR(13)
			+ '';

		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
		    + 'BEGIN ' + CHAR(13) + CHAR(13)
			+ 'BEGIN TRY ' + CHAR(13)
			+ '	-- SET NOCOUNT ON added to prevent extra result sets from ' + CHAR(13)
			+ '	-- interfering with SELECT statements. ' + CHAR(13)
			+ '	SET NOCOUNT ON; ' + CHAR(13)
			+ '	SET @ovaResult = ''0'';' + CHAR(13)
			+ '	SET @ovaMessage = '''';' + CHAR(13)
			+ '	SET @ovaHasProcessed = ''0'';' + CHAR(13)
			+ '	SET @vTrace = ''Setting the cursor cDataTempCursor  '';' + CHAR(13)
			+ '	SET @DATE_SERVER_NO_TIME = GETDATE(); ' + CHAR(13)
			+ '	SET @DATE_CALCULATION = GETDATE(); ' + CHAR(13)
			+ '	SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION; ' + CHAR(13)
			+ CHAR(13)
			+ '	SELECT @CDUNIT_DEFAULT = U.CDUNIT, @INVENTORY_ACCURACY_DEFAULT = U.INVENTORY_ACCURACY ' + CHAR(13)
			+ '	  FROM TFSCM_CLI_UNITS U ' + CHAR(13)
			+ '	 WHERE (U.IS_DEFAULT_UNIT = 1 AND U.IS_ACTIVE = 1); ' + CHAR(13)
			+ CHAR(13);
			
			SET @vSPMasterLoad = @vSPMasterLoad + '	DECLARE ' + @vAllDeclareColumnInterfaceTmp + ';' + CHAR(13) + CHAR(13);	
			SET @vSPMasterLoad = @vSPMasterLoad + '	DECLARE ' + @vAllDeclareColumnCalc + ';' + CHAR(13) + CHAR(13);
			SET @vSPMasterLoad = @vSPMasterLoad + '	DECLARE ' + @vAllDeclareColumnOld + ';' + CHAR(13) + CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)		
			+ '	BEGIN TRY ' + CHAR(13)
			+ CHAR(13)
			+ '		---------- MESSAGES ---------------------------------------- ' + CHAR(13)
			+ '		DECLARE @vLanguage AS VARCHAR(2) = ''es'';  ' + CHAR(13)
			+ '		DECLARE @vCodErrorResultMessages AS VARCHAR(1); ' + CHAR(13)
			+ '		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_TYPE_INVAL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_SKU_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT AS NVARCHAR(MAX); ' + CHAR(13)			
			+ '		DECLARE @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UNITS_IS_NULL AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_ERROR_ORDERS AS NVARCHAR(MAX); ' + CHAR(13)
			+ '		DECLARE @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR AS NVARCHAR(MAX); ' + CHAR(13)
			+ CHAR(13)
			+ '		BEGIN TRY  ' + CHAR(13)
			+ CHAR(13)
			+ '			SELECT @vLanguage = PARAM_VALUE  ' + CHAR(13)
			+ '			  FROM TFSCM_COM_PARAMS ' + CHAR(13)
			+ '			WHERE CDPARAM = ''DEFAULT_LANGUAGE'' ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_TYPE_INVAL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_TYPE_INVAL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DEX_PURCHASE_SKU_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_SKU_NULL OUTPUT' + CHAR(13) 			
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_DESTINATION_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_ORDER_CREATION_DATE_NOWD'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_CDCALENDAR_NOT_FOUND'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_NECESSITY_DATE_IS_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_NECESSITY_DATE_NOWD'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_PENDING_QUANTITY_INVAL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   ' + CHAR(13)
			+ '			''DEX_PURCHASE_PENDING_QUANTITY_ALERT'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT OUTPUT' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_ORDER_VALUE_LT_0'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UPDATE_DATE_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UPDATE_DATE_GT_NOW'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UNITS_IS_NULL'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UNITS_IS_NULL OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UNITS_LT_UNITS_OLD'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_SUCESSFUL_ORDERS'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_ERROR_ORDERS'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_ERROR_ORDERS OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  ' + CHAR(13)
			+ '			''DEX_PURCHASE_UNEXPECTED_ERROR'', @vLanguage, '''', '''', '''', @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR OUTPUT ' + CHAR(13)
			+ CHAR(13)
			+ '		END TRY  ' + CHAR(13)
			+ '		BEGIN CATCH  ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED = ''DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL = ''DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_TYPE_INVAL = ''DEX_PURCHASE_TYPE_INVAL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_SKU_NULL = ''DEX_PURCHASE_SKU_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS = ''DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND = ''DEX_PURCHASE_DESTINATION_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL = ''DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND = ''DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL = ''DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL = ''DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE = ''DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD = ''DEX_PURCHASE_ORDER_CREATION_DATE_NOWD'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND = ''DEX_PURCHASE_CDCALENDAR_NOT_FOUND'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL = ''DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE = ''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME = ''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE = ''DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD = ''DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL = ''DEX_PURCHASE_NECESSITY_DATE_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE = ''DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME = ''DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE = ''DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD = ''DEX_PURCHASE_NECESSITY_DATE_NOWD'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL = ''DEX_PURCHASE_PENDING_QUANTITY_INVAL'' ' + CHAR(13)
	 		+ '			SET @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT = ''DEX_PURCHASE_PENDING_QUANTITY_ALERT''' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 = ''DEX_PURCHASE_ORDER_VALUE_LT_0'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL = ''DEX_PURCHASE_UPDATE_DATE_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW = ''DEX_PURCHASE_UPDATE_DATE_GT_NOW'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD = ''DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UNITS_IS_NULL = ''DEX_PURCHASE_UNITS_IS_NULL'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD = ''DEX_PURCHASE_UNITS_LT_UNITS_OLD'' ' + CHAR(13)			
			+ '			SET @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED = ''DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED'' ' + CHAR(13)			
			+ '			SET @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS = ''DEX_PURCHASE_SUCESSFUL_ORDERS'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_ERROR_ORDERS = ''DEX_PURCHASE_ERROR_ORDERS'' ' + CHAR(13)
			+ '			SET @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR = ''DEX_PURCHASE_UNEXPECTED_ERROR'' ' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		DECLARE @PK1_CDPURCHASE_ORDER_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ '		DECLARE @PK2_SUPPLIER_ERROR_LOG AS VARCHAR(50); ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		-- IAFJ 20201118: Since v5.3.0, add columns File_name and FIle_row_number ' + CHAR(13)
			+ '		-- -----------------------------------------------------------------------------------' + CHAR(13)
			+ '		DECLARE @FILE_NAME AS VARCHAR(500); ' + CHAR(13)
			+ '		DECLARE @FILE_ROW_NUMBER AS INT; ' + CHAR(13)
			+ CHAR(13)
			+ '		-- ----------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  ' + CHAR(13)
			+ '		-- ---------------------------------------------------------------------------------- ' + CHAR(13)
			+ '		IF OBJECT_ID(''tempdb..#DuplicatePurchaseTemp'') IS NOT NULL  ' + CHAR(13)
			+ '			DROP TABLE #DuplicatePurchaseTemp; ' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  INTO #DuplicatePurchaseTemp ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_COM_LOG] ' + CHAR(13)
			+ '		 WHERE 1 = 2; ' + CHAR(13)
			+ CHAR(13)	
			+ '		INSERT INTO #DuplicatePurchaseTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '											RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT [POTDUP].[COUNTER1], @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED + CAST([POTDUP].[COUNTER1] AS VARCHAR) + ''.'', NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '			   [POT].[CDPURCHASE_ORDER], [POT].[DESTINATION], NULL, [POT].[FILE_ROW_NUMBER], ''CDPURCHASE_ORDER'', [POT].[FILE_NAME], @ivaTempLoadDate ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [POT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] ' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]  = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[UPDATE_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [POTDUP] ' + CHAR(13)
			+ '			ON ([POT].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '			AND [POT].[UPDATE_DATE]      = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [POTDUP].[CDPURCHASE_ORDER] = [POT].[CDPURCHASE_ORDER] ' + CHAR(13)
			+ '			AND [POTDUP].[DESTINATION]      = [POT].[DESTINATION] ' + CHAR(13)
			+ '			AND [POT].[FILE_ROW_NUMBER]     = [POTDUP].[FILE_ROW_NUMBER]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SELECT @vDuplicatedOrdersCountTemp = SUM(COUNTER1) FROM #DuplicatePurchaseTemp;' + CHAR(13)
			+ '		SET @vErrorsPurchaseOrdersCount    = @vErrorsPurchaseOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		-- Counting repeated events ' + CHAR(13)
			+ '		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  ' + CHAR(13)
			+ '			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE ' + CHAR(13)
			+ '		  FROM #DuplicatePurchaseTemp; ' + CHAR(13)
			+ CHAR(13)
			+ '		DELETE [POT] ' + CHAR(13)
			+ '		  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [POT]  ' + CHAR(13)
			+ '		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]' + CHAR(13)
			+ '				  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [TMP] ' + CHAR(13)
			+ '				 WHERE [TMP].[IDEXCHANGE]  = @ivaIdExchange ' + CHAR(13)
			+ '				   AND [TMP].[UPDATE_DATE] = @ivaTempLoadDate ' + CHAR(13)
			+ '				 GROUP BY [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]  ' + CHAR(13)
			+ '				HAVING COUNT(1) > 1) AS [POTDUP] ' + CHAR(13)
			+ '			ON ([POT].[IDEXCHANGE]       = @ivaIdExchange ' + CHAR(13)
			+ '			AND [POT].[UPDATE_DATE]      = @ivaTempLoadDate ' + CHAR(13)
			+ '			AND [POTDUP].[CDPURCHASE_ORDER] = [POT].[CDPURCHASE_ORDER] ' + CHAR(13)
			+ '			AND [POTDUP].[DESTINATION]      = [POT].[DESTINATION]); ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vProcessPurchaseOrdersCount = @vProcessPurchaseOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);' + CHAR(13)
			+ CHAR(13)
			+ '		/*DECLARE cErrorLogCursor CURSOR FAST_FORWARD FOR ' + CHAR(13)
			+ '		SELECT TEMPO.COUNTER1, TEMPO.CDPURCHASE_ORDER, TEMPO.SUPPLIER, TEMPO.FILE_NAME, TEMPO.FILE_ROW_NUMBER  ' + CHAR(13)
			+ '		  FROM ( ' + CHAR(13)
			+ '				SELECT COUNT(1) AS COUNTER1, TMP.CDPURCHASE_ORDER, TMP.SUPPLIER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER  ' + CHAR(13)
			+ '				  FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP ' + CHAR(13)
			+ '				 WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '				   AND TMP.UPDATE_DATE = @ivaTempLoadDate' + CHAR(13)
			+ '				 GROUP BY TMP.CDPURCHASE_ORDER, TMP.SUPPLIER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER ' + CHAR(13)
			+ '			   ) TEMPO ' + CHAR(13)
			+ '		 WHERE TEMPO.COUNTER1 > 1 ' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN cErrorLogCursor ' + CHAR(13)
			+ '		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER ' + CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '			VALUES (@vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '				    @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '			SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + @vDuplicatedOrdersCountTemp ' + CHAR(13)
			+ '			SET @ovaResult = ''1''; ' + CHAR(13)
			+ '			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG ' + CHAR(13)
			+ '		END ' + CHAR(13)
			+ '		CLOSE cErrorLogCursor ' + CHAR(13)
			+ '		DEALLOCATE cErrorLogCursor */' + CHAR(13)
			+ '	END TRY ' + CHAR(13)
			+ '	BEGIN CATCH ' + CHAR(13)
			+ '	END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ CHAR(13)
			+ 
			+ '	DECLARE cDataTempCursor CURSOR FAST_FORWARD FOR ' + CHAR(13)
			+ '	 SELECT ';
			
		SET @vSPMasterLoad = @vSPMasterLoad + @vAllColumnsBuildSelectByCursor + CHAR(13)
			+ '	   FROM '+@vTableTempName+ ' TMP ' + CHAR(13)
			+ '	   LEFT OUTER JOIN ' + @vTableRealName + ' POOLD ON (TMP.CDPURCHASE_ORDER = POOLD.CDPURCHASE_ORDER AND TMP.SUPPLIER = POOLD.SUPPLIER) ' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B ON (B.SKU = TMP.SKU AND B.LOCATION = TMP.DESTINATION AND B.INACTIVE = 0)  ' + CHAR(13);
				
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) > 0 AND CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = TMP.SKU AND B_OLD.LOCATION = POOLD.DESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('DESTINATION', @vAllUpgradablesColumns) > 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = POOLD.SKU AND B_OLD.LOCATION = TMP.DESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
		ELSE IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 AND CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
				+ '	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B_OLD ON (B_OLD.SKU = POOLD.SKU AND B_OLD.LOCATION = POOLD.DESTINATION AND B_OLD.INACTIVE = 0)  ' + CHAR(13);
		END
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LDEST ON (LDEST.CDLOCATION = TMP.DESTINATION) ' + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LDESTOLD ON (LDESTOLD.CDLOCATION = POOLD.DESTINATION) ' + CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST ON (CAL_DEST.CDCALENDAR = LDEST.CDCALENDAR AND CAL_DEST.IS_ACTIVE = 1) '   + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST_OLD ON (CAL_DEST_OLD.CDCALENDAR = LDESTOLD.CDCALENDAR AND CAL_DEST_OLD.IS_ACTIVE = 1) '  +CHAR(13);		
		
		-- Como el SUPPLIER pertenece a la PK, no es necesario buscar el valor OLD, por que si fuera diferente se insertaria nuevo en lugar de buscar hacer un update
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LSUPPLIER ON (LSUPPLIER.CDLOCATION = TMP.SUPPLIER AND LSUPPLIER.IS_ACTIVE = 1) ' + CHAR(13);
		
		IF(LEN(@vOptionalStructureValidateUNITSStr) > 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '	   LEFT OUTER JOIN TFSCM_CLI_UNITS CLI_UNITS ON (CLI_UNITS.CDUNIT = TMP.UNITS AND CLI_UNITS.IS_ACTIVE = 1) ' + CHAR(13);
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '	   LEFT OUTER JOIN TFSCM_CLI_UNITS CLI_UNITS_OLD ON (CLI_UNITS_OLD.CDUNIT = POOLD.UNITS) ' + CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	  WHERE TMP.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '	    AND TMP.UPDATE_DATE = @ivaTempLoadDate' + CHAR(13)
			+ '	    AND TMP.ID IN ' + CHAR(13)
			+ '	       (	' + CHAR(13)
			+ '		     SELECT TEMPO.ID ' + CHAR(13)
			+ '		      FROM ' + CHAR(13)
			+ '		           ( SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID ' + CHAR(13)
			+ '			           FROM '+@vTableTempName+ ' TMPAUX ' + CHAR(13)
			+ '			          WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange ' + CHAR(13)
			+ '			           AND TMPAUX.UPDATE_DATE = @ivaTempLoadDate ' + CHAR(13)
			+ '			          GROUP BY TMPAUX.CDPURCHASE_ORDER, TMPAUX.SUPPLIER ' + CHAR(13)
			+ '		           ) TEMPO ' + CHAR(13)
			+ '		     WHERE TEMPO.COUNTER1 = 1 ' + CHAR(13)
			+ '	       ) ' + CHAR(13)
			+ '	  ORDER BY TMP.CDPURCHASE_ORDER, TMP.SUPPLIER';
			
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13) + CHAR(13)
			+ '	OPEN cDataTempCursor ' + CHAR(13)
			+ '	FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ CHAR(13)
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)
			+ CHAR(13)
			+ '	WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)				
			+ '		BEGIN TRY ' + CHAR(13);
		-- -----------------------------------------------------------------------------------
		-- SET VALUES INITIALS (OVERRIDE VALUES) IN SPECIALS CONDITIONS:
		-- -----------------------------------------------------------------------------------
		SET @vSPMasterLoad = @vSPMasterLoad
			--+'			IF @CDPURCHASE_ORDER_OLD IS NOT NULL AND @SUPPLIER_OLD IS NOT NULL ' + CHAR(13) validar el CDPURCHASE_ORDER_OLD es suficiente 
			+ '			IF (@CDPURCHASE_ORDER_OLD IS NOT NULL) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vDummy = ''''; ' + CHAR(13);
			
		--- SET OLD VALUES FIELDS OVER ACTUAL VALUES FIELDS
	
		IF( CHARINDEX('@PO_TYPE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PO_TYPE = @PO_TYPE_OLD; ' + CHAR(13);
		END
		
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @SKU = @SKU_OLD; ' + CHAR(13);
		END
		
		IF( CHARINDEX('SKU', @vAllUpgradablesColumns) = 0 OR CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @BUFFER_SKU = @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE; ' + CHAR(13);
		END
		
		IF( CHARINDEX('DESTINATION', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad 
				+ '				SET @DESTINATION = @DESTINATION_OLD; ' + CHAR(13)
				+ '				SET @DESTINATION_IS_ACTIVE = @DESTINATION_IS_ACTIVE_OLD; ' + CHAR(13)
				+ '				SET @DESTINATION_LOCATION_TYPE = @DESTINATION_LOCATION_TYPE_OLD; ' + CHAR(13)
				+ '				SET @CDCALENDAR_DEST = @CDCALENDAR_DEST_OLD ' + CHAR(13)
				+ '				SET @SHIPPING_TIME_DEST = @SHIPPING_TIME_DEST_OLD ' + CHAR(13)
		END

		IF( (LEN(@vOptionalStructureValidateORDER_CREATION_DATEStr) > 0) AND (CHARINDEX('ORDER_CREATION_DATE', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @ORDER_CREATION_DATE = @ORDER_CREATION_DATE_OLD; ' + CHAR(13);
		END
		
		IF( CHARINDEX('PROMISED_DELIVERY_DATE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad 
				+ '				SET @PROMISED_DELIVERY_DATE = @PROMISED_DELIVERY_DATE_OLD; ' + CHAR(13)
				+ '				SET @PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME_OLD; ' + CHAR(13);
		END
		
		IF( (LEN(@vOptionalStructureValidateNECESSITY_DATEStr) > 0) AND (CHARINDEX('NECESSITY_DATE', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @NECESSITY_DATE = @NECESSITY_DATE_OLD; ' + CHAR(13);
		END
	
		IF( CHARINDEX('PENDING_QUANTITY', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PENDING_QUANTITY = @PENDING_QUANTITY_OLD; ' + CHAR(13);
		END
		
		IF( (LEN(@vOptionalStructureValidateORDER_VALUEStr) > 0) AND (CHARINDEX('ORDER_VALUE', @vAllUpgradablesColumns) = 0) )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @ORDER_VALUE = @ORDER_VALUE_OLD; ' + CHAR(13);
		END
		
		IF( CHARINDEX('UPDATE_DATE', @vAllUpgradablesColumns) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @UPDATE_DATE = @UPDATE_DATE_OLD; ' + CHAR(13);
		END
		
		IF( (LEN(@vOptionalStructureValidateUNITSStr) > 0) )
		BEGIN
			IF( (CHARINDEX('UNITS', @vAllUpgradablesColumns) = 0) )
			BEGIN
				SET @vSPMasterLoad = @vSPMasterLoad
					+ '				SET @UNITS = @UNITS_OLD; ' + CHAR(13)
					+ '				SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD ' + CHAR(13);
			END
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD ' + CHAR(13);				
		END 

		---
		SET @vSPMasterLoad = @vSPMasterLoad 
			+ '			END ' + CHAR(13)
			-- VALIDATIONS:
			+ CHAR(13)+			
			+ '			SET @vPassesValidations = 1 ' + CHAR(13)			
			+ CHAR(13)+
			+ CHAR(13)+
			+ '			IF (@vPassesValidations!=0 AND @FINALIZATION_DATE_OLD != ''1901-01-01 00:00:00'') ' + CHAR(13)
			+ '			BEGIN   ' + CHAR(13)
			+ '				SET @vPassesValidations = 0  ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @FINALIZATION_DATE_OLD, 105), @FILE_ROW_NUMBER, ''FINALIZATION_DATE'', @FILE_NAME, @UPDATE_DATE )   ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1   ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';  ' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ CHAR(13)+
			+ '			IF (@vPassesValidations!=0 AND (@PO_TYPE IS NULL OR (@PO_TYPE != ''O'' AND @PO_TYPE != ''S'' /*AND @PO_TYPE != ''T''*/)) ) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_TYPE_INVAL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PO_TYPE, 105), @FILE_ROW_NUMBER, ''PO_TYPE'', @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @SKU IS NULL)' + CHAR(13)
			+ '			BEGIN			' + CHAR(13)
			+ '				SET @vPassesValidations = 0' + CHAR(13)  
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)  
			+ '				VALUES (@vMSG_DEX_PURCHASE_SKU_NULL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @UPDATE_DATE )' + CHAR(13)  
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13)  
			+ '				SET @ovaResult = ''1'';' + CHAR(13)  
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @PO_TYPE IS NOT NULL AND @PO_TYPE = ''S'' )' + CHAR(13)
			+ '			BEGIN' + CHAR(13)	
			+ '				IF (@BUFFER_SKU IS NULL)' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					SET @vPassesValidations = 0' + CHAR(13)  
			+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)  
			+ '					VALUES (@vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SKU + ''; '' + @DESTINATION, 105), @FILE_ROW_NUMBER, ''SKU'', @FILE_NAME, @UPDATE_DATE )' + CHAR(13)  
			+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13)  
			+ '					SET @ovaResult = ''1'';' + CHAR(13) 
			+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '					CONTINUE; ' + CHAR(13)
			+ '				END' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND (@DESTINATION IS NULL OR @DESTINATION_IS_ACTIVE IS NULL OR @DESTINATION_IS_ACTIVE = 0) ) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, ''DESTINATION'', @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF ( @vPassesValidations!=0 AND ( @DESTINATION_LOCATION_TYPE IS NULL OR (@DESTINATION_LOCATION_TYPE != ''WH'' AND @DESTINATION_LOCATION_TYPE != ''CL'' AND @DESTINATION_LOCATION_TYPE != ''PS'') ) )' + CHAR(13)
			+ '			BEGIN			' + CHAR(13)
			+ '				SET @vPassesValidations = 0' + CHAR(13)  
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)  
			+ '				VALUES (@vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, ''DESTINATION'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)  
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13)  
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @CDCALENDAR_DEST IS NULL)  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, ''DESTINATION'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)			
			+ '			IF (@vPassesValidations!=0 AND @LSUPPLIER_DB_CDLOCATION IS NULL ) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SUPPLIER, 105), @FILE_ROW_NUMBER, ''SUPPLIER'', @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ '			IF ( @vPassesValidations!=0 AND (@LSUPPLIER_DB_LOCATION_TYPE != ''SU'') ) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '						@CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SUPPLIER, 105), @FILE_ROW_NUMBER, ''SUPPLIER'', @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '				SET @ovaResult = ''1'';' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ CHAR(13)
			+ @vOptionalStructureValidateORDER_CREATION_DATEStr
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @PROMISED_DELIVERY_DATE IS NULL)  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ CHAR(13);
			
		IF (LEN(@vOptionalStructureValidateORDER_CREATION_DATEStr) > 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '			IF (@vPassesValidations!=0 AND @PROMISED_DELIVERY_DATE <= @ORDER_CREATION_DATE)  ' + CHAR(13)
				+ '			BEGIN  ' + CHAR(13)
				+ '				SET @vPassesValidations = 0 ' + CHAR(13)
				+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '				VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
				+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '				CONTINUE; ' + CHAR(13)
				+ '			END  ' + CHAR(13)
				+ CHAR(13);
		END
		ELSE
		BEGIN
			 SET @vSPMasterLoad = @vSPMasterLoad 
				+ '				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NOT NULL AND  @PROMISED_DELIVERY_DATE <= @ORDER_CREATION_DATETIME_OLD )  ' + CHAR(13)
				+ '				BEGIN  ' + CHAR(13)
				+ '					SET @vPassesValidations = 0 ' + CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '					VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
				+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END  ' + CHAR(13)
				+ CHAR(13)
				+ '				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NULL AND  @PROMISED_DELIVERY_DATE <= @UPDATE_DATE )  ' + CHAR(13)
				+ '				BEGIN  ' + CHAR(13)
				+ '					SET @vPassesValidations = 0 ' + CHAR(13)
				+ '					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
				+ '					VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE, NULL, ''E'', GETDATE(),' + CHAR(13) 
				+ '						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
				+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
				+ '					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
				+ '					SET @ovaResult = ''1''; ' + CHAR(13) 
				+ '					FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
				+ '					CONTINUE; ' + CHAR(13)
				+ '				END  ' + CHAR(13)
				+ CHAR(13);
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad +
			+ '			IF (@vPassesValidations!=0 AND (SELECT dbo.VALIDATE_NON_WORK_DAY(@PROMISED_DELIVERY_DATE, @CDCALENDAR_DEST)) > 0)  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @vPassesValidations = 0  ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PROMISED_DELIVERY_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PROMISED_DELIVERY_DATE'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13) 
			+ CHAR(13)
			+ @vOptionalStructureValidateNECESSITY_DATEStr
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND (@PENDING_QUANTITY IS NULL OR @PENDING_QUANTITY <= 0))  ' + CHAR(13)
			+ '			BEGIN  ' + CHAR(13)
			+ '				SET @vPassesValidations = 0 ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PENDING_QUANTITY' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'PENDING_QUANTITY_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''PENDING_QUANTITY'', @FILE_NAME, @UPDATE_DATE )  ' + CHAR(13)
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  ' + CHAR(13)
			+ '				SET @ovaResult = ''1''; ' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END  ' + CHAR(13)
			+ CHAR(13)
			+ @vOptionalStructureValidateORDER_VALUEStr
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @UPDATE_DATE IS NULL)' + CHAR(13) 
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0' + CHAR(13) 
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13) 
			+ '				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_NULL, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_DATE'', @FILE_NAME, @UPDATE_DATE )' + CHAR(13) 
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13) 
			+ '				SET @ovaResult = ''1'';' + CHAR(13)
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @UPDATE_DATE > @DATE_SERVER_NO_TIME)' + CHAR(13) 
			+ '			BEGIN' + CHAR(13)
			+ '				SET @vPassesValidations = 0' + CHAR(13) 
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13) 
			+ '				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_DATE'', @FILE_NAME, @UPDATE_DATE )' + CHAR(13) 
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13) 
			+ '				SET @ovaResult = ''1'';' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@vPassesValidations!=0 AND @UPDATE_DATE_OLD IS NOT NULL AND @UPDATE_DATE < @UPDATE_DATE_OLD)' + CHAR(13) 
			+ '			BEGIN ' + CHAR(13)
			+ '				SET @vPassesValidations = 0' + CHAR(13) 
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) ' + CHAR(13) 
			+ '				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE' + (CASE WHEN EXISTS (SELECT 1 FROM TempPchNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = 'UPDATE_DATE_STR') THEN '_STR' ELSE  '' END)
			+ ', 105), @FILE_ROW_NUMBER, ''UPDATE_DATE'', @FILE_NAME, @UPDATE_DATE )' + CHAR(13) 
			+ '				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1' + CHAR(13) 
			+ '				SET @ovaResult = ''1'';' + CHAR(13) 
			+ '				FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '				CONTINUE; ' + CHAR(13)
			+ '			END' + CHAR(13) 
			+ CHAR(13)
			+ @vOptionalStructureValidateUNITSStr			
			+ CHAR(13);
			
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '			IF (@vPassesValidations = 1) ' + CHAR(13)
			+ '			BEGIN ' + CHAR(13);
			
		IF( LEN(@vOptionalStructureValidateORDER_CREATION_DATEStr) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad +
				+ '				IF( @ORDER_CREATION_DATETIME_OLD IS NULL ) ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				--+ '					SET @ORDER_CREATION_DATETIME = dbo.ADD_TIME_TO_DATE(@UPDATE_DATE, ''00:00'')' + CHAR(13)
				+ '					SET @ORDER_CREATION_DATETIME = @UPDATE_DATE;' + CHAR(13)
				+ '				END ' + CHAR(13) + CHAR(13)
				+ '				ELSE ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				--+ '					SET @ORDER_CREATION_DATETIME = dbo.ADD_TIME_TO_DATE(@ORDER_CREATION_DATETIME_OLD, ''00:00'')' + CHAR(13)
				+ '					SET @ORDER_CREATION_DATETIME = @ORDER_CREATION_DATETIME_OLD;' + CHAR(13)
				+ '				END ' + CHAR(13) + CHAR(13);
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '				SET @ORDER_CREATION_DATETIME = dbo.ADD_TIME_TO_DATE(@ORDER_CREATION_DATE, ''00:00'')' + CHAR(13);
				--+ '				SET @ORDER_CREATION_DATETIME = @ORDER_CREATION_DATE;'+ CHAR(13) + CHAR(13);
		END
		
		IF (CHARINDEX('PROMISED_DELIVERY_DATE', @vAllUpgradablesColumns) = 0)
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME_OLD; ' + CHAR(13);
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad + '				SET @PROMISED_DELIVERY_DATETIME = dbo.ADD_TIME_TO_DATE(@PROMISED_DELIVERY_DATE, @SHIPPING_TIME_DEST); ' + CHAR(13);
		END
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '				IF (@PO_TYPE = ''S'') ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					IF (@CDPURCHASE_ORDER_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SELECT @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK = MAX(O.PROMISED_DELIVERY_DATETIME) FROM TFSCM_CLI_PURCHASE_ORDERS O WHERE ' + CHAR(13)
			+ '						O.SKU = @SKU AND O.DESTINATION = @DESTINATION AND O.PO_TYPE = ''S'' AND dateadd(mi, datediff(mi, 0, O.PROMISED_DELIVERY_DATETIME), 0) =  dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) ' + CHAR(13)
			+ CHAR(13)+
			+ '						IF (@CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK IS NOT NULL) ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SET @PROMISED_DELIVERY_DATETIME = DATEADD(MS, 3, @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK)' + CHAR(13)
			+ '						END ' + CHAR(13) + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			-- El ajuste al calculo de la nueva PROMISED_DELIVERY_DATETIME va acá, en este IF deben entrar solo las que SKU = SKU_OLD AND DESTINATION = DESTINATION_OLD AND lo que va en el if actual, quedaria entonces algo asi:
			+ '						IF ( @SKU = @SKU_OLD AND @DESTINATION = @DESTINATION_OLD AND dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) = dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME_OLD), 0) ) ' + CHAR(13) 
			--'						IF ( dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) = dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME_OLD), 0) ) ' + CHAR(13)			
			+ '						BEGIN ' + CHAR(13)			
			+ '							SET @PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME_OLD ' + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '						ELSE ' + CHAR(13)
			+ '						BEGIN ' + CHAR(13)
			+ '							SELECT @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK = MAX(O.PROMISED_DELIVERY_DATETIME) FROM TFSCM_CLI_PURCHASE_ORDERS O WHERE ' + CHAR(13)
			+ '							O.SKU = @SKU AND O.DESTINATION = @DESTINATION AND O.PO_TYPE = ''S'' AND dateadd(mi, datediff(mi, 0, O.PROMISED_DELIVERY_DATETIME), 0) =  dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) ' + CHAR(13)
			+ CHAR(13)+
			+ '							IF (@CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK IS NOT NULL) ' + CHAR(13)
			+ '							BEGIN ' + CHAR(13)
			+ '								SET @PROMISED_DELIVERY_DATETIME = DATEADD(MS, 3, @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK)' + CHAR(13)
			+ '							END ' + CHAR(13) + CHAR(13)
			+ '						END ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				END ' + CHAR(13)
			--'				SET @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK = @PROMISED_DELIVERY_DATETIME' + CHAR(13)
			+ '' + CHAR(13);
			
			IF( LEN(@vOptionalStructureValidateNECESSITY_DATEStr) = 0 )
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '				SET @NECESSITY_DATETIME = ''1901-01-01 00:00'' '+ CHAR(13) + CHAR(13);
		END
		ELSE
		BEGIN
			SET @vSPMasterLoad = @vSPMasterLoad
				+ '				IF (@PO_TYPE = ''S'') ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @NECESSITY_DATETIME = ''1901-01-01 00:00'' ' + CHAR(13)
				+ '				END ' + CHAR(13)
				+ '				ELSE ' + CHAR(13)
				+ '				BEGIN ' + CHAR(13)
				+ '					SET @NECESSITY_DATETIME = dbo.ADD_TIME_TO_DATE(@NECESSITY_DATE, @SHIPPING_TIME_DEST) ' + CHAR(13)
				+ '				END '+ CHAR(13) + CHAR(13);
		END 
		
		SET @vSPMasterLoad = @vSPMasterLoad
			+ '				IF (@UPDATE_DATE < @DATE_SERVER_NO_TIME) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@UPDATE_DATE,@SHIPPING_TIME_DEST) ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = GETDATE() ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '               ' + CHAR(13)
			+ '				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR_DEST)) > 0) ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION ,@CDCALENDAR_DEST) ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '               ' + CHAR(13)
			+ '				SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION ' + CHAR(13)
			+ '               ' + CHAR(13)
			+ '               -- Priority for ''O'' Orders will be calculated after finish' + CHAR(13)
			+ '				IF ( @PO_TYPE = ''O'') ' + CHAR(13) 
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @PRIORITY       = @PRIORITY_OLD;' + CHAR(13)
			+ '					SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD;' + CHAR(13)
			+ '					' + CHAR(13)
			+ '					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @COLOR_CHANGE_DATE = ''1901-01-01 00:00:00'';' + CHAR(13)
			+ '						SET @MANAGED           = 1;' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE_OLD;' + CHAR(13)
			+ '						SET @MANAGED           = @MANAGED_OLD;' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '				/* 	EXEC SP_GET_PURCHASE_PRIORITY_VALUES @DATE_CALCULATION, @ORDER_CREATION_DATETIME, @PROMISED_DELIVERY_DATETIME, @NECESSITY_DATETIME, @CDCALENDAR_DEST, @PRIORITY OUTPUT, @PRIORITY_COLOR OUTPUT, @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT;' + CHAR(13)
			+ '					SET @COLOR_CHANGE_DATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@COLOR_CHANGE_DATE, @PRIORITY_COLOR_OLD,@PRIORITY_COLOR, @UPDATE_DATE, @CDPURCHASE_ORDER, 1);' + CHAR(13)
			+ '					SET @MANAGED = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDPURCHASE_ORDER);' + CHAR(13)
			+ '				*/ ' + CHAR(13)
			+ '				END ' + CHAR(13)
			+ '				ELSE ' + CHAR(13)
			+ '				IF (@PO_TYPE = ''S'') ' + CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					SET @PRIORITY = @PRIORITY_OLD' + CHAR(13)
			+ '					SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD' + CHAR(13)
			+ '					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @COLOR_CHANGE_DATE = ''1901-01-01 00:00:00'' ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE_OLD ' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @MANAGED = 1' + CHAR(13)
			+ '					END ' + CHAR(13)
			+ '					ELSE ' + CHAR(13)
			+ '					BEGIN ' + CHAR(13)
			+ '						SET @MANAGED = @MANAGED_OLD' + CHAR(13)
			+ '					END ' + CHAR(13)
			+  CHAR(13)
			+ '				END ' + CHAR(13)
			--'				ELSE IF ( @PO_TYPE = ''T'')' + CHAR(13)
			--'				BEGIN ' + CHAR(13)
			--'				END ' + CHAR(13)
			+ CHAR(13) 
			+ '				-- Establece la precision, en este caso solo es un campo y no fue necesario establecerla en las validaciones ' + CHAR(13)
			+ '				SET @PENDING_QUANTITY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PENDING_QUANTITY) ' + CHAR(13)
			+ CHAR(13)	  
			+ '				IF @CDPURCHASE_ORDER_OLD IS NULL' + CHAR(13)
			+ '				BEGIN' + CHAR(13)			
			+ '					SET @CREATION_DATE = GETDATE()' + CHAR(13)
			+ CHAR(13)
			+ '					INSERT INTO '+@vTableRealName+' ('+@vAllColumnsInsert+')' + CHAR(13)
			+ CHAR(13)
			+ '					VALUES ('+@vAllValuesInsert+')' + CHAR(13)
			+ '               END' + CHAR(13)
			+ '				ELSE ' +	CHAR(13)
			+ '				BEGIN ' + CHAR(13)
			+ '					UPDATE ' + @vTableRealName + CHAR(13)
			+ '					' + @vAllSetsColumnsAndValuesUpdate + CHAR(13)
			+ '					 WHERE '+@CDPKFIELD1+' = @'+@CDPKFIELD1+ ' AND ' + @CDPKFIELD2+' = @'+@CDPKFIELD2 + CHAR(13)
			+ '				END '+	CHAR(13)
			+ CHAR(13)
			+ CHAR(13)
			+ '				IF (@PO_TYPE = ''S'')' + CHAR(13)
			+ '				BEGIN' + CHAR(13)
			+ '					IF NOT EXISTS (SELECT TOP 1 1 FROM @vTEMPORARY_ASSOCIATED_BUFFER WHERE SKU = @SKU AND LOCATION = @DESTINATION)' + CHAR(13)
			+ '					BEGIN' + CHAR(13)
			+ '						INSERT INTO @vTEMPORARY_ASSOCIATED_BUFFER VALUES (@SKU, @DESTINATION)' + CHAR(13)
			+ '					END' + CHAR(13)
			+ '				END' + CHAR(13)
			+ CHAR(13)
			+ CHAR(13)
			+ '				SET @ovaHasProcessed = ''1'';'	 + CHAR(13)						
			+ '				UPDATE '+@vTableTempName + CHAR(13)
			+ '				   SET STATUS = 1 ' + CHAR(13)
			+ '				WHERE ID = @ID_TEMP '+ CHAR(13)
			+ + CHAR(13);
		
		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '				SET @vProcessPurchaseOrdersCount = @vProcessPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '			END ' + CHAR(13)
			+ '		END TRY' + CHAR(13)
			+ '		BEGIN CATCH ' + CHAR(13)
			+ '			SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 ' + CHAR(13)
			+ '			SET @ovaResult = ''1'';' + CHAR(13)
			+ '			SET @ovaMessage = '' ERROR_MESSAGE: ''+ERROR_MESSAGE(); ' + CHAR(13)
			+ CHAR(13)
			+ '			BEGIN TRY ' + CHAR(13)
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_UNEXPECTED_ERROR + ''<br><br>'' + @ovaMessage, NULL, ''E'', GETDATE(),' + CHAR(13) 
			+ '					    @CDPURCHASE_ORDER, @DESTINATION, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_DATE ) ' + CHAR(13)
			+ '			END TRY ' + CHAR(13)
			+ '			BEGIN CATCH ' + CHAR(13)
			+ '			END CATCH ' + CHAR(13)
			+ '		END CATCH ' + CHAR(13)
			+ CHAR(13)
			+ '		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1' + CHAR(13)
			+ '		IF (@vCOMMIT_COUNT = 10) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)
			+ '			COMMIT;' + CHAR(13)
			+ '			SET @vCOMMIT_COUNT = 0' + CHAR(13)
			+ '		END' + CHAR(13)
			+ '	' + CHAR(13)
			+ '		FETCH NEXT FROM cDataTempCursor INTO '+@vAllVariablesFetch + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ '	-- Check if there are Purchasing Orders to set in Quarantine' + CHAR(13)
			+ '	EXEC SP_SET_PURCHASE_ORDERS_IN_QUARANTINE @ivaIdExchange, @UPDATE_DATE, /*@ivaCreatorOrModifyUser,*/ @vErrorsPurchaseOrdersCount,@ivaErrorValidations, @ovaResultQuarantine OUTPUT, @ovaMessageQuarantine OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageQuarantine; ' + CHAR(13)
			+ CHAR(13)
			+ '	IF @ovaResultQuarantine = ''1'' ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		SET @ovaResult = ''1'';' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			+ '	EXEC FINISHED_PURCHASE_ORDERS @ivaIdExchange, @UPDATE_DATE, /*@DATE_CALCULATION_FINALIZATION,*/ @ivaCreatorOrModifyUser, @ovaResultFinished OUTPUT, @ovaMessageFinished OUTPUT;' + CHAR(13)
			+ CHAR(13)
			+ '	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageFinished; ' + CHAR(13)
			+ CHAR(13)
			+ '	IF @ovaResultFinished = ''1'' ' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		SET @ovaResult = ''1'';' + CHAR(13)
			+ '	END ' + CHAR(13)	
			+ CHAR(13)	
			+ '	EXEC AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS @DATE_CALCULATION_FINALIZATION, @ovaResultAfthetF OUTPUT , @ovaMessageAfthetF OUTPUT' + CHAR(13)	 
			+ CHAR(13)
			+ '	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + '', '' + @ovaMessageAfthetF;' + CHAR(13)	 
			+ CHAR(13)
			+ '	IF @ovaResultAfthetF = ''1''' + CHAR(13)	 
			+ '	BEGIN' + CHAR(13)	
			+ '		SET @ovaResult = ''1''' + CHAR(13)	 
			+ '	END ' + CHAR(13)
			+ CHAR(13) + CHAR(13)
			+ '	CLOSE cDataTempCursor' + CHAR(13)
			+ '	DEALLOCATE cDataTempCursor' + CHAR(13)					
			+ '	SET @vTrace = ''go inside the cursor cDataTempCursor  ''' + CHAR(13)						
			+  CHAR(13)
			+ '	IF EXISTS (SELECT TOP 1 1 FROM @vTEMPORARY_ASSOCIATED_BUFFER)' + CHAR(13)
			+ '	BEGIN' + CHAR(13)			
			+ '		DECLARE @SKU_TEMPORARY AS VARCHAR(50)' + CHAR(13)
			+ '		DECLARE @LOCATION_TEMPORARY AS VARCHAR(50)' + CHAR(13)
			+ '		DECLARE @SUM_PENDING_QUANTITY_TEMPORARY AS NUMERIC(17,5)' + CHAR(13)
			+ '		DECLARE @TOTAL_INVENTORY_ON_PURCHASING AS NUMERIC(17,5)' + CHAR(13)
			+ CHAR(13)
			+ '		DECLARE SUM_PENDING_QUANTITY_CURSOR CURSOR FAST_FORWARD FOR ' + CHAR(13)
			+ '		 SELECT SKU, LOCATION ' + CHAR(13)
			+ '		   FROM @vTEMPORARY_ASSOCIATED_BUFFER' + CHAR(13)
			+ CHAR(13)
			+ '		OPEN SUM_PENDING_QUANTITY_CURSOR   ' + CHAR(13)		
			+ CHAR(13)
			+ '		FETCH NEXT FROM SUM_PENDING_QUANTITY_CURSOR INTO @SKU_TEMPORARY, @LOCATION_TEMPORARY ' + CHAR(13)
			+ '		WHILE (@@FETCH_STATUS = 0 ) ' + CHAR(13)
			+ '		BEGIN ' + CHAR(13)					
			+ '			SELECT @SUM_PENDING_QUANTITY_TEMPORARY = SUM(PO.PENDING_QUANTITY) ' + CHAR(13)
			+ '			  FROM TFSCM_CLI_PURCHASE_ORDERS PO, TFSCM_CLI_BUFFER BUFFER' + CHAR(13)
			+ '			 WHERE PO.SKU = @SKU_TEMPORARY AND PO.DESTINATION = @LOCATION_TEMPORARY AND PO.PO_TYPE = ''S''' + CHAR(13)
			+ '			   AND PO.SKU = BUFFER.SKU AND PO.DESTINATION = BUFFER.LOCATION ' + CHAR(13)
			+ '			   AND PO.EXCHANGES_IN_QUARANTINE = 0 AND PO.FINALIZATION_DATE = ''1901-01-01 00:00:00''; ' + CHAR(13)
			+ CHAR(13)
			+ '			SELECT @TOTAL_INVENTORY_ON_PURCHASING = B.TOTAL_INVENTORY_ON_PURCHASING ' + CHAR(13)
			+ '			  FROM TFSCM_CLI_BUFFER B ' + CHAR(13)
			+ '			 WHERE B.SKU = @SKU_TEMPORARY AND B.LOCATION = @LOCATION_TEMPORARY ' + CHAR(13)
			+ CHAR(13)
			+ '			IF (@SUM_PENDING_QUANTITY_TEMPORARY <> @TOTAL_INVENTORY_ON_PURCHASING)' + CHAR(13)
			+ '			BEGIN' + CHAR(13)						
			+ '				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  ' + CHAR(13)
			+ '				VALUES (@vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT, NULL, ''A'', GETDATE(),' + CHAR(13) 
			+ '					    @SKU_TEMPORARY, @LOCATION_TEMPORARY, FORMAT(CONVERT(NUMERIC(12,2), @SUM_PENDING_QUANTITY_TEMPORARY, 105),  ''#0.00''), @FILE_ROW_NUMBER, ''PENDING_QUANTITY'', @FILE_NAME, GETDATE() ) ' + CHAR(13)
			+ '			END' + CHAR(13)
			+ CHAR(13)	
			+ '			FETCH NEXT FROM SUM_PENDING_QUANTITY_CURSOR INTO @SKU_TEMPORARY, @LOCATION_TEMPORARY ' + CHAR(13)				
			+ '		END' + CHAR(13)
			+ CHAR(13)
			+ '		CLOSE SUM_PENDING_QUANTITY_CURSOR			' + CHAR(13)
			+ '		DEALLOCATE SUM_PENDING_QUANTITY_CURSOR	' + CHAR(13)
			+ '	END' + CHAR(13)
			+ CHAR(13)
			-- Colocar script que recorra la tabla temporal y verifique la sumatoria de
			-- las ordenes de produccion
			+ '';

		SET @vSPMasterLoad = @vSPMasterLoad + CHAR(13)
			+ '	IF(@ovaHasProcessed = ''1'')' + CHAR(13)
			+ '	BEGIN ' + CHAR(13)
			+ '		UPDATE TBL ' + CHAR(13)
			+ '		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() ' + CHAR(13)
			+ '		  FROM TFSCM_COM_TABLES TBL ' + CHAR(13)
			+ '		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) ' + CHAR(13) 
			+ '		   AND INTER.CDINTERFACE = '+CAST(@ivaCodInterface AS VARCHAR)+'' + CHAR(13)
			+ '	END ' + CHAR(13)		
			+ CHAR(13) 
			+ '	SET @ovaMessage =  @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS+'':'' + CAST ( @vProcessPurchaseOrdersCount AS varchar ) + '', ''+ @vMSG_DEX_PURCHASE_ERROR_ORDERS+'':'' + CAST ( @vErrorsPurchaseOrdersCount AS varchar ) + @ovaMessageFinishedTotal ' +
			+ CHAR(13) 
			+ '	SET @vTotalErrorsPurchaseOrders = (@vErrorsPurchaseOrdersCount + @ivaErrorValidations)' + CHAR(13)				
			+ CHAR(13) 
			+ '	SELECT @vMessagesAfterDataExchange = P.PARAM_VALUE ' + CHAR(13)	
			+ '	  FROM TFSCM_COM_PARAMS P ' + CHAR(13)	
			+ '	 WHERE P.CDPARAM = ''MESSAGES_AFTER_DATAEXCHANGE''' + CHAR(13)	
			+ CHAR(13) 
			+ '	IF( @vTotalErrorsPurchaseOrders > 0 AND @vMessagesAfterDataExchange = ''Y'')' + CHAR(13)	
			+ '	BEGIN	' + CHAR(13)						
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''ODE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)	
			+ '		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsPurchaseOrders, ''ODE'', ''PURCHASE_ORDERS_GENERAL_PRIORITIZING'', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT' + CHAR(13)	
			+ '	END		' + CHAR(13)			
			+ CHAR(13) 
			+ '	IF(@vTotalErrorsPurchaseOrders = 0 AND @vMessagesAfterDataExchange = ''Y'' AND @ovaHasProcessed = ''1'')' + CHAR(13)	
			+ '	BEGIN ' + CHAR(13)			
			+ '		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION ''ODE'', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT' + CHAR(13)			
			+ '	END' + CHAR(13)
			+ 'END TRY ' + CHAR(13)							
			+ 'BEGIN CATCH ' + CHAR(13)
			+ '	SET @ovaResult  = ''1'';' + CHAR(13)
			+ '	SET @ovaMessage = ''ERROR_NUMBER: '' + CAST(ERROR_NUMBER() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_SEVERITY: '' + CAST(ERROR_SEVERITY() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_STATE: '' + CAST(ERROR_STATE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_PROCEDURE: '' + ISNULL(ERROR_PROCEDURE(), ''[dbo].[PURCHASE_ORDERS]'') ' + CHAR(13)
			+ '		+ '' ERROR_LINE: '' + CAST(ERROR_LINE() AS VARCHAR) ' + CHAR(13)
			+ '		+ '' ERROR_MESSAGE: '' + ERROR_MESSAGE()' + CHAR(13)
			+ CHAR(13)
			+ '	IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (-1,0,1)) ' + CHAR(13)
  			+ '	BEGIN ' + CHAR(13)
  			+ '		IF ((SELECT CURSOR_STATUS(''global'',''cDataTempCursor'')) IN (0,1)) ' + CHAR(13)
  			+ '		BEGIN ' + CHAR(13)
  			+ '			CLOSE cDataTempCursor; ' + CHAR(13)
   			+ '		END ' + CHAR(13)
   			+ '		DEALLOCATE cDataTempCursor; ' + CHAR(13)
   			+ '	END ' + CHAR(13)
			+ 'END CATCH ' + CHAR(13)
			+ 'END ';
		
		
		-------------------------------------------------------
		--PRINT @vSPMasterLoad
		/*
		DECLARE @Counter INT
		SET @Counter = 0
		DECLARE @TotalPrints INT
		SET @TotalPrints = (LEN(@vSPMasterLoad) / 4000) + 1
		WHILE @Counter < @TotalPrints 
		BEGIN
		    -- Do your printing...
		    
		    PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, (@Counter * 4000) + 4000)
		    PRINT '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
		    SET @Counter = @Counter + 1
		    
		END
		--PRINT  SUBSTRING(@vSPMasterLoad, (@Counter * 4000) + 1, LEN(@vSPMasterLoad) )
		*/
		-------------------------------------------------------
		
		EXEC (@vSPMasterLoad)
		
	  SET @vTrace = 'End of the cInterfaceColumnConfiguration  '  
		--Procedure result
		SET @ovaResult = '0';
		SET @ovaMessage = 'sucessDataExchangeProcess';
	    --PRINT	@vTrace	
	END TRY
	
	BEGIN CATCH
	PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[MASTER_PURCHASE_ORDERS_BUILDER]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		RAISERROR (@ovaMessage, 
				   16, 
				   @ovaResult 
				   );  
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[PRODUCTION_ORDERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PRODUCTION_ORDERS] 
	@ivaIdExchange NUMERIC(10), 
	@ivaTempLoadDate DATE , 
	@ivaCreatorOrModifyUser NVARCHAR(MAX), 
	@ivaErrorValidations NUMERIC(10), 
	@ovaResult VARCHAR(1) OUTPUT, 
	@ovaMessage NVARCHAR(MAX) OUTPUT, 
	@ovaHasProcessed VARCHAR(1) OUTPUT 
AS 
DECLARE @vTrace AS NVARCHAR(MAX); 
DECLARE @CDORDER_ERROR_LOG AS VARCHAR(50); 
DECLARE @vDuplicatedOrdersCountTemp AS INT = 0; 
DECLARE @vErrorsProductionOrdersCount AS INT = 0; 
DECLARE @vProcessProductionOrdersCount AS INT = 0; 
DECLARE @vErrorsOrphansProductionOrdersCount AS INT = 0; 
DECLARE @ovaResultFinished AS VARCHAR(1); 
DECLARE @ovaMessageFinished AS NVARCHAR(MAX); 
DECLARE @ovaResultQuarantine AS NVARCHAR(MAX);
DECLARE @ovaMessageQuarantine AS NVARCHAR(MAX);
DECLARE @ovaMessageFinishedTotal AS NVARCHAR(MAX) = ''; 
DECLARE @vPassesValidations AS SMALLINT = 1; 
DECLARE @vCountIntTmp AS INT = 0; 
DECLARE @ivaCreatorOrModifyUserAux AS VARCHAR(50); 
DECLARE @NON_WORKING_DAYS AS NUMERIC(10,2); 
DECLARE @ORDER_MODIFY_DATE_BEFORE AS DATETIME; 
DECLARE @DATE_SERVER_NO_TIME AS DATE; 
DECLARE @DATE_CALCULATION AS DATETIME; 
DECLARE @DATE_CALCULATION_FINALIZATION AS DATETIME; 
DECLARE @ovaPriorityResul NUMERIC(10,2) ;
DECLARE @ovaYellowZoneStart NUMERIC(5,2);
DECLARE @ovaRedZoneStart NUMERIC(5,2);
DECLARE @skuBefore AS VARCHAR(50);
DECLARE @cdDestinationBefore AS VARCHAR(50);
DECLARE @sumProductionStock NUMERIC(38,5);
DECLARE @ovaResultAfthetF VARCHAR(1);
DECLARE @ovaMessageAfthetF VARCHAR(MAX);
DECLARE @ovaResultRemoveViewNot VARCHAR(1);
DECLARE @ovaMessageRemoveViewNot VARCHAR(MAX);
DECLARE @ovaResultAddViewNot VARCHAR(1);
DECLARE @ovaMessageAddViewNot VARCHAR(MAX);
DECLARE @vTotalErrorsProductionOrders NUMERIC(8) = 0; 
DECLARE @vMessagesAfterDataExchange VARCHAR = 'N'; 
DECLARE @LOCATION_TYPE AS VARCHAR(50);
DECLARE @BUFFER_SKU AS VARCHAR(50);
DECLARE @PROGRESS_PERCENTAGE_AUX AS NUMERIC(17,5) = 0; 
DECLARE @CDORDER_CHILD AS VARCHAR(50), @MODIFY_DATE_CHILD AS DATETIME, @MODIFY_USER_CHILD AS VARCHAR(50), @TOTAL_AMOUNT_CHILD AS NUMERIC(17,2); 
DECLARE @vDummy AS VARCHAR(10) = ''; 
DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( 
	CDORDER         VARCHAR(50), 
	SKU             VARCHAR(50), 
	LOCATION        VARCHAR(50), 
	FILE_NAME       VARCHAR(500), 
	FILE_ROW_NUMBER INT, 
	PRIMARY KEY (CDORDER, SKU, LOCATION) 
) 


BEGIN 

BEGIN TRY 
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements. 
	SET NOCOUNT ON; 
	SET @ovaResult = '0';
	SET @ovaMessage = '';
	SET @ovaHasProcessed = '0';
	SET @ivaCreatorOrModifyUserAux = @ivaCreatorOrModifyUser; 
	SET @ORDER_MODIFY_DATE_BEFORE = NULL; 
	SET @vTrace = 'Setting the cursor cDataTempCursor  '
	SET @DATE_SERVER_NO_TIME = GETDATE(); 
	SET @DATE_CALCULATION = GETDATE(); 
	SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION; 
	SET @skuBefore= '';
	SET @cdDestinationBefore ='';
 DECLARE @CDDESTINATION AS VARCHAR(50) , @CDFAMILY AS VARCHAR(50) , @CDORDER AS VARCHAR(50) , @CDORDER_TYPE AS VARCHAR(1) , @ORDER_MODIFY_DATE AS DATETIME , @PENDING_AMOUNT AS NUMERIC(19,2) , @PROMISED_DELIVERY_DATE AS DATETIME , @REAL_RELEASE_DATE AS DATETIME , @SKU AS VARCHAR(50) , @TOTAL_AMOUNT AS NUMERIC(19,2) ;
 DECLARE  @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE AS VARCHAR(50)
		, @CDFAMILY_DB 					VARCHAR(50)
		, @SHIPPING_TIME 				VARCHAR(5)
		, @CDCALENDAR 					NUMERIC(4,0) 
		, @CDPLANT 						VARCHAR(50)
		, @INITIAL_BUFFER 				NUMERIC(8,0)
		, @CLEARENCE_BUFFER 				NUMERIC(10,0)
		, @PRODUCTION_BUFFER				NUMERIC(10,0)
		, @RECOMMENDED_RELEASE_DATE 		DATETIME
		, @RELEASE_STATUS 				VARCHAR(1)
		, @FINALIZATION_DATE				DATETIME
		, @PRIORITY 						NUMERIC(17,2)
		, @PRIORITY_COLOR 				VARCHAR(50)
		, @LAST_COLOR_UPDATE				DATETIME
		, @MANAGED_ORDER 				BIT
		, @ID_TEMP 						NUMERIC(18,0)
		, @CDLOCATION 					VARCHAR(50)
		, @YELLOW_ZONE_START 			NUMERIC(5,2)
		, @RED_ZONE_START 				NUMERIC(5,2)
		, @NEW_CREATION_DATE 			DATETIME
		, @CURRENT_NEW_CREATION_DATE 	DATETIME = GETDATE()
		, @PRODUCTION_PROBLEM_DATE 		DATETIME = '1901-01-01'
		, @QUARANTINE_DATE 				DATETIME = '1901-01-01'
		, @PRODUCTION_PROBLEM_CAUSE 		VARCHAR(10)
		, @RELEASE_PROBLEM            	VARCHAR(10)
		, @RELEASE_PROBLEM_DATE       	DATETIME = '1901-01-01'
		, @RELEASE_PROBLEM_BY_DEFAULT	VARCHAR(10)
		, @RELEASE_PROBLEM_NOT_ASSIGNED	VARCHAR(10)
		, @vCOMMIT_COUNT               	NUMERIC(4) = 0
		, @PROMISED_DELIVERY_DATE_STR                             AS VARCHAR(50)
		, @REAL_RELEASE_DATE_STR                                  AS VARCHAR(50)
		, @PENDING_AMOUNT_STR                                     AS VARCHAR(50)
		, @ORDER_MODIFY_DATE_STR                                  AS VARCHAR(50)
		, @TOTAL_AMOUNT_STR                                       AS VARCHAR(50)
		, @DATE_INSERTION_STR                                     AS VARCHAR(50);
 DECLARE  @CDORDER_OLD 					VARCHAR(50)
		, @CDFAMILY_OLD 					VARCHAR(50)
		, @CDPLANT_OLD 					VARCHAR(50)
		, @PRIORITY_COLOR_OLD 			VARCHAR(50)
		, @LAST_COLOR_UPDATE_OLD 		DATETIME
		, @INITIAL_BUFFER_OLD 			NUMERIC(8,0)
		, @CLEARENCE_BUFFER_OLD 			NUMERIC(10,0)
		, @FINALIZATION_DATE_OLD 		DATETIME
		, @SHIPPING_TIME_OLD 			VARCHAR(5)
		, @CDCALENDAR_OLD 				NUMERIC(4,0)
		, @CDPARENT_ORDER_OLD 			VARCHAR(50)
		, @CDORDER_TYPE_OLD 				VARCHAR(1)
		, @SKU_OLD 						VARCHAR(50)
		, @CDDESTINATION_OLD 			VARCHAR(50)
		, @PROMISED_DELIVERY_DATE_OLD 	DATETIME
		, @REAL_RELEASE_DATE_OLD 		DATETIME
		, @TOTAL_AMOUNT_OLD 				NUMERIC(17,2)
		, @PENDING_AMOUNT_OLD 			NUMERIC(17,2)
		, @ORDER_VALUE_OLD 				NUMERIC(17,2)
		, @CDWORKPLACE_OLD 				VARCHAR(50)
		, @ORDER_MODIFY_DATE_OLD			DATETIME
		, @RECOMMENDED_RELEASE_DATE_OLD 	DATETIME
		, @PRIORITY_OLD 					NUMERIC(20,5)
		, @RELEASE_STATUS_OLD 			VARCHAR(1)
		, @MANAGED_ORDER_OLD				BIT
		, @PROGRESS_PERCENTAGE_OLD 		NUMERIC(17,5)
		, @TOUCH_TIME 					NUMERIC(17,5)
		, @FAMILY_TOUCH_TIME 			NUMERIC(17,5)
		, @DATE_INSERTION 				DATETIME
		, @RELEASE_PROBLEM_OLD         	VARCHAR(10)
		, @RELEASE_PROBLEM_DATE_OLD    	DATETIME ;

	BEGIN TRY 

		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS AS NVARCHAR(MAX); 
		DECLARE @vMSG_PRODUCTION_ORDERS_ORPHANS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT AS NVARCHAR(MAX);
		DECLARE @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY AS NVARCHAR(MAX); 

		BEGIN TRY  

			SELECT @vLanguage = PARAM_VALUE  
			  FROM TFSCM_COM_PARAMS 
			WHERE CDPARAM = 'DEFAULT_LANGUAGE' 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT, 
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_TYPE_INVAL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'PRODUCTION_ORDERS_ORPHANS', @vLanguage, '', '', '', @vMSG_PRODUCTION_ORDERS_ORPHANS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_PARENT_CHILD_ERROR', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NOWD', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LE0', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LE0', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GT_NOW', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LT_0', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY OUTPUT

		END TRY  
		BEGIN CATCH  
			SET @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_DUPLICATED' 
			SET @vMSG_DATA_EXCHANGE_COUNT_CDORDER_DUPL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_COUNT_CDORDER_DUPLICATED' 
			SET @vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDFAMILY_NOT_FOUND' 
			SET @vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPLANT_IS_NULL' 
			SET @vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL = 'DATA_EXCHANGE_PRODUCTIONORDER_CDORDER_TYPE_INVALID' 
			SET @vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND' 
			SET @vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND' 
			SET @vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW = 'DATA_EXCHANGE_REAL_RELEASE_DATE_GREATER_THAN_NOW' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR = 'DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS = 'SUCESSFUL_ORDERS' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS = 'ERRORS_ORDERS' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS = 'ELIMINATED_ORPHANS_ORDERS' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ORPHANS = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_ORPHANS' 
			SET @vMSG_PRODUCTION_ORDERS_ORPHANS = 'CDORDER_ORPHANS' 
			SET @vMSG_DATA_EXCHANGE_CDPARENT_NOT_FOUND = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDPARENT_ORDER_NOT_FOUND' 
			SET @vMSG_DATA_EXCHANGE_PARENT_CHILD_ERROR = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_SHOULD_NOT_BE_PARENT_AND_CHILD' 
			SET @vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DELIVERY_DATE_IS_NULL' 
			SET @vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD = 'DATA_EXCHANGE_PRODUCTION_ORDERS_PROMISED_DATE_NO_WORK_DAY' 
			SET @vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0 = 'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT_LESS_THAN_OR_EQUAL_TO_Zero' 
			SET @vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0 = 'DATA_EXCHANGE_PRODUCTION_ORDERS_TOTAL_AMOUNT_LESS_THAN_OR_EQUAL_TO_Zero' 
			SET @vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW = 'DATA_EXCHANGE_PRODUCTION_ORDERS_MODIFY_DATE_GREATER_THAN_NOW' 
			SET @vMSG_DATA_EXCHANGE_ORDER_VALUE_LT_0 = 'DATA_EXCHANGE_PRODUCTION_ORDERS_ORDER_VALUE_LESS_THAN_ZERO' 
			SET @vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND = 'DATA_EXCHANGE_PRODUCTION_ORDERS_DEST_NOT_FOUND' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL' 
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL = 'DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_BUFFER_NULL' 
			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL = 'DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL' 
			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT = 'DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_CURRENT'
			SET @vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD = 'DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD'
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT = 'DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT'
			SET @vMSG_DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR = 'DATA_EXCHANGE_PROGRESS_PERCENTAGE_ERROR'
			SET @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY = 'DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY'
		END CATCH 

		-- ----------------------------------------------------------------------------------- 
		-- IAFJ 20201118: Since v5.3.0, add var File_name and File_row_number   
		-- ----------------------------------------------------------------------------------- 
		DECLARE @FILE_NAME AS VARCHAR(500); 
		DECLARE @FILE_ROW_NUMBER AS INT; 

		-- ----------------------------------------------------------------------------------- 
		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  
		-- ---------------------------------------------------------------------------------- 
		IF OBJECT_ID('tempdb..#DuplicateProductionTemp') IS NOT NULL  
			DROP TABLE #DuplicateProductionTemp; 

		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
 	       RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  INTO #DuplicateProductionTemp 
		  FROM [dbo].[TFSCM_COM_LOG] 
		 WHERE 1 = 2; 

		INSERT INTO #DuplicateProductionTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
                                 RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT [POTDUP].[COUNTER1], @vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED + CAST([POTDUP].[COUNTER1] AS VARCHAR) + '.', NULL, 'E', GETDATE(), 
			   [POT].[CDORDER], [POT].[CDDESTINATION], NULL, [POT].[FILE_ROW_NUMBER], 'CDORDER', [POT].[FILE_NAME], @ivaTempLoadDate 
		  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [POT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDORDER], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
				  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]        = @ivaIdExchange 
				   AND [TMP].[ORDER_MODIFY_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[CDORDER]  
				HAVING COUNT(1) > 1) AS [POTDUP] 
			ON ([POT].[IDEXCHANGE]        = @ivaIdExchange 
			AND [POT].[ORDER_MODIFY_DATE] = @ivaTempLoadDate 
			AND [POTDUP].[CDORDER]        = [POT].[CDORDER] 
			AND [POT].[FILE_ROW_NUMBER]   = [POTDUP].[FILE_ROW_NUMBER]); 

		SELECT @vDuplicatedOrdersCountTemp = SUM(COUNTER1) FROM #DuplicateProductionTemp;
		SET @vErrorsProductionOrdersCount  = @vErrorsProductionOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);

		-- Counting repeated events 
		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  FROM #DuplicateProductionTemp; 

		DELETE [POT] 
		  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [POT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDORDER]
				  FROM [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]        = @ivaIdExchange 
				   AND [TMP].[ORDER_MODIFY_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[CDORDER]  
				HAVING COUNT(1) > 1) AS [POTDUP] 
			ON ([POT].[IDEXCHANGE]        = @ivaIdExchange 
			AND [POT].[ORDER_MODIFY_DATE] = @ivaTempLoadDate 
			AND [POTDUP].[CDORDER]        = [POT].[CDORDER]); 

		SET @vProcessProductionOrdersCount = @vProcessProductionOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);

		/*DECLARE cErrorLogCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
		 SELECT tempo.COUNTER1, tempo.CDORDER, tempo.FILE_NAME, tempo.FILE_ROW_NUMBER  
		   FROM ( SELECT COUNT(TMP.CDORDER) AS COUNTER1, TMP.CDORDER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER 
				    FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
				   WHERE TMP.IDEXCHANGE = @ivaIdExchange 
				 	 AND TMP.ORDER_MODIFY_DATE = @ivaTempLoadDate
				   GROUP BY TMP.CDORDER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER 
				 ) tempo 
		  WHERE tempo.COUNTER1 >1 

		OPEN cErrorLogCursor 
		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @CDORDER_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER 

		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
			VALUES (@vMSG_DATA_EXCHANGE_CDORDER_DUPLICATED, NULL, 'E', GETDATE(), 
				    @CDORDER_ERROR_LOG, NULL, CONVERT(VARCHAR, @CDORDER_ERROR_LOG, 105), @FILE_ROW_NUMBER, 'CDORDER_ERROR_LOG', @FILE_NAME, @ivaTempLoadDate) 

			SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + @vDuplicatedOrdersCountTemp 
			SET @ovaResult = '1'; 

			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @CDORDER_ERROR_LOG 
		END 
		CLOSE cErrorLogCursor 
		DEALLOCATE cErrorLogCursor */ 
	END TRY 
	BEGIN CATCH 
	END CATCH 

	-- --------------------------------------------------------------------------------------- 

	SELECT TOP(1) @PRODUCTION_PROBLEM_CAUSE = C.CDCAUSE 
	  FROM TFSCM_CLI_CAUSES C 
	 WHERE C.DSCAUSE   = 'cause_none_type' 
	   AND C.IS_SYSTEM = 'Y'; 

	-- --------------------------------------------------------------------------------------- 
	-- OHLO 20191224: Since v4.14.0, add Release Problem and Release Problem Date 
	-- --------------------------------------------------------------------------------------- 
	SELECT TOP(1) @RELEASE_PROBLEM_BY_DEFAULT = C.CDCAUSE 
	  FROM TFSCM_CLI_CAUSES C 
	 WHERE C.DSCAUSE   = 'release_problem_none_cause' 
	   AND C.IS_SYSTEM = 'Y'; 

	SELECT TOP(1) @RELEASE_PROBLEM_NOT_ASSIGNED = C.CDCAUSE 
	  FROM TFSCM_CLI_CAUSES C 
	 WHERE C.DSCAUSE   = 'release_problem_not_assigned_cause' 
	   AND C.IS_SYSTEM = 'Y'; 
	-- --------------------------------------------------------------------------------------- 

	DECLARE cDataTempCursor CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
	 SELECT TMP.CDDESTINATION,TMP.CDFAMILY,TMP.CDORDER,TMP.CDORDER_TYPE,TMP.ORDER_MODIFY_DATE,TMP.PENDING_AMOUNT,TMP.PROMISED_DELIVERY_DATE,TMP.REAL_RELEASE_DATE,TMP.SKU,TMP.TOTAL_AMOUNT, CPF.CDFAMILY, CC.SHIPPING_TIME, CC.CDCALENDAR, CPF.CDLOCATION, CPF.BUFFER, 0, NULL, TMP.ID, CL.CDLOCATION, CPF.YELLOW_ZONE_START, CPF.RED_ZONE_START, CL.LOCATION_TYPE, B.SKU AS BUFFER_SKU, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER, POOLD.CDORDER, POOLD.CDFAMILY, POOLD.CDPLANT, POOLD.PRIORITY_COLOR, POOLD.LAST_COLOR_UPDATE, POOLD.INITIAL_BUFFER, POOLD.CLEARENCE_BUFFER, POOLD.FINALIZATION_DATE, CC_OLD.SHIPPING_TIME, CC_OLD.CDCALENDAR, POOLD.CDPARENT_ORDER, POOLD.CDORDER_TYPE, POOLD.SKU, POOLD.CDDESTINATION, POOLD.PROMISED_DELIVERY_DATE, POOLD.REAL_RELEASE_DATE, POOLD.TOTAL_AMOUNT, POOLD.PENDING_AMOUNT, POOLD.ORDER_VALUE, POOLD.CDWORKPLACE, POOLD.ORDER_MODIFY_DATE, POOLD.RECOMMENDED_RELEASE_DATE, POOLD.PRIORITY, POOLD.RELEASE_STATUS, POOLD.MANAGED_ORDER, POOLD.PROGRESS_PERCENTAGE, POOLD.TOUCH_TIME, CPF.TOUCH_TIME, TMP.DATE_INSERTION, POOLD.RELEASE_PROBLEM, POOLD.RELEASE_PROBLEM_DATE, TMP.PROMISED_DELIVERY_DATE_STR, TMP.REAL_RELEASE_DATE_STR, TMP.PENDING_AMOUNT_STR, TMP.ORDER_MODIFY_DATE_STR, TMP.TOTAL_AMOUNT_STR, TMP.DATE_INSERTION_STR
	   FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
	   LEFT OUTER JOIN TFSCM_CLI_PRODUCTION_ORDERS POOLD  ON (TMP.CDORDER = POOLD.CDORDER) 
	   LEFT OUTER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF    ON (CPF.CDFAMILY = TMP.CDFAMILY AND CPF.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION		   CL     ON (CL.CDLOCATION = CPF.CDLOCATION AND CL.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION		   CL_OLD ON (CL_OLD.CDLOCATION = POOLD.CDPLANT AND CL_OLD.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR		   CC     ON (CC.CDCALENDAR = CL.CDCALENDAR AND CC.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR		   CC_OLD ON (CC_OLD.CDCALENDAR = CL_OLD.CDCALENDAR AND CC_OLD.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_BUFFER  		   B      ON (B.SKU = TMP.SKU AND B.LOCATION = TMP.CDDESTINATION AND B.INACTIVE = 0)  
	  WHERE TMP.IDEXCHANGE = @ivaIdExchange 
		AND TMP.ORDER_MODIFY_DATE = @ivaTempLoadDate
		AND TMP.CDORDER NOT IN 
		   ( 
			SELECT TEMPO.CDORDER 
			  FROM 
			      ( 
				   SELECT COUNT(TMPAUX.CDORDER) AS COUNTER1, TMPAUX.CDORDER 
				     FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMPAUX 
				    WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange 
					  AND TMPAUX.ORDER_MODIFY_DATE = @ivaTempLoadDate 
				    GROUP BY TMPAUX.CDORDER 
			      ) TEMPO 
			 WHERE TEMPO.COUNTER1 >1 
		   ) 
	  ORDER BY TMP.ORDER_MODIFY_DATE,TMP.SKU, TMP.CDDESTINATION 

	OPEN cDataTempCursor; 

	FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR


	SET @vTrace = 'go inside the cursor cDataTempCursor  ';

	WHILE (@@FETCH_STATUS = 0 ) 
	BEGIN 
		BEGIN TRY 


			SET @vPassesValidations = 1 
			SET @ORDER_MODIFY_DATE_BEFORE = @ORDER_MODIFY_DATE;

			IF (@vPassesValidations!=0 AND @FINALIZATION_DATE_OLD IS NOT NULL) 
			BEGIN   
				SET @vPassesValidations = 0  

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)   
				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDORDER_FINISHED, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @FINALIZATION_DATE_OLD, 105), @FILE_ROW_NUMBER, 'FINALIZATION_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)   

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1   
				SET @ovaResult = '1';  

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  

			IF @CDORDER_OLD IS NOT NULL
			BEGIN 
				SET @vDummy = ''; 
				SET @CDORDER_TYPE = @CDORDER_TYPE_OLD 
				IF ( @CDFAMILY != @CDFAMILY_OLD AND @CDFAMILY_DB IS NOT NULL)
				BEGIN 
					SET @TOUCH_TIME = @FAMILY_TOUCH_TIME

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CHANGE_CDFAMILY, NULL, 'A', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE)
				END

				IF ( @CDFAMILY = @CDFAMILY_OLD)
				BEGIN 
					SET @CDFAMILY = @CDFAMILY_OLD 
					SET @INITIAL_BUFFER = @INITIAL_BUFFER_OLD 
					SET @SHIPPING_TIME  = @SHIPPING_TIME_OLD 
				END
				SET @PROGRESS_PERCENTAGE_AUX = @PROGRESS_PERCENTAGE_OLD 
			END 

			-- ------------------------------------------------------------------------------- 

			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NULL)
			BEGIN 
				SET @vPassesValidations = 0

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_NULL, NULL, 'E', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE_STR, 105), @FILE_ROW_NUMBER, 'ORDER_MODIFY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NOT NULL AND @ORDER_MODIFY_DATE > GETDATE())
			BEGIN
				SET @vPassesValidations = 0

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_GREATER_THAN_CURRENT, NULL, 'E', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE_STR, 105), @FILE_ROW_NUMBER, 'ORDER_MODIFY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE IS NOT NULL AND @ORDER_MODIFY_DATE <= GETDATE() AND @ORDER_MODIFY_DATE_OLD IS NOT NULL AND @ORDER_MODIFY_DATE < @ORDER_MODIFY_DATE_OLD)
			BEGIN 
				SET @vPassesValidations = 0

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_ORDER_MODIFY_DATE_MINOR_THAN_OLD, NULL, 'E', GETDATE(), @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE_STR, 105), @FILE_ROW_NUMBER, 'ORDER_MODIFY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @CDFAMILY_DB IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DATA_EXCHANGE_CDFAMILY_NOT_FOUND, NULL, 'E', GETDATE(),
				        @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE) 

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND @CDPLANT IS NULL) 
			BEGIN 
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DATA_EXCHANGE_CDPLANT_IS_NULL, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE) 

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND (@CDORDER_TYPE IS NULL OR (@CDORDER_TYPE != 'O' AND @CDORDER_TYPE != 'T' AND @CDORDER_TYPE != 'E' AND @CDORDER_TYPE != 'S')) ) 
			BEGIN 
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE) 

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND @CDLOCATION IS NULL ) 
			BEGIN 
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PRODUCTION_ORDERS_CDLOCATION_NOT_FOUND, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE) 

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND @CDCALENDAR IS NULL ) 
			BEGIN 
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PRODUCTION_ORDERS_CDCALENDAR_NOT_FOUND, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDFAMILY, 105), @FILE_ROW_NUMBER, 'CDFAMILY', @FILE_NAME, @ORDER_MODIFY_DATE) 

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND (@PROMISED_DELIVERY_DATE IS NULL AND @CDORDER_TYPE != 'S') )  
			BEGIN  
				SET @vPassesValidations = 0  

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_PROMISED_DATE_NULL, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)  

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  

			IF (@vPassesValidations!=0 AND @REAL_RELEASE_DATE > @ORDER_MODIFY_DATE)  
			BEGIN  
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_REAL_RELEASE_DATE_GT_NOW, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @REAL_RELEASE_DATE_STR, 105), @FILE_ROW_NUMBER, 'REAL_RELEASE_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)  

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  

			IF (@vPassesValidations!=0 AND @PENDING_AMOUNT <= 0)  
			BEGIN  
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_PENDING_AMOUNT_LE_0, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PENDING_AMOUNT_STR, 105), @FILE_ROW_NUMBER, 'PENDING_AMOUNT', @FILE_NAME, @ORDER_MODIFY_DATE)  

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  

			IF (@vPassesValidations!=0 AND @TOTAL_AMOUNT <= 0)  
			BEGIN  
				SET @vPassesValidations = 0 

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_TOTAL_AMOUNT_LE_0, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @TOTAL_AMOUNT_STR, 105), @FILE_ROW_NUMBER, 'TOTAL_AMOUNT', @FILE_NAME, @ORDER_MODIFY_DATE)  

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  

			IF (@vPassesValidations!=0 AND @ORDER_MODIFY_DATE > @DATE_SERVER_NO_TIME) 
			BEGIN   
				SET @vPassesValidations = 0  

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)   
				VALUES (@vMSG_DATA_EXCHANGE_MODIFY_DATE_GT_NOW, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @ORDER_MODIFY_DATE_STR, 105), @FILE_ROW_NUMBER, 'ORDER_MODIFY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)   

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1   
				SET @ovaResult = '1';  

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END  





			IF (@vPassesValidations!=0 AND (@PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != 'S' ))  
			BEGIN  
				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@PROMISED_DELIVERY_DATE, @CDCALENDAR)) > 0) 
				BEGIN  
					SET @vPassesValidations = 0  

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@vMSG_DATA_EXCHANGE_PROMISED_DATE_NOWD, NULL, 'E', GETDATE(), 
						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @ORDER_MODIFY_DATE)  

					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
					SET @ovaResult = '1'; 

					FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

					CONTINUE; 
				END  
			END  

			IF (@vPassesValidations!=0 AND @CDDESTINATION IS NULL)
			BEGIN			
				SET @vPassesValidations = 0

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_CDDESTINATION_NULL, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDDESTINATION, 105), @FILE_ROW_NUMBER, 'CDDESTINATION', @FILE_NAME, @ORDER_MODIFY_DATE)

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1  
				SET @ovaResult = '1'; 

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @CDDESTINATION IS NOT NULL AND @CDORDER_TYPE IS NOT NULL AND @CDORDER_TYPE = 'S')
			BEGIN			
				IF (@LOCATION_TYPE = 'WH' OR @LOCATION_TYPE = 'CL' OR @LOCATION_TYPE = 'PS')
				BEGIN
					SET @vPassesValidations = 0

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@vMSG_DATA_EXCHANGE_CDDESTINATION_NOT_FOUND, NULL, 'E', GETDATE(), 
						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @CDDESTINATION, 105), @FILE_ROW_NUMBER, 'CDDESTINATION', @FILE_NAME, @ORDER_MODIFY_DATE)

					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
					SET @ovaResult = '1';

					FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

					CONTINUE; 
				END 
			END

			IF (@vPassesValidations!=0 AND @SKU IS NULL)
			BEGIN			
				SET @vPassesValidations = 0

				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SKU_NULL, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @ORDER_MODIFY_DATE)

				SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
				SET @ovaResult = '1';

				FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @SKU IS NOT NULL AND @CDORDER_TYPE IS NOT NULL AND @CDORDER_TYPE = 'S' AND @CDPARENT_ORDER_OLD IS NULL AND @CDDESTINATION IS NOT NULL)
			BEGIN
				IF (@BUFFER_SKU IS NULL)
				BEGIN
					SET @vPassesValidations = 0

					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
					VALUES (@vMSG_DATA_EXCHANGE_CDORDER_TYPE_INVAL, NULL, 'E', GETDATE(), 
						    @CDORDER, @CDDESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @ORDER_MODIFY_DATE)

					SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1
					SET @ovaResult = '1';

					FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

					CONTINUE; 
				END
			END

			IF(@vPassesValidations = 1) 
			BEGIN 
				IF (@CDORDER_TYPE = 'S')
				BEGIN
					SET @PROMISED_DELIVERY_DATE = NULL
					IF NOT EXISTS (SELECT * FROM @vTEMPORARY_ASSOCIATED_BUFFER WHERE CDORDER = @CDORDER AND SKU = @SKU AND LOCATION = @CDDESTINATION)
					BEGIN
						INSERT INTO @vTEMPORARY_ASSOCIATED_BUFFER (CDORDER, SKU, LOCATION, FILE_NAME, FILE_ROW_NUMBER ) 
						VALUES (@CDORDER, @SKU, @CDDESTINATION, @FILE_NAME, @FILE_ROW_NUMBER)
					END
				END

				IF (@ORDER_MODIFY_DATE < @DATE_SERVER_NO_TIME) 
				BEGIN 
					SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@ORDER_MODIFY_DATE,@SHIPPING_TIME) 
				END 
				ELSE IF (@ORDER_MODIFY_DATE = @DATE_SERVER_NO_TIME) 
				BEGIN 
					SET @DATE_CALCULATION = GETDATE() 
				END 
				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR)) > 0) 
				BEGIN 
					SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION ,@CDCALENDAR) 
				END 
				SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION 


				-- If it is a new order, then use the Touch Time from the Family related, 
				-- otherwise, use the Touch Time from the order 
				IF(@TOUCH_TIME IS NULL) 
				BEGIN 
					SET @TOUCH_TIME = @FAMILY_TOUCH_TIME; 
				END 

				SET @PRODUCTION_BUFFER = @INITIAL_BUFFER + @CLEARENCE_BUFFER; 

				IF (@PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != 'S') 
				BEGIN 
					SET @PROMISED_DELIVERY_DATE   = dbo.ADD_TIME_TO_DATE(@PROMISED_DELIVERY_DATE,@SHIPPING_TIME);
					SET @RECOMMENDED_RELEASE_DATE = dbo.GET_CALCULATE_RECOMMENDED_RELEASE_DATE(@PROMISED_DELIVERY_DATE, @PRODUCTION_BUFFER, @CDCALENDAR, @CDORDER_TYPE, NULL, NULL, NULL, NULL);
					SET @PRIORITY                 = @PRIORITY_OLD;
					SET @PRIORITY_COLOR           = @PRIORITY_COLOR_OLD;
					SET @LAST_COLOR_UPDATE        = @LAST_COLOR_UPDATE_OLD;
					SET @MANAGED_ORDER            = @MANAGED_ORDER_OLD;
				END 
				ELSE IF(@CDORDER_TYPE='S')
				BEGIN 
					SET @PROMISED_DELIVERY_DATE   = @PROMISED_DELIVERY_DATE_OLD;
					SET @NON_WORKING_DAYS         = NULL;
					SET @RECOMMENDED_RELEASE_DATE = @RECOMMENDED_RELEASE_DATE_OLD;
					SET @PRIORITY                 = @PRIORITY_OLD;
					SET @PRIORITY_COLOR           = @PRIORITY_COLOR_OLD;
					SET @LAST_COLOR_UPDATE        = @LAST_COLOR_UPDATE_OLD;
					SET @MANAGED_ORDER            = @MANAGED_ORDER_OLD;
				END
				ELSE 
				BEGIN 
					SET @PROMISED_DELIVERY_DATE   = NULL;
					SET @NON_WORKING_DAYS         = NULL;
					SET @RECOMMENDED_RELEASE_DATE = NULL;
					SET @PRIORITY                 = NULL;
					SET @PRIORITY_COLOR           = NULL;
					SET @LAST_COLOR_UPDATE        = NULL;
					SET @MANAGED_ORDER            = NULL;
				END 

				SET @RELEASE_STATUS = dbo.GET_CALCULATE_RELEASE_STATUS(@REAL_RELEASE_DATE,@RECOMMENDED_RELEASE_DATE,@ORDER_MODIFY_DATE);

				-- --------------------------------------------------------------------------- 
				-- OHLO 20191224: Since v4.14.0, update new columns Release Problem and 
				-- 				  Release Problem Date 
				-- --------------------------------------------------------------------------- 
				IF (@CDORDER_OLD IS NULL)
				BEGIN 
					-- SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_BY_DEFAULT; 
					-- SET @RELEASE_PROBLEM_DATE = '1901-01-01'; 
					SET @RELEASE_PROBLEM      = NULL; 
					SET @RELEASE_PROBLEM_DATE = NULL; 
				END 
				ELSE  
				BEGIN 
					SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_OLD; 
					SET @RELEASE_PROBLEM_DATE = @RELEASE_PROBLEM_DATE_OLD; 
				END 

				-- --------------------------------------------------------------------------- 
				-- When release status is equal to Early or Late then set both Release Problem 
				-- and Release Problem Date columns 
				-- --------------------------------------------------------------------------- 
				-- IF ((@FINALIZATION_DATE IS NULL OR @FINALIZATION_DATE = '1901-01-01') 
				-- AND (@RELEASE_PROBLEM_OLD IS NULL OR @RELEASE_PROBLEM_OLD = @RELEASE_PROBLEM_BY_DEFAULT) 
				-- AND @RELEASE_STATUS IN ('E', 'O')) 
				-- BEGIN  
				-- 	SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_NOT_ASSIGNED; 
				-- 	SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; 
				-- END  

				-- IF (@REAL_RELEASE_DATE IS NOT NULL 
				-- AND @REAL_RELEASE_DATE <> @REAL_RELEASE_DATE_OLD 
				-- AND @RELEASE_PROBLEM_DATE <> @REAL_RELEASE_DATE 
				-- AND @RELEASE_PROBLEM_DATE <> '1901-01-01')  
				-- BEGIN  
				-- 	SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; 
				-- END  
				-- --------------------------------------------------------------------------- 

				IF (@CDORDER_OLD IS NULL)
				BEGIN
					SET @NEW_CREATION_DATE = GETDATE();

					IF(@CDORDER_TYPE = 'S')
					BEGIN
						IF(@NEW_CREATION_DATE <= @CURRENT_NEW_CREATION_DATE )
						BEGIN

							SET @NEW_CREATION_DATE = DATEADD(MS, 6, @CURRENT_NEW_CREATION_DATE);
						END
					END

					SET @CURRENT_NEW_CREATION_DATE = @NEW_CREATION_DATE;

					INSERT INTO TFSCM_CLI_PRODUCTION_ORDERS(CDDESTINATION,CDFAMILY,CDORDER,CDORDER_TYPE,ORDER_MODIFY_DATE,PENDING_AMOUNT,PROMISED_DELIVERY_DATE,REAL_RELEASE_DATE,SKU,TOTAL_AMOUNT,CDPLANT,INITIAL_BUFFER,CLEARENCE_BUFFER,PRODUCTION_PROBLEM_CAUSE,PRODUCTION_PROBLEM_DATE,PRODUCTION_BUFFER,RECOMMENDED_RELEASE_DATE,RELEASE_STATUS,FINALIZATION_DATE,PRIORITY,PRIORITY_COLOR,LAST_COLOR_UPDATE,MANAGED_ORDER,CREATION_DATE,CREATOR_USER,MODIFY_DATE,MODIFY_USER,EXCHANGES_IN_QUARANTINE,QUARANTINE_DATE,RELEASE_PROBLEM,RELEASE_PROBLEM_DATE,ORDER_VALUE,CDWORKPLACE,CDPARENT_ORDER,PROGRESS_PERCENTAGE, TOUCH_TIME, DATE_INSERTION)
					VALUES(@CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @PRODUCTION_PROBLEM_CAUSE, @PRODUCTION_PROBLEM_DATE, @PRODUCTION_BUFFER, @RECOMMENDED_RELEASE_DATE, @RELEASE_STATUS, @FINALIZATION_DATE, @PRIORITY, @PRIORITY_COLOR, @LAST_COLOR_UPDATE, @MANAGED_ORDER, @NEW_CREATION_DATE, @ivaCreatorOrModifyUserAux, GETDATE(), @ivaCreatorOrModifyUserAux, 0, @QUARANTINE_DATE, @RELEASE_PROBLEM, @RELEASE_PROBLEM_DATE,1,null,null,0, @TOUCH_TIME , @DATE_INSERTION );
               END
				ELSE 
				BEGIN 
					UPDATE TFSCM_CLI_PRODUCTION_ORDERS
					   SET CDDESTINATION = @CDDESTINATION,
						   CDFAMILY = @CDFAMILY,
						   ORDER_MODIFY_DATE = @ORDER_MODIFY_DATE,
						   PENDING_AMOUNT = @PENDING_AMOUNT,
						   PROMISED_DELIVERY_DATE = @PROMISED_DELIVERY_DATE,
						   REAL_RELEASE_DATE = @REAL_RELEASE_DATE,
						   SKU = @SKU,
						   TOTAL_AMOUNT = @TOTAL_AMOUNT,
						   RECOMMENDED_RELEASE_DATE	= @RECOMMENDED_RELEASE_DATE
						   ,RELEASE_STATUS			= @RELEASE_STATUS
						   ,PRIORITY 				= @PRIORITY
						   ,PRIORITY_COLOR 			= @PRIORITY_COLOR
						   ,LAST_COLOR_UPDATE 		= @LAST_COLOR_UPDATE
						   ,MANAGED_ORDER			= @MANAGED_ORDER
						   ,MODIFY_DATE				= GETDATE()
						   ,MODIFY_USER				= @ivaCreatorOrModifyUserAux 
						   ,DATE_INSERTION			= @DATE_INSERTION 
						   ,TOUCH_TIME				= @TOUCH_TIME 
						   ,INITIAL_BUFFER			= @INITIAL_BUFFER 
						   ,PRODUCTION_BUFFER		= @PRODUCTION_BUFFER 
						   ,CDPLANT					= @CDPLANT 
						   ,RELEASE_PROBLEM			= @RELEASE_PROBLEM 
						   ,RELEASE_PROBLEM_DATE	= @RELEASE_PROBLEM_DATE 
					WHERE CDORDER = @CDORDER --AND FINALIZATION_DATE IS NULL 
				END 

				SET @ovaHasProcessed = '1';

				-- --------------------------------------------------------------------------- 
				-- If the record has passed structural and business validations, then status   
				-- will be 1, oherwise 0
				-- --------------------------------------------------------------------------- 
				UPDATE TFSCM_CLI_PRODUCTION_ORDERS_TEMP
				   SET STATUS = 1 
				 WHERE ID = @ID_TEMP; 


				SET @vProcessProductionOrdersCount = @vProcessProductionOrdersCount + 1 
				SET @ivaCreatorOrModifyUserAux = @ivaCreatorOrModifyUser; 
			END 
		END TRY
		BEGIN CATCH 
			SET @vErrorsProductionOrdersCount = @vErrorsProductionOrdersCount + 1 
			SET @ovaResult = '1';
			SET @ovaMessage = ' ERROR_MESSAGE: '+ERROR_MESSAGE(); 

			BEGIN TRY 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_UNEXPECTED_ERROR, NULL, 'E', GETDATE(), 
					    @CDORDER, @CDDESTINATION, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @ORDER_MODIFY_DATE) 
			END TRY 
			BEGIN CATCH 
			END CATCH 
		END CATCH 

		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;

		IF(@vCOMMIT_COUNT = 10)
		BEGIN 
			COMMIT;
			SET @vCOMMIT_COUNT = 0;
		END

		FETCH NEXT FROM cDataTempCursor INTO @CDDESTINATION, @CDFAMILY, @CDORDER, @CDORDER_TYPE, @ORDER_MODIFY_DATE, @PENDING_AMOUNT, @PROMISED_DELIVERY_DATE, @REAL_RELEASE_DATE, @SKU, @TOTAL_AMOUNT, @CDFAMILY_DB, @SHIPPING_TIME, @CDCALENDAR, @CDPLANT, @INITIAL_BUFFER, @CLEARENCE_BUFFER, @FINALIZATION_DATE, @ID_TEMP, @CDLOCATION, @YELLOW_ZONE_START, @RED_ZONE_START, @LOCATION_TYPE, @BUFFER_SKU, @FILE_NAME, @FILE_ROW_NUMBER, @CDORDER_OLD, @CDFAMILY_OLD, @CDPLANT_OLD, @PRIORITY_COLOR_OLD, @LAST_COLOR_UPDATE_OLD, @INITIAL_BUFFER_OLD, @CLEARENCE_BUFFER_OLD, @FINALIZATION_DATE_OLD, @SHIPPING_TIME_OLD, @CDCALENDAR_OLD, @CDPARENT_ORDER_OLD, @CDORDER_TYPE_OLD, @SKU_OLD, @CDDESTINATION_OLD, @PROMISED_DELIVERY_DATE_OLD, @REAL_RELEASE_DATE_OLD, @TOTAL_AMOUNT_OLD, @PENDING_AMOUNT_OLD, @ORDER_VALUE_OLD, @CDWORKPLACE_OLD, @ORDER_MODIFY_DATE_OLD, @RECOMMENDED_RELEASE_DATE_OLD, @PRIORITY_OLD, @RELEASE_STATUS_OLD, @MANAGED_ORDER_OLD, @PROGRESS_PERCENTAGE_OLD, @TOUCH_TIME, @FAMILY_TOUCH_TIME, @DATE_INSERTION, @RELEASE_PROBLEM_OLD, @RELEASE_PROBLEM_DATE_OLD, @PROMISED_DELIVERY_DATE_STR, @REAL_RELEASE_DATE_STR, @PENDING_AMOUNT_STR, @ORDER_MODIFY_DATE_STR, @TOTAL_AMOUNT_STR, @DATE_INSERTION_STR

	END


	-- Update child orders values with Parent values
	UPDATE H 
	   SET H.PROMISED_DELIVERY_DATE   = P.PROMISED_DELIVERY_DATE, 
		   H.PRIORITY                 = P.PRIORITY, 
		   H.PRIORITY_COLOR           = P.PRIORITY_COLOR, 
		   H.RECOMMENDED_RELEASE_DATE = P.RECOMMENDED_RELEASE_DATE, 
		   H.LAST_COLOR_UPDATE        = P.LAST_COLOR_UPDATE, 
		   H.MANAGED_ORDER            = P.MANAGED_ORDER, 
		   H.MODIFY_DATE              = P.MODIFY_DATE, 
		   H.MODIFY_USER              = P.MODIFY_USER 
	  FROM TFSCM_CLI_PRODUCTION_ORDERS P JOIN 
		   TFSCM_CLI_PRODUCTION_ORDERS H ON ( H.CDPARENT_ORDER = P.CDORDER AND P.ORDER_MODIFY_DATE = @ivaTempLoadDate AND H.FINALIZATION_DATE IS NULL); 
	
	IF (@ORDER_MODIFY_DATE_BEFORE IS NOT NULL) 
	BEGIN 
		EXEC QUARANTINE_PRODUCTION_ORDERS @ivaIdExchange, @ORDER_MODIFY_DATE_BEFORE, @ivaCreatorOrModifyUserAux,@vErrorsProductionOrdersCount,@ivaErrorValidations,@ovaResultQuarantine OUTPUT, @ovaMessageQuarantine OUTPUT 
		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageQuarantine; 
		IF @ovaResultQuarantine = '1' 
		BEGIN 
			SET @ovaResult = '1' 
		END

		EXEC FINISHED_PRODUCTION_ORDERS @ivaIdExchange, @ORDER_MODIFY_DATE_BEFORE, @ivaCreatorOrModifyUserAux, @ovaResultFinished OUTPUT, @ovaMessageFinished OUTPUT 
		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageFinished; 
		IF @ovaResultFinished = '1' 
		BEGIN 
			SET @ovaResult = '1' 
		END 

		EXEC USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS @DATE_CALCULATION_FINALIZATION, @ovaResultAfthetF OUTPUT , @ovaMessageAfthetF OUTPUT
		SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageAfthetF;
		IF @ovaResultAfthetF = '1'
		BEGIN
			SET @ovaResult = '1'
		END 
	END 

	CLOSE cDataTempCursor
	DEALLOCATE cDataTempCursor
	SET @vTrace = 'go inside the cursor cDataTempCursor  '

	IF EXISTS (SELECT TOP 1 * FROM @vTEMPORARY_ASSOCIATED_BUFFER)
	BEGIN
		DECLARE @CDORDER_TEMP    AS VARCHAR(50)
		DECLARE @SKU_TEMP        AS VARCHAR(50)
		DECLARE @LOCATION_TEMP   AS VARCHAR(50)
		DECLARE @FILE_NAME_TEMP  AS VARCHAR(500)
		DECLARE @FILE_ROW_NUMBER_TMP AS INT 
		DECLARE @SUM_PENDING_AMOUNT_TEMP AS NUMERIC(17,5)
		DECLARE @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER AS NUMERIC(17,5)

		DECLARE SUM_PENDING_AMOUNT_CURSOR CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR  
		 SELECT CDORDER, SKU, LOCATION, FILE_NAME, FILE_ROW_NUMBER 
		  FROM @vTEMPORARY_ASSOCIATED_BUFFER

		OPEN SUM_PENDING_AMOUNT_CURSOR   
		FETCH SUM_PENDING_AMOUNT_CURSOR INTO @CDORDER_TEMP, @SKU_TEMP, @LOCATION_TEMP, @FILE_NAME_TEMP, @FILE_ROW_NUMBER_TMP 

		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			SET @SUM_PENDING_AMOUNT_TEMP = (SELECT SUM(PO.PENDING_AMOUNT) AS SUM_PENDING_AMOUNT 
			                                  FROM TFSCM_CLI_PRODUCTION_ORDERS PO, TFSCM_CLI_BUFFER BUFFER 
			                                 WHERE PO.FINALIZATION_DATE IS NULL AND PO.SKU = @SKU_TEMP AND PO.CDDESTINATION = @LOCATION_TEMP 
		                                       AND PO.CDORDER_TYPE = 'S'  AND PO.EXCHANGES_IN_QUARANTINE = 0 
			                                   AND PO.SKU = BUFFER.SKU AND PO.CDDESTINATION = BUFFER.LOCATION AND BUFFER.INACTIVE = 0); 

			SET @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER = (SELECT TOP 1 B.TOTAL_INVENTORY_ON_PRODUCTION  
			                                               FROM TFSCM_CLI_BUFFER B WHERE B.SKU = @SKU_TEMP AND B.LOCATION = @LOCATION_TEMP); 

			IF (@SUM_PENDING_AMOUNT_TEMP <> @TOTAL_INVENTORY_IN_PRODUCTION_BUFFER)
			BEGIN
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_PENDING_AMOUNT, 
					    NULL, 'A', GETDATE(), @CDORDER_TEMP, @LOCATION_TEMP, CONVERT(VARCHAR, FORMAT(CONVERT(NUMERIC(12,2), @SUM_PENDING_AMOUNT_TEMP, 105),  '#0.00'), 105), @FILE_ROW_NUMBER_TMP, 'PENDING_AMOUNT', @FILE_NAME_TEMP, @ORDER_MODIFY_DATE) 
			END

			FETCH NEXT FROM SUM_PENDING_AMOUNT_CURSOR INTO @CDORDER_TEMP, @SKU_TEMP, @LOCATION_TEMP, @FILE_NAME_TEMP, @FILE_ROW_NUMBER_TMP 
		END

		CLOSE SUM_PENDING_AMOUNT_CURSOR			
		DEALLOCATE SUM_PENDING_AMOUNT_CURSOR	
	END



	IF(@ovaHasProcessed = '1')
	BEGIN 
		UPDATE TBL 
		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		  FROM TFSCM_COM_TABLES TBL 
		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		   AND INTER.CDINTERFACE = 1
	END 

	SET @ovaMessage =  @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_SUCESSFUL_ORDERS+':' + CAST ( @vProcessProductionOrdersCount AS varchar ) + ', '+ @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ERROR_ORDERS+':' + CAST ( @vErrorsProductionOrdersCount AS varchar ) + ', ' + @vMSG_DATA_EXCHANGE_PRODUCTION_ORDERS_ELIMINATED_ORPHANS +':' +  CAST ( @vErrorsOrphansProductionOrdersCount AS varchar ) + @ovaMessageFinishedTotal 
	SET @vTotalErrorsProductionOrders = (@vErrorsProductionOrdersCount + @ivaErrorValidations + @vErrorsOrphansProductionOrdersCount)

	SELECT @vMessagesAfterDataExchange = PARAM_VALUE FROM   TFSCM_COM_PARAMS
		WHERE CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE'

	IF( @vTotalErrorsProductionOrders > 0 AND @vMessagesAfterDataExchange = 'Y')
	BEGIN	
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'PDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsProductionOrders, 'PDE', 'OP_GENERAL_PRIORITIZING', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT
	END		

	IF(@vTotalErrorsProductionOrders = 0 AND @vMessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
	BEGIN 
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'PDE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
	END
END TRY 
BEGIN CATCH 
	SET @ovaResult = '1';
	SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
		+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
		+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[PRODUCTION_ORDERS]') 
		+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR) 
		+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE(); 

	IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1))
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1)) 
		BEGIN 
			CLOSE cDataTempCursor; 
		END 
		DEALLOCATE cDataTempCursor; 
	END 

	IF ((SELECT CURSOR_STATUS('global','SUM_PENDING_AMOUNT_CURSOR')) IN (-1,0,1))
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','SUM_PENDING_AMOUNT_CURSOR')) IN (0,1)) 
		BEGIN 
			CLOSE SUM_PENDING_AMOUNT_CURSOR; 
		END 
		DEALLOCATE SUM_PENDING_AMOUNT_CURSOR; 
	END 
END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[PURCHASE_ORDERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PURCHASE_ORDERS] 
	@ivaIdExchange NUMERIC(10), 
	@ivaTempLoadDate DATE , 
	@ivaCreatorOrModifyUser NVARCHAR(MAX), 
	@ivaErrorValidations NUMERIC(10), 
	@ovaResult VARCHAR(1) OUTPUT, 
	@ovaMessage NVARCHAR(MAX) OUTPUT, 
	@ovaHasProcessed VARCHAR(1) OUTPUT 
AS 
DECLARE @vTrace AS NVARCHAR(MAX); 
DECLARE @vDuplicatedOrdersCountTemp AS INT = 0; 
DECLARE @vErrorsPurchaseOrdersCount AS INT = 0; 
DECLARE @vProcessPurchaseOrdersCount AS INT = 0; 
DECLARE @ovaResultQuarantine     AS VARCHAR(1);
DECLARE @ovaMessageQuarantine    AS NVARCHAR(MAX);
DECLARE @ovaResultFinished       AS VARCHAR(1); 
DECLARE @ovaMessageFinished      AS NVARCHAR(MAX); 
DECLARE @ovaMessageFinishedTotal AS NVARCHAR(MAX) = ''; 
DECLARE @vPassesValidations AS SMALLINT = 1; 
DECLARE @vCountIntTmp AS INT = 0; 
DECLARE @NON_WORKING_DAYS AS NUMERIC(10,2); 
DECLARE @DATE_SERVER_NO_TIME AS DATE; 
DECLARE @DATE_CALCULATION AS DATETIME; 
DECLARE @DATE_CALCULATION_FINALIZATION AS DATETIME; 
DECLARE @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK AS DATETIME; 
DECLARE @ovaResultRemoveViewNot VARCHAR(1);
DECLARE @ovaMessageRemoveViewNot VARCHAR(MAX);
DECLARE @ovaResultAddViewNot VARCHAR(1);
DECLARE @ovaMessageAddViewNot VARCHAR(MAX);
DECLARE @vTotalErrorsPurchaseOrders NUMERIC(8) = 0; 
DECLARE @vMessagesAfterDataExchange VARCHAR = 'N'; 
DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0; 
DECLARE @CDUNIT_DEFAULT AS VARCHAR(50); 
DECLARE @INVENTORY_ACCURACY_DEFAULT AS NUMERIC(3,0); 
DECLARE @ovaResultAfthetF VARCHAR(1);
DECLARE @ovaMessageAfthetF VARCHAR(MAX);
DECLARE @vDummy AS VARCHAR(10) = ''; 
DECLARE @vTEMPORARY_ASSOCIATED_BUFFER TABLE ( 
                                          	SKU VARCHAR(50), LOCATION VARCHAR(50), 
	                                            PRIMARY KEY (SKU, LOCATION) 
                                            ) 

BEGIN 

BEGIN TRY 
	-- SET NOCOUNT ON added to prevent extra result sets from 
	-- interfering with SELECT statements. 
	SET NOCOUNT ON; 
	SET @ovaResult = '0';
	SET @ovaMessage = '';
	SET @ovaHasProcessed = '0';
	SET @vTrace = 'Setting the cursor cDataTempCursor  ';
	SET @DATE_SERVER_NO_TIME = GETDATE(); 
	SET @DATE_CALCULATION = GETDATE(); 
	SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION; 

	SELECT @CDUNIT_DEFAULT = U.CDUNIT, @INVENTORY_ACCURACY_DEFAULT = U.INVENTORY_ACCURACY 
	  FROM TFSCM_CLI_UNITS U 
	 WHERE (U.IS_DEFAULT_UNIT = 1 AND U.IS_ACTIVE = 1); 

	DECLARE @CDPURCHASE_ORDER AS VARCHAR(50) , @DESTINATION AS VARCHAR(50) , @PENDING_QUANTITY AS NUMERIC(22,5) , @PO_TYPE AS VARCHAR(1) , @PROMISED_DELIVERY_DATE AS DATETIME , @SKU AS VARCHAR(50) , @SUPPLIER AS VARCHAR(50) , @UPDATE_DATE AS DATETIME ;

	DECLARE  @BUFFER_SKU AS VARCHAR(50)
		  , @BUFFER_SKU_OR_DESTINATION_CALC_NO_UPGRADEABLE AS VARCHAR(50)
		  , @DESTINATION_IS_ACTIVE      AS BIT
		  , @DESTINATION_LOCATION_TYPE  AS VARCHAR(50)
		  , @LSUPPLIER_DB_CDLOCATION    AS VARCHAR(50)
		  , @LSUPPLIER_DB_LOCATION_TYPE AS VARCHAR(50)
		  , @CDCALENDAR_DEST            AS NUMERIC(4,0)
		  , @SHIPPING_TIME_DEST         AS VARCHAR(5)
		  , @ORDER_VALUE AS NUMERIC(17,2) = 1
		  , @INVENTORY_ACCURACY AS NUMERIC(3,0) = @INVENTORY_ACCURACY_DEFAULT
		  , @UNITS AS VARCHAR(50) = @CDUNIT_DEFAULT
		  , @FINALIZATION_DATE AS DATETIME = '1901-01-01 00:00:00'
		  , @CREATION_DATE AS DATETIME
		  , @ORDER_CREATION_DATETIME AS DATETIME = NULL
		  , @PROMISED_DELIVERY_DATETIME AS DATETIME = NULL
		  , @NECESSITY_DATETIME AS DATETIME = NULL
		  , @PRIORITY AS NUMERIC(17,2) = NULL
		  , @PRIORITY_COLOR AS VARCHAR(50) = NULL
		  , @COLOR_CHANGE_DATE AS DATE = '1901-01-01 00:00:00'
		  , @MANAGED AS BIT = 1
		  , @ID_TEMP AS INT
		  , @EXCHANGES_IN_QUARANTINE AS NUMERIC(10,0) = 0
		  , @QUARANTINE_DATE AS DATETIME = '1901-01-01 00:00:00'
		  , @PROMISED_DELIVERY_DATE_STR                             AS VARCHAR(50)
		  , @PENDING_QUANTITY_STR                                   AS VARCHAR(50)
		  , @UPDATE_DATE_STR                                        AS VARCHAR(50);

	DECLARE  @CDPURCHASE_ORDER_OLD AS VARCHAR(50)
		  , @PO_TYPE_OLD AS VARCHAR(1)
		  , @SKU_OLD AS VARCHAR(50)
		  , @DESTINATION_OLD AS VARCHAR(50)
		  , @DESTINATION_IS_ACTIVE_OLD AS BIT
		  , @DESTINATION_LOCATION_TYPE_OLD AS VARCHAR(50)
		  , @SUPPLIER_OLD AS VARCHAR(50)
		  , @ORDER_CREATION_DATE_OLD AS DATE
		  , @CDCALENDAR_DEST_OLD AS NUMERIC(4,0)
		  , @SHIPPING_TIME_DEST_OLD AS VARCHAR(5)
		  , @PROMISED_DELIVERY_DATE_OLD AS DATE
		  , @NECESSITY_DATE_OLD AS DATE
		  , @PENDING_QUANTITY_OLD AS NUMERIC(17,5)
		  , @ORDER_VALUE_OLD AS NUMERIC(17,2)
		  , @UPDATE_DATE_OLD AS DATE
		  , @UNITS_OLD AS VARCHAR(50)
		  , @INVENTORY_ACCURACY_OLD AS NUMERIC(3,0)
		  , @FINALIZATION_DATE_OLD AS DATETIME
		  , @ORDER_CREATION_DATETIME_OLD AS DATETIME
		  , @PROMISED_DELIVERY_DATETIME_OLD AS DATETIME
		  , @PRIORITY_OLD AS NUMERIC(17,2) = NULL
		  , @PRIORITY_COLOR_OLD AS VARCHAR(50) = NULL
		  , @COLOR_CHANGE_DATE_OLD AS DATE = '1901-01-01 00:00:00'
		  , @MANAGED_OLD BIT = 1;


	BEGIN TRY 

		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_TYPE_INVAL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_SKU_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UNITS_IS_NULL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_ERROR_ORDERS AS NVARCHAR(MAX); 
		DECLARE @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR AS NVARCHAR(MAX); 

		BEGIN TRY  

			SELECT @vLanguage = PARAM_VALUE  
			  FROM TFSCM_COM_PARAMS 
			WHERE CDPARAM = 'DEFAULT_LANGUAGE' 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_TYPE_INVAL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_TYPE_INVAL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DEX_PURCHASE_SKU_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_SKU_NULL OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_DESTINATION_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_ORDER_CREATION_DATE_NOWD', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_CDCALENDAR_NOT_FOUND', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_NECESSITY_DATE_IS_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_NECESSITY_DATE_NOWD', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_PENDING_QUANTITY_INVAL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,   
			'DEX_PURCHASE_PENDING_QUANTITY_ALERT', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT OUTPUT

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_ORDER_VALUE_LT_0', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UPDATE_DATE_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UPDATE_DATE_GT_NOW', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UNITS_IS_NULL', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UNITS_IS_NULL OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UNITS_LT_UNITS_OLD', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_SUCESSFUL_ORDERS', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_ERROR_ORDERS', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_ERROR_ORDERS OUTPUT 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DEX_PURCHASE_UNEXPECTED_ERROR', @vLanguage, '', '', '', @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR OUTPUT 

		END TRY  
		BEGIN CATCH  
			SET @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED = 'DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED' 
			SET @vMSG_DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL = 'DEX_PURCHASE_COUNT_CDPURCHASE_ORDER_DUPL' 
			SET @vMSG_DEX_PURCHASE_TYPE_INVAL = 'DEX_PURCHASE_TYPE_INVAL' 
			SET @vMSG_DEX_PURCHASE_SKU_NULL = 'DEX_PURCHASE_SKU_NULL' 
			SET @vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS = 'DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS' 
			SET @vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND = 'DEX_PURCHASE_DESTINATION_NOT_FOUND' 
			SET @vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL = 'DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL' 
			SET @vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND = 'DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND' 
			SET @vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL = 'DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL' 
			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL = 'DEX_PURCHASE_ORDER_CREATION_DATE_IS_NULL' 
			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE = 'DEX_PURCHASE_ORDER_CREATION_DATE_GT_UPDATE_DATE' 
			SET @vMSG_DEX_PURCHASE_ORDER_CREATION_DATE_NOWD = 'DEX_PURCHASE_ORDER_CREATION_DATE_NOWD' 
			SET @vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND = 'DEX_PURCHASE_CDCALENDAR_NOT_FOUND' 
			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL = 'DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL' 
			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE = 'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATE' 
			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME = 'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME' 
			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE = 'DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE' 
			SET @vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD = 'DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD' 
			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_IS_NULL = 'DEX_PURCHASE_NECESSITY_DATE_IS_NULL' 
			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE = 'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATE' 
			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME = 'DEX_PURCHASE_NECESSITY_DATE_LE_ORDER_CREATION_DATETIME' 
			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE = 'DEX_PURCHASE_NECESSITY_DATE_LE_UPDATE_DATE' 
			SET @vMSG_DEX_PURCHASE_NECESSITY_DATE_NOWD = 'DEX_PURCHASE_NECESSITY_DATE_NOWD' 
			SET @vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL = 'DEX_PURCHASE_PENDING_QUANTITY_INVAL' 
			SET @vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT = 'DEX_PURCHASE_PENDING_QUANTITY_ALERT'
			SET @vMSG_DEX_PURCHASE_ORDER_VALUE_LT_0 = 'DEX_PURCHASE_ORDER_VALUE_LT_0' 
			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_NULL = 'DEX_PURCHASE_UPDATE_DATE_NULL' 
			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW = 'DEX_PURCHASE_UPDATE_DATE_GT_NOW' 
			SET @vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD = 'DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD' 
			SET @vMSG_DEX_PURCHASE_UNITS_IS_NULL = 'DEX_PURCHASE_UNITS_IS_NULL' 
			SET @vMSG_DEX_PURCHASE_UNITS_LT_UNITS_OLD = 'DEX_PURCHASE_UNITS_LT_UNITS_OLD' 
			SET @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED = 'DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED' 
			SET @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS = 'DEX_PURCHASE_SUCESSFUL_ORDERS' 
			SET @vMSG_DEX_PURCHASE_ERROR_ORDERS = 'DEX_PURCHASE_ERROR_ORDERS' 
			SET @vMSG_DEX_PURCHASE_UNEXPECTED_ERROR = 'DEX_PURCHASE_UNEXPECTED_ERROR' 
		END CATCH 
		-- -----------------------------------------------------------------------------------
		DECLARE @PK1_CDPURCHASE_ORDER_ERROR_LOG AS VARCHAR(50); 
		DECLARE @PK2_SUPPLIER_ERROR_LOG AS VARCHAR(50); 
		-- -----------------------------------------------------------------------------------
		-- IAFJ 20201118: Since v5.3.0, add columns File_name and FIle_row_number 
		-- -----------------------------------------------------------------------------------
		DECLARE @FILE_NAME AS VARCHAR(500); 
		DECLARE @FILE_ROW_NUMBER AS INT; 

		-- ----------------------------------------------------------------------------------- 
		-- OHLO 20201120: Since v5.3.0, refactoring duplicated values inserts.  
		-- ---------------------------------------------------------------------------------- 
		IF OBJECT_ID('tempdb..#DuplicatePurchaseTemp') IS NOT NULL  
			DROP TABLE #DuplicatePurchaseTemp; 

		SELECT CONVERT(INT, 0, 105) COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  INTO #DuplicatePurchaseTemp 
		  FROM [dbo].[TFSCM_COM_LOG] 
		 WHERE 1 = 2; 

		INSERT INTO #DuplicatePurchaseTemp (COUNTER1, DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
											RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT [POTDUP].[COUNTER1], @vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED + CAST([POTDUP].[COUNTER1] AS VARCHAR) + '.', NULL, 'E', GETDATE(),
			   [POT].[CDPURCHASE_ORDER], [POT].[DESTINATION], NULL, [POT].[FILE_ROW_NUMBER], 'CDPURCHASE_ORDER', [POT].[FILE_NAME], @ivaTempLoadDate 
		  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [POT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION], MIN([TMP].[FILE_ROW_NUMBER]) AS [FILE_ROW_NUMBER] 
				  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]  = @ivaIdExchange 
				   AND [TMP].[UPDATE_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]  
				HAVING COUNT(1) > 1) AS [POTDUP] 
			ON ([POT].[IDEXCHANGE]       = @ivaIdExchange 
			AND [POT].[UPDATE_DATE]      = @ivaTempLoadDate 
			AND [POTDUP].[CDPURCHASE_ORDER] = [POT].[CDPURCHASE_ORDER] 
			AND [POTDUP].[DESTINATION]      = [POT].[DESTINATION] 
			AND [POT].[FILE_ROW_NUMBER]     = [POTDUP].[FILE_ROW_NUMBER]); 

		SELECT @vDuplicatedOrdersCountTemp = SUM(COUNTER1) FROM #DuplicatePurchaseTemp;
		SET @vErrorsPurchaseOrdersCount    = @vErrorsPurchaseOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);

		-- Counting repeated events 
		INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
										   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE,  
			   RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE 
		  FROM #DuplicatePurchaseTemp; 

		DELETE [POT] 
		  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [POT]  
		  JOIN (SELECT COUNT(1) AS [COUNTER1], [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]
				  FROM [dbo].[TFSCM_CLI_PURCHASE_ORDERS_TEMP] AS [TMP] 
				 WHERE [TMP].[IDEXCHANGE]  = @ivaIdExchange 
				   AND [TMP].[UPDATE_DATE] = @ivaTempLoadDate 
				 GROUP BY [TMP].[CDPURCHASE_ORDER], [TMP].[DESTINATION]  
				HAVING COUNT(1) > 1) AS [POTDUP] 
			ON ([POT].[IDEXCHANGE]       = @ivaIdExchange 
			AND [POT].[UPDATE_DATE]      = @ivaTempLoadDate 
			AND [POTDUP].[CDPURCHASE_ORDER] = [POT].[CDPURCHASE_ORDER] 
			AND [POTDUP].[DESTINATION]      = [POT].[DESTINATION]); 

		SET @vProcessPurchaseOrdersCount = @vProcessPurchaseOrdersCount + ISNULL(@vDuplicatedOrdersCountTemp, 0);

		/*DECLARE cErrorLogCursor CURSOR FAST_FORWARD FOR 
		SELECT TEMPO.COUNTER1, TEMPO.CDPURCHASE_ORDER, TEMPO.SUPPLIER, TEMPO.FILE_NAME, TEMPO.FILE_ROW_NUMBER  
		  FROM ( 
				SELECT COUNT(1) AS COUNTER1, TMP.CDPURCHASE_ORDER, TMP.SUPPLIER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER  
				  FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP 
				 WHERE TMP.IDEXCHANGE = @ivaIdExchange 
				   AND TMP.UPDATE_DATE = @ivaTempLoadDate
				 GROUP BY TMP.CDPURCHASE_ORDER, TMP.SUPPLIER, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER 
			   ) TEMPO 
		 WHERE TEMPO.COUNTER1 > 1 

		OPEN cErrorLogCursor 
		FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG, @FILE_NAME, @FILE_ROW_NUMBER 
		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
			VALUES (@vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_DUPLICATED, NULL, 'E', GETDATE(),
				    @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_DATE ) 
			SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + @vDuplicatedOrdersCountTemp 
			SET @ovaResult = '1'; 
			FETCH NEXT FROM cErrorLogCursor INTO @vDuplicatedOrdersCountTemp, @PK1_CDPURCHASE_ORDER_ERROR_LOG, @PK2_SUPPLIER_ERROR_LOG 
		END 
		CLOSE cErrorLogCursor 
		DEALLOCATE cErrorLogCursor */
	END TRY 
	BEGIN CATCH 
	END CATCH 


	DECLARE cDataTempCursor CURSOR FAST_FORWARD FOR 
	 SELECT TMP.CDPURCHASE_ORDER,TMP.DESTINATION,TMP.PENDING_QUANTITY,TMP.PO_TYPE,TMP.PROMISED_DELIVERY_DATE,TMP.SKU,TMP.SUPPLIER,TMP.UPDATE_DATE, POOLD.CDPURCHASE_ORDER, POOLD.PO_TYPE, POOLD.SKU, B.SKU AS BUFFER_SKU, POOLD.DESTINATION, LDEST.IS_ACTIVE, LDESTOLD.IS_ACTIVE, LDEST.LOCATION_TYPE, LDESTOLD.LOCATION_TYPE, POOLD.SUPPLIER, LSUPPLIER.CDLOCATION, LSUPPLIER.LOCATION_TYPE, POOLD.ORDER_CREATION_DATE, CAL_DEST.CDCALENDAR, CAL_DEST_OLD.CDCALENDAR, CAL_DEST.SHIPPING_TIME, CAL_DEST_OLD.SHIPPING_TIME, POOLD.PROMISED_DELIVERY_DATE, POOLD.NECESSITY_DATE, POOLD.PENDING_QUANTITY, POOLD.ORDER_VALUE, POOLD.UPDATE_DATE, POOLD.UNITS, @INVENTORY_ACCURACY_DEFAULT, CLI_UNITS_OLD.INVENTORY_ACCURACY, POOLD.FINALIZATION_DATE, POOLD.ORDER_CREATION_DATETIME, POOLD.PROMISED_DELIVERY_DATETIME, POOLD.PRIORITY, POOLD.PRIORITY_COLOR, POOLD.COLOR_CHANGE_DATE, POOLD.MANAGED, TMP.ID, TMP.FILE_NAME, TMP.FILE_ROW_NUMBER, TMP.PROMISED_DELIVERY_DATE_STR, TMP.PENDING_QUANTITY_STR, TMP.UPDATE_DATE_STR
	   FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP 
	   LEFT OUTER JOIN TFSCM_CLI_PURCHASE_ORDERS POOLD ON (TMP.CDPURCHASE_ORDER = POOLD.CDPURCHASE_ORDER AND TMP.SUPPLIER = POOLD.SUPPLIER) 

	   LEFT OUTER JOIN TFSCM_CLI_BUFFER B ON (B.SKU = TMP.SKU AND B.LOCATION = TMP.DESTINATION AND B.INACTIVE = 0)  

	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LDEST ON (LDEST.CDLOCATION = TMP.DESTINATION) 
	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LDESTOLD ON (LDESTOLD.CDLOCATION = POOLD.DESTINATION) 

	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST ON (CAL_DEST.CDCALENDAR = LDEST.CDCALENDAR AND CAL_DEST.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_CALENDAR CAL_DEST_OLD ON (CAL_DEST_OLD.CDCALENDAR = LDESTOLD.CDCALENDAR AND CAL_DEST_OLD.IS_ACTIVE = 1) 

	   LEFT OUTER JOIN TFSCM_CLI_LOCATION LSUPPLIER ON (LSUPPLIER.CDLOCATION = TMP.SUPPLIER AND LSUPPLIER.IS_ACTIVE = 1) 
	   LEFT OUTER JOIN TFSCM_CLI_UNITS CLI_UNITS_OLD ON (CLI_UNITS_OLD.CDUNIT = POOLD.UNITS) 

	  WHERE TMP.IDEXCHANGE = @ivaIdExchange 
	    AND TMP.UPDATE_DATE = @ivaTempLoadDate
	    AND TMP.ID IN 
	       (	
		     SELECT TEMPO.ID 
		      FROM 
		           ( SELECT COUNT(1) AS COUNTER1, MAX(TMPAUX.ID) AS ID 
			           FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMPAUX 
			          WHERE TMPAUX.IDEXCHANGE = @ivaIdExchange 
			           AND TMPAUX.UPDATE_DATE = @ivaTempLoadDate 
			          GROUP BY TMPAUX.CDPURCHASE_ORDER, TMPAUX.SUPPLIER 
		           ) TEMPO 
		     WHERE TEMPO.COUNTER1 = 1 
	       ) 
	  ORDER BY TMP.CDPURCHASE_ORDER, TMP.SUPPLIER

	OPEN cDataTempCursor 
	FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR

	SET @vTrace = 'go inside the cursor cDataTempCursor  '

	WHILE (@@FETCH_STATUS = 0 ) 
	BEGIN 
		BEGIN TRY 
			IF (@CDPURCHASE_ORDER_OLD IS NOT NULL) 
			BEGIN 
				SET @vDummy = ''; 
				SET @PO_TYPE = @PO_TYPE_OLD; 
				SET @INVENTORY_ACCURACY = @INVENTORY_ACCURACY_OLD 
			END 

			SET @vPassesValidations = 1 


			IF (@vPassesValidations!=0 AND @FINALIZATION_DATE_OLD != '1901-01-01 00:00:00') 
			BEGIN   
				SET @vPassesValidations = 0  
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_CDPURCHASE_ORDER_FINISHED, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @FINALIZATION_DATE_OLD, 105), @FILE_ROW_NUMBER, 'FINALIZATION_DATE', @FILE_NAME, @UPDATE_DATE )   
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1   
				SET @ovaResult = '1';  
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END  

			IF (@vPassesValidations!=0 AND (@PO_TYPE IS NULL OR (@PO_TYPE != 'O' AND @PO_TYPE != 'S' /*AND @PO_TYPE != 'T'*/)) ) 
			BEGIN 
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_TYPE_INVAL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PO_TYPE, 105), @FILE_ROW_NUMBER, 'PO_TYPE', @FILE_NAME, @UPDATE_DATE ) 
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END 

			IF (@vPassesValidations!=0 AND @SKU IS NULL)
			BEGIN			
				SET @vPassesValidations = 0
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_SKU_NULL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SKU, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_DATE )
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @PO_TYPE IS NOT NULL AND @PO_TYPE = 'S' )
			BEGIN
				IF (@BUFFER_SKU IS NULL)
				BEGIN
					SET @vPassesValidations = 0
					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
					VALUES (@vMSG_DEX_PURCHASE_SKU_AND_DESTINATION_NOT_FOUND_IN_BUFFERS, NULL, 'E', GETDATE(),
						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SKU + '; ' + @DESTINATION, 105), @FILE_ROW_NUMBER, 'SKU', @FILE_NAME, @UPDATE_DATE )
					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
					SET @ovaResult = '1';
					FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
					CONTINUE; 
				END
			END

			IF (@vPassesValidations!=0 AND (@DESTINATION IS NULL OR @DESTINATION_IS_ACTIVE IS NULL OR @DESTINATION_IS_ACTIVE = 0) ) 
			BEGIN 
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_DESTINATION_NOT_FOUND, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, 'DESTINATION', @FILE_NAME, @UPDATE_DATE ) 
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END 

			IF ( @vPassesValidations!=0 AND ( @DESTINATION_LOCATION_TYPE IS NULL OR (@DESTINATION_LOCATION_TYPE != 'WH' AND @DESTINATION_LOCATION_TYPE != 'CL' AND @DESTINATION_LOCATION_TYPE != 'PS') ) )
			BEGIN			
				SET @vPassesValidations = 0
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_LOCATION_TYPE_DEST_INVAL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, 'DESTINATION', @FILE_NAME, @UPDATE_DATE )  
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @CDCALENDAR_DEST IS NULL)  
			BEGIN  
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_CDCALENDAR_NOT_FOUND, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @DESTINATION, 105), @FILE_ROW_NUMBER, 'DESTINATION', @FILE_NAME, @UPDATE_DATE )  
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
				SET @ovaResult = '1'; 
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END  
			IF (@vPassesValidations!=0 AND @LSUPPLIER_DB_CDLOCATION IS NULL ) 
			BEGIN 
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_LSUPPLIER_DB_CDLOCATION_NOT_FOUND, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SUPPLIER, 105), @FILE_ROW_NUMBER, 'SUPPLIER', @FILE_NAME, @UPDATE_DATE ) 
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END 

			IF ( @vPassesValidations!=0 AND (@LSUPPLIER_DB_LOCATION_TYPE != 'SU') ) 
			BEGIN 
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_LSUPPLIER_DB_LOCATION_TYPE_INVAL, NULL, 'E', GETDATE(),
						@CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @SUPPLIER, 105), @FILE_ROW_NUMBER, 'SUPPLIER', @FILE_NAME, @UPDATE_DATE ) 
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END 


			IF (@vPassesValidations!=0 AND @PROMISED_DELIVERY_DATE IS NULL)  
			BEGIN  
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_IS_NULL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @UPDATE_DATE )  
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
				SET @ovaResult = '1'; 
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END  

				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NOT NULL AND  @PROMISED_DELIVERY_DATE <= @ORDER_CREATION_DATETIME_OLD )  
				BEGIN  
					SET @vPassesValidations = 0 
					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_ORDER_CREATION_DATETIME, NULL, 'E', GETDATE(),
						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @UPDATE_DATE )  
					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
					SET @ovaResult = '1'; 
					FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
					CONTINUE; 
				END  

				IF (@vPassesValidations!=0 AND @CDPURCHASE_ORDER_OLD IS NULL AND  @PROMISED_DELIVERY_DATE <= @UPDATE_DATE )  
				BEGIN  
					SET @vPassesValidations = 0 
					INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
					VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_LE_UPDATE_DATE, NULL, 'E', GETDATE(),
						    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @UPDATE_DATE )  
					SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
					SET @ovaResult = '1'; 
					FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
					CONTINUE; 
				END  

			IF (@vPassesValidations!=0 AND (SELECT dbo.VALIDATE_NON_WORK_DAY(@PROMISED_DELIVERY_DATE, @CDCALENDAR_DEST)) > 0)  
			BEGIN  
				SET @vPassesValidations = 0  
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_PROMISED_DELIVERY_DATE_NOWD, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PROMISED_DELIVERY_DATE_STR, 105), @FILE_ROW_NUMBER, 'PROMISED_DELIVERY_DATE', @FILE_NAME, @UPDATE_DATE )  
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
				SET @ovaResult = '1'; 
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END  


			IF (@vPassesValidations!=0 AND (@PENDING_QUANTITY IS NULL OR @PENDING_QUANTITY <= 0))  
			BEGIN  
				SET @vPassesValidations = 0 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_PENDING_QUANTITY_INVAL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @PENDING_QUANTITY_STR, 105), @FILE_ROW_NUMBER, 'PENDING_QUANTITY', @FILE_NAME, @UPDATE_DATE )  
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1  
				SET @ovaResult = '1'; 
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END  


			IF (@vPassesValidations!=0 AND @UPDATE_DATE IS NULL)
			BEGIN 
				SET @vPassesValidations = 0
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_NULL, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_DATE', @FILE_NAME, @UPDATE_DATE )
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @UPDATE_DATE > @DATE_SERVER_NO_TIME)
			BEGIN
				SET @vPassesValidations = 0
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_GT_NOW, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_DATE', @FILE_NAME, @UPDATE_DATE )
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END

			IF (@vPassesValidations!=0 AND @UPDATE_DATE_OLD IS NOT NULL AND @UPDATE_DATE < @UPDATE_DATE_OLD)
			BEGIN 
				SET @vPassesValidations = 0
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) 
				VALUES (@vMSG_DEX_PURCHASE_UPDATE_DATE_LT_UPDATE_DATE_OLD, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, CONVERT(VARCHAR, @UPDATE_DATE_STR, 105), @FILE_ROW_NUMBER, 'UPDATE_DATE', @FILE_NAME, @UPDATE_DATE )
				SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1
				SET @ovaResult = '1';
				FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
				CONTINUE; 
			END


			IF (@vPassesValidations = 1) 
			BEGIN 
				IF( @ORDER_CREATION_DATETIME_OLD IS NULL ) 
				BEGIN 
					SET @ORDER_CREATION_DATETIME = @UPDATE_DATE;
				END 

				ELSE 
				BEGIN 
					SET @ORDER_CREATION_DATETIME = @ORDER_CREATION_DATETIME_OLD;
				END 

				SET @PROMISED_DELIVERY_DATETIME = dbo.ADD_TIME_TO_DATE(@PROMISED_DELIVERY_DATE, @SHIPPING_TIME_DEST); 
				IF (@PO_TYPE = 'S') 
				BEGIN 
					IF (@CDPURCHASE_ORDER_OLD IS NULL) 
					BEGIN 
						SELECT @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK = MAX(O.PROMISED_DELIVERY_DATETIME) FROM TFSCM_CLI_PURCHASE_ORDERS O WHERE 
						O.SKU = @SKU AND O.DESTINATION = @DESTINATION AND O.PO_TYPE = 'S' AND dateadd(mi, datediff(mi, 0, O.PROMISED_DELIVERY_DATETIME), 0) =  dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) 

						IF (@CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK IS NOT NULL) 
						BEGIN 
							SET @PROMISED_DELIVERY_DATETIME = DATEADD(MS, 3, @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK)
						END 

					END 
					ELSE 
					BEGIN 
						IF ( @SKU = @SKU_OLD AND @DESTINATION = @DESTINATION_OLD AND dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) = dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME_OLD), 0) ) 
						BEGIN 
							SET @PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME_OLD 
						END 
						ELSE 
						BEGIN 
							SELECT @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK = MAX(O.PROMISED_DELIVERY_DATETIME) FROM TFSCM_CLI_PURCHASE_ORDERS O WHERE 
							O.SKU = @SKU AND O.DESTINATION = @DESTINATION AND O.PO_TYPE = 'S' AND dateadd(mi, datediff(mi, 0, O.PROMISED_DELIVERY_DATETIME), 0) =  dateadd(mi, datediff(mi, 0, @PROMISED_DELIVERY_DATETIME), 0) 

							IF (@CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK IS NOT NULL) 
							BEGIN 
								SET @PROMISED_DELIVERY_DATETIME = DATEADD(MS, 3, @CURRENT_NEW_PROMISED_DELIVERY_DATETIME_STOCK)
							END 

						END 
					END 
				END 

				SET @NECESSITY_DATETIME = '1901-01-01 00:00' 

				IF (@UPDATE_DATE < @DATE_SERVER_NO_TIME) 
				BEGIN 
					SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@UPDATE_DATE,@SHIPPING_TIME_DEST) 
				END 
				ELSE 
				BEGIN 
					SET @DATE_CALCULATION = GETDATE() 
				END 
               
				IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR_DEST)) > 0) 
				BEGIN 
					SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION ,@CDCALENDAR_DEST) 
				END 
               
				SET @DATE_CALCULATION_FINALIZATION = @DATE_CALCULATION 
               
               -- Priority for 'O' Orders will be calculated after finish
				IF ( @PO_TYPE = 'O') 
				BEGIN 
					SET @PRIORITY       = @PRIORITY_OLD;
					SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD;
					
					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) 
					BEGIN 
						SET @COLOR_CHANGE_DATE = '1901-01-01 00:00:00';
						SET @MANAGED           = 1;
					END 
					ELSE 
					BEGIN 
						SET @COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE_OLD;
						SET @MANAGED           = @MANAGED_OLD;
					END 
				/* 	EXEC SP_GET_PURCHASE_PRIORITY_VALUES @DATE_CALCULATION, @ORDER_CREATION_DATETIME, @PROMISED_DELIVERY_DATETIME, @NECESSITY_DATETIME, @CDCALENDAR_DEST, @PRIORITY OUTPUT, @PRIORITY_COLOR OUTPUT, @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT;
					SET @COLOR_CHANGE_DATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@COLOR_CHANGE_DATE, @PRIORITY_COLOR_OLD,@PRIORITY_COLOR, @UPDATE_DATE, @CDPURCHASE_ORDER, 1);
					SET @MANAGED = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDPURCHASE_ORDER);
				*/ 
				END 
				ELSE 
				IF (@PO_TYPE = 'S') 
				BEGIN 
					SET @PRIORITY = @PRIORITY_OLD
					SET @PRIORITY_COLOR = @PRIORITY_COLOR_OLD
					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) 
					BEGIN 
						SET @COLOR_CHANGE_DATE = '1901-01-01 00:00:00' 
					END 
					ELSE 
					BEGIN 
						SET @COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE_OLD 
					END 
					IF ( @COLOR_CHANGE_DATE_OLD IS NULL) 
					BEGIN 
						SET @MANAGED = 1
					END 
					ELSE 
					BEGIN 
						SET @MANAGED = @MANAGED_OLD
					END 

				END 

				-- Establece la precision, en este caso solo es un campo y no fue necesario establecerla en las validaciones 
				SET @PENDING_QUANTITY = dbo.VALIDATE_COLUMN_ACCURACY(@INVENTORY_ACCURACY,@PENDING_QUANTITY) 

				IF @CDPURCHASE_ORDER_OLD IS NULL
				BEGIN
					SET @CREATION_DATE = GETDATE()

					INSERT INTO TFSCM_CLI_PURCHASE_ORDERS (CDPURCHASE_ORDER,DESTINATION,PENDING_QUANTITY,PO_TYPE,PROMISED_DELIVERY_DATE,SKU,SUPPLIER,UPDATE_DATE,ORDER_VALUE,UNITS,FINALIZATION_DATE,CREATION_DATE,CREATION_USER,MODIFICATION_DATE,MODIFICATION_USER,ORDER_CREATION_DATETIME,PROMISED_DELIVERY_DATETIME,NECESSITY_DATETIME,PRIORITY,PRIORITY_COLOR,COLOR_CHANGE_DATE,MANAGED,EXCHANGES_IN_QUARANTINE,QUARANTINE_DATE)

					VALUES (@CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @ORDER_VALUE, @UNITS, @FINALIZATION_DATE, @CREATION_DATE, @ivaCreatorOrModifyUser, @CREATION_DATE, @ivaCreatorOrModifyUser, @ORDER_CREATION_DATETIME, @PROMISED_DELIVERY_DATETIME, @NECESSITY_DATETIME, @PRIORITY, @PRIORITY_COLOR, @COLOR_CHANGE_DATE, @MANAGED, @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE)
               END
				ELSE 
				BEGIN 
					UPDATE TFSCM_CLI_PURCHASE_ORDERS
					   SET DESTINATION = @DESTINATION,
						   PENDING_QUANTITY = @PENDING_QUANTITY,
						   PROMISED_DELIVERY_DATE = @PROMISED_DELIVERY_DATE,
						   SKU = @SKU,
						   UPDATE_DATE = @UPDATE_DATE,
						   MODIFICATION_DATE = GETDATE()
						   ,MODIFICATION_USER = @ivaCreatorOrModifyUser
						   ,ORDER_CREATION_DATETIME = @ORDER_CREATION_DATETIME
						   ,PROMISED_DELIVERY_DATETIME = @PROMISED_DELIVERY_DATETIME
						   ,NECESSITY_DATETIME = @NECESSITY_DATETIME
						   ,PRIORITY = @PRIORITY
						   ,PRIORITY_COLOR = @PRIORITY_COLOR
						   ,COLOR_CHANGE_DATE = @COLOR_CHANGE_DATE
						   ,MANAGED = @MANAGED

					 WHERE CDPURCHASE_ORDER = @CDPURCHASE_ORDER AND SUPPLIER = @SUPPLIER
				END 


				IF (@PO_TYPE = 'S')
				BEGIN
					IF NOT EXISTS (SELECT TOP 1 1 FROM @vTEMPORARY_ASSOCIATED_BUFFER WHERE SKU = @SKU AND LOCATION = @DESTINATION)
					BEGIN
						INSERT INTO @vTEMPORARY_ASSOCIATED_BUFFER VALUES (@SKU, @DESTINATION)
					END
				END


				SET @ovaHasProcessed = '1';
				UPDATE TFSCM_CLI_PURCHASE_ORDERS_TEMP
				   SET STATUS = 1 
				WHERE ID = @ID_TEMP 


				SET @vProcessPurchaseOrdersCount = @vProcessPurchaseOrdersCount + 1 
			END 
		END TRY
		BEGIN CATCH 
			SET @vErrorsPurchaseOrdersCount = @vErrorsPurchaseOrdersCount + 1 
			SET @ovaResult = '1';
			SET @ovaMessage = ' ERROR_MESSAGE: '+ERROR_MESSAGE(); 

			BEGIN TRY 
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_UNEXPECTED_ERROR + '<br><br>' + @ovaMessage, NULL, 'E', GETDATE(),
					    @CDPURCHASE_ORDER, @DESTINATION, NULL, @FILE_ROW_NUMBER, NULL, @FILE_NAME, @UPDATE_DATE ) 
			END TRY 
			BEGIN CATCH 
			END CATCH 
		END CATCH 

		SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1
		IF (@vCOMMIT_COUNT = 10) 
		BEGIN 
			COMMIT;
			SET @vCOMMIT_COUNT = 0
		END
	
		FETCH NEXT FROM cDataTempCursor INTO @CDPURCHASE_ORDER, @DESTINATION, @PENDING_QUANTITY, @PO_TYPE, @PROMISED_DELIVERY_DATE, @SKU, @SUPPLIER, @UPDATE_DATE, @CDPURCHASE_ORDER_OLD, @PO_TYPE_OLD, @SKU_OLD, @BUFFER_SKU , @DESTINATION_OLD, @DESTINATION_IS_ACTIVE, @DESTINATION_IS_ACTIVE_OLD, @DESTINATION_LOCATION_TYPE , @DESTINATION_LOCATION_TYPE_OLD , @SUPPLIER_OLD, @LSUPPLIER_DB_CDLOCATION , @LSUPPLIER_DB_LOCATION_TYPE , @ORDER_CREATION_DATE_OLD , @CDCALENDAR_DEST, @CDCALENDAR_DEST_OLD, @SHIPPING_TIME_DEST, @SHIPPING_TIME_DEST_OLD, @PROMISED_DELIVERY_DATE_OLD, @NECESSITY_DATE_OLD, @PENDING_QUANTITY_OLD, @ORDER_VALUE_OLD, @UPDATE_DATE_OLD, @UNITS_OLD, @INVENTORY_ACCURACY, @INVENTORY_ACCURACY_OLD, @FINALIZATION_DATE_OLD, @ORDER_CREATION_DATETIME_OLD, @PROMISED_DELIVERY_DATETIME_OLD, @PRIORITY_OLD, @PRIORITY_COLOR_OLD, @COLOR_CHANGE_DATE_OLD, @MANAGED_OLD, @ID_TEMP, @FILE_NAME, @FILE_ROW_NUMBER, @PROMISED_DELIVERY_DATE_STR, @PENDING_QUANTITY_STR, @UPDATE_DATE_STR
	END

	-- Check if there are Purchasing Orders to set in Quarantine
	EXEC SP_SET_PURCHASE_ORDERS_IN_QUARANTINE @ivaIdExchange, @UPDATE_DATE, /*@ivaCreatorOrModifyUser,*/ @vErrorsPurchaseOrdersCount,@ivaErrorValidations, @ovaResultQuarantine OUTPUT, @ovaMessageQuarantine OUTPUT;

	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageQuarantine; 

	IF @ovaResultQuarantine = '1' 
	BEGIN 
		SET @ovaResult = '1';
	END

	EXEC FINISHED_PURCHASE_ORDERS @ivaIdExchange, @UPDATE_DATE, /*@DATE_CALCULATION_FINALIZATION,*/ @ivaCreatorOrModifyUser, @ovaResultFinished OUTPUT, @ovaMessageFinished OUTPUT;

	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageFinished; 

	IF @ovaResultFinished = '1' 
	BEGIN 
		SET @ovaResult = '1';
	END 

	EXEC AFTER_FINISHED_PURCHASE_ORDERS_ACTIONS @DATE_CALCULATION_FINALIZATION, @ovaResultAfthetF OUTPUT , @ovaMessageAfthetF OUTPUT

	SET @ovaMessageFinishedTotal = @ovaMessageFinishedTotal + ', ' + @ovaMessageAfthetF;

	IF @ovaResultAfthetF = '1'
	BEGIN
		SET @ovaResult = '1'
	END 


	CLOSE cDataTempCursor
	DEALLOCATE cDataTempCursor
	SET @vTrace = 'go inside the cursor cDataTempCursor  '

	IF EXISTS (SELECT TOP 1 1 FROM @vTEMPORARY_ASSOCIATED_BUFFER)
	BEGIN
		DECLARE @SKU_TEMPORARY AS VARCHAR(50)
		DECLARE @LOCATION_TEMPORARY AS VARCHAR(50)
		DECLARE @SUM_PENDING_QUANTITY_TEMPORARY AS NUMERIC(17,5)
		DECLARE @TOTAL_INVENTORY_ON_PURCHASING AS NUMERIC(17,5)

		DECLARE SUM_PENDING_QUANTITY_CURSOR CURSOR FAST_FORWARD FOR 
		 SELECT SKU, LOCATION 
		   FROM @vTEMPORARY_ASSOCIATED_BUFFER

		OPEN SUM_PENDING_QUANTITY_CURSOR   

		FETCH NEXT FROM SUM_PENDING_QUANTITY_CURSOR INTO @SKU_TEMPORARY, @LOCATION_TEMPORARY 
		WHILE (@@FETCH_STATUS = 0 ) 
		BEGIN 
			SELECT @SUM_PENDING_QUANTITY_TEMPORARY = SUM(PO.PENDING_QUANTITY) 
			  FROM TFSCM_CLI_PURCHASE_ORDERS PO, TFSCM_CLI_BUFFER BUFFER
			 WHERE PO.SKU = @SKU_TEMPORARY AND PO.DESTINATION = @LOCATION_TEMPORARY AND PO.PO_TYPE = 'S'
			   AND PO.SKU = BUFFER.SKU AND PO.DESTINATION = BUFFER.LOCATION 
			   AND PO.EXCHANGES_IN_QUARANTINE = 0 AND PO.FINALIZATION_DATE = '1901-01-01 00:00:00'; 

			SELECT @TOTAL_INVENTORY_ON_PURCHASING = B.TOTAL_INVENTORY_ON_PURCHASING 
			  FROM TFSCM_CLI_BUFFER B 
			 WHERE B.SKU = @SKU_TEMPORARY AND B.LOCATION = @LOCATION_TEMPORARY 

			IF (@SUM_PENDING_QUANTITY_TEMPORARY <> @TOTAL_INVENTORY_ON_PURCHASING)
			BEGIN
				INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)  
				VALUES (@vMSG_DEX_PURCHASE_PENDING_QUANTITY_ALERT, NULL, 'A', GETDATE(),
					    @SKU_TEMPORARY, @LOCATION_TEMPORARY, FORMAT(CONVERT(NUMERIC(12,2), @SUM_PENDING_QUANTITY_TEMPORARY, 105),  '#0.00'), @FILE_ROW_NUMBER, 'PENDING_QUANTITY', @FILE_NAME, GETDATE() ) 
			END

			FETCH NEXT FROM SUM_PENDING_QUANTITY_CURSOR INTO @SKU_TEMPORARY, @LOCATION_TEMPORARY 
		END

		CLOSE SUM_PENDING_QUANTITY_CURSOR			
		DEALLOCATE SUM_PENDING_QUANTITY_CURSOR	
	END


	IF(@ovaHasProcessed = '1')
	BEGIN 
		UPDATE TBL 
		   SET TBL.UPGRADE_TABLE_DATE = GETDATE() 
		  FROM TFSCM_COM_TABLES TBL 
		  JOIN TFSCM_DEX_INTERFACES INTER ON (INTER.CDTABLE = TBL.CDTABLE) 
		   AND INTER.CDINTERFACE = 5
	END 

	SET @ovaMessage =  @vMSG_DEX_PURCHASE_SUCESSFUL_ORDERS+':' + CAST ( @vProcessPurchaseOrdersCount AS varchar ) + ', '+ @vMSG_DEX_PURCHASE_ERROR_ORDERS+':' + CAST ( @vErrorsPurchaseOrdersCount AS varchar ) + @ovaMessageFinishedTotal 
	SET @vTotalErrorsPurchaseOrders = (@vErrorsPurchaseOrdersCount + @ivaErrorValidations)

	SELECT @vMessagesAfterDataExchange = P.PARAM_VALUE 
	  FROM TFSCM_COM_PARAMS P 
	 WHERE P.CDPARAM = 'MESSAGES_AFTER_DATAEXCHANGE'

	IF( @vTotalErrorsPurchaseOrders > 0 AND @vMessagesAfterDataExchange = 'Y')
	BEGIN	
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'ODE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
		EXEC SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION @vTotalErrorsPurchaseOrders, 'ODE', 'PURCHASE_ORDERS_GENERAL_PRIORITIZING', @ovaResultAddViewNot OUTPUT, @ovaMessageAddViewNot OUTPUT
	END		

	IF(@vTotalErrorsPurchaseOrders = 0 AND @vMessagesAfterDataExchange = 'Y' AND @ovaHasProcessed = '1')
	BEGIN 
		EXEC SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION 'ODE', @ovaResultRemoveViewNot OUTPUT, @ovaMessageRemoveViewNot OUTPUT
	END
END TRY 
BEGIN CATCH 
	SET @ovaResult  = '1';
	SET @ovaMessage = 'ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
		+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
		+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[PURCHASE_ORDERS]') 
		+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR) 
		+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()

	IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (-1,0,1)) 
	BEGIN 
		IF ((SELECT CURSOR_STATUS('global','cDataTempCursor')) IN (0,1)) 
		BEGIN 
			CLOSE cDataTempCursor; 
		END 
		DEALLOCATE cDataTempCursor; 
	END 
END CATCH 
END 
GO
/****** Object:  StoredProcedure [dbo].[QUARANTINE_PRODUCTION_ORDERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- ---------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 12/02/2016
-- Description: Change required to include only structural errors
-- --------------------------------------------------------------------------- 
-- ===========================================================================
-- ===========================================================================
-- ---------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 02/1O/2015
-- Description: Method to set production orders in quarantine when structural and business errors exist
-- --------------------------------------------------------------------------- 
-- ===========================================================================
-- ---------------------------------------------------------------------------
-- Modified   : Julián Andrés González Vélez
-- Date       : 04/08/2016
-- Description: adding a new condition into the where statemet due to the production
--				family can be change.
-- --------------------------------------------------------------------------- 

CREATE PROCEDURE [dbo].[QUARANTINE_PRODUCTION_ORDERS] 
   /* Input Parameters */
    @ivaIdExchange NUMERIC(10),
	@vORDER_MODIFY_DATE AS DATETIME,
	@vMODIFY_USER AS VARCHAR(50),
	@ivaBusinessTotalErrors NUMERIC(10),
	@ivaStructuralTotalErrors NUMERIC(10),
    @ovaResult VARCHAR(1) OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT
AS
DECLARE @vTrace AS NVARCHAR(MAX); 
DECLARE @vErrorsQuarantineProductionOrdefrsCount AS INT = 0;
DECLARE @vProcessQuarantineProductionOrdersCount AS INT = 0;
DECLARE @CDORDER_CHILD AS VARCHAR(50);
DECLARE @ovaPriorityResul NUMERIC(10,2) ;
DECLARE @ovaYellowZoneStart NUMERIC(5,2);
DECLARE @ovaRedZoneStart NUMERIC(5,2);
DECLARE @skuBefore AS VARCHAR(50);
DECLARE @cdDestinationBefore AS VARCHAR(50);
DECLARE @sumProductionStock NUMERIC(38,5);
DECLARE @vCOMMIT_COUNT AS NUMERIC(4) = 0;
DECLARE @vQuarantineDate AS DATETIME;

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @ovaResult = '0';
		SET @ovaMessage = '';				  
		SET @vTrace = 'getting the table name'		
		SET @skuBefore= '';
		SET @cdDestinationBefore ='';		
		SET @vQuarantineDate = CONVERT(DATETIME,'01/01/1901',103);		
		---------- MESSAGES ---------------------------------------- 
		DECLARE @vLanguage AS VARCHAR(2) = 'es';  
		DECLARE @vDaysToKeepProductionOrders AS NUMERIC(8);
		DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED AS NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS AS NVARCHAR(MAX);  
		
		
		--Table used for insert every distinc CDPARENT proccesed by excecution date.
		DECLARE @opProccesed table(
		CDPARENT_ORDER VARCHAR(50));

		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE  
			FROM  TFSCM_COM_PARAMS 
			WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE'			
			
			SELECT TOP(1) @vDaysToKeepProductionOrders =  PARAM_VALUE FROM TFSCM_COM_PARAMS
			WHERE CDPARAM = 'DAYS_TO_KEEP_PRODUCTION_ORDERS_IN_QUARANTINE'
			
			IF(@vDaysToKeepProductionOrders IS NULL)
			BEGIN
				SET @vDaysToKeepProductionOrders = 0;
			END 

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL OUTPUT 
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED OUTPUT 
					
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS OUTPUT 
			
			
		END TRY  
		BEGIN CATCH 
			SET @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL = 'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL' 
			SET @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED = 'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED' 
			SET @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS   = 'DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_ERRORS'
			
		END CATCH 
		----------------------------------------------------------- 
	
		IF(@vDaysToKeepProductionOrders > 0)
		BEGIN	
		--Look for locations in the temporal table; 
		--Look for production orders related to the locations, the production orders are not reported in the current 
		--data exchange or has structural errors when they were reported.
		--Records found has to be set in quarantine if the configurations is allowing this behavior.
		
		
		--The Next update reset to zero all quarantine orders when the conditions aply 
			UPDATE PO
			SET PO.EXCHANGES_IN_QUARANTINE	= 0,
			PO.QUARANTINE_DATE				= @vQuarantineDate
			FROM 
			TFSCM_CLI_PRODUCTION_ORDERS PO										
			INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = PO.CDFAMILY)
			INNER JOIN TFSCM_CLI_LOCATION CL ON (CL.CDLOCATION = CPF.CDLOCATION)
				WHERE CPF.CDLOCATION        IN (SELECT DISTINCT CPF.CDLOCATION
											  FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
												   INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = TMP.CDFAMILY) 
											 WHERE TMP.IDEXCHANGE        = @ivaIdExchange 
											   AND TMP.ORDER_MODIFY_DATE = @vORDER_MODIFY_DATE 
											   AND TMP.STATUS            = 1)  			
				AND PO.FINALIZATION_DATE IS NULL 	
				AND ((	PO.CDORDER NOT IN (SELECT T.CDORDER
									 FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP T
									  WHERE T.CDORDER		 = PO.CDORDER
									  AND T.IDEXCHANGE       = @ivaIdExchange 
									  AND T.ORDER_MODIFY_DATE      = @vORDER_MODIFY_DATE)
									  
						AND 
						@ivaStructuralTotalErrors = 0)
						
						OR PO.CDORDER  IN (SELECT T.CDORDER
											 FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP T
											  WHERE T.CDORDER		 = PO.CDORDER
											  AND T.IDEXCHANGE       = @ivaIdExchange 
											  AND T.ORDER_MODIFY_DATE      = @vORDER_MODIFY_DATE 
											  AND T.STATUS           = 1)
					)
					
					
				--The Next update set in quarantine all prodution orders where e family is ok, at least on order of the plant is reported 
				--Or the order was reported but didn't pass business validation (T.STATUS = 0).
			UPDATE PO
			SET PO.EXCHANGES_IN_QUARANTINE	= PO.EXCHANGES_IN_QUARANTINE+1
			FROM 
			TFSCM_CLI_PRODUCTION_ORDERS PO										
			INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = PO.CDFAMILY)
			INNER JOIN TFSCM_CLI_LOCATION CL ON (CL.CDLOCATION = CPF.CDLOCATION)
				WHERE (CPF.CDLOCATION        IN (SELECT DISTINCT CPF.CDLOCATION
											  FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
												   INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = TMP.CDFAMILY) 
											 WHERE TMP.IDEXCHANGE        = @ivaIdExchange 
											   AND TMP.ORDER_MODIFY_DATE = @vORDER_MODIFY_DATE 
											   AND TMP.STATUS            = 1)  			
				AND PO.FINALIZATION_DATE IS NULL 	
				AND ((	PO.CDORDER NOT IN (SELECT T.CDORDER
									 FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP T
									  WHERE T.CDORDER		 = PO.CDORDER
									  AND T.IDEXCHANGE       = @ivaIdExchange 
									  AND T.ORDER_MODIFY_DATE      = @vORDER_MODIFY_DATE)
									  
						AND 
						@ivaStructuralTotalErrors > 0)
						
						OR PO.CDORDER  IN (SELECT T.CDORDER
											 FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP T
											  WHERE T.CDORDER		 = PO.CDORDER
											  AND T.IDEXCHANGE       = @ivaIdExchange 
											  AND T.ORDER_MODIFY_DATE      = @vORDER_MODIFY_DATE 
											  AND T.STATUS           = 0)
					))
					
					
				
			--Set the children quarantine values from parent record 	
			UPDATE PO
			SET PO.EXCHANGES_IN_QUARANTINE	= PO2.EXCHANGES_IN_QUARANTINE
			FROM 
			TFSCM_CLI_PRODUCTION_ORDERS PO, TFSCM_CLI_PRODUCTION_ORDERS PO2
			WHERE PO.CDPARENT_ORDER = PO2.CDORDER
			AND PO.FINALIZATION_DATE IS NULL 
			AND PO2.CDPARENT_ORDER IS NULL
			AND PO2.CDORDER IN (SELECT DISTINCT TMP.CDORDER
											  FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP 
												   INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = TMP.CDFAMILY) 
											 WHERE TMP.IDEXCHANGE        = @ivaIdExchange 
											   AND TMP.ORDER_MODIFY_DATE = @vORDER_MODIFY_DATE) 
											   
			
	
		END	
		IF((@ivaBusinessTotalErrors+@ivaStructuralTotalErrors) > 0)
		BEGIN 
			SET @ovaMessage =  '<br>'+'( ' + @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_SUCESSFUL+' )'			
		END	
		ELSE
		BEGIN
			SET @ovaMessage =  '<br>'+'( ' + @vMSG_DATA_EXCHANGE_QUARANTINE_PRODUCTION_ORDERS_NOT_OCURRED+' )'
		END
		
	END TRY
	
	BEGIN CATCH
	
		IF ((SELECT CURSOR_STATUS('global','cQuarantineLocationTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cQuarantineLocationTempCursor')) IN (0,1))
			BEGIN
				CLOSE cQuarantineLocationTempCursor;  		
			END
			DEALLOCATE cQuarantineLocationTempCursor;  
		END

		IF ((SELECT CURSOR_STATUS('global','cQuarantineOrderTempCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cQuarantineOrderTempCursor')) IN (0,1))
			BEGIN
				CLOSE cQuarantineLocationTempCursor;  		
			END
			DEALLOCATE cQuarantineLocationTempCursor;  
		END			
	
	
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage =  'QUARANTINE_PRODUCTION_ORDERS: ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
		
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[REBOOT_DAYS_SINCE_LAST_OUT_COUNT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Modified    : Michal MokroÃ…Â¡ 
-- Upgrade date: 09/01/2020
-- Description : Cursor replaced by set-based solution
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author:		Hernan Dario Jimenez
-- Create date: 19-12-2014
-- ===========================================================================================
CREATE PROCEDURE [dbo].[REBOOT_DAYS_SINCE_LAST_OUT_COUNT]
	/* Input Parameters */
	@ivaBufferInfo VARCHAR(MAX),
	@ovaResult     VARCHAR(1)    OUTPUT, 
	@ovaMessage    NVARCHAR(MAX) OUTPUT	
AS
BEGIN
	SET NOCOUNT ON;

    BEGIN TRY
		UPDATE TFSCM_CLI_BUFFER
           SET TFSCM_CLI_BUFFER.DAYS_SINCE_LAST_OUT = 0
          FROM (SELECT items AS SKU FROM dbo.split(@ivaBufferInfo, ',')) BUFFER_INFO
		 INNER JOIN TFSCM_CLI_BUFFER
            ON BUFFER_INFO.SKU = TFSCM_CLI_BUFFER.SKU;

		SET @ovaResult  = '0';
		SET @ovaMessage = 'OK';
	END TRY
	BEGIN CATCH
		SET @ovaResult  = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[REBOOT_DAYS_SINCE_LAST_OUT_COUNT]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Michal Mokros
-- Upgrade date: 20/05/2020
-- Description : Change CDUSER by USER_ID/USERNAME
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author:		Jag
-- Create date: 24-06-2016
-- Description:	Function to inster data exchange notifications by view
-- ===========================================================================================
CREATE PROCEDURE [dbo].[SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION] 
  (	/* Input Parameters */
    @ivaErrorsCount			NUMERIC(8),
   	@ivaNotificationType	VARCHAR(3),
   	@ivaViewType			VARCHAR(50),	
    /* Output Parameters */
    @ovaResult              VARCHAR(1)    OUTPUT,
    @ovaMessage             NVARCHAR(MAX) OUTPUT 
  ) 
AS 
	DECLARE @cdUserId				 BIGINT;
	DECLARE @cdView					 INT;
	DECLARE @showInContrlpanel		 BIT;
	DECLARE @outputIdNotificationTbl table (ID NUMERIC(18));
	DECLARE @outputIdNotification    NUMERIC(18);
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY 
	
		DECLARE cUserCursor CURSOR FAST_FORWARD FOR 
		 SELECT USER_ID FROM TFSCM_COM_USERS			
		
		OPEN cUserCursor 
		FETCH NEXT FROM cUserCursor INTO @cdUserId;
		
		WHILE (@@FETCH_STATUS = 0)
		BEGIN	
			SET @showInContrlpanel = 0;	
			SET @cdView = 0;
					
			SELECT TOP(1) @cdView = CDVIEW 
			  FROM TFSCM_CLI_VIEWS
			 WHERE USER_ID         = @cdUserId
			   AND IS_INITIAL_VIEW = 'Y';

			IF (@cdView = 0)
			BEGIN 
				SELECT TOP(1) @cdView = CDVIEW
				  FROM TFSCM_CLI_VIEWS 
				 WHERE VIEW_TYPE         = @ivaViewType
				   AND USER_ID           = @cdUserId
				   AND IS_AUTO_GENERATED = 'Y';

				SET @showInContrlpanel = 1;
			END	

			-- PRINT 	'@cdUserId: '+@cdUserId+' VIEW : '+CAST(@cdView AS VARCHAR)	
			-- PRINT 	' VIEW : '+CAST(@cdView AS VARCHAR)	
			
			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS (MESSAGE, NOTIFICATION_TYPE, SHOW_IN_CONTROL_PANEL) 
			OUTPUT INSERTED.ID_MESSAGESNOTIFICATIONS INTO @outputIdNotificationTbl(ID)  
			VALUES (@ivaErrorsCount, @ivaNotificationType, @showInContrlpanel);

			SELECT TOP(1) @outputIdNotification = ID 
			  FROM @outputIdNotificationTbl;

			INSERT INTO TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS (CDVIEW, ID_MESSAGESNOTIFICATIONS) 
			VALUES (@cdView,@outputIdNotification);

			DELETE FROM @outputIdNotificationTbl;
			
			FETCH NEXT FROM cUserCursor INTO @cdUserId;		
		END
		
		CLOSE cUserCursor;
		DEALLOCATE cUserCursor;		
	END TRY 
	BEGIN CATCH 
		SET @ovaResult = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[SP_ADD_VIEW_DATA_EXCHANGE_NOTIFICATION]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cUserCursor')) IN (-1,0,1))
		BEGIN 
			IF ((SELECT CURSOR_STATUS('global','cUserCursor')) IN (0,1)) 
			BEGIN 
				CLOSE cUserCursor; 
			END 
			DEALLOCATE cUserCursor; 
		END 
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ALTER_TEMP_TABLE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 12/01/2021
-- Description : Add to or remove from the temporary table the string column related to the 
--               numeric ones
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 10/08/2020
-- Description : validanding before of delete column 
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author:      Oscar Londoño  
-- Create date: 2013-10-03 
-- Description:	Procedure for altering tables
-- ===========================================================================================
CREATE PROCEDURE [dbo].[SP_ALTER_TEMP_TABLE] 
	/* Input Parameters */
	@cdInterface AS SMALLINT,
	@cdColumn    AS VARCHAR(50) ,
	@cdOperation AS VARCHAR(1),
	/* Output Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT
AS
    -- -----------------------------------------------------------------------
	-- Fields use for altering
    -- -----------------------------------------------------------------------
	DECLARE	 
		@vTableName       AS VARCHAR(50), 
		@vColumnName      AS VARCHAR(50),
		@vColumnType      AS VARCHAR(50),
		@vColumnSize      AS VARCHAR(10),       
		@vIsNullable      AS VARCHAR(10),     
		@vColumnAccuracy  AS SMALLINT,
		@vTotalColumnSize AS SMALLINT,
		@vSqlAlter        AS VARCHAR(MAX) = '',
		@vSqlTmp          AS VARCHAR(MAX) = '',
		@vIdxTmp          AS VARCHAR(MAX) = '',
		@vTrace           AS NVARCHAR(MAX) = '';
			
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT
		-- statements.
		SET NOCOUNT ON;

		SET @vTrace = 'getting the column attributes';
		   
		IF (@cdOperation = 'I')
		BEGIN
			--PRINT '@cdOperation = ''I'' --> Insert Operation'
			--PRINT  'Coje ' +    @vTableName + ' y ' + @vColumnName + ' y ' + @vColumnType  + ' y '+ @vColumnSize + ' y ' + @vIsNullable + ' y ' + CAST (@vColumnAccuracy AS VARCHAR);
			SELECT @vTableName      = T.TABLE_NAME_TEMP,
				   @vColumnName     = C.CDCOLUMN,
				   @vColumnType     = UPPER(C.DSTYPE),
				   @vColumnSize     = (CASE UPPER(C.DSTYPE)
								    		WHEN 'VARCHAR' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
								    		WHEN 'NUMERIC' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
								    		ELSE ''
								    	END),
				   @vIsNullable     = (CASE C.IS_NULLABLE
								    		WHEN 'N' THEN ' NOT NULL '
								    		ELSE ' NULL '
								    	END),
				   @vColumnAccuracy = C.COLUMN_ACCURACY
			  FROM [dbo].[TFSCM_DEX_INTERFACES] AS [I],
				   [dbo].[TFSCM_COM_COL_TABLE]  AS [C],
				   [dbo].[TFSCM_COM_TABLES]     AS [T]
			 WHERE I.CDINTERFACE = @cdInterface
			   AND C.CDCOLUMN	 = @cdColumn
			   AND T.TABLE_NAME_TEMP IS NOT NULL
			   AND RTRIM(LTRIM(T.TABLE_NAME_TEMP)) <> ''
			   AND T.CDTABLE     = I.CDTABLE
			   AND C.CDTABLE     = T.CDTABLE;

			SET @vTrace = 'Constructing alter statement';
			IF (@vColumnType = 'BOOLEAN')
			BEGIN
				SET @vColumnType = 'BIT';
			END

			SET @vSqlAlter =  'ALTER TABLE ' + @vTableName + ' ADD ' + @vColumnName + ' ' + @vColumnType;

			IF (@vColumnSize <> '') 
			BEGIN
				IF (@vColumnType = 'NUMERIC') 
				BEGIN
					IF (@vColumnAccuracy > 0)
					BEGIN
						SET @vColumnAccuracy = 5;
					END
					ELSE
					BEGIN
						SET @vColumnAccuracy = 0;
					END 

					SET @vTotalColumnSize = CAST(@vColumnSize AS SMALLINT) + @vColumnAccuracy;
					
					IF (@vTotalColumnSize > 38)
					BEGIN
						SET @vTotalColumnSize = 38;
					END

					SET @vSqlAlter = @vSqlAlter +' ('+ CAST(@vTotalColumnSize AS VARCHAR);	
					SET @vSqlAlter = @vSqlAlter +', '+ CAST(@vColumnAccuracy AS VARCHAR);					
				END
				ELSE
				BEGIN
					SET @vSqlAlter = @vSqlAlter + ' (' + @vColumnSize;
				END
				
				SET @vSqlAlter = @vSqlAlter +   ') ';
			END

			SET @vSqlAlter = @vSqlAlter +  @vIsNullable;
			
			IF (@vIsNullable = ' NOT NULL ')
			BEGIN				
				SET @vSqlAlter = @vSqlAlter + 
								(SELECT CASE @vColumnType
									WHEN 'VARCHAR'  THEN ' DEFAULT ''-'' '
									WHEN 'NUMERIC'  THEN ' DEFAULT -'+SUBSTRING('999999', 1, CAST(@vColumnSize AS INT))+' '
									WHEN 'BIT'      THEN ' DEFAULT 1 '
									WHEN 'DATETIME' THEN ' DEFAULT ''1901/01/01'' '
									ELSE ''
									END);
			END

			IF (@vTableName = 'TFSCM_CLI_PRODUCTION_ORDERS_TEMP')
			BEGIN
				IF (@vColumnName = 'CDPARENT_ORDER')
				BEGIN  
					--PRINT 'Alter create index '  
					SET @vIdxTmp =
						' CREATE NONCLUSTERED INDEX CURSOR_TFSCM_PROD_ORDERS_TEMP  ON  TFSCM_CLI_PRODUCTION_ORDERS_TEMP  ' +
						'	( CDORDER ASC, CDPARENT_ORDER ASC, CDORDER_TYPE ASC, CDDESTINATION ASC, CDFAMILY ASC ); '

					SET @vSqlAlter = @vSqlAlter +';'+ @vIdxTmp;
				END
			END

			-- -------------------------------------------------------------------------------
			-- OHLO 20210112: Since v5.3.0, for Exchange log purposes, add or remove the same  
			--                column name with '_STR' as sufix, and will store the raw value.
			-- -------------------------------------------------------------------------------
			IF (@vColumnType IN ('NUMERIC', 'DATETIME'))
			BEGIN
				SET @vSqlAlter = @vSqlAlter + CHAR(13) + 'ALTER TABLE ' + @vTableName + ' ADD ' + @vColumnName + '_STR VARCHAR(50);';
			END
			-- -------------------------------------------------------------------------------
		END 
		ELSE
		BEGIN
			IF (@cdOperation = 'D')
			BEGIN
				--PRINT '@cdOperation = ''D'' --> Delete Operation'
				--PRINT 'Col = '+ @cdColumn
				--PRINT 'Inter = '+ CAST(@cdInterface AS varchar)
				 
				SET @vColumnName = @cdColumn;

				/*SELECT @vTableName = [T].[TABLE_NAME_TEMP]
				  FROM [dbo].[TFSCM_DEX_INTERFACES] AS [I],
					   [dbo].[TFSCM_COM_TABLES] AS [T]
				 WHERE [I].[CDINTERFACE]      = @cdInterface
				   AND [T].[TABLE_NAME_TEMP] IS NOT NULL
				   AND RTRIM(LTRIM([T].TABLE_NAME_TEMP)) <> ''
				   AND [T].[CDTABLE]          = [I].CDTABLE; */

				SELECT @vTableName = [T].[TABLE_NAME_TEMP]
				  FROM [dbo].[TFSCM_DEX_INTERFACES] AS [I]
				  JOIN [dbo].[TFSCM_COM_TABLES] AS [T]
				    ON ([T].[CDTABLE]              = [I].[CDTABLE]
				    AND [I].[CDINTERFACE]          = @cdInterface
				    AND [T].[TABLE_NAME_TEMP]     IS NOT NULL
				    AND TRIM([T].TABLE_NAME_TEMP) <> '');

				--PRINT 'ColName '+ @vColumnName
				--PRINT 'Table '+ @vTableName

				IF (@vTableName = 'TFSCM_CLI_PRODUCTION_ORDERS_TEMP')
				BEGIN
					IF (@vColumnName = 'CDPARENT_ORDER')
					BEGIN  
						--PRINT 'Alter drop index '  
						SET @vIdxTmp =  
							'	IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]'') AND name = N''CURSOR_TFSCM_PROD_ORDERS_TEMP'') ' +
							'		DROP INDEX CURSOR_TFSCM_PROD_ORDERS_TEMP  ON  TFSCM_CLI_PRODUCTION_ORDERS_TEMP;';
						
						SET @vSqlAlter = @vSqlAlter + @vIdxTmp;
					END
				END

				SELECT @vSqlTmp = '	ALTER TABLE '+ @vTableName + ' DROP CONSTRAINT '+ dc.name + ';'
				  FROM sys.default_constraints dc, sys.columns c 
				 WHERE dc.parent_object_id = object_id( @vTableName)
				   AND dc.type = 'D'
				   AND dc.parent_column_id = c.column_id
	 			   AND c.object_id = object_id( @vTableName)
				   AND c.name = @vColumnName;
				   
				--PRINT 'Alter drop contraint  = '+ @vSqlTmp
				IF (@vSqlTmp IS NULL)
				BEGIN
					SET @vSqlTmp = ' ';
				END
				SET @vSqlAlter = @vSqlAlter + @vSqlTmp;

				--PRINT 'Alter so far  = '+ @vSqlAlter

				SET @vTrace    = 'Constructing drop statement';
				SET	@vSqlTmp = ''
					+ 'IF EXISTS (SELECT 1 FROM sys.sysobjects T INNER JOIN sys.syscolumns C ON T.id = C.id ' + CHAR(13)
					+ '			WHERE T.name = ''' +@vTableName + ''' AND C.name = ''' +@vColumnName + ''')' + CHAR(13)
					+ 'BEGIN' + CHAR(13);

				SET @vSqlAlter = @vSqlTmp + @vSqlAlter + CHAR(13)
					+ '	ALTER TABLE ' + @vTableName + ' DROP COLUMN ' + @vColumnName + ';' + CHAR(13)
					+ 'END' + CHAR(13);

				-- ---------------------------------------------------------------------------
				-- OHLO 20210112: Since v5.3.0, for Exchange log purposes, add or remove the  
				--                same column name with '_STR' as sufix, and will store the 
				--                raw value.
				-- ---------------------------------------------------------------------------
				SET	@vSqlTmp = ''
					+ 'IF EXISTS (SELECT 1 FROM sys.sysobjects T INNER JOIN sys.syscolumns C ON T.id = C.id ' + CHAR(13)
					+ '			WHERE T.name = ''' +@vTableName + ''' AND C.name = ''' +@vColumnName + '_STR'')' + CHAR(13)
					+ 'BEGIN' + CHAR(13)
					+ '	ALTER TABLE ' + @vTableName + ' DROP COLUMN ' + @vColumnName + '_STR;' + CHAR(13)
					+ 'END'; 
					
				SET @vSqlAlter = @vSqlAlter + CHAR(13) + @vSqlTmp;
				-- -------------------------------------------------------------------------------
				--PRINT 'Alter drop  = '+ @vSqlAlter
			END 
		END
		
		SET @vTrace = 'executing '+ @vSqlAlter;
		--PRINT @vTrace;
		EXEC (@vSqlAlter)

		SET @ovaResult = '0';
		SET @ovaMessage = 'successAlter ';
	    --PRINT @vTrace	
	END TRY
	
	BEGIN CATCH
		-- PRINT @vTrace	
		SET @ovaResult  = '1';
		SET @ovaMessage =  ' '
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST( ERROR_STATE() AS varchar )
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[SP_ALTER_TEMP_TABLE]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
	END CATCH
END 
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PURCHASE_PRIORITY_VALUES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Oscar Londoño Ospina
-- Create date: 21-04-2015
-- Description:	Function for calculating Purchase Order priority
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_GET_PURCHASE_PRIORITY_VALUES] 
  (	/* Input Parameters */
    @ivaCalculationDatetime      DATETIME,
   	@ivaOrderCreationDatetime    DATETIME,
    @ivaPromisedDeliveryDatetime DATETIME,
    @ivaNecessityDatetime        DATETIME,
    @ivaCdCalendar               NUMERIC(4,0), 	
    /* Output Parameters */
    @ovaPriority                 NUMERIC(17,2) OUTPUT,
    @ovaPriorityColor            VARCHAR(50)   OUTPUT,
    @ovaResult                   VARCHAR(1)    OUTPUT,
    @ovaMessage                  NVARCHAR(MAX) OUTPUT 
  ) 
-- WITH ENCRYPTION
AS 
	DECLARE @yellowZoneStart     NUMERIC(5,2);
	DECLARE @redZoneStart        NUMERIC(5,2);
	DECLARE @nonWorkingDays      NUMERIC(10,2);
	DECLARE @differenceDays      NUMERIC(14,4);
	DECLARE @purchaseBuffer      NUMERIC(14,4);
BEGIN
  	BEGIN TRY
		SET NOCOUNT ON;	
	
		-- -------------------------------------------------------------------
		-- MESSAGES
		-- -------------------------------------------------------------------
		DECLARE @vLanguage                             VARCHAR(2) = 'es';  
		DECLARE @vCodError                             VARCHAR(1); 
		DECLARE @vMessageError                         NVARCHAR(MAX);
		DECLARE @vMSG_GET_PURCHASE_PRIORITY_ERROR      NVARCHAR(MAX); 
		DECLARE @vMSG_GET_PURCHASE_PRIORITY_SUCCESS    NVARCHAR(MAX); 
		
		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE  
			  FROM TFSCM_COM_PARAMS 
			 WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';
			
			EXEC GET_MESSAGE @vCodError OUTPUT, @vMessageError OUTPUT,  
				'GET_PURCHASE_PRIORITY_SUCCESS', @vLanguage, '', '', '', @vMSG_GET_PURCHASE_PRIORITY_SUCCESS OUTPUT;
			
			EXEC GET_MESSAGE @vCodError OUTPUT, @vMessageError OUTPUT,  
				'GET_PURCHASE_PRIORITY_ERROR', @vLanguage, '', '', '', @vMSG_GET_PURCHASE_PRIORITY_ERROR OUTPUT;			
		END TRY  
		BEGIN CATCH  
			SET @vLanguage = 'es' 
			SET @vMSG_GET_PURCHASE_PRIORITY_SUCCESS = 'GET_PURCHASE_PRIORITY_SUCCESS';
			SET @vMSG_GET_PURCHASE_PRIORITY_ERROR   = 'GET_PURCHASE_PRIORITY_ERROR';			
		END CATCH 
		-- -------------------------------------------------------------------
		
		PRINT '-- ---------------------------------------------- '
		PRINT 'TIPO PEDIDO'
		PRINT '-- ---------------------------------------------- '
		IF (@ivaNecessityDatetime = '01/01/1901 00:00')
		BEGIN
			PRINT '	FeNecesi es 1901-01-01'
			SET @ivaNecessityDatetime = @ivaPromisedDeliveryDatetime;
			PRINT '	FeNecesi nueva es '+CAST (@ivaNecessityDatetime AS VARCHAR)
		END

		SET @nonWorkingDays = dbo.GET_CALCULATE_NON_WORKING_DAYS(@ivaNecessityDatetime, @ivaOrderCreationDatetime, @ivaCdCalendar);
		SET @purchaseBuffer = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@ivaNecessityDatetime, @ivaOrderCreationDatetime) - @nonWorkingDays;
		PRINT '	Dias no laborales entre FeCreOrden y FeNecesidad '+ CAST(@nonWorkingDays AS VARCHAR)
		PRINT '	Amortiguador de Compra  '+ CAST(@purchaseBuffer AS VARCHAR)
		IF (@purchaseBuffer <= 0)
		BEGIN
			SET @ovaPriority = 100;
			SET @ovaPriorityColor = 'Black'; 
			PRINT '		PRIORIDAD Es cero: 100% - Negra'
		END
		ELSE
		BEGIN
 			IF (@ivaNecessityDatetime = @ivaPromisedDeliveryDatetime)
			BEGIN
				SET @yellowZoneStart = 33.33;
				SET @redZoneStart    = 66.67;
				PRINT '			FeNece = FePromet -> ZonaAma  33.33 ZonaRoja 66.67'
			END
			ELSE IF (@ivaNecessityDatetime < @ivaPromisedDeliveryDatetime)
			BEGIN
				SET @yellowZoneStart = 0.00;
				SET @redZoneStart    = 0.00;
				PRINT '			FeNece < FePromet -> ZonaAma  0 ZonaRoja 0'
			END
			ELSE
			BEGIN
				--( @ivaNecessityDatetime > @ivaPromisedDeliveryDatetime ) 
				SET @nonWorkingDays  = dbo.GET_CALCULATE_NON_WORKING_DAYS(@ivaPromisedDeliveryDatetime, @ivaOrderCreationDatetime, @ivaCdCalendar);
				SET @differenceDays  = dbo.GET_CALCULATE_DIFFERENCE_DAYS_ACCURACY_MINUTES(@ivaPromisedDeliveryDatetime, @ivaOrderCreationDatetime) 
				
				SET @redZoneStart    = ((@differenceDays - @nonWorkingDays) / @purchaseBuffer) * 100.00;
				SET @yellowZoneStart = (@redZoneStart/ 2.00);
				PRINT '			FeNece > FePromet '
				PRINT '				DiasNoLab entre FeCreaOr y FeProm '+ CAST(@nonWorkingDays AS VARCHAR) 
				PRINT '				Dias Diff '+ CAST(@differenceDays AS VARCHAR)
				PRINT '				Resta '+ CAST((@differenceDays - @nonWorkingDays)  AS VARCHAR)
				PRINT '				Divi '+ CAST(((@differenceDays - @nonWorkingDays) / @purchaseBuffer)  AS VARCHAR)
				PRINT '				ZonaAma  '+ CAST(@yellowZoneStart AS VARCHAR)
				PRINT '				ZOnaRoja '+ CAST(@redZoneStart AS VARCHAR)
			END 
			
			SET @nonWorkingDays   = dbo.GET_CALCULATE_NON_WORKING_DAYS(@ivaNecessityDatetime, @ivaCalculationDatetime, @ivaCdCalendar);
			SET @ovaPriority      = dbo.GET_CALCULATE_PRIORITY(@ivaNecessityDatetime, @ivaCalculationDatetime, @purchaseBuffer, @nonWorkingDays,'O', -1,-1);
			PRINT '		Dias NoLab entre FeNece y FeCalculo '+ CAST(@nonWorkingDays AS VARCHAR)
			PRINT '		PRIORIDAD '+ CAST(@ovaPriority AS VARCHAR)

			SET @ovaPriorityColor = dbo.FN_GET_PURCHASE_PRIORITY_COLOR(@ovaPriority, @yellowZoneStart,@redZoneStart);
			PRINT '		 COLOR '+ @ovaPriorityColor
			
		END
		SET @ovaResult  = '0';
		SET @ovaMessage = @vMSG_GET_PURCHASE_PRIORITY_SUCCESS;
	END TRY 
	BEGIN CATCH 
		SET @ovaResult  = '1';
		SET @ovaMessage = @vMSG_GET_PURCHASE_PRIORITY_ERROR + ' <br> ' + ' <br> ' +
						   ' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		                   ' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+
                           ' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
                           ' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+
                           ' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+
                           ' ERROR_MESSAGE: '+ERROR_MESSAGE() ;
                           
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_STOCK_PURCHASE_PRIORITY_VALUES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 27/06/2017
-- Description : Select column PENDING_DEMAND used in priority calculation.
-- Version     : 4.7.0
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño Ospina
-- Creation date: 22-04-2015
-- Description  : Function for calculating Stock Purchase Order priority
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_GET_STOCK_PURCHASE_PRIORITY_VALUES] (
	/* Input Parameters */
   	@ivaYellowZoneStart          NUMERIC(5,2),
	@ivaRedZoneStart             NUMERIC(5,2),
	@ivaBuffer                   NUMERIC(17,5),
	@ivaSecurityStock            NUMERIC(17,5),
	@ivaInventoryOnSite          NUMERIC(17,5),
	@ivaInventoryOnTransit       NUMERIC(17,5),
	@ivaInventoryOnProduction    NUMERIC(17,5),
	@ivaInventoryOnPurchase      NUMERIC(17,5),
	@ivaPendingDemand            NUMERIC(17,5),	
    /* Output Parameters */ 
    @ovaPriority                 NUMERIC(17,2) OUTPUT,
    @ovaPriorityColor            VARCHAR(50)   OUTPUT,
    @ovaResult                   VARCHAR(1)    OUTPUT,
    @ovaMessage                  NVARCHAR(MAX) OUTPUT 
  ) 
--WITH ENCRYPTION
AS	 
BEGIN
  	BEGIN TRY
		SET NOCOUNT ON;	
	
		-- -------------------------------------------------------------------
		-- MESSAGES
		-- -------------------------------------------------------------------
		DECLARE @vLanguage                                   VARCHAR(2) = 'es';  
		DECLARE @vCodError                                   VARCHAR(1); 
		DECLARE @vMessageError                               NVARCHAR(MAX);
		DECLARE @vMSG_GET_STOCK_PURCHASE_PRIORITY_ERROR      NVARCHAR(MAX); 
		DECLARE @vMSG_GET_STOCK_PURCHASE_PRIORITY_SUCCESS    NVARCHAR(MAX); 
		
		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE  
			  FROM TFSCM_COM_PARAMS 
			 WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';
			
			EXEC GET_MESSAGE @vCodError OUTPUT, @vMessageError OUTPUT,  
				'GET_STOCK_PURCHASE_PRIORITY_SUCCESS', @vLanguage, '', '', '', 
				@vMSG_GET_STOCK_PURCHASE_PRIORITY_SUCCESS OUTPUT;
			
			EXEC GET_MESSAGE @vCodError OUTPUT, @vMessageError OUTPUT,  
				'GET_STOCK_PURCHASE_PRIORITY_ERROR', @vLanguage, '', '', '',
				@vMSG_GET_STOCK_PURCHASE_PRIORITY_ERROR OUTPUT;			
		END TRY  
		BEGIN CATCH  
			SET @vLanguage = 'es' 
			SET @vMSG_GET_STOCK_PURCHASE_PRIORITY_SUCCESS = 'GET_STOCK_PURCHASE_PRIORITY_SUCCESS';
			SET @vMSG_GET_STOCK_PURCHASE_PRIORITY_ERROR   = 'GET_STOCK_PURCHASE_PRIORITY_ERROR';			
		END CATCH 
		-- -------------------------------------------------------------------
		-- PRINT 'TIPO STOCK'
		IF (@ivaBuffer = 0)
		BEGIN
			SET @ovaPriority      = 0.00;
			SET @ovaPriorityColor = 'White';  
			-- PRINT '		PRIORIDAD como buffe Es cero: 0% - White'
		END
		ELSE 
		BEGIN
			SET @ovaPriority = ((@ivaBuffer + @ivaSecurityStock + @ivaPendingDemand - @ivaInventoryOnSite 
							- @ivaInventoryOnTransit - @ivaInventoryOnProduction - @ivaInventoryOnPurchase) 
							/ @ivaBuffer) * 100;
		 
			SET @ovaPriorityColor = dbo.FN_GET_PURCHASE_PRIORITY_COLOR(@ovaPriority, @ivaYellowZoneStart, @ivaRedZoneStart);
			--PRINT '		PRIORIDAD '+ CAST(@ovaPriority AS VARCHAR)
			--PRINT '		 COLOR '+ @ovaPriorityColor		 
		END
		SET @ovaResult  = '0';
		SET @ovaMessage = @vMSG_GET_STOCK_PURCHASE_PRIORITY_SUCCESS;
	END TRY 
	BEGIN CATCH 
		SET @ovaResult  = '1';
		SET @ovaMessage = @vMSG_GET_STOCK_PURCHASE_PRIORITY_ERROR + ' <br> ' + ' <br> ' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS varchar)
			+ ' ERROR_PROCEDURE: ' + ERROR_PROCEDURE()
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();                           
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_MODIFY_EXPORT_BUFFERS_STRUCTURE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:      olondono  
-- Create date: 2015-07-15 
-- Description:	Procedure for modifiying column configuration for table 
--              Export Buffers (21 in TFSCM_COM_COL_TABLE)
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_MODIFY_EXPORT_BUFFERS_STRUCTURE] 
	/* Input Parameters */
	@cdTable	 AS SMALLINT,
	@cdColumn    AS VARCHAR(50),
	@cdOperation AS VARCHAR(1),
	/* Output Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT
AS
 	DECLARE @cdExportBufferTable SMALLINT = 21;
 	DECLARE @cdInterface SMALLINT;
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;   
		
		IF (@cdOperation = 'I')
		BEGIN	 
			 INSERT INTO TFSCM_COM_COL_TABLE 
				 ( CDTABLE, CDCOLUMN, DSNAME, DSCOLUMN, DSTYPE, COLUMN_SIZE, 
			       CDPERMISSION_EDIT, IS_EDITABLE, IS_SYSTEM, IS_NULLABLE, 
				   IS_COLOR, IS_UPGRADABLE, VIEW_TYPE, SQL_LIST, VIEW_FORMAT, 
				   IS_PRIMARY_KEY, USE_AS_SERIE, IS_USE_AS_PERMISSION, 
				   VIEW_COL_WIDTH, SAVE_HISTORY, COLUMN_ACCURACY ) 
			SELECT @cdExportBufferTable, CDCOLUMN, DSNAME, DSCOLUMN, DSTYPE, COLUMN_SIZE, 
			       CDPERMISSION_EDIT, 'N', 'E', IS_NULLABLE, 
				   IS_COLOR, IS_UPGRADABLE, VIEW_TYPE, SQL_LIST, VIEW_FORMAT, 
				   IS_PRIMARY_KEY, USE_AS_SERIE, IS_USE_AS_PERMISSION, 
				   VIEW_COL_WIDTH, SAVE_HISTORY, COLUMN_ACCURACY
		      FROM TFSCM_COM_COL_TABLE C 
			 WHERE C.CDTABLE     = @cdTable
			   AND C.CDCOLUMN	 = @cdColumn ;  
		END 
		ELSE
		BEGIN		 
			IF (@cdOperation = 'D')
			BEGIN 
				DELETE FROM TFSCM_COM_COL_TABLE 
				 WHERE CDTABLE  = @cdTable
				   AND CDCOLUMN = @cdColumn; 
				   
				SELECT @cdInterface = CDINTERFACE  
				  FROM TFSCM_DEX_INTERFACES 
				 WHERE CDTABLE = @cdTable
				   AND CDTYPE <> 'S';
				
				DELETE FROM TFSCM_DEX_INT_DETAIL 
				 WHERE CDINTERFACE  = @cdInterface
				   AND CDFIELD      = @cdColumn;				 
			END 
		END
		
		SET @ovaResult = '0';
		SET @ovaMessage = 'successModify';
 
	END TRY
	
	BEGIN CATCH 
		SET @ovaResult  = '1';
		SET @ovaMessage =  ' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+
		' ERROR_MESSAGE: '+ERROR_MESSAGE()
		PRINT @ovaMessage	
	END CATCH
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PROGRESS_PERCENTAGE_VIEW_ACTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 01/14/2016 (MM/DD/YYY)
-- Description:	Validate NON_WORK_DAY
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 10/26/2015 (MM/DD/YYY)
-- Description:	Seting quarantine validations into the update sentece 
-- -------------------------------------------------------------------------------------------
-- Author:		JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez VÃƒÂ©lez
-- Create date: 07/10/2015 (MM/DD/YYY)
-- Description:	SP to execute actions after update the progress percentage column, up to now 
--              only calcule the order's priority
-- ===========================================================================================
CREATE PROCEDURE [dbo].[SP_PROGRESS_PERCENTAGE_VIEW_ACTIONS]
	/* Input Parameters */
    @ivaOrdersList  NVARCHAR(MAX),
    @ivaManagedBy   VARCHAR(50),
	/* Output Parameters */
    @ovaResult      VARCHAR(1)    OUTPUT,
    @ovaMessage     NVARCHAR(MAX) OUTPUT 
AS
	--Fields use for calculation	
	DECLARE	@vUpdateDate						AS DATETIME = getdate();
	DECLARE @vMSG_GET_CALCULATE_PRIORITY_ERROR 	AS NVARCHAR(MAX); 
	DECLARE @vMSG_GET_CALCULATE_PRIORITY_SUCESS AS NVARCHAR(MAX);
	DECLARE @vLanguage 							AS VARCHAR(2) = 'es'; 
	DECLARE @vCodErrorResultMessages 			AS VARCHAR(1); 
	DECLARE @vMessageErrorResultMessages 		AS NVARCHAR(MAX);
	DECLARE @DelimiterForRecords  				AS CHAR(1) = '|';
	DECLARE @CDORDER 							AS VARCHAR(50)
	DECLARE @CDPARENT_ORDER 					AS VARCHAR(50);
	
	DECLARE @CDDESTINATION 			AS VARCHAR(50),
			@CDFAMILY 				AS VARCHAR(50),
			@CDORDER_TYPE 			AS VARCHAR(1),
			@ORDER_MODIFY_DATE 		AS DATETIME,
			@ORDER_VALUE 			AS NUMERIC(19,2),
			@PENDING_AMOUNT 		AS NUMERIC(19,2),
			@PROMISED_DELIVERY_DATE AS DATETIME,
			@REAL_RELEASE_DATE 		AS DATETIME,
			@TOTAL_AMOUNT 			AS NUMERIC(19,2),
			@SHIPPING_TIME 			AS VARCHAR(5),
			@PRIORITY_COLOR 		AS VARCHAR(50),
			@CDCALENDAR 			AS NUMERIC(4,0),
			@PRIORITY 				AS NUMERIC(17,2),
			@YELLOW_ZONE_START 		AS NUMERIC(5,2),
			@RED_ZONE_START 		AS NUMERIC(5,2),
			@PRODUCTION_BUFFER 		AS NUMERIC(10,0),
			@TOUCH_TIME 			AS NUMERIC(17,5);

	DECLARE @NON_WORKING_DAYS 		 AS NUMERIC(10,2); 
	DECLARE @PROGRESS_PERCENTAGE_AUX AS NUMERIC(17,5);
	DECLARE @LAST_COLOR_UPDATE 		 AS DATETIME;
	DECLARE @MANAGED_ORDER 			 AS BIT;
	
	DECLARE @INITIAL_BUFFER   AS NUMERIC(8,0);
	DECLARE @CLEARENCE_BUFFER AS NUMERIC(10,0);
	
	--OLD VALUES 
	DECLARE  @PRIORITY_COLOR_OLD AS VARCHAR(50), @LAST_COLOR_UPDATE_OLD AS DATETIME
	DECLARE @DATE_SERVER_NO_TIME AS DATE = GETDATE(); 
	DECLARE @DATE_CALCULATION 	 AS DATETIME = GETDATE();
		
	--Stock type orders
	 DECLARE @ovaOpPriorityResul AS NUMERIC(10,2);
	 DECLARE @sumProductionStock AS NUMERIC(38,5) = 0;
	 DECLARE @SKU 			 AS VARCHAR(50);
	 DECLARE @DATE_INSERTION AS DATETIME;
	 DECLARE @EXECUTE_UPDATE AS BIT = 0;
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		SET @ovaMessage = '';
		SELECT @vLanguage = PARAM_VALUE  
		  FROM TFSCM_COM_PARAMS 
		 WHERE CDPARAM = 'DEFAULT_LANGUAGE' 
				
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
				'GET_CALCULATE_PRIORITY_ERROR', @vLanguage, '', '', '', @vMSG_GET_CALCULATE_PRIORITY_ERROR OUTPUT 

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'GET_CALCULATE_PRIORITY_SUCESS', @vLanguage, '', '', '', @vMSG_GET_CALCULATE_PRIORITY_SUCESS OUTPUT 
		
		DECLARE cMOrders CURSOR FOR 
		 SELECT DISTINCT value AS ORDERS   
		   FROM STRING_SPLIT(@ivaOrdersList, @DelimiterForRecords)
		   
		OPEN cMOrders
		FETCH cMOrders INTO @CDORDER
		
		WHILE (@@FETCH_STATUS = 0 ) 
			BEGIN		
			--for each loop It has to set de zero default value
			SET @EXECUTE_UPDATE = 0
			
			SELECT @SKU                     = PO.SKU,
				   @CDDESTINATION           = PO.CDDESTINATION,		
				   @DATE_INSERTION          = PO.DATE_INSERTION,
				   @CDPARENT_ORDER          = PO.CDPARENT_ORDER,
				   @PROMISED_DELIVERY_DATE  = PO.PROMISED_DELIVERY_DATE, 
				   @SHIPPING_TIME           = CC.SHIPPING_TIME,
				   @CDCALENDAR              = CC.CDCALENDAR, 
				   @INITIAL_BUFFER          = PO.INITIAL_BUFFER, 
				   @CLEARENCE_BUFFER        = PO.CLEARENCE_BUFFER,
				   @CDORDER_TYPE            = PO.CDORDER_TYPE, 
				   @PROGRESS_PERCENTAGE_AUX = PO.PROGRESS_PERCENTAGE, 
				   @TOUCH_TIME              = PO.TOUCH_TIME,
				   @YELLOW_ZONE_START       = CPF.YELLOW_ZONE_START, 
				   @RED_ZONE_START          = CPF.RED_ZONE_START,
				   @LAST_COLOR_UPDATE_OLD   = PO.LAST_COLOR_UPDATE, 
				   @PRIORITY_COLOR_OLD      = PO.PRIORITY_COLOR, 
				   @ORDER_MODIFY_DATE       = PO.ORDER_MODIFY_DATE			
			  FROM TFSCM_CLI_PRODUCTION_ORDERS PO
			  LEFT OUTER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = PO.CDFAMILY) 
			  LEFT OUTER JOIN TFSCM_CLI_LOCATION CL ON (CL.CDLOCATION = CPF.CDLOCATION)
			  LEFT OUTER JOIN TFSCM_CLI_CALENDAR CC ON (CC.CDCALENDAR = CL.CDCALENDAR) 			
			 WHERE PO.CDORDER = @CDORDER
			
			SET @PRODUCTION_BUFFER = @INITIAL_BUFFER + @CLEARENCE_BUFFER				
			IF (@ORDER_MODIFY_DATE < @DATE_SERVER_NO_TIME) 
			BEGIN 
				SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@ORDER_MODIFY_DATE,@SHIPPING_TIME) 
			END 
			ELSE IF (@ORDER_MODIFY_DATE = @DATE_SERVER_NO_TIME) 
			BEGIN 
				SET @DATE_CALCULATION = GETDATE() 
			END 
			
			IF( (SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR)) > 0) 
			BEGIN 
				SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR) 
			END 				
			
			IF ( @CDPARENT_ORDER IS NULL AND @PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != 'S') 
			BEGIN 
				SET @EXECUTE_UPDATE = 1 -- Only it has to be updated if is an parent order 
				SET @NON_WORKING_DAYS = dbo.GET_CALCULATE_NON_WORKING_DAYS(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @CDCALENDAR)
				SET @PRIORITY = dbo.GET_CALCULATE_PRIORITY(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @PRODUCTION_BUFFER, @NON_WORKING_DAYS,@CDORDER_TYPE,@PROGRESS_PERCENTAGE_AUX,@TOUCH_TIME)
				SET @PRIORITY_COLOR = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY,@CDORDER_TYPE,@YELLOW_ZONE_START,@RED_ZONE_START)					
				SET @LAST_COLOR_UPDATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE_OLD, @PRIORITY_COLOR_OLD,@PRIORITY_COLOR, @ORDER_MODIFY_DATE, @CDORDER, 0)
				SET @MANAGED_ORDER = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER)
			END 
			
			IF(@CDPARENT_ORDER IS NULL AND @CDORDER_TYPE = 'S')
			BEGIN 
				SET @EXECUTE_UPDATE = 1
				--PRINT '@sumProductionStock '+CAST(@sumProductionStock AS VARCHAR)
						
				SELECT @sumProductionStock = SUM(PENDING_AMOUNT)
 				  FROM TFSCM_CLI_PRODUCTION_ORDERS 				
				 WHERE CDORDER_TYPE = 'S'
				   AND CDPARENT_ORDER IS NULL 
				   AND FINALIZATION_DATE IS NULL
				   AND DATE_INSERTION < @DATE_INSERTION
				   AND SKU = @SKU
				   AND CDDESTINATION = @CDDESTINATION;
				
				--PRINT '@sumProductionStock '+CAST(@sumProductionStock AS VARCHAR)
				EXEC GET_CALCULATE_STOCK_PO_PRIORITY  @CDORDER_TYPE, @SKU, @CDDESTINATION,@sumProductionStock,@PROGRESS_PERCENTAGE_AUX,@TOUCH_TIME,@PRODUCTION_BUFFER, @ovaOpPriorityResul OUTPUT, @YELLOW_ZONE_START OUTPUT , @RED_ZONE_START OUTPUT 
				
				SET @PRIORITY = @ovaOpPriorityResul
				--PRINT 'DESPUES PRIORIDAD ES '+CAST(@PRIORITY AS VARCHAR)
				SET @PRIORITY_COLOR = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY,@CDORDER_TYPE,@YELLOW_ZONE_START,@RED_ZONE_START)			
				SET @LAST_COLOR_UPDATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE_OLD, @PRIORITY_COLOR_OLD,@PRIORITY_COLOR, @ORDER_MODIFY_DATE, @CDORDER, 0)
				SET @MANAGED_ORDER = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER)
			END				
			
			IF(@EXECUTE_UPDATE = 1)
			BEGIN
				UPDATE TFSCM_CLI_PRODUCTION_ORDERS
				   SET PRIORITY		     = @PRIORITY,
					   PRIORITY_COLOR    = @PRIORITY_COLOR,
					   LAST_COLOR_UPDATE = @LAST_COLOR_UPDATE,
					   MANAGED_ORDER     = @MANAGED_ORDER
				 WHERE ( CDORDER = @CDORDER OR CDPARENT_ORDER = @CDORDER )
				   AND FINALIZATION_DATE IS NULL 
				   AND EXCHANGES_IN_QUARANTINE = 0;
			END			
			
			FETCH cMOrders INTO @CDORDER
		END
		CLOSE cMOrders			
		DEALLOCATE cMOrders
		
		SET @ovaResult = '0';
		SET @ovaMessage =  @vMSG_GET_CALCULATE_PRIORITY_SUCESS
	END TRY 
	BEGIN CATCH	
		SET @ovaResult = '1';
		SET @ovaMessage =  @vMSG_GET_CALCULATE_PRIORITY_ERROR		 
			+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[SP_PROGRESS_PERCENTAGE_VIEW_ACTIONS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
			
		IF ((SELECT CURSOR_STATUS('global','cMOrders')) = -1)
		BEGIN
			DEALLOCATE cMOrders
		END
		
		IF ((SELECT CURSOR_STATUS('global','cMOrders')) > -1)
		BEGIN
			CLOSE cMOrders
			DEALLOCATE cMOrders
		END
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REMOVE_JSON_FIELD]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2015-12-03
-- Description:	Procedure to remove a field from a JSON 
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_REMOVE_JSON_FIELD] 
	/* Input Parameters */	
    @ivaTable      INT,
    @ivaFieldValue VARCHAR(50),
    /* Output Parameters */	    
    @ovaRemoved    VARCHAR(1) OUTPUT
AS
	
BEGIN	
	BEGIN TRY
		
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;
		DECLARE @totalRows INT;

		DECLARE @cdView             VARCHAR(50), 
				@jsonViewConf       VARCHAR(MAX), 
				@jsonJoinTables      VARCHAR(MAX), 
				@finalJsonViewConf  VARCHAR(MAX),
				@finalJsonJoinTable VARCHAR(MAX),
				@sqlAlter           VARCHAR(MAX), 
				@cdColumn           VARCHAR(50),
				@dsTable            VARCHAR(50), 
				@cdTable            INT;

		-- By default it uses logical delete
		SET @ovaRemoved = 'Y';
		SET @totalRows  = 0;
		SET @cdColumn   = @ivaFieldValue;
		SET @cdTable    = @ivaTable;
		SELECT @dsTable = TABLE_NAME FROM TFSCM_COM_TABLES WHERE CDTABLE = @cdTable;
		
		IF EXISTS (SELECT  *  FROM INFORMATION_SCHEMA.COLUMNS IC  WHERE TABLE_NAME = @dsTable and COLUMN_NAME = @cdColumn)
		BEGIN
			SET  @sqlAlter = 'ALTER TABLE '+ @dsTable +' DROP COLUMN '+@ivaFieldValue+';';
			EXECUTE (@sqlAlter); 
			--PRINT  'Se ejecuto '+ @sqlAlter ;
		END
					
		DELETE FROM TFSCM_COM_COL_TABLE WHERE CDTABLE = @cdTable AND CDCOLUMN = @cdColumn;
		DELETE FROM TFSCM_CLI_COL_TABLE WHERE CDTABLE = @cdTable AND CDCOLUMN = @cdColumn;
		
		DECLARE cur_views CURSOR FAST_FORWARD FOR
		SELECT CDVIEW, JSON_VIEW_CONF, JSON_JOIN_TABLES
		  FROM TFSCM_CLI_VIEWS 
		 WHERE (JSON_VIEW_CONF   LIKE '%'+@cdColumn+'%' OR 
		        JSON_JOIN_TABLES LIKE '%'+@cdColumn+'%' );
		 
		OPEN  cur_views;

		FETCH NEXT FROM cur_views INTO @cdView, @jsonViewConf, @jsonJoinTables;

		WHILE @@FETCH_STATUS = 0   
		BEGIN 
			DECLARE @pos    NUMERIC(10) = CHARINDEX( ', {name:\"'+@cdColumn+'\"', @jsonViewConf  ) 
			
			IF (@pos = 0)
			BEGIN
				SET @pos = CHARINDEX( ',{name:\"'+@cdColumn+'\"', @jsonViewConf  ); 
			END
			
			DECLARE @substr VARCHAR(MAX)= SUBSTRING(@jsonViewConf, 0, @pos);
			--PRINT 'Vista '+ @cdView
			
			IF  (@pos > 0)
			BEGIN
				SET @finalJsonViewConf = @substr ;
				SET @pos    = CHARINDEX('}', @jsonViewConf, @pos + 1);
			
				SET @substr = SUBSTRING(@jsonViewConf, @pos + 1, LEN( @jsonViewConf)  );
				SET @finalJsonViewConf = @finalJsonViewConf + @substr ;
				--PRINT '	Modificando... '		
			END
			ELSE
			BEGIN	
				SET @finalJsonViewConf = @jsonViewConf ;
			END 
			--PRINT '		'+@finalJsonViewConf 
			--PRINT '		'+@jsonViewConf
			--PRINT '	'
		
			DECLARE @pos2    NUMERIC(10) = CHARINDEX( ', { "TABLE": "'+@dsTable+'", "COLUMN": "'+@cdColumn+'" ', @jsonJoinTables) 
			
			IF (@pos2 = 0)
			BEGIN
				SET @pos2 = CHARINDEX( ',{ "TABLE": "'+@dsTable+'", "COLUMN": "'+@cdColumn+'" ', @jsonJoinTables) 
			END
			
			DECLARE @substr2 VARCHAR(MAX)= SUBSTRING(@jsonJoinTables, 0, @pos2);
			
			IF  (@pos2 > 0)
			BEGIN
				SET @finalJsonJoinTable = @substr2 ;
				SET @pos2    = CHARINDEX('}', @jsonJoinTables, @pos2 + 1);
				SET @substr2 = SUBSTRING(@jsonJoinTables, @pos2 + 1, LEN( @jsonJoinTables)  );
				SET @finalJsonJoinTable = @finalJsonJoinTable + @substr2 ;
				--PRINT '	Cambiando ademas...'
			END 
			ELSE
			BEGIN 
				SET @finalJsonJoinTable  = @jsonJoinTables;
			END 			

			--PRINT '		'+@finalJsonJoinTable
			--PRINT '		'+@jsonJoinTables
			--PRINT '	'
			UPDATE TFSCM_CLI_VIEWS 
  			   SET JSON_VIEW_CONF   = @finalJsonViewConf,
  				   JSON_JOIN_TABLES = @finalJsonJoinTable
			 WHERE CDVIEW = @cdView;
			
			FETCH NEXT FROM cur_views INTO @cdView, @jsonViewConf, @jsonJoinTables;
		END

		CLOSE cur_views;
		DEALLOCATE cur_views;
		 
		SET @ovaRemoved = 'Y';
		
		/*
		Posiblemente se deba buscar además en:
			SELECT * FROM TFSCM_CLI_USER_FILTER WHERE JSON_USER_FILTER LIKE '%TOTAL_INVENTORY_ON_SITE%'
			SELECT * FROM TFSCM_DEX_INT_DETAIL WHERE CDFIELD = 'TOTAL_INVENTORY_ON_SITE'
			
		Para llamar el SP por ejemplo:
		DECLARE	@ovaRemoved varchar(1)

		EXEC	dbo.SP_REMOVE_JSON_FIELD 11, 'TOTAL_INVENTORY_ON_CHAIN', @ovaRemoved OUTPUT
		SELECT 'Removido TOTAL_INVENTORY_ON_CHAIN de 11? --> '+@ovaRemoved 
			
		*/
		
	END TRY
	BEGIN CATCH
		SET @ovaRemoved = 'N';
		PRINT ERROR_MESSAGE()
		IF ((SELECT CURSOR_STATUS('global','cur_views')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_views')) IN (0,1))
			BEGIN
				CLOSE cur_views;  		
			END
			DEALLOCATE cur_views;  
		END	
		
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REMOVE_NON_USED_INDICATORS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:      olondono  
-- Create date: 2014-07-11 
-- Description:	Procedure for deleting non-used indicators
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_REMOVE_NON_USED_INDICATORS] 
	/* Output Parameters */
	@ovaResult   VARCHAR(1)   OUTPUT,
	@ovaMessage  VARCHAR(MAX) OUTPUT 

AS
    -- -----------------------------------------------------------------------
	-- Variables used
    -- -----------------------------------------------------------------------
	DECLARE	@countViews   INT,
			@cdIndicator NUMERIC(4,0); 	
	DECLARE 
	     @cdLanguage  VARCHAR(2) = 'es',
	     @cdError     VARCHAR(1),
		 @cdMessage   VARCHAR(MAX),
		 @dsMSG_REMOVE_NON_USED_INDICATORS_ERROR   VARCHAR(MAX), 
		 @dsMSG_REMOVE_NON_USED_INDICATORS_SUCCESS VARCHAR(MAX);	
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		-- -------------------------------------------------------------------
		-- Setting messages
        -- -------------------------------------------------------------------
		SELECT @cdLanguage = PARAM_VALUE  
		  FROM  TFSCM_COM_PARAMS 
		 WHERE CDCOMPONENT = 6 
		   AND CDPARAM     = 'DEFAULT_LANGUAGE';
		
		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'REMOVE_NON_USED_INDICATORS_ERROR', @cdLanguage, '', '', '', @dsMSG_REMOVE_NON_USED_INDICATORS_ERROR OUTPUT;

		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'REMOVE_NON_USED_INDICATORS_SUCCESS', @cdLanguage, '', '', '', @dsMSG_REMOVE_NON_USED_INDICATORS_SUCCESS OUTPUT; 
		
		-- -------------------------------------------------------------------
		-- Get non used indicators
		-- -------------------------------------------------------------------
		DECLARE del_indic_cursos CURSOR FOR 
		SELECT CDINDICATOR 
		  FROM TFSCM_CLI_INDICATORS   
		 WHERE CDINDICATOR NOT in( SELECT DISTINCT CDINDICATOR 
									 FROM TFSCM_CLI_VIEWS  
									WHERE CDINDICATOR IS NOT NULL );

		OPEN del_indic_cursos;
		
		FETCH NEXT FROM del_indic_cursos 
		 INTO @cdIndicator ;
			
		-- -------------------------------------------------------------------
		-- For each indicator, remove records related
        -- -------------------------------------------------------------------
		WHILE @@FETCH_STATUS = 0
		BEGIN 		  
			-- ---------------------------------------------------------------
			-- Delete Indicator
			-- ---------------------------------------------------------------
			DELETE FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE WHERE CDINDICATOR = @cdIndicator;
			DELETE FROM TFSCM_CLI_PERC_DELIV_IN_TIME   WHERE CDINDICATOR = @cdIndicator;
			DELETE FROM TFSCM_CLI_ANTI_OVERD_RELEASES  WHERE CDINDICATOR = @cdIndicator;
				
			DELETE FROM TFSCM_CLI_INDICATORS WHERE CDINDICATOR = @cdIndicator;
			   
			PRINT 'Borrar '	+CAST(@cdIndicator AS VARCHAR)
			FETCH NEXT FROM del_indic_cursos 
			 INTO @cdIndicator ;
		END

		CLOSE del_indic_cursos;
		DEALLOCATE del_indic_cursos;    	
		   		
		SET @ovaResult = '0';
		SET @ovaMessage = @dsMSG_REMOVE_NON_USED_INDICATORS_SUCCESS;
	   	
	END TRY	
	BEGIN CATCH  
		CLOSE del_indic_cursos;
		DEALLOCATE del_indic_cursos; 
		
		SET @ovaResult  = '1';
		SET @ovaMessage = @dsMSG_REMOVE_NON_USED_INDICATORS_ERROR + CHAR(13) + CHAR(13) +
						  ' ERROR_NUMBER: '+CAST( ERROR_NUMBER() AS varchar)+
						  ' ERROR_SEVERITY: '+CAST(ERROR_SEVERITY() AS varchar)+
						  ' ERROR_STATE: '+CAST( ERROR_STATE() AS varchar)+
						  ' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+
						  ' ERROR_LINE: '+CAST( ERROR_LINE() AS varchar)+
						  ' ERROR_MESSAGE: '+ERROR_MESSAGE()
	END CATCH	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Jag
-- Create date: 24-06-2016
-- Description:	Function to remove all data exchange notifications by @ivaNotificationType
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION] 
  (	/* Input Parameters */
   	@ivaNotificationType	     VARCHAR(3),
    /* Output Parameters */
    @ovaResult                   VARCHAR(1)    OUTPUT,
    @ovaMessage                  NVARCHAR(MAX) OUTPUT 
  ) 
AS 
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY 
		 DELETE MNV
			FROM TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS MNV
			INNER JOIN TFSCM_CLI_MESSAGESNOTIFICATIONS MN ON (MNV.ID_MESSAGESNOTIFICATIONS = MN.ID_MESSAGESNOTIFICATIONS)
			AND MN.NOTIFICATION_TYPE = @ivaNotificationType;
 
 
		 DELETE FROM TFSCM_CLI_MESSAGESNOTIFICATIONS
		 WHERE NOTIFICATION_TYPE = @ivaNotificationType;
		
	END TRY 
	BEGIN CATCH 
		SET @ovaResult = '1';
		SET @ovaMessage =  'SP_REMOVE_VIEW_DATA_EXCHANGE_NOTIFICATION: ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
		
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REMOVE_VIEW_INDICATOR]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:      olondono  
-- Create date: 2016-12-28 
-- Description:	Delete also the Buffer Adjustment Suggestions Status table
-- ===========================================================================
-- Author:      olondono  
-- Create date: 2014-07-10 
-- Description:	Procedure for deleting the indicator of a view
-- ===========================================================================
-- Author:      JAG  
-- Create date: 2015-04-14 
-- Description:	Delete on the new indicator and the cli_color distribution 
-- ===========================================================================
-- Author:      JAG  
-- Create date: 2015-08-31 
-- Description:	Delete on the new two indicator (stock and stockout)
-- ===========================================================================
CREATE PROCEDURE [dbo].[SP_REMOVE_VIEW_INDICATOR] 
	/* Input Parameters */
	@cdView   	 INT, 
	@cdIndicator NUMERIC(4,0),
	/* Output Parameters */
	@ovaResult   VARCHAR(1)   OUTPUT,
	@ovaMessage  VARCHAR(MAX) OUTPUT 
--WITH ENCRYPTION
AS
    -- -----------------------------------------------------------------------
	-- Variables used
    -- -----------------------------------------------------------------------
	DECLARE	@countViews   INT; 	
	DECLARE 
	     @cdLanguage  VARCHAR(2) = 'es',
	     @cdError     VARCHAR(1),
		 @cdMessage   VARCHAR(MAX),
		 @dsMSG_REMOVE_VIEW_INDICATOR_ERROR   VARCHAR(MAX), 
		 @dsMSG_REMOVE_VIEW_INDICATOR_SUCCESS VARCHAR(MAX);	
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		-- -------------------------------------------------------------------
		-- Setting messages
        -- -------------------------------------------------------------------
		SELECT @cdLanguage = PARAM_VALUE  
		  FROM  TFSCM_COM_PARAMS 
		 WHERE CDCOMPONENT = 6
		   AND CDPARAM     = 'DEFAULT_LANGUAGE';
		
		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'REMOVE_VIEW_INDICATOR_ERROR', @cdLanguage, '', '', '', @dsMSG_REMOVE_VIEW_INDICATOR_ERROR OUTPUT;

		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'REMOVE_VIEW_INDICATOR_SUCCESS', @cdLanguage, '', '', '', @dsMSG_REMOVE_VIEW_INDICATOR_SUCCESS OUTPUT; 

        -- -------------------------------------------------------------------
		-- Check if indicator is being used in other views
		-- -------------------------------------------------------------------
		SELECT @countViews = COUNT(1) 
		  FROM TFSCM_CLI_VIEWS 
		 WHERE CDVIEW     <> @cdView
		   AND CDINDICATOR = @cdIndicator;
		   
		IF (@countViews = 0)
		BEGIN
			IF ( @cdIndicator IS NOT NULL) 
			BEGIN			
				DELETE FROM TFSCM_CLI_VALUE_ORDERS_OVERDUE WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_PERC_DELIV_IN_TIME   WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_ANTI_OVERD_RELEASES  WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_COLOR_DISTRIBUTION   WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_BUFFER_COLOR_DISTRIBUTION WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_BUFFER_STOCK_VALUE WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_BUFFER_STOCKOUT_VALUE WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_BUFFER_ADJUSTMENT_SUGGESTIONS_STATUS WHERE CDINDICATOR = @cdIndicator;
				DELETE FROM TFSCM_CLI_INDICATORS WHERE CDINDICATOR = @cdIndicator;
			END
		END 	
		   		
		SET @ovaResult = '0';
		SET @ovaMessage = @dsMSG_REMOVE_VIEW_INDICATOR_SUCCESS;
	   	
	END TRY	
	BEGIN CATCH  
		SET @ovaResult  = '1';
		SET @ovaMessage = @dsMSG_REMOVE_VIEW_INDICATOR_ERROR + CHAR(13) + CHAR(13) +
						  ' ERROR_NUMBER: '+CAST( ERROR_NUMBER() AS varchar)+
						  ' ERROR_SEVERITY: '+CAST(ERROR_SEVERITY() AS varchar)+
						  ' ERROR_STATE: '+CAST( ERROR_STATE() AS varchar)+
						  ' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+
						  ' ERROR_LINE: '+CAST( ERROR_LINE() AS varchar)+
						  ' ERROR_MESSAGE: '+ERROR_MESSAGE()
	END CATCH	
END 
GO
/****** Object:  StoredProcedure [dbo].[SP_REORDER_INTERFACE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:      rosorio  
-- Create date: 2014-01-08 
-- Description:	Procedure for reordering interface fields
-- =============================================
CREATE PROCEDURE [dbo].[SP_REORDER_INTERFACE] 
	/* Input Parameters */
	@cdInterface AS SMALLINT,
	@cdColumn    AS VARCHAR(50) ,
	@cdOperation AS VARCHAR(1),
	/* Input Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT

AS
    DECLARE @vId AS INT; 
	DECLARE @vCdField AS VARCHAR(100) ;
			
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRANSACTION;  
		DECLARE cDetailInt CURSOR 	
		FOR 
			SELECT ROW_NUMBER() OVER (ORDER BY NMPOSITION ASC) AS ID,CDFIELD
			FROM TFSCM_DEX_INT_DETAIL
			WHERE CDINTERFACE = @cdInterface;
		
		OPEN cDetailInt; 
		FETCH cDetailInt INTO @vId,@vCdField;
				
		WHILE (@@FETCH_STATUS = 0 ) 
			BEGIN	
				UPDATE TFSCM_DEX_INT_DETAIL SET NMPOSITION = @vId
				WHERE CDINTERFACE = @cdInterface AND CDFIELD = @vCdField;
				FETCH cDetailInt INTO @vId,@vCdField;		
			END
		CLOSE cDetailInt;
		DEALLOCATE cDetailInt;
		COMMIT;
		SET @ovaResult = '0';
		SET @ovaMessage = 'successReorderInterface';
	END TRY
	BEGIN CATCH
		ROLLBACK;
		SET @ovaResult  = '1';
		SET @ovaMessage =  ' ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
		' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
		' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+' ERROR_MESSAGE: '+ERROR_MESSAGE()
	END CATCH
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_RESET_LOCATIONS_VIEW_FILTER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal Mokros
-- Upgrade date: 20/05/2020
-- Description : Change CDUSER by USER_ID/USERNAME
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author:      olondono  
-- Create date: 2015-02-12 
-- Description:	Procedure to re-configure locations view filters
-- ===========================================================================================
CREATE PROCEDURE [dbo].[SP_RESET_LOCATIONS_VIEW_FILTER]  
	/* Input Parametrer */
	@ovaCdView  INT,
	/* Output Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT
AS
    -- ---------------------------------------------------------------------------------------
	-- Fields use for altering
    -- ---------------------------------------------------------------------------------------
	DECLARE @ivaLocations  VARCHAR(MAX);
	DECLARE @cdView        VARCHAR(50);
	DECLARE @cdLocationTmo VARCHAR(50);
	DECLARE @locationList  VARCHAR(MAX);
	DECLARE @prefix        VARCHAR(11);
	DECLARE @counter       INT  = 0;
	DECLARE @totCount      INT  = 0; 
	DECLARE @cdUserId      BIGINT;
	DECLARE @defaultLang   VARCHAR(50);
	DECLARE @userLocList   VARCHAR(MAX);

BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		DECLARE cur_filters CURSOR FAST_FORWARD FOR
		 SELECT DISTINCT v.CDVIEW, SUBSTRING(v.VIEW_FILTER, 3, LEN(v.VIEW_FILTER) - 3),
				u.USER_ID, u.DEFAULT_LANG
		   FROM TFSCM_CLI_VIEWS v, TFSCM_COM_USERS u   
		  WHERE v.CDVIEW = @ovaCdView
			AND v.VIEW_FILTER IS NOT NULL
			AND LTRIM(RTRIM (v.VIEW_FILTER))<> ''
		    AND v.USER_ID = u.USER_ID
		 	 
		OPEN cur_filters

		FETCH NEXT FROM cur_filters INTO @cdView, @ivaLocations, @cdUserId, @defaultLang;

		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SELECT SUBSTRING( LTRIM(RTRIM(value)), 13, (LEN( LTRIM(RTRIM(value))) - 13))  AS LOCATION
			  INTO TMP_SELECTED
			  FROM STRING_SPLIT(@ivaLocations, ',');

			DELETE FROM TMP_SELECTED 
			 WHERE LOCATION NOT IN (SELECT DISTINCT REPLACE(CDLOCATION, '''', '''''')  
									   FROM TFSCM_CLI_LOCATION);

			DECLARE cur_location CURSOR FAST_FORWARD FOR
			 SELECT DISTINCT REPLACE(CDLOCATION, '''', '''''') AS LOCATION   
			   FROM TFSCM_CLI_LOCATION
			  ORDER BY LOCATION
					  
			OPEN cur_location	

			FETCH NEXT FROM cur_location INTO @cdLocationTmo
			SET @locationList = '';
			SET @counter      = 0;
			SET @totCount     = 0 ;
			
			WHILE (@@FETCH_STATUS = 0)
			BEGIN	
				SET @counter = @counter + 1;
				IF (EXISTS(SELECT LOCATION FROM TMP_SELECTED WHERE LOCATION = @cdLocationTmo ))
				BEGIN
					SET @totCount = @totCount + 1;
					SET @prefix =  right(replicate('0',10) + CAST(@counter AS VARCHAR), 10) + '_';
					SET @locationList = @locationList  + '''' + @prefix + @cdLocationTmo  + ''',';		 
				END
				FETCH NEXT FROM cur_location INTO @cdLocationTmo;
			END
			
			IF (RTRIM(LTRIM(@locationList)) <> '')
			BEGIN
				SET @locationList = ' ('+SUBSTRING(@locationList, 0, LEN(@locationList)) + ')';
			END
			
			IF (@totCount = @counter)
			BEGIN
				IF (@defaultLang = 'es') 
				BEGIN 
					SET @locationList = REPLACE (@locationList, ' (', ' (''0000000000_Todas'',');
				END	
				ELSE
				BEGIN
					SET @locationList = REPLACE (@locationList, ' (', ' (''0000000000_All'',')  ;
				END	
			END 
			UPDATE TFSCM_CLI_VIEWS 
			   SET VIEW_FILTER = @locationList
			 WHERE CDVIEW  = @cdView
			   AND USER_ID = @cdUserId;
				
				PRINT 'For ' + CAST(@cdUserId AS varchar(50)) + ' and view '+ @cdView +' is ' + CHAR(13) + @locationList
				
				--PRINT  @locationList
			CLOSE cur_location
			DEALLOCATE cur_location
			DROP TABLE TMP_SELECTED
			
			FETCH NEXT FROM cur_filters INTO @cdView, @ivaLocations, @cdUserId, @defaultLang;
		END

		CLOSE cur_filters
		DEALLOCATE cur_filters

		SET @ovaResult = '0';
		SET @ovaMessage = 'successAlter ';
 
	END TRY
	
	BEGIN CATCH
			
		SET @ovaResult  = '1';
		SET @ovaMessage =  '' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[SP_RESET_LOCATIONS_VIEW_FILTER]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
							
		IF ((SELECT CURSOR_STATUS('global','cur_location')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_location')) IN (0,1))
			BEGIN
				CLOSE cur_location; 		
			END
			DEALLOCATE cur_location; 
		END
				
		IF ((SELECT CURSOR_STATUS('global','cur_filters')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cur_filters')) IN (0,1))
			BEGIN
				CLOSE cur_filters; 		
			END
			DEALLOCATE cur_filters; 
		END
		
		IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'TMP_SELECTED') AND type in (N'U'))
		BEGIN
			DROP TABLE  TMP_SELECTED 
		END  
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SET_PURCHASE_ORDERS_IN_QUARANTINE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Modified   : ?
-- Modify Date: ?
-- Description: ?
-- ---------------------------------------------------------------------------
-- Created    : Oscar Hernán Londoño Ospina
-- Date       : 22/10/2015
-- Description: Method to set purchase orders in quarantine when structural 
--              and business errors exist
-- ===========================================================================

CREATE PROCEDURE [dbo].[SP_SET_PURCHASE_ORDERS_IN_QUARANTINE] 
	/* Input Parameters */
    @ivaIdExchange  NUMERIC(10),
	@ivaUpdateDate  DATETIME,
	@ivaBusinessTotalErrors NUMERIC(10),
	@ivaStructuralTotalErrors NUMERIC(10),
	/* Output Parameters */
    @ovaResult		VARCHAR(1) OUTPUT,
    @ovaMessage		NVARCHAR(MAX) OUTPUT
AS
DECLARE @vTrace					NVARCHAR(MAX); 
DECLARE @vQuarantinePurchaseOrdersErrorsCount AS INT = 0;
DECLARE @vQuarantinePurchaseOrdersProcessedCount AS INT = 0;
DECLARE @vCommitCount AS NUMERIC(4) = 0;
DECLARE @vQuarantineDate AS DATETIME;

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @ovaResult       = '0';
		SET @ovaMessage      = '';				  
		SET @vTrace          = 'getting the table name' 
		SET @vQuarantineDate = CONVERT(DATETIME,'01/01/1901',103);		
 		 
        -- -------------------------------------------------------------------
		-- MESSAGES
		-- -------------------------------------------------------------------
		DECLARE @vDaysToKeepPUInQuarantine                     NUMERIC(10);
		DECLARE @vLanguage                                     VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages                       VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages                   NVARCHAR(MAX); 
		DECLARE @vMSG_QUARANTINE_PURCHASE_ORDERS_ERRORS        NVARCHAR(MAX); 
		DECLARE @vMSG_QUARANTINE_PURCHASE_ORDERS_SUCESSFUL     NVARCHAR(MAX); 
		DECLARE @vMSG_QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED NVARCHAR(MAX);  

		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE  
			  FROM TFSCM_COM_PARAMS 
			 WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';
			
			SELECT @vDaysToKeepPUInQuarantine = PARAM_VALUE 
			  FROM TFSCM_COM_PARAMS
			 WHERE CDPARAM = 'DAYS_TO_KEEP_PURCHASING_ORDERS_IN_QUARANTINE';
			 
			IF(@vDaysToKeepPUInQuarantine IS NULL)
			BEGIN
				SET @vDaysToKeepPUInQuarantine = 0;
			END  
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
				'QUARANTINE_PURCHASE_ORDERS_ERRORS', @vLanguage, '', '', '', @vMSG_QUARANTINE_PURCHASE_ORDERS_ERRORS OUTPUT;
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
				'QUARANTINE_PURCHASE_ORDERS_SUCESSFUL', @vLanguage, '', '', '', @vMSG_QUARANTINE_PURCHASE_ORDERS_SUCESSFUL OUTPUT;
			
			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
				'QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED', @vLanguage, '', '', '', @vMSG_QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED OUTPUT;			
		END TRY  
		BEGIN CATCH  
			SET @vLanguage = 'es';
			SET @vMSG_QUARANTINE_PURCHASE_ORDERS_ERRORS        = 'QUARANTINE_PURCHASE_ORDERS_ERRORS';
			SET @vMSG_QUARANTINE_PURCHASE_ORDERS_SUCESSFUL     = 'QUARANTINE_PURCHASE_ORDERS_SUCESSFUL';
			SET @vMSG_QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED = 'QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED';
		END CATCH 
		-- -------------------------------------------------------------------
		IF (@vDaysToKeepPUInQuarantine > 0)
		BEGIN
			DECLARE @PURCHASE_ORDER_NOT_FINALIZED DATETIME = '1901-01-01';
			
			
			UPDATE O
				   SET O.EXCHANGES_IN_QUARANTINE = 0,
				       O.QUARANTINE_DATE         = @vQuarantineDate
			 	  FROM TFSCM_CLI_PURCHASE_ORDERS O
						INNER JOIN TFSCM_CLI_LOCATION L ON (L.CDLOCATION = O.DESTINATION)
						INNER JOIN TFSCM_CLI_CALENDAR C ON (C.CDCALENDAR = L.CDCALENDAR)
			     WHERE O.DESTINATION      IN ( SELECT DISTINCT T.DESTINATION
											     FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
												WHERE T.IDEXCHANGE  = @ivaIdExchange
												  AND T.UPDATE_DATE = @ivaUpdateDate
												  AND T.STATUS      = 1)
				   AND O.FINALIZATION_DATE = @PURCHASE_ORDER_NOT_FINALIZED
				   AND ((	NOT EXISTS (SELECT T.CDPURCHASE_ORDER
										 FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
										  WHERE T.CDPURCHASE_ORDER		 = O.CDPURCHASE_ORDER
										  AND T.SUPPLIER         = O.SUPPLIER
										  AND T.IDEXCHANGE       = @ivaIdExchange 
										  AND T.UPDATE_DATE      = @ivaUpdateDate)
								  
					AND 
					@ivaStructuralTotalErrors = 0)
					
					OR EXISTS (SELECT T.CDPURCHASE_ORDER
										 FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
										  WHERE T.CDPURCHASE_ORDER		 = O.CDPURCHASE_ORDER
										  AND T.SUPPLIER         = O.SUPPLIER
										  AND T.IDEXCHANGE       = @ivaIdExchange 
										  AND T.UPDATE_DATE      = @ivaUpdateDate 
										  AND T.STATUS           = 1)
				)
				
				
				
			UPDATE O
				   SET O.EXCHANGES_IN_QUARANTINE = O.EXCHANGES_IN_QUARANTINE+1
			 	  FROM TFSCM_CLI_PURCHASE_ORDERS O
						INNER JOIN TFSCM_CLI_LOCATION L ON (L.CDLOCATION = O.DESTINATION)
						INNER JOIN TFSCM_CLI_CALENDAR C ON (C.CDCALENDAR = L.CDCALENDAR)
			     WHERE O.DESTINATION      IN ( SELECT DISTINCT T.DESTINATION
											     FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
												WHERE T.IDEXCHANGE  = @ivaIdExchange
												  AND T.UPDATE_DATE = @ivaUpdateDate
												  AND T.STATUS      = 1)
				   AND O.FINALIZATION_DATE = @PURCHASE_ORDER_NOT_FINALIZED
				   AND ((	NOT EXISTS (SELECT T.CDPURCHASE_ORDER
										 FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
										  WHERE T.CDPURCHASE_ORDER		 = O.CDPURCHASE_ORDER
										  AND T.SUPPLIER         = O.SUPPLIER
										  AND T.IDEXCHANGE       = @ivaIdExchange 
										  AND T.UPDATE_DATE      = @ivaUpdateDate)
								  
					AND 
					@ivaStructuralTotalErrors > 0)
					
					OR EXISTS (SELECT T.CDPURCHASE_ORDER
										 FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP T
										  WHERE T.CDPURCHASE_ORDER		 = O.CDPURCHASE_ORDER
										  AND T.SUPPLIER         = O.SUPPLIER
										  AND T.IDEXCHANGE       = @ivaIdExchange 
										  AND T.UPDATE_DATE      = @ivaUpdateDate 
										  AND T.STATUS           = 0)
				)
				
		END	
		IF((@ivaBusinessTotalErrors+@ivaStructuralTotalErrors) > 0)
		BEGIN 
			SET @ovaMessage =  '<br>'+'(' + @vMSG_QUARANTINE_PURCHASE_ORDERS_SUCESSFUL+')'			
		END	
		ELSE
		BEGIN
			SET @ovaMessage =  '<br>'+'(' + @vMSG_QUARANTINE_PURCHASE_ORDERS_NOT_GENERATED +')'
		END
		
	END TRY	
	BEGIN CATCH	
		IF ((SELECT CURSOR_STATUS('global','curQuarantineLocationTemp')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curQuarantineLocationTemp')) IN (0,1))
			BEGIN
				CLOSE curQuarantineLocationTemp;  		
			END
			DEALLOCATE curQuarantineLocationTemp;  
		END	
 
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = @vMSG_QUARANTINE_PURCHASE_ORDERS_ERRORS +': ERROR_NUMBER: '+CAST ( ERROR_NUMBER() AS varchar )+
						 ' ERROR_SEVERITY: '+CAST ( ERROR_SEVERITY() AS varchar )+
						 ' ERROR_STATE: '+CAST ( ERROR_STATE() AS varchar )+
						 ' ERROR_PROCEDURE: '+ ERROR_PROCEDURE()+
						 ' ERROR_LINE: '+CAST ( ERROR_LINE() AS varchar )+
						 ' ERROR_MESSAGE: '+ERROR_MESSAGE()
						
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_USE_LOGICAL_DELETE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Upgrade date : 24/12/2019
-- Description  : Check if a given Frequent Cause of "Release Problem" type is still bein used
--				  by "Release problem" column from Production Orders table.
-- Version      : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Upgrade date : 19/07/2019
-- Description  : Check if a given Location, Family or Unit, is still bein used by a Target  
--				  Column or Filter into any Automation Rule.
-- Version      : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author:		olondono
-- Create date: 2014-08-06
-- Description:	Procedure to know if the table uses logical delete
-- ===========================================================================================
CREATE PROCEDURE [dbo].[SP_USE_LOGICAL_DELETE] 
	/* Input Parameters */	
    @ivaTable SMALLINT,
    @ivaFieldValue VARCHAR(50),
    /* Output Parameters */	    
    @ovaUseLogicalDelete VARCHAR(1) OUTPUT
AS
	
BEGIN	
	-- SET NOCOUNT ON added to prevent extra result sets from
	SET NOCOUNT ON;
	DECLARE @totalRows INT;
	DECLARE	@Result    VARCHAR(1);
	DECLARE	@Message   NVARCHAR(MAX);
	
	-- By default it uses logical delete
	SET @ovaUseLogicalDelete = 'Y';
	SET @totalRows = 0;
	
	-- If it is production family	
	IF @ivaTable = 2
	BEGIN
		SELECT @totalRows = COUNT(1)
		  FROM TFSCM_CLI_PRODUCTION_ORDERS
		 WHERE CDFAMILY = @ivaFieldValue;
	END
	
	-- If it is location	
	IF @ivaTable = 5
	BEGIN
		SET @totalRows  = (SELECT COUNT(1)
							 FROM TFSCM_CLI_BUFFER
                            WHERE LOCATION = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_BUFFER	
							WHERE ORIGIN_LOCATION = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_ORDERS
							WHERE CDPLANT = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_ORDERS
							WHERE CDDESTINATION = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_FAMILY
							WHERE CDLOCATION = @ivaFieldValue);		
		
		EXEC [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES] N'LOCATION', @ivaFieldValue, @totalRows OUTPUT, @Result OUTPUT, @Message OUTPUT
		
		IF (@Result = 1) 
		BEGIN
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@Message, 11, 1);
		END
		
		EXEC [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES] N'ORIGIN_LOCATION', @ivaFieldValue, @totalRows OUTPUT, @Result OUTPUT, @Message OUTPUT
		
		IF (@Result = 1) 
		BEGIN
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@Message, 11, 1);
		END
		--PRINT @totalRows;
	END
	 
	-- If it is frequent causes	
	IF @ivaTable = 9
	BEGIN
		SET @totalRows  = (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_ORDERS
						    WHERE CAUSE_EARLY_RELEASE = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_ORDERS
							WHERE PRODUCTION_PROBLEM_CAUSE = @ivaFieldValue);
		-- -----------------------------------------------------------------------------------
		-- OHLO 20191224: Since v4.14.0, check if the cause ivaFieldValue is still being
		--  			  referenced by RELEASE_PROBLEM column.
		-- -----------------------------------------------------------------------------------					
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_PRODUCTION_ORDERS
							WHERE RELEASE_PROBLEM = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_BUFFER
							WHERE SUGGESTION_REJECTION_CAUSE = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY
							WHERE SUGGESTION_REJECTION_CAUSE = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_BUFFER
							WHERE REPLENISHMENT_PROBLEM = @ivaFieldValue);
		SET @totalRows += (SELECT COUNT(1)
							 FROM TFSCM_CLI_BUFFER_HISTORY
							WHERE REPLENISHMENT_PROBLEM = @ivaFieldValue);
	END
	
	-- If it is buffer family
	IF @ivaTable = 12
	BEGIN
		SELECT @totalRows = COUNT(1)
		  FROM TFSCM_CLI_BUFFER
		 WHERE FAMILY = @ivaFieldValue;
		 
		EXEC [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES] N'FAMILY', @ivaFieldValue, @totalRows OUTPUT, @Result OUTPUT, @Message OUTPUT
		
		IF (@Result = 1) 
		BEGIN
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@Message, 11, 1);
		END
	END
	
	-- If it is units
	IF @ivaTable = 13
	BEGIN
		 SELECT @totalRows = COUNT(1)
		  FROM TFSCM_CLI_BUFFER
		 WHERE CDUNIT = @ivaFieldValue;
		 
		EXEC [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES] N'CDUNIT', @ivaFieldValue, @totalRows OUTPUT, @Result OUTPUT, @Message OUTPUT
		
		IF (@Result = 1) 
		BEGIN
			-- (@ErMessage, @ErSeverity, @ErState)
			RAISERROR (@Message, 11, 1);
		END
	END
 	
 	-- If it is calendars
	IF @ivaTable = 99
	BEGIN
		 SELECT @totalRows = COUNT(1)
		  FROM TFSCM_CLI_LOCATION
		 WHERE CDCALENDAR = @ivaFieldValue;
	END
	
	IF (@totalRows = 0) 
	BEGIN
	   SET @ovaUseLogicalDelete = 'N';
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[UPDATE_NOTIFICATION_DATA_EXCHANGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Hernan Dario Jimenez
-- Create date: 20/02/2015
-- ===========================================================================

CREATE PROCEDURE [dbo].[UPDATE_NOTIFICATION_DATA_EXCHANGE]
	
	 @jndi VARCHAR(50),
	 @updateContent VARBINARY(1024),	 
	 @ovaResult VARCHAR(1) OUTPUT, 	 
	 @ovaMessage NVARCHAR(MAX) OUTPUT 
	
AS
BEGIN
	
	SET NOCOUNT ON;
	
	BEGIN TRANSACTION;
	
	BEGIN TRY	
	
	IF EXISTS (SELECT * FROM TFSCM_COM_NOTIFICATION_DATA_EXCHANGE WHERE JNDI = @jndi )
	BEGIN
	
		UPDATE TFSCM_COM_NOTIFICATION_DATA_EXCHANGE SET STATE_DATA_EXCHANGE = @updateContent WHERE JNDI = @jndi
	END
	ELSE	
	BEGIN
		INSERT INTO TFSCM_COM_NOTIFICATION_DATA_EXCHANGE (JNDI, STATE_DATA_EXCHANGE) VALUES(@jndi, @updateContent)
	END	
	
	COMMIT TRANSACTION;	
	
	SET @ovaResult = '0'
	
	SET @ovaMessage = 'OK'
	
	END TRY
	BEGIN CATCH				
		
		SET @ovaResult = '1'
		SET @ovaMessage = 'ERROR UPDATE_NOTIFICATION_DATA_EXCHANGE'		
		
		ROLLBACK TRANSACTION;
		
	END CATCH
	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_ALTER_BUFFER_HISTORY_TABLE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/01/2020
-- Description : * When removing columns, check first if they really exists in the table.
--				 * Rename stored procedure SP_ALTER_BUFFER_HISTORY_TABLE to
--                 USP_ALTER_BUFFER_HISTORY_TABLE
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Julian Gonzalez
-- Upgrade date: 16/12/2014
-- Description : Change to an cursor structure for altering history tables by ivaCdtable.
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 20/04/2014
-- Description  : Procedure for altering table for buffer history.
-- ===========================================================================================
CREATE PROCEDURE  [dbo].[USP_ALTER_BUFFER_HISTORY_TABLE]  
	/* Input Parameters */
	@ivaCdTable     AS SMALLINT,
	@ivaCdColumn    AS VARCHAR(50),
	@ivaSaveHistory AS VARCHAR(1),
	/* Output Parameters */
	@ovaResult      AS VARCHAR(1)    OUTPUT,
	@ovaMessage     AS NVARCHAR(MAX) OUTPUT
AS
    -- -----------------------------------------------------------------------
	-- Fields use for altering
    -- -----------------------------------------------------------------------
	DECLARE	 
		@vTableName       AS VARCHAR(50), 
		@vColumnName      AS VARCHAR(50),
		@vColumnType      AS VARCHAR(50),
		@vColumnSize      AS VARCHAR(10),       
		@vIsNullable      AS VARCHAR(10),     
		@vColumnAccuracy  AS SMALLINT,
		@vTotalColumnSize AS SMALLINT,
		@vSqlAlter        AS VARCHAR(MAX)  = '',
		@vSqlTmp          AS VARCHAR(MAX)  = '',
		@vTrace           AS NVARCHAR(MAX) = '';
			
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @vTableName = '';
	
		DECLARE  cHistoryTables CURSOR FAST_FORWARD FOR
		 SELECT HISTORY_TABLE_NAME 
           FROM TFSCM_COM_HISTORY_TABLES
	 	  WHERE CDTABLE = @ivaCdTable

		OPEN cHistoryTables;

		FETCH NEXT FROM cHistoryTables INTO @vTableName;
		WHILE (@@FETCH_STATUS = 0 )		
		BEGIN
			SET @vSqlAlter = '';
			IF @ivaSaveHistory = 'Y'
			BEGIN	
				--PRINT '@ivaSaveHistory = ''Y'' --> Save History'
				SET @vTrace = 'getting the column attributes';
				SELECT @vColumnName = C.CDCOLUMN, 
					   @vColumnType = UPPER(C.DSTYPE),
					   @vColumnSize = ( CASE UPPER(C.DSTYPE)
											WHEN 'VARCHAR' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
											WHEN 'NUMERIC' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
											ELSE '' 
										END),       
					   @vIsNullable  = ( CASE C.IS_NULLABLE
											WHEN 'N' THEN ' NOT NULL ' 
											ELSE ' NULL '
										 END),
					   @vColumnAccuracy =  C.COLUMN_ACCURACY
				  FROM TFSCM_COM_COL_TABLE C, TFSCM_COM_TABLES T
				 WHERE  T.TABLE_NAME_TEMP IS NOT NULL 
				   AND RTRIM(LTRIM(T.TABLE_NAME_TEMP)) <> ''
				   AND C.CDTABLE      = T.CDTABLE 
				   AND C.IS_SYSTEM    = 'N' 
				   AND C.SAVE_HISTORY = 'Y'
				   AND C.CDTABLE      = @ivaCdTable
				   AND C.CDCOLUMN     = @ivaCdColumn;

				--PRINT  'Data retrieved ' +    @vTableName + ' y ' + @vColumnName + ' y ' + @vColumnType  + ' y '+ @vColumnSize + ' y ' + @vIsNullable;
				
				SET @vTrace = 'Constructing alter statement';
				IF (@vColumnType = 'BOOLEAN')
				BEGIN
					SET @vColumnType = 'BIT';
				END

				SET @vSqlAlter =  'ALTER TABLE ' + @vTableName + ' ADD ' + @vColumnName + ' ' + @vColumnType;
				
				IF (@vColumnSize <> '')
				BEGIN
					IF @vColumnType = 'NUMERIC' 
					BEGIN
						IF (@vColumnAccuracy > 0)
						BEGIN
							SET @vColumnAccuracy = 5;
						END
						ELSE
						BEGIN
							SET @vColumnAccuracy = 0;
						END

						SET @vTotalColumnSize = CAST(@vColumnSize AS SMALLINT) + @vColumnAccuracy;

						IF (@vTotalColumnSize > 38)
						BEGIN
							SET @vTotalColumnSize = 38;
						END

						SET @vSqlAlter = @vSqlAlter +' ('+ CAST(@vTotalColumnSize AS VARCHAR);
						SET @vSqlAlter = @vSqlAlter +', '+ CAST(@vColumnAccuracy AS VARCHAR);
					END
					ELSE
						SET @vSqlAlter = @vSqlAlter + ' (' + @vColumnSize;
					
					SET @vSqlAlter = @vSqlAlter +   ') ';
				END

				SET @vSqlAlter = @vSqlAlter +  @vIsNullable;
				
				IF (@vIsNullable = ' NOT NULL ')
				BEGIN
					SET @vSqlAlter = @vSqlAlter + 
									(SELECT CASE @vColumnType
										WHEN 'VARCHAR'  THEN ' DEFAULT ''-'' '
										WHEN 'NUMERIC'  THEN ' DEFAULT -'+SUBSTRING('999999', 1, CAST(@vColumnSize AS INT))+' '
										WHEN 'BIT'      THEN ' DEFAULT 1 '
										WHEN 'DATETIME' THEN ' DEFAULT ''1901/01/01'' '
										ELSE ''
										END);
				END	
			END 
			ELSE
			BEGIN
				IF (@ivaSaveHistory = 'N')
				BEGIN
					-- PRINT '@ivaSaveHistory = ''N'' --> Not Save History'
					-- PRINT 'Col = '+ @ivaCdColumn
					-- PRINT 'Tab = '+ CAST(@ivaCdTable AS varchar)	 

					SET @vColumnName = @ivaCdColumn;

					--PRINT 'ColName '+ @vColumnName 
					--PRINT 'Table '+ @vTableName
					
					SELECT @vSqlTmp = 'ALTER TABLE '+ @vTableName + ' DROP CONSTRAINT '+ dc.name + ' ;' 
					  FROM sys.default_constraints dc, sys.columns c 
					 WHERE dc.parent_object_id = object_id( @vTableName)
					   AND dc.type             = 'D'
					   AND dc.parent_column_id = c.column_id   
					   AND c.object_id         = object_id( @vTableName)
					   AND c.name              = @vColumnName ;

					--PRINT 'Alter drop contraint  = '+ @vSqlTmp
					IF (@vSqlTmp  IS NULL)
					BEGIN
						SET @vSqlTmp = ' ';
					END

					SET @vSqlAlter = @vSqlAlter + @vSqlTmp;

					--PRINT 'Alter so far  = '+ @vSqlAlter

					SET @vTrace    = 'Constructing drop statement';
					-- -------------------------------------------------------------------
					-- OHLO 20200127: Since v4.15.0, check first if column exists 
					-- -------------------------------------------------------------------
					SET @vSqlAlter = @vSqlAlter 
						+ 'IF EXISTS (SELECT 1 FROM sys.sysobjects T INNER JOIN sys.syscolumns C ON T.id = C.id '
						+ '            WHERE T.name = ''' + @vTableName + ''' AND C.name = ''' + @vColumnName + ''') '
						+ 'BEGIN '
						+ '	ALTER TABLE ' + @vTableName + ' DROP COLUMN ' + @vColumnName + ';'
						+ 'END '; 
					-- -------------------------------------------------------------------
					--SET @vSqlAlter = @vSqlAlter + ' ALTER TABLE ' + @vTableName + ' DROP COLUMN ' + @vColumnName;	
					-- PRINT 'Alter drop  = '+ @vSqlAlter
				END
			END

			SET @vTrace = 'executing ' + @vSqlAlter;
			--PRINT @vTrace
			EXEC (@vSqlAlter);

			FETCH NEXT FROM cHistoryTables INTO @vTableName;
		END 

		CLOSE cHistoryTables;
		DEALLOCATE cHistoryTables;

		SET @ovaResult  = '0';
		SET @ovaMessage = 'successAlter ';
	END TRY
	BEGIN CATCH
		--PRINT @vTrace
		SET @ovaResult  = '1';
		SET @ovaMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_ALTER_BUFFER_HISTORY_TABLE]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();

		IF ((SELECT CURSOR_STATUS('global','cHistoryTables')) = -1)
		BEGIN
			DEALLOCATE cHistoryTables;
		END		
		IF ((SELECT CURSOR_STATUS('global','cHistoryTables')) > -1)
		BEGIN
			CLOSE cHistoryTables;
			DEALLOCATE cHistoryTables;
		END
	END CATCH	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_ALTER_MASTER_TABLE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: dd/mm/yyyy
-- Description : 
-- Version     : X.Y.Z
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 06/09/2018
-- Description  : Alter master table when custom fields are modified (for 
--                instance when they pass from not null to null).
-- Version      : 4.9.3
-- ===========================================================================
CREATE PROCEDURE [dbo].[USP_ALTER_MASTER_TABLE]
	/* Input Parameters */
	@cdInterface AS SMALLINT,
	@cdColumn    AS VARCHAR(50) ,
	@cdOperation AS VARCHAR(1),
	/* Output Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT
AS
    -- -----------------------------------------------------------------------
	-- Fields use for altering
    -- -----------------------------------------------------------------------
	DECLARE	 
		@TableName       AS VARCHAR(50), 
		@ColumnName      AS VARCHAR(50),
		@ColumnType      AS VARCHAR(50),
		@ColumnSize      AS VARCHAR(10),       
		@IsNullable      AS VARCHAR(10),     
		@ColumnAccuracy  AS SMALLINT,
		@TotalColumnSize AS SMALLINT,
		@SqlAlter        AS VARCHAR(MAX) = '',
		@SqlAlterType    AS VARCHAR(MAX) = '',
		@SqlDefault      AS VARCHAR(MAX) = '',
		@SqlDropDefault  AS VARCHAR(MAX) = '',
		@SqlUpdtDefault  AS VARCHAR(MAX) = '',
		@SqlTmp          AS VARCHAR(MAX) = '',
		@IdxTmp          AS VARCHAR(MAX) = '',
		@Trace           AS NVARCHAR(MAX) = '';
			
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		IF (@cdOperation = 'I' OR @cdOperation = 'U') 
		BEGIN	
			PRINT '@cdOperation = --> ' + @cdOperation
			SET @Trace = 'getting the column attributes';
			SELECT @TableName  = T.TABLE_NAME, 
				   @ColumnName = C.CDCOLUMN, 
				   @ColumnType = UPPER(C.DSTYPE),
				   @ColumnSize = ( CASE UPPER(C.DSTYPE)
										WHEN 'VARCHAR' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
										WHEN 'NUMERIC' THEN CAST (C.COLUMN_SIZE AS VARCHAR)
										ELSE '' 
									END),       
				   @IsNullable  = ( CASE C.IS_NULLABLE
										WHEN 'N' THEN ' NOT NULL ' 
										ELSE ' NULL '
									 END),
				   @ColumnAccuracy =  C.COLUMN_ACCURACY										 
			  FROM
			 	   TFSCM_DEX_INTERFACES I,
				   TFSCM_COM_COL_TABLE C, TFSCM_COM_TABLES T
			 WHERE I.CDINTERFACE = @cdInterface
			   AND C.CDCOLUMN	= @cdColumn
			   AND T.TABLE_NAME_TEMP IS NOT NULL 
			   AND RTRIM(LTRIM(T.TABLE_NAME_TEMP)) <> ''
			   AND T.CDTABLE     = I.CDTABLE
			   AND C.CDTABLE     = T.CDTABLE

			PRINT  'Coje ' +    @TableName + ' y ' + @ColumnName + ' y ' + @ColumnType  + ' y '+ @ColumnSize 
			     + ' y ' + @IsNullable + ' y ' + CAST (@ColumnAccuracy AS VARCHAR);
			
			SET @Trace = 'Constructing alter statement';
			IF (@ColumnType = 'BOOLEAN')
			BEGIN
				SET @ColumnType = 'BIT';
			END 
			
			-- Depending on the operation type, it adds or alters the column 
			SET @SqlAlterType = 'ADD';
			IF (@cdOperation = 'U') 
			BEGIN
				SET @SqlAlterType = 'ALTER COLUMN';
			END 
			
			SET @SqlAlter =  'ALTER TABLE ' + @TableName + ' ' + @SqlAlterType + ' ' + @ColumnName + ' ' + @ColumnType ;
			
			IF @ColumnSize <> '' 
			BEGIN			
				IF @ColumnType  = 'NUMERIC' 
				BEGIN
					IF (@ColumnAccuracy > 0)
						SET @ColumnAccuracy = 5;
					ELSE
						SET @ColumnAccuracy = 0;

					SET @TotalColumnSize = CAST(@ColumnSize AS SMALLINT) + @ColumnAccuracy;
					IF (@TotalColumnSize > 38)
						SET @TotalColumnSize = 38;
												
					SET @SqlAlter = @SqlAlter +' ('+ CAST(@TotalColumnSize AS VARCHAR) ;	
					SET @SqlAlter = @SqlAlter +', '+ CAST(@ColumnAccuracy AS VARCHAR);					
				END
				ELSE
					SET @SqlAlter = @SqlAlter + ' (' + @ColumnSize ;
				
				SET @SqlAlter = @SqlAlter +   ') ';
			END

			SET @SqlAlter = @SqlAlter +  @IsNullable;
			
			SET @SqlDefault = '';
			
			IF @IsNullable = ' NOT NULL '
			BEGIN				
				SET @SqlDefault = (SELECT CASE @ColumnType
									WHEN 'VARCHAR'  THEN ' ''-'' '
									WHEN 'NUMERIC'  THEN ' -'+SUBSTRING('999999', 1, CAST(@ColumnSize AS INT))+' '
									WHEN 'BIT'      THEN ' 1 '
									WHEN 'DATETIME' THEN ' ''1901/01/01'' '
									ELSE ''
									END);
									
				IF (@cdOperation = 'U')					
				BEGIN
					SET @SqlDropDefault = '';
					SELECT @SqlDropDefault = 'ALTER TABLE ' + @TableName + ' DROP CONSTRAINT ' + dc.name  + ';' 
					  FROM sys.default_constraints dc, sys.columns c 
					 WHERE dc.parent_object_id = object_id(@TableName)
					   AND dc.type             = 'D'
					   AND dc.parent_column_id = c.column_id 
					   AND c.object_id         = object_id(@TableName)
					   AND c.name              = @ColumnName ;
					   
					IF (@SqlDropDefault IS NULL)
					BEGIN
						SET @SqlDropDefault = '';
					END
					
					SET @SqlUpdtDefault = ''
					    + 'UPDATE ' + @TableName + ' SET ' + @ColumnName  + ' = ' + @SqlDefault + ';'
						+ CHAR(13);
					
					SET @SqlDefault = CHAR(13) + '; ' + CHAR(13)
						+ @SqlDropDefault + CHAR(13)
						+ CHAR(13)  
						+ 'ALTER TABLE ' + @TableName + ' ADD CONSTRAINT DF_' + @ColumnName + ' DEFAULT ' + @SqlDefault + ' FOR ' + @ColumnName + '; ' 
						+ CHAR(13);
					
				END
				SET @SqlAlter = @SqlUpdtDefault + @SqlAlter + @SqlDefault;
			END
			ELSE 
			BEGIN
				IF (@cdOperation = 'U') 
				BEGIN
					SET @SqlDropDefault = '';
					SELECT @SqlDropDefault = 'ALTER TABLE ' + @TableName + ' DROP CONSTRAINT ' + dc.name  + ';' 
					  FROM sys.default_constraints dc, sys.columns c 
					 WHERE dc.parent_object_id = object_id(@TableName)
					   AND dc.type             = 'D'
					   AND dc.parent_column_id = c.column_id 
					   AND c.object_id         = object_id(@TableName)
					   AND c.name              = @ColumnName ;
					   
					IF (@SqlDropDefault IS NULL)
					BEGIN
						SET @SqlDropDefault = '';
					END
					
					SET @SqlDefault = CHAR(13) + CHAR(13)
						+ @SqlDropDefault
						+ CHAR(13)
				END
				SET @SqlAlter =  @SqlDefault + @SqlAlter;
			END
			--SET @SqlAlter = @SqlAlter + @SqlDefault;
			
			IF @TableName = 'TFSCM_CLI_PRODUCTION_ORDERS_TEMP' 
			BEGIN
				IF @ColumnName = 'CDPARENT_ORDER' 
				BEGIN  
					PRINT 'Alter create index '  
					SET @IdxTmp =  
						' CREATE NONCLUSTERED INDEX CURSOR_TFSCM_PROD_ORDERS_TEMP  ON  TFSCM_CLI_PRODUCTION_ORDERS_TEMP  ' +
						'	( CDORDER ASC, CDPARENT_ORDER ASC, CDORDER_TYPE ASC, CDDESTINATION ASC, CDFAMILY ASC ); '
	  
					SET @SqlAlter = @SqlAlter +';'+ @IdxTmp;			
				END
			END			 
		END 
		ELSE		
			IF @cdOperation = 'D'
			BEGIN
				PRINT '@cdOperation = ''D'' --> Delete Operation'
				PRINT 'Col = '+ @cdColumn
				PRINT 'Inter = '+ CAST(@cdInterface AS varchar)	 
				   
				SET @ColumnName = @cdColumn;
				
				SELECT @TableName  = T.TABLE_NAME_TEMP  				    
				  FROM TFSCM_DEX_INTERFACES I,
					   TFSCM_COM_TABLES T
				 WHERE I.CDINTERFACE = @cdInterface 
				   AND T.TABLE_NAME_TEMP IS NOT NULL 
				   AND RTRIM(LTRIM(T.TABLE_NAME_TEMP)) <> '' 
				   AND T.CDTABLE     = I.CDTABLE ;	
				   
				PRINT 'ColName '+ @ColumnName 
				PRINT 'Table '+ @TableName											
				
				IF @TableName = 'TFSCM_CLI_PRODUCTION_ORDERS_TEMP' 
				BEGIN
					IF @ColumnName = 'CDPARENT_ORDER'
					BEGIN  
						PRINT 'Alter drop index '  
						SET @IdxTmp =  
							' IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]'') AND name = N''CURSOR_TFSCM_PROD_ORDERS_TEMP'') ' +
							'    DROP INDEX CURSOR_TFSCM_PROD_ORDERS_TEMP  ON  TFSCM_CLI_PRODUCTION_ORDERS_TEMP;';
						
						SET @SqlAlter = @SqlAlter + @IdxTmp;			
					END
				END
				SELECT @SqlTmp = 'ALTER TABLE '+ @TableName + ' DROP CONSTRAINT '+ dc.name + ' ;' 
				  FROM sys.default_constraints dc, sys.columns c 
				 WHERE dc.parent_object_id = object_id( @TableName)
				   AND dc.type             = 'D'
				   AND dc.parent_column_id = c.column_id   
	 			   AND c.object_id         = object_id( @TableName)
				   AND c.name              = @ColumnName ; 	

								
				PRINT 'Alter drop contraint  = '+ @SqlTmp
				IF @SqlTmp  IS NULL
					SET @SqlTmp = ' ';
				SET @SqlAlter = @SqlAlter + @SqlTmp;		
				
				PRINT 'Alter so far  = '+ @SqlAlter			 
				   
				SET @Trace    = 'Constructing drop statement';				 
				SET @SqlAlter = @SqlAlter + ' ALTER TABLE ' + @TableName + ' DROP COLUMN ' + @ColumnName;	
				 			 
				
				--PRINT 'Alter drop  = '+ @SqlAlter		
			END 
				
		SET @Trace = 'executing '+ @SqlAlter;
		--PRINT @Trace;
		EXEC (@SqlAlter)

		SET @ovaResult = '0';
		SET @ovaMessage = 'successAlter';
	    PRINT @Trace	
	END TRY
	
	BEGIN CATCH
		-- PRINT @Trace	
		SET @ovaResult  = '1';
		SET @ovaMessage =  ' <br> '
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST( ERROR_STATE() AS varchar )
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_ALTER_MASTER_TABLE]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();

	END CATCH
	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_APPLY_BUFFER_CHANGES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================================
-- Author      : Isaac Florez
-- Upgrade date: 20/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 29/11/2020
-- Description : * Optimizations: 1) add commit to curPendingBuffers cursor, 
--               2) Change the place where the messages are being queried.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 07/08/2020
-- Description : Change comma to semicolon for delimiter in @buffer_record
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 08/08/2019
-- Description : Optimization of "Get pending event steps lists"
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Full column names in dynamic queries
--               Parametrization of dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 01/03/2019
-- Description : Reducing loops
-- Version     : 4.11.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/12/2018
-- Description : Rewritten as specified in Focuss Guide
-- Version     : 4.10.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal Mokros
-- Upgrade date: 22/06/2018
-- Description : Rewritten to set-based solution
-- Version     : 4.9.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 22/03/2018
-- Description : Set adjustment action to Expire or accept depending on the 
--               change on the buffer; and, when required buffer is less than
--               minimum buffer, then set the Suggestion Alert (Issue 6933)
-- Version     : 4.8.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/07/2017
-- Description : The event is only updated when the Next Change Date is less
-- 				 than or equal to the Minimum Buffer Update Date (Issue 5869)
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 21/04/2017
-- Description : * Add logic when buffer size changes, in order to expire 
--				   pending suggestions.
--				 * vNextChangeDate condition: comparing it with '3000-12-31'
--				   instead of 'Null'
-- Version     : 4.6.1
-- -------------------------------------------------------------------------------------------
-- Author       : Julian Andres Gonzalez.
-- Creation date: 27-05-2015.
-- Description  : Method to calculate all variables when buffer changes is 
--				  executed.
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_APPLY_BUFFER_CHANGES] 
(	/* Input Parameters */ 	
	-- No Inputs
    /* Output Parameters */
    @ovaResult 	VARCHAR(1)	  OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT  
  ) 
AS 
	-- Message variables
	DECLARE @MSG_APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED  NVARCHAR(MAX);
	DECLARE @MSG_APPLY_BUFFER_CHANGES_ERROR 	NVARCHAR(MAX); 
	DECLARE @MSG_APPLY_BUFFER_CHANGES_SUCESS 	NVARCHAR(MAX);
	DECLARE @Language 						 	VARCHAR(2) = 'es'; 
	DECLARE @CodErrorResultMessages 			VARCHAR(1); 
	DECLARE @MessageErrorResultMessages 		NVARCHAR(MAX); 

	-- It must be initialized because is used for calculation porpuses
	DECLARE @ServerDate 			 AS DATETIME      = GETDATE();
	
	-- Auxiliar varaibles
	DECLARE @LogSQLQuery 			 AS NVARCHAR(MAX) = '';
	DECLARE @MergeSQLQuery 			 AS NVARCHAR(MAX) = '';
	DECLARE @ListSQLQuery 			 AS NVARCHAR(MAX) = '';	 
	DECLARE @BufferList              AS NVARCHAR(MAX) = '';
	DECLARE @AdjustmentActionExpire  AS VARCHAR(10)   = 'EXPIRE';
	DECLARE @AdjustmentActionAccept  AS VARCHAR(10)   = 'ACCEPT'; 
	DECLARE @AdjustmentActionIgnore  AS VARCHAR(10)   = 'IGNORE'; 
	DECLARE @ExpiredSuggestionCause  AS VARCHAR(50)   = '';
	DECLARE @ManagedFromApplyBC      AS VARCHAR(1)    = 'C';
	DECLARE @ovaGBASResult           AS VARCHAR(1)    = '';
	DECLARE @ovaGBASMessage          AS NVARCHAR(MAX) = '';
	DECLARE @ModifyUser				 AS NVARCHAR(MAX) = 'FOCUSSSCM'; 	
	DECLARE @DelimiterForRecords  	 AS VARCHAR(1)    = '|';
	DECLARE @DelimiterForPk 		 AS VARCHAR(1)    = ';';
	DECLARE @Sku					 AS VARCHAR(50)   = '';
	DECLARE @Location				 AS VARCHAR(50)   = '';
	DECLARE @BufferRecord 			 AS NVARCHAR(MAX) = '';
	DECLARE @RemainingStr 			 AS NVARCHAR(MAX) = '';
	DECLARE @EventStepId			 AS INT           = -1;
	
BEGIN
  	BEGIN TRY 
		--INSERT INTO LOG_MICHAL (LOG_MSG, LOG_TIME) VALUES ('[USP_APPLY_BUFFER_CHANGES] - start',getdate())
		SET NOCOUNT ON;
		
		IF OBJECT_ID('tempdb..#PendingStepsTbl') IS NOT NULL 
          DROP TABLE #PendingStepsTbl;

		SELECT EVENT_STEPS.STEP EVENT_STEP_ID,
			   EVENT_STEPS.SKU,
			   EVENT_STEPS.LOCATION,
			   EVENT_STEPS.DELTA, 
			   EVENT_STEPS.BASE_BUFFER_DELTA
		  INTO #PendingStepsTbl
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  EVENT_STEPS
		 WHERE 1 = 2;

		IF OBJECT_ID('tempdb..#PendingStepsTblSingle') IS NOT NULL 
          DROP TABLE #PendingStepsTblSingle;

		SELECT EVENT_STEPS.STEP EVENT_STEP_ID,
			   EVENT_STEPS.SKU,
			   EVENT_STEPS.LOCATION,
			   EVENT_STEPS.DELTA, 
			   EVENT_STEPS.BASE_BUFFER_DELTA
		  INTO #PendingStepsTblSingle
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  EVENT_STEPS
		 WHERE 1 = 2;

		IF OBJECT_ID('tempdb..#PendingStepsTblSubSingle') IS NOT NULL 
          DROP TABLE #PendingStepsTblSubSingle;

		SELECT EVENT_STEPS.SKU,
			   EVENT_STEPS.LOCATION 
		  INTO #PendingStepsTblSubSingle
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  EVENT_STEPS
		 WHERE 1 = 2;

		SET @ovaMessage = '';
		SELECT @Language = PARAM_VALUE  
		  FROM TFSCM_COM_PARAMS 
		 WHERE CDPARAM = 'DEFAULT_LANGUAGE';

		SET @ExpiredSuggestionCause = (SELECT CDCAUSE
										 FROM TFSCM_CLI_CAUSES
										WHERE DSCAUSE = 'cause_programmed_buffer_change');

		-- ********************* OJO **************************
		---SET @ServerDate = '2019-07-15';
		-- ********************* OJO **************************		

        -- -----------------------------------------------------------------------------------
        -- Get pending event steps list
		-- -----------------------------------------------------------------------------------
		INSERT INTO #PendingStepsTbl (EVENT_STEP_ID, SKU, LOCATION, DELTA, BASE_BUFFER_DELTA)		
		SELECT EVENT_STEPS.EVENT_STEP_ID,
			   EVENT_STEPS.SKU,
			   EVENT_STEPS.LOCATION,
			   EVENT_STEPS.DELTA, 
			   EVENT_STEPS.BASE_BUFFER_DELTA				
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  EVENT_STEPS
		 WHERE EVENT_STEPS.PROCESSING_DATE  = '1901-01-01 00:00' 
			-- -------------------------------------------------------------------------------
			-- OHLO 20191211: Since v4.14.0, remove the unnecessary filter EVENT_STEPS.DATE <= @ServerDate
			-- -------------------------------------------------------------------------------
		   AND EVENT_STEPS.DATE <= (SELECT MAX(UPDATE_MOVEMENTS) 
									  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY]  BUFFER_HISTORY
									 WHERE BUFFER_HISTORY.SKU = EVENT_STEPS.SKU
									   AND BUFFER_HISTORY.LOCATION = EVENT_STEPS.LOCATION);
		-- -----------------------------------------------------------------------------------
		-- OHLO 20191211: Since v4.14.0, remove the unnecessary ORDER BY EVENT_STEPS.DATE ASC 
		-- -----------------------------------------------------------------------------------
		  
		CREATE INDEX IDX_PendingStepsTbl ON #PendingStepsTbl (SKU, LOCATION);
		
		INSERT INTO #PendingStepsTblSubSingle (SKU, LOCATION)		
		SELECT X.SKU,X.LOCATION
		  FROM (SELECT SKU, LOCATION, count(*) cnt
		          FROM #PendingStepsTbl
		         GROUP BY SKU,
			 	         LOCATION
		         HAVING count(*) = 1
			   ) X;

		CREATE INDEX IDX_PendingStepsTblSubSingle ON #PendingStepsTblSubSingle (SKU, LOCATION);
		
		INSERT INTO #PendingStepsTblSingle (EVENT_STEP_ID, SKU, LOCATION, DELTA, BASE_BUFFER_DELTA)		
		SELECT EVENT_STEP_ID, T1.SKU, T1.LOCATION, DELTA, BASE_BUFFER_DELTA
		  FROM #PendingStepsTbl T1,#PendingStepsTblSubSingle T2
		 WHERE T1.SKU = T2.SKU AND T1.LOCATION = T2.LOCATION;

		CREATE INDEX IDX_PendingStepsTblSingle ON #PendingStepsTblSingle (SKU, LOCATION);
		
		IF OBJECT_ID('tempdb..#ExpiredBuffersTbl') IS NOT NULL 
		  DROP TABLE #ExpiredBuffersTbl;

		SELECT EVENT_STEPS.SKU,
			   EVENT_STEPS.LOCATION 
		  INTO #ExpiredBuffersTbl
		  FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]  EVENT_STEPS
		 WHERE 1 = 2;
 
		INSERT INTO #ExpiredBuffersTbl (SKU, LOCATION)		
		SELECT DISTINCT BUFFER.SKU, BUFFER.LOCATION 
		  FROM [dbo].[TFSCM_CLI_BUFFER] BUFFER, 
		       #PendingStepsTbl PENDING_EVENTS
		 WHERE BUFFER.INACTIVE           = 0
		   AND BUFFER.ADJUSTMENT_ACTION <> @AdjustmentActionIgnore
		   AND BUFFER.SKU                = PENDING_EVENTS.SKU
		   AND BUFFER.LOCATION           = PENDING_EVENTS.LOCATION;
		 
		CREATE INDEX IDX_ExpiredBuffersTbl ON #ExpiredBuffersTbl (SKU, LOCATION);
		
        -- ----------------------------------------------------------------------------------- 							
		-- Alert user and Expire pending suggestions 
		-- -----------------------------------------------------------------------------------							
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
			'APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED', @Language, '', '', '', 
			@MSG_APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED OUTPUT; 
			
		SET @LogSQLQuery = 'INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, UPDATE_DATE) ' +
						   '  SELECT ''' + @MSG_APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED + ''', NULL, ''A'', GETDATE(), X.SKU, X.LOCATION, GETDATE() ' +
						   '  FROM #ExpiredBuffersTbl X';
		EXEC sp_executesql @LogSQLQuery;
			
		DELETE T1 
		  FROM #PendingStepsTbl T1 	
		  INNER JOIN #PendingStepsTblSingle T2
		     ON T1.SKU = T2.SKU AND T1.LOCATION = T2.LOCATION;
		
		-- -----------------------------------------------------------------------------------							
		-- In order to manage the expired sku-location, add it to the list 
		-- -----------------------------------------------------------------------------------							
		SET @ListSQLQuery = '' 
			+ 'SELECT @BufferList = STUFF((SELECT DISTINCT ''|'' + TMP.ID ' + CHAR(13)
			+ '  FROM (SELECT BUFFER.SKU + '';'' + BUFFER.LOCATION AS ID' + CHAR(13)
			+ '          FROM #ExpiredBuffersTbl BUFFER) TMP ' + CHAR(13)
			+ '   FOR xml path('''') ' + CHAR(13)
			+ '             ), 1, 1, '''') ';
			
		EXEC sp_executesql
			@Query                = @ListSQLQuery ,
			@Params               = N'@BufferList NVARCHAR(MAX) OUTPUT',
			@BufferList = @BufferList OUTPUT;

		SET @MergeSQLQuery = ''
			+ 'MERGE TFSCM_CLI_BUFFER AS TARGET ' + CHAR(13)
			+ 'USING (SELECT DISTINCT SKU, LOCATION ' + CHAR(13)
			+ '         FROM #ExpiredBuffersTbl) AS SOURCE ' + CHAR(13)
			+ '   ON (TARGET.SKU = SOURCE.SKU AND TARGET.LOCATION = SOURCE.LOCATION) ' + CHAR(13)
			+ ' WHEN MATCHED THEN UPDATE ' + CHAR(13) 
			+ '  SET ADJUSTMENT_ACTION = @AdjustmentActionExpire, ' + CHAR(13) 
			+ '      SUGGESTION_REJECTION_CAUSE = @ExpiredSuggestionCause, ' + CHAR(13) 
			+ '      SUGGESTION_EXPIRATION_DATE = CURRENT_TIMESTAMP;';
									 
		EXEC sp_executesql @MergeSQLQuery, 
		     N'@AdjustmentActionExpire VARCHAR(10), @ExpiredSuggestionCause VARCHAR(50)', 
			 @AdjustmentActionExpire, @ExpiredSuggestionCause;
		
		-- -----------------------------------------------------------------------------------							
		-- Manage the expired suggestions 
		-- -----------------------------------------------------------------------------------							
		IF (@BufferList <> '')
		BEGIN
			EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferList, @ModifyUser, @ManagedFromApplyBC,
													  @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;

			IF (@ovaGBASResult = '1')
			BEGIN
				-- (@ErMessage, @ErSeverity, @ErState)
				RAISERROR (@ovaGBASMessage, 11, 1);
			END 
		END
		
		-- -----------------------------------------------------------------------------------							
		-- Apply steps 						
		-- ----------------------------------------------------------------------------------- 				
		-- In order to manage the expired sku-location, add it to the list 
		-- -----------------------------------------------------------------------------------
		-- first one step only updates
		UPDATE BUF
		   SET BUF.ADJUSTMENT_ACTION = @AdjustmentActionAccept,  
		       BUF.APPROVED_BUFFER   = dbo.GET_MAXIMUM_OF(BUF.MINIMUM_BUFFER, (BUF.BUFFER + TMP.DELTA), -99999999, -99999999),
		       BUF.SBC_BUFFER_SIZE   = (BUF.SBC_BUFFER_SIZE + TMP.BASE_BUFFER_DELTA)		  
		  FROM TFSCM_CLI_BUFFER BUF
		  INNER JOIN #PendingStepsTblSingle TMP 
			 ON (BUF.SKU = TMP.SKU AND BUF.LOCATION = TMP.LOCATION);

		SET	@BufferList	  = '';
		SET @ListSQLQuery = '' 
			+ 'SELECT @BufferList = STUFF((SELECT DISTINCT ''|'' + TMP.ID ' + CHAR(13)
			+ '  FROM (SELECT DISTINCT BUFFER.SKU + '';'' + BUFFER.LOCATION AS ID' + CHAR(13)
			+ '          FROM #PendingStepsTblSingle BUFFER) TMP ' + CHAR(13)
			+ '   FOR xml path('''') ' + CHAR(13)
			+ '             ), 1, 1, '''') ';
			
		EXEC sp_executesql
			@Query                = @ListSQLQuery ,
			@Params               = N'@BufferList NVARCHAR(MAX) OUTPUT',
			@BufferList = @BufferList OUTPUT;

		EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferList, @ModifyUser, @ManagedFromApplyBC,
			                                      @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;
				
		IF (@ovaGBASResult = '1')
		BEGIN
		  RAISERROR (@ovaGBASMessage, 11, 1);
		END 

		SET	@BufferList	  = '';
		SET @ListSQLQuery = '' 
			+ 'SELECT @BufferList = STUFF((SELECT DISTINCT ''|'' + TMP.ID ' + CHAR(13)
			+ '  FROM (SELECT DISTINCT BUFFER.SKU + '';'' + BUFFER.LOCATION + '';'' + CAST(BUFFER.EVENT_STEP_ID AS VARCHAR) AS ID' + CHAR(13)
			+ '          FROM #PendingStepsTbl BUFFER) TMP ' + CHAR(13)
			+ '   FOR xml path('''') ' + CHAR(13)
			+ '             ), 1, 1, '''') ';
			
		EXEC sp_executesql
			@Query                = @ListSQLQuery ,
			@Params               = N'@BufferList NVARCHAR(MAX) OUTPUT',
			@BufferList = @BufferList OUTPUT;
			
		DECLARE curPendingBuffers CURSOR FAST_FORWARD FOR
		 SELECT DISTINCT value AS BUFFERS   
		   FROM STRING_SPLIT(@BufferList, @DelimiterForRecords);
		
		OPEN curPendingBuffers;
		FETCH curPendingBuffers INTO @BufferRecord;
		
		WHILE (@@FETCH_STATUS = 0) 
		BEGIN
			SET @RemainingStr = @BufferRecord;
			
			SELECT @Sku          = SUBSTRING(@RemainingStr, 0, CHARINDEX(@DelimiterForPk, @RemainingStr));
			SELECT @RemainingStr = SUBSTRING(@RemainingStr, CHARINDEX(@DelimiterForPk, @RemainingStr) + 1, LEN(@RemainingStr));		
			SELECT @Location     = SUBSTRING(@RemainingStr, 0, CHARINDEX(@DelimiterForPk, @RemainingStr));
			SELECT @EventStepId  = CAST(SUBSTRING(@RemainingStr, CHARINDEX(@DelimiterForPk, @RemainingStr) + 1, LEN(@RemainingStr)) AS INT);
			
			SET @BufferRecord = @Sku + ';' + @Location;
			
			UPDATE BUF
			   SET BUF.ADJUSTMENT_ACTION = @AdjustmentActionAccept,  
				   BUF.APPROVED_BUFFER   = dbo.GET_MAXIMUM_OF(BUF.MINIMUM_BUFFER, (BUF.BUFFER + TMP.DELTA), -99999999, -99999999),
				   BUF.SBC_BUFFER_SIZE   = (BUF.SBC_BUFFER_SIZE + TMP.BASE_BUFFER_DELTA)		  
			FROM TFSCM_CLI_BUFFER BUF
				 INNER JOIN #PendingStepsTbl TMP ON (BUF.SKU = TMP.SKU AND BUF.LOCATION = TMP.LOCATION 
												AND TMP.SKU = @Sku AND TMP.LOCATION = @Location AND TMP.EVENT_STEP_ID = @EventStepId);

			-- -------------------------------------------------------------------------------							
			-- Manage the applied changes
			-- -------------------------------------------------------------------------------							
			IF (@BufferRecord <> '')
			BEGIN
				EXEC MANAGE_BUFFER_ADJUSTMENT_SUGGESTIONS @BufferRecord, @ModifyUser, @ManagedFromApplyBC,
														  @ovaGBASResult OUTPUT, @ovaGBASMessage OUTPUT;

				IF (@ovaGBASResult = '1')
				BEGIN
					-- (@ErMessage, @ErSeverity, @ErState)
					RAISERROR (@ovaGBASMessage, 11, 1);
				END 
			END
			-- -------------------------------------------------------------------------------
			-- OHLO 20201125: Since v5.3.0, add a commit sentence to avoid large amounts of 
			-- 				  data within a single transaction.
			-- -------------------------------------------------------------------------------
			COMMIT;

			FETCH curPendingBuffers INTO @BufferRecord
		END
		CLOSE curPendingBuffers			
		DEALLOCATE curPendingBuffers
		-- -----------------------------------------------------------------------------------							
		-- Mark steps as applied
		-- -----------------------------------------------------------------------------------							
		MERGE TFSCM_CLI_BUFFER_CHANGES_STEPS AS TARGET
		USING (SELECT EVENT_STEP_ID, SKU, LOCATION
			   FROM #PendingStepsTbl
			   UNION
			   SELECT EVENT_STEP_ID, SKU, LOCATION
			   FROM #PendingStepsTblSingle) AS SOURCE
		   ON (TARGET.EVENT_STEP_ID = SOURCE.EVENT_STEP_ID)
		 WHEN MATCHED THEN UPDATE
		  SET TARGET.PROCESSING_DATE = CURRENT_TIMESTAMP;
  
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'APPLY_BUFFER_CHANGES_SUCESS', @Language, '', '', '', @MSG_APPLY_BUFFER_CHANGES_SUCESS OUTPUT;

		SET @ovaResult = '0'; 
		SET @ovaMessage = @ovaMessage+ @MSG_APPLY_BUFFER_CHANGES_SUCESS ;	
	END TRY 
	BEGIN CATCH	
		IF ((SELECT CURSOR_STATUS('global','curPendingBuffers')) = -1)
		BEGIN
			DEALLOCATE curPendingBuffers;
		END
		
		IF ((SELECT CURSOR_STATUS('global','curPendingBuffers')) > -1)
		BEGIN
			CLOSE curPendingBuffers;
			DEALLOCATE curPendingBuffers;
		END
		--PRINT	@Trace			
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'APPLY_BUFFER_CHANGES_ERROR', @Language, '', '', '', @MSG_APPLY_BUFFER_CHANGES_ERROR OUTPUT;
		SET @ovaResult  = '1';
		SET @ovaMessage = @MSG_APPLY_BUFFER_CHANGES_ERROR 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_APPLY_BUFFER_CHANGES]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()

		RAISERROR (@ErMessage, @ErSeverity, @ErState)              
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/05/2020
-- Description : Change the SP name from SP_ASSIGN_DEFAULT_ROLE_PERMISSIONS to 
--				 USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : olondono  
-- Creation date: 13/05/2014 
-- Description  : Procedure for inserting default permission to a role
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS] 
	/* Input Parameters */
	@cdRol   	 SMALLINT, 
	@cdOperation VARCHAR(1),
	/* Output Parameters */
	@ovaResult   VARCHAR(1)   OUTPUT,
	@ovaMessage  VARCHAR(MAX) OUTPUT
AS
    -- ---------------------------------------------------------------------------------------
	-- Variables used
    -- ---------------------------------------------------------------------------------------
	DECLARE	 
		@isSystemYes  VARCHAR(1)  = 'Y', 
		@isSystemNo   VARCHAR(1)  = 'N', 
		@cdType       VARCHAR(1)  = 'F', 
		@cdPermission VARCHAR(50) ;		
	DECLARE 
	     @cdLanguage  VARCHAR(2) = 'es',
	     @cdError     VARCHAR(1),
		 @cdMessage   VARCHAR(MAX),
		 @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_ERROR   VARCHAR(MAX), 
		 @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_SUCCESS VARCHAR(MAX);	
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		
		-- -----------------------------------------------------------------------------------
		-- Setting messages
		-- -----------------------------------------------------------------------------------
		SELECT @cdLanguage = PARAM_VALUE  
		  FROM  TFSCM_COM_PARAMS 
		 WHERE CDCOMPONENT = 6 
		   AND CDPARAM     = 'DEFAULT_LANGUAGE';
		
		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'ASSIGN_DEFAULT_ROLE_PERMISSIONS_ERROR', @cdLanguage, '', '', '', @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_ERROR OUTPUT;

		EXEC GET_MESSAGE @cdError OUTPUT, @cdMessage OUTPUT,  
		'ASSIGN_DEFAULT_ROLE_PERMISSIONS_SUCCESS', @cdLanguage, '', '', '', @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_SUCCESS OUTPUT; 

		-- -----------------------------------------------------------------------------------
		-- '@cdOperation = ''I'' --> Insert Operation'	
		-- -----------------------------------------------------------------------------------
		IF @cdOperation = 'I'
		BEGIN			    
			-- -------------------------------------------------------------------------------
			-- Cursos for all system permissions 
			-- -------------------------------------------------------------------------------
			DECLARE permission_cursor CURSOR FAST_FORWARD FOR 
			SELECT CDPERMISSION
			  FROM TFSCM_COM_PERMISSION
			 WHERE (IS_SYSTEM = @isSystemYes AND
					CDTYPE   <> @cdType )
			    OR (IS_SYSTEM = @isSystemNo AND 
			        CDTYPE    = @cdType ) ;

			OPEN permission_cursor;
			
			FETCH NEXT FROM permission_cursor 
			 INTO @cdPermission ;
				
			-- -------------------------------------------------------------------------------
			-- For each permission, set permissions by role
			-- -------------------------------------------------------------------------------
			WHILE @@FETCH_STATUS = 0
			BEGIN 		  
				-- ---------------------------------------------------------------------------
				-- Insert Permission to the role   
				-- ---------------------------------------------------------------------------		
				INSERT INTO TFSCM_COM_ROL_PERM ( CDROL, CDPERMISSION )	  
				VALUES (@cdRol, @cdPermission);  
					
				FETCH NEXT FROM permission_cursor 
				 INTO @cdPermission ;
			END

			CLOSE permission_cursor;
			DEALLOCATE permission_cursor;
		END   		
		ELSE
		BEGIN
			-- -------------------------------------------------------------------------------
			-- '@cdOperation = ''D'' --> Delete Operation'	
			-- -------------------------------------------------------------------------------
			IF @cdOperation = 'D'
			BEGIN	
				DECLARE del_perm_cursor CURSOR FAST_FORWARD FOR 
				SELECT CDPERMISSION
				  FROM TFSCM_COM_PERMISSION
				 WHERE IS_SYSTEM  = @isSystemYes
					OR (IS_SYSTEM = @isSystemNo AND 
						CDTYPE    = @cdType ) ;

				OPEN del_perm_cursor;
				
				FETCH NEXT FROM del_perm_cursor 
				 INTO @cdPermission ;
					
				-- ---------------------------------------------------------------------------
				-- For each permission, remove permissions for that role
				-- ---------------------------------------------------------------------------
				WHILE @@FETCH_STATUS = 0
				BEGIN 		  
					-- -----------------------------------------------------------------------
					-- Delete Permission to the role   
					-- -----------------------------------------------------------------------	
					DELETE FROM TFSCM_COM_ROL_PERM 
					 WHERE CDROL        = @cdRol
					   AND CDPERMISSION = @cdPermission;  
					   
					--PRINT 'Borrar '	+@cdPermission
					FETCH NEXT FROM del_perm_cursor 
					 INTO @cdPermission ;
				END

				CLOSE del_perm_cursor;
				DEALLOCATE del_perm_cursor;     
			END
		END
		SET @ovaResult = '0';
		SET @ovaMessage = @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_SUCCESS;
	   	
	END TRY	
	BEGIN CATCH 
		 
		IF (@cdOperation = 'I')
		BEGIN
			CLOSE permission_cursor;
			DEALLOCATE permission_cursor;
		END
		ELSE
		BEGIN
			IF (@cdOperation = 'D')
			BEGIN
				CLOSE del_perm_cursor;
				DEALLOCATE del_perm_cursor;
			END
		END 
		SET @ovaResult  = '1';
		SET @ovaMessage = @dsMSG_ASSIGN_DEFAULT_ROLE_PERMISSIONS_ERROR + ' <br> ' + ' <br> '
				+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
				+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
				+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
				+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS]')
				+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
				+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CALCULATE_AVERAGE_ZONE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 26/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--				 * Change the name for the stored procedure SP_CALCULATE_AVERAGE_ZONE to
--				   USP_CALCULATE_AVERAGE_ZONE.
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : JuliÃƒÂ¡n AndrÃƒÂ©s GonzÃƒÂ¡lez
-- Upgrade date: 01/07/2016
-- Description : Buffer Validation when its value is equal to zero: buffer > 0
-- ------------------------------------------------------------------------------------------- 
-- Author       : Hernan Dario Jimenez
-- Creation date: 22/01/2015
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_CALCULATE_AVERAGE_ZONE]
	-- INPUT PARAMETERS
	@GinCalculationDate		DATETIME,
	@GinDayAmount			INT,	
	@GinSku					VARCHAR(50),
	@GinLocation			VARCHAR(50), 
	-- OUTPUT PARAMETERS
	@GoutAverageZone		VARCHAR(50) OUTPUT,	
	@GoutResult             VARCHAR(1) OUTPUT,
    @GoutMessage            NVARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS	
    DECLARE @LastPeriodDate			DATETIME
    DECLARE @FirstPeriodDate		DATETIME
    DECLARE @LastBufferUpdateDate	DATETIME
    DECLARE @LongPeriod				NUMERIC(15,5)
    DECLARE @BufferInitialDate		DATETIME
    DECLARE @AvgZone				NUMERIC(15,5)
    DECLARE @AverageDays			NUMERIC(15,5)
    DECLARE @CyanZone				NUMERIC(15,5)    
    
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;	
		SET @GoutResult  = 0;
		SET @GoutMessage = ''; 
		-- -----------------------------------------------------------------------
		-- MESSAGES
		-- -----------------------------------------------------------------------
		DECLARE @Language									VARCHAR(2) = 'es';  
		DECLARE @ResultMessagesCodeError					VARCHAR(1); 
		DECLARE @ResultMessagesMessageError					NVARCHAR(MAX);
		DECLARE @MSG_CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR	NVARCHAR(MAX); 
		DECLARE @MSG_CALC_AVG_ZONE_AMOUNT_DAYS_ERROR		NVARCHAR(MAX); 
		DECLARE @MSG_CALC_AVG_ZONE_UNEXPECTED_ERROR			NVARCHAR(MAX); 
		DECLARE @MSG_CALC_AVG_ZONE_SUCCESSFUL				NVARCHAR(MAX);  
  
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE';
		-- -----------------------------------------------------------------------
		
		IF EXISTS (SELECT TOP 1 * FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH] WHERE SKU = @GinSku AND LOCATION = @GinLocation)
		BEGIN		
			SET @LastBufferUpdateDate  = (SELECT TOP 1 MAX([BH].[UPDATE_MOVEMENTS]) 
											 FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH] 
								            WHERE [BH].[SKU]      = @GinSku 
											  AND [BH].[LOCATION] = @GinLocation 
											  AND [BH].[UPDATE_MOVEMENTS] <= @GinCalculationDate  );
								   
	        SET @BufferInitialDate = (SELECT [B].[BUFFER_INITIAL_DATE] 
										 FROM [dbo].[TFSCM_CLI_BUFFER] [B] 
										WHERE [B].[SKU]      = @GinSku 
										  AND [B].[LOCATION] = @GinLocation);
			SET @LastPeriodDate    = @LastBufferUpdateDate;
			SET @LastPeriodDate    = DATEADD(d, -1, @LastPeriodDate );
			SET @LongPeriod        = DATEDIFF( d, @BufferInitialDate, @LastPeriodDate) + 1;
			
			IF (@LongPeriod < @GinDayAmount)
			BEGIN
				EXEC [dbo].[GET_MESSAGE] @ResultMessagesCodeError OUTPUT, @ResultMessagesMessageError OUTPUT,  
					'CALC_AVG_ZONE_AMOUNT_DAYS_ERROR', @Language, '', '', '', @MSG_CALC_AVG_ZONE_AMOUNT_DAYS_ERROR OUTPUT 

				SET @GoutAverageZone          = -1;			
				SET @GoutResult             = '1';
				SET @GoutMessage = @MSG_CALC_AVG_ZONE_AMOUNT_DAYS_ERROR;
				
				RETURN
			END 
			
			SET @FirstPeriodDate = DATEADD(d, 1 - @GinDayAmount, @LastPeriodDate)
			
			SET @AvgZone = (SELECT SUM(([BH].[WORST_INVENTORY_ON_SITE] - (( 1 - ([BH].[RED_ZONE_START] / 100) ) * [BH].[BUFFER])) / 
								        ([BH].[BUFFER] * ( ([BH].[RED_ZONE_START] - [BH].[YELLOW_ZONE_START]) / 100 ) )) AS AVERAGE_ZONE
						       FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
							  WHERE [BH].[SKU]               = @GinSku
								AND [BH].[LOCATION]          = @GinLocation
								AND [BH].[BUFFER]			 > 0 
								AND [BH].[UPDATE_MOVEMENTS] >= @FirstPeriodDate
								AND [BH].[UPDATE_MOVEMENTS] <= @LastPeriodDate);	 
						
			SET @AverageDays = (SELECT COUNT([BH].[UPDATE_MOVEMENTS]) AS AVERAGE_DAYS
								   FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
								  WHERE [BH].[SKU]               = @GinSku
								    AND [BH].[LOCATION]          = @GinLocation
								    AND [BH].[BUFFER]		     > 0 
								    AND [BH].[UPDATE_MOVEMENTS] >= @FirstPeriodDate
								    AND [BH].[UPDATE_MOVEMENTS] <= @LastPeriodDate);
			--PRINT	@FirstPeriodDate
			--PRINT  @LastPeriodDate
			 
			SET @CyanZone = (SELECT ([BH].[RED_ZONE_START] / ([BH].[RED_ZONE_START] - [BH].[YELLOW_ZONE_START])) AS CYAN_ZONE
							    FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BH]
							   WHERE [BH].[SKU]      = @GinSku
							     AND [BH].[LOCATION] = @GinLocation
							     AND [BH].[UPDATE_MOVEMENTS] = @LastPeriodDate);
 
			SET @AvgZone = (@AvgZone / @AverageDays)
			--PRINT @AvgZone
			IF(@AvgZone < 0)
			BEGIN
				SET @GoutAverageZone = 'RED'
			END 
			ELSE IF (@AvgZone >= 0 AND @AvgZone <= 1)
			BEGIN
				SET @GoutAverageZone = 'YELLOW'
			END
			ELSE IF (@AvgZone > 1 AND @AvgZone <= @CyanZone)
			BEGIN
				SET @GoutAverageZone = 'GREEN'
			END
			ELSE IF (@AvgZone > @CyanZone)
			BEGIN
				SET @GoutAverageZone = 'CYAN'
			END 
			
			EXEC [dbo].[GET_MESSAGE] @ResultMessagesCodeError OUTPUT, @ResultMessagesMessageError OUTPUT,  
				'CALC_AVG_ZONE_SUCCESSFUL', @Language, '', '', '', @MSG_CALC_AVG_ZONE_SUCCESSFUL OUTPUT			
 
			SET @GoutResult = '0'
			SET @GoutMessage = @MSG_CALC_AVG_ZONE_SUCCESSFUL
		END 
		ELSE
		BEGIN			
			EXEC [dbo].[GET_MESSAGE] @ResultMessagesCodeError OUTPUT, @ResultMessagesMessageError OUTPUT,  
				'CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR', @Language, '', '', '', @MSG_CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR OUTPUT 
			
			SET @GoutAverageZone = NULL;
			SET @GoutResult    = '1';
			SET @GoutMessage   = @MSG_CALC_AVG_ZONE_BUFFER_NOT_FOUND_ERROR;
		END 
		
	END TRY
	BEGIN CATCH
		SET @GoutAverageZone =  NULL;		
		SET @GoutResult    = '1';		
		
		EXEC [dbo].[GET_MESSAGE] @ResultMessagesCodeError OUTPUT, @ResultMessagesMessageError OUTPUT,  
			'CALC_AVG_ZONE_UNEXPECTED_ERROR', @Language, '', '', '', @MSG_CALC_AVG_ZONE_UNEXPECTED_ERROR OUTPUT			 

		SET @GoutMessage   = @MSG_CALC_AVG_ZONE_UNEXPECTED_ERROR + ' <br> ' + ' <br> ' +
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_CALCULATE_AVERAGE_ZONE]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();		
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CALCULATE_OUTS_MAXIMUM_SUM]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 10/11/2020
-- Description : * Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				   BAA_OUT_CLASSIFICATION.
--				 * Rename SP from USP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY to
--				   USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY. 
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 26/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--				 * Change the name for the SP SP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY to
--				   USP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY.
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/10/2019
-- Description : Add calculations for Atypical Consumption Frequency column and add it as an
--               output parameter
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 10/05/2018
-- Description : Fix the marking of atypical outs
-- Version     : 4.9.0
-- -------------------------------------------------------------------------------------------
-- Author:		Hernan Dario Jimenez
-- Create date: 15/12/2014
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_CALCULATE_OUTS_MAXIMUM_SUM]
	-- INPUT PARAMETERS
	@GinCalculationDate   AS DATETIME,
	@GinMovingSumsAmount  AS INT,
	@GinMovingWindowRange AS INT,
	@GinSku               AS VARCHAR(50),
	@GinLocation          AS VARCHAR(50), 
	-- OUTPUT PARAMETERS
	@GoutOutputMaxSum                 AS NUMERIC(16,2) OUTPUT,
	@GoutAtypicalOutputsAmount        AS INT           OUTPUT,
	@GoutAtypicalConsumptionFrequency AS INT           OUTPUT,
	@GoutResult                       AS VARCHAR(1)    OUTPUT,
    @GoutMessage                      AS NVARCHAR(MAX) OUTPUT

AS
	DECLARE @WindowAnalysisRange   AS NUMERIC(16,2) = 0;
	DECLARE @LongPeriod            AS NUMERIC(16,2) = 0;
	DECLARE @MaxOutputs            AS NUMERIC(16,2) = 0;
	DECLARE @SumOutputs            AS NUMERIC(16,2) = 0;
	DECLARE @InitialActualSumInt   AS NUMERIC(16,2) = 0;
	DECLARE @DayCount              AS NUMERIC(16,2) = 0;
	DECLARE @AtypicalDayCount      AS NUMERIC(16,2) = 0;
	DECLARE @BufferCount           AS NUMERIC(16,2) = 0;
	DECLARE @SumWithEnoughData     AS NUMERIC(16,2) = 0;
	DECLARE @LastPeriodDate        AS DATE;
	DECLARE @FirstPeriodDate       AS DATE;
	DECLARE @LastSumInitialDate    AS DATE;
	DECLARE @CurrentSumInitialDate AS DATE;
	DECLARE @CurrentSumLastDate    AS DATE;
	DECLARE	@InitialDateBuffer     AS DATE;
	DECLARE @Result                AS VARCHAR(1);
    DECLARE @Message               AS NVARCHAR(MAX);
    DECLARE @MininumUnit		   AS NUMERIC(15,5) = 0;
    DECLARE @Accuracy			   AS NUMERIC(15,5) = 0;
	DECLARE @MaxOutsInitialDate    AS DATE;
	DECLARE @MaxOutsFinalDate      AS DATE;
	-- ---------------------------------------------------------------------------------------
	-- Since v4.14.0, Add Atypical Consumption Frequency column calculation 
	-- ---------------------------------------------------------------------------------------
	DECLARE @GoutAtypicalConsumptionFrequencyCount AS INT = 0;
	DECLARE @AtypicalConsumptionThreshold 		   AS NUMERIC(5,2);
	-- ---------------------------------------------------------------------------------------
	-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
	-- ---------------------------------------------------------------------------------------
	-- Since 4.9.0 Variables used in marking of atypical outs.
	-- ---------------------------------------------------------------------------------------
	DECLARE @BAA_OUT_CLASSIFICATION_NORMAL	 AS VARCHAR(2) = 'N';
	DECLARE @BAA_OUT_CLASSIFICATION_ATYPICAL AS VARCHAR(2) = 'A';
	DECLARE @BAA_OUT_CLASSIFICATION_PENDING	 AS VARCHAR(2) = 'P';
	
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		
		SET @GoutResult  = 0;
		SET @GoutMessage = ''; 
		-- -----------------------------------------------------------------------------------
		-- Messages Variables
		-- -----------------------------------------------------------------------------------
		DECLARE @Language                                AS VARCHAR(2) = 'es';  
		DECLARE @CodErrorResultMessages                  AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages              AS NVARCHAR(MAX);
		DECLARE @MSG_CALC_MAX_SUM_NO_DATA_ERROR          AS NVARCHAR(MAX) = 'CALC_MAX_SUM_NO_DATA_ERROR';
		DECLARE @MSG_CALC_MAX_SUM_UNEXPECTED_ERROR       AS NVARCHAR(MAX) = 'CALC_MAX_SUM_UNEXPECTED_ERROR';
		DECLARE @MSG_CALC_MAX_SUM_PROCESS_SUCCESS        AS NVARCHAR(MAX) = 'CALC_MAX_SUM_PROCESS_SUCCESS';
		DECLARE @MSG_CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR AS NVARCHAR(MAX) = 'CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR';

		SELECT @Language = [P].[PARAM_VALUE]  
		  FROM TFSCM_COM_PARAMS [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE';
		-- -----------------------------------------------------------------------------------

		SET @BufferCount = (SELECT COUNT(1)
							  FROM [dbo].[TFSCM_CLI_BUFFER] [a]
							 WHERE [a].[SKU]      = @GinSku 
							   AND [a].[LOCATION] = @GinLocation);

		IF (@BufferCount = 0)
		BEGIN
			EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
					'CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR', @Language, '', '', '', 
					@MSG_CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR OUTPUT;	
					
			SET @GoutOutputMaxSum          = -1;
			SET @GoutAtypicalOutputsAmount = -1;
			SET @GoutAtypicalConsumptionFrequency = -1;
			SET @GoutResult             = '1';	
			SET @GoutMessage            = '(' + @GinSku + ',' + @GinLocation+') ' + @MSG_CALC_MAX_SUM_BUFFER_NOT_FOUND_ERROR; 
			RETURN 
		END

		SET @WindowAnalysisRange = @GinMovingSumsAmount + @GinMovingWindowRange - 1;
	  	SET @LastPeriodDate      = (SELECT DATEADD(d, -1, MAX([ha].[UPDATE_MOVEMENTS]))
								      FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [ha]
								     WHERE [ha].[SKU]               = @GinSku
									   AND [ha].[LOCATION]          = @GinLocation 
									   AND [ha].[UPDATE_MOVEMENTS] <= @GinCalculationDate);	

		SET @InitialDateBuffer   = (SELECT [a].[BUFFER_INITIAL_DATE]
								      FROM [dbo].[TFSCM_CLI_BUFFER] [a]
								     WHERE [a].[SKU]      = @GinSku 
									   AND [a].[LOCATION] = @GinLocation);

		--SET @InitialDateBuffer   = DATEADD (d, 1, @InitialDateBuffer ); 
		SET @LongPeriod          = DATEDIFF(d, @InitialDateBuffer, @LastPeriodDate ) + 1;

		IF (@LongPeriod IS NULL)
		BEGIN
			SET @LongPeriod = 0;
		END
		IF (@GinMovingWindowRange IS NULL)
		BEGIN
			SET @GinMovingWindowRange = 0;
		END
		IF (@WindowAnalysisRange IS NULL)
		BEGIN
			SET @WindowAnalysisRange = 0;
		END

		IF (@LongPeriod < @GinMovingWindowRange + 6)
		BEGIN
			EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'CALC_MAX_SUM_NO_DATA_ERROR', @Language, '', '', '', @MSG_CALC_MAX_SUM_NO_DATA_ERROR OUTPUT;
				
			--SET @GoutMessage = '(' + CAST(@GinCalculationDate AS VARCHAR) + ',' + CAST(@GinMovingWindowRange AS VARCHAR)
			--  			  + ',' + CAST(@LongPeriod AS VARCHAR) + ',' + @GinSku + ',' + @GinLocation + ') '
			--				  + @MSG_CALC_MAX_SUM_NO_DATA_ERROR;
			SET @GoutOutputMaxSum          = -1;
			SET @GoutAtypicalOutputsAmount = -1;
			SET @GoutAtypicalConsumptionFrequency = -1;
			SET @GoutResult             = '1';
			SET @GoutMessage            = '(' + @GinSku + ',' + @GinLocation + ') ' + @MSG_CALC_MAX_SUM_NO_DATA_ERROR;
			RETURN
		END 
		ELSE IF (@LongPeriod < @WindowAnalysisRange)
		BEGIN
			SET @WindowAnalysisRange = @LongPeriod;
		END

		SET @FirstPeriodDate       = DATEADD(d, - @WindowAnalysisRange + 1, @LastPeriodDate);
 		SET @LastSumInitialDate    = DATEADD(d, - @GinMovingWindowRange   + 1, @LastPeriodDate);
		SET @CurrentSumInitialDate = @FirstPeriodDate;
		SET @InitialActualSumInt   = 0;
		SET @MaxOutputs            = 0;
		/* Since 3.1 */
		SET @SumWithEnoughData     = 0;

		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
		-- -----------------------------------------------------------------------------------
		-- Update BAA_OUT_CLASSIFICATION with 'N' before calculating.
		-- -----------------------------------------------------------------------------------
		UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY] 
		   SET [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_NORMAL
		 WHERE [SKU]      = @GinSku 
		   AND [LOCATION] = @GinLocation 
		   AND [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_PENDING;	
		
		WHILE (@InitialActualSumInt <= DATEDIFF(d, @FirstPeriodDate, @LastSumInitialDate))
		BEGIN 
			SET @CurrentSumLastDate = DATEADD(d, @GinMovingWindowRange - 1, @CurrentSumInitialDate);
 			SET @SumOutputs         = 0;
			SET @DayCount           = 0;

			SELECT @SumOutputs = SUM([ha].[TOTAL_CONSOLIDATED_OUTPUTS]),
				   @DayCount   = COUNT([ha].[UPDATE_MOVEMENTS])
	  		  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [ha]
	  		 WHERE [ha].[SKU]                    = @GinSku 
	  		   AND [ha].[LOCATION]               = @GinLocation 
	 		   AND [ha].[UPDATE_MOVEMENTS]      >= @CurrentSumInitialDate 
	 		   AND [ha].[UPDATE_MOVEMENTS]      <= @CurrentSumLastDate
			   AND [ha].[BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_NORMAL;
 
			IF( @SumOutputs IS NULL)
 			BEGIN
 				SET @SumOutputs = 0;
 			END

 			-- 3.1 ---------------------------------------------------------------------------
 			IF (@DayCount < (@GinMovingWindowRange / 2))
 			BEGIN
	 			SET @SumOutputs = 0;
 			END 
 			ELSE IF (@DayCount IS NOT NULL AND @DayCount > 0)
 			BEGIN
	 			SET @SumWithEnoughData = @SumWithEnoughData + 1;
	 			
	 			IF (@DayCount <> @GinMovingWindowRange)
	 			BEGIN
		 			SET @SumOutputs = (@SumOutputs / @DayCount) * @GinMovingWindowRange;
	 			END 
 			END
 			ELSE IF(@DayCount IS NULL OR @DayCount = 0)
 			BEGIN
	 			SET @SumOutputs = 0;
 			END
 			----------------------------------------------------------------------------------

			IF (@SumOutputs > @MaxOutputs)
			BEGIN
				SET @MaxOutputs         = @SumOutputs;
				SET @MaxOutsInitialDate = @CurrentSumInitialDate;
				SET @MaxOutsFinalDate   = @CurrentSumLastDate;
			END

			SET @CurrentSumInitialDate = DATEADD(d, 1, @CurrentSumInitialDate);
			SET @InitialActualSumInt   = @InitialActualSumInt + 1;
		END

		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, remove the condition by @MaxOutputs. 
		-- -----------------------------------------------------------------------------------
		-- Since 4.9.0, add the condition for @MaxOutputs and set @GoutAtypicalOutputsAmount. 
		-- 3.1 -------------------------------------------------------------------------------
		IF (@SumWithEnoughData >= 7)
		BEGIN
			SET @GoutOutputMaxSum = @MaxOutputs;
		END 
		ELSE
		BEGIN
			SET @GoutOutputMaxSum = 0;
		END 

		-- 2.2.2
		--------------------------------------------------------------------------------------
		SET @Accuracy = (SELECT TOP 1 [U].[INVENTORY_ACCURACY]
						   FROM [dbo].[TFSCM_CLI_UNITS] [U]
						  INNER JOIN [dbo].[TFSCM_CLI_BUFFER] [B] 
						     ON ([U].CDUNIT   = [B].CDUNIT
						     AND [B].SKU      = @GinSku 
							 AND [B].LOCATION = @GinLocation));

		SET @MininumUnit = 1.00 / POWER(10, @Accuracy);

		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
		-- -----------------------------------------------------------------------------------
		SET @AtypicalDayCount = 0;
		SET @AtypicalDayCount = (SELECT COUNT([ha].[UPDATE_MOVEMENTS]) AS ATYPICAL_DAY_COUNT 
								   FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [ha]
								  WHERE [ha].[SKU]                    = @GinSku 
								    AND [ha].[LOCATION]               = @GinLocation 
   								    AND [ha].[UPDATE_MOVEMENTS]      >= @MaxOutsInitialDate 
								    AND [ha].[UPDATE_MOVEMENTS]      <= @MaxOutsFinalDate
								    AND [ha].[BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_NORMAL
								    AND [ha].[TOTAL_CONSOLIDATED_OUTPUTS] > ([ha].[BUFFER] * (1 - ([ha].[RED_ZONE_START] / 100)))
								    AND [ha].[TOTAL_CONSOLIDATED_OUTPUTS] > @MininumUnit); 

		-- -----------------------------------------------------------------------------------
		-- Since v4.14.0, Add Atypical Consumption Frequency column calculation 
		-- -----------------------------------------------------------------------------------
		SET @GoutAtypicalConsumptionFrequencyCount = NULL;
		SET @AtypicalConsumptionThreshold          = NULL;

		SET @AtypicalConsumptionThreshold = (SELECT TOP 1 [F].[ATYPICAL_CONSUMPTION_THRESHOLD]
											   FROM [dbo].[TFSCM_CLI_BUFFER] [B]
											   JOIN [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F] ON [F].[CDBUFFER_FAMILY] = [B].[FAMILY]
																					   AND [B].[SKU]             = @GinSku 
																					   AND [B].[LOCATION]        = @GinLocation);

		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
		-- -----------------------------------------------------------------------------------
		SET @GoutAtypicalConsumptionFrequencyCount = (SELECT COUNT([ha].[UPDATE_MOVEMENTS]) AS AtypicalConsumptionFerquency
														FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [ha]
													   WHERE [ha].[SKU]                     = @GinSku 
														 AND [ha].[LOCATION]                = @GinLocation 
														 AND [ha].[BAA_OUT_CLASSIFICATION]  IN (@BAA_OUT_CLASSIFICATION_NORMAL, @BAA_OUT_CLASSIFICATION_ATYPICAL)
														 AND [ha].[UPDATE_MOVEMENTS]       >= @FirstPeriodDate 
														 AND [ha].[UPDATE_MOVEMENTS]       <= @LastPeriodDate
														 AND [ha].[TOTAL_CONSOLIDATED_OUTPUTS] > ([ha].[BUFFER] * (@AtypicalConsumptionThreshold / 100))
														 AND [ha].[TOTAL_CONSOLIDATED_OUTPUTS] > @MininumUnit);
		--------------------------------------------------------------------------------------
		
		IF (@AtypicalDayCount > 0)
		BEGIN		
			EXEC [dbo].[USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY] @GinSku, @GinLocation, @MaxOutsInitialDate, @MaxOutsFinalDate, 
																	  @MininumUnit, @Result, @Message;

			IF (@Result = '1')
			BEGIN
				SET @GoutOutputMaxSum          = -1;
				SET @GoutAtypicalOutputsAmount = -1;
				SET @GoutAtypicalConsumptionFrequency = -1;
				SET @GoutResult             = @Result;
				SET @GoutMessage            = @Message;
				RETURN
			END
		END

		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'CALC_MAX_SUM_PROCESS_SUCCESS', @Language, '', '', '', @MSG_CALC_MAX_SUM_PROCESS_SUCCESS OUTPUT;

		SET @GoutAtypicalOutputsAmount  = @AtypicalDayCount;
		SET @GoutAtypicalConsumptionFrequency = @GoutAtypicalConsumptionFrequencyCount;
		SET @GoutResult              = '0';	
		SET @GoutMessage             = @MSG_CALC_MAX_SUM_PROCESS_SUCCESS;
	END TRY
	BEGIN CATCH
		SET @GoutOutputMaxSum          = -1;
		SET @GoutAtypicalOutputsAmount = -1;
		SET @GoutAtypicalConsumptionFrequency = -1;
		SET @GoutResult             = '1';
		
		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
				'CALC_MAX_SUM_UNEXPECTED_ERROR', @Language, '', '', '', @MSG_CALC_MAX_SUM_UNEXPECTED_ERROR OUTPUT;
				
		SET @GoutMessage = '(' + @GinSku + ',' + @GinLocation +') ' + @MSG_CALC_MAX_SUM_UNEXPECTED_ERROR + ' <br> ' + ' <br> '
						+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
		                + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
                        + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
                        + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_CALCULATE_OUTS_MAXIMUM_SUM]')
                        + ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
                        + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author       : 
-- Upgrade date : dd/mm/yyyy
-- Description  : 
-- Version      : X.Y.Z
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 19/07/2019
-- Description  : Check for references of a column/value into any Automation Rule
-- Version      : 4.13.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES] 
	/* Input Parameters */  
	@GinColumn   VARCHAR(50),
	@GinValue 	 VARCHAR(200), 
	
    /* Output Parameters */
	@GoutCount   INT 			OUTPUT,
    @GoutResult  VARCHAR(1)     OUTPUT,
    @GoutMessage NVARCHAR(MAX)  OUTPUT 
AS
	
BEGIN	
	BEGIN TRY		
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;
		  
		--SET @GoutCount = 0;		
		
		SET @GoutCount += (SELECT COUNT(1)
							 FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES]
							WHERE [FILTER] LIKE '%' + (CASE WHEN (CDSECTION = 1) THEN 'PURCHASE_ORDERS.' 
															WHEN (CDSECTION = 3) THEN 'BUFFER.' 
															WHEN (CDSECTION = 5) THEN 'ORDERS.' 
															ELSE '' END) 
													+ @GinColumn + ' =''' + @GinValue + '''%'
							   OR [FILTER] LIKE '%' + (CASE WHEN (CDSECTION = 1) THEN 'PURCHASE_ORDERS.' 
															WHEN (CDSECTION = 3) THEN 'BUFFER.' 
															WHEN (CDSECTION = 5) THEN 'ORDERS.' 
															ELSE '' END) 
													+ @GinColumn + ' = ''' + @GinValue + '''%');
		SET @GoutCount += (SELECT COUNT(1) 
							 FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES]  
							WHERE [TARGET_FIELD] = @GinColumn 
							  AND [TARGET_VALUE] = @GinValue);
 
		-- -----------------------------------------------------------------------------------
		
		SET @GoutResult = '0';
		SET @GoutMessage = 'OK'
	END TRY
	BEGIN CATCH
		SET @GoutResult = '1';
		SET @GoutMessage =  ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_CHECK_REFERENCE_INTO_AUTOMATION_RULES]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()		
	
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 04/10/2020
-- Description : Refactor user-defined table types to temporary tables
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 22/09/2020
-- Description : Fix Optimized Replenishment calculation by assigning any remaining quantity
--               to the origin buffer.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 25/08/2020
-- Description : * Add column Replenishment Target calculated column to the query used in 
--                 Projected Replenishment formula.
--				 * Modify the Projected Replenishment formula to include a validation.
--				 * Modify the way Projected Priority is being calculated, by adding Pending 
--                 Demand column to its formula.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 04/08/2019
-- Description : Maximum priority buffer query optimization 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/05/2018
-- Description : Refactor
-- Version     : 4.9.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 27/09/2017
-- Description  : Distribute Available Inventory Quantity.
-- Version      : 4.8.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY]
	/* Input Parameters: */ 
	@GinReplenishmentPriority   AS INT,
	-- Distribution type can be 'EXCESS' or 'SHORTAGE'
	@GinDistributionType        AS VARCHAR(10),
	-- Can Exeed Targer : true for Yes, false for No 
	@GinCanExceedTarget         AS BIT,
	/* M Manual, A Automatic */
	@GinOptimizationMode		AS VARCHAR(1),
	@GinApprovedByUser 			AS VARCHAR(10),
	/* Output Parameters */     
	@GoutAvailableQuantity      AS NUMERIC(17,5) OUTPUT,
	@GoutQuantityDistributed    AS NUMERIC(17,5) OUTPUT,
	@GoutOptimizedBuffers 		AS INT           OUTPUT,
  	@GoutResult                 AS VARCHAR(1)    OUTPUT,
    @GoutMessage                AS NVARCHAR(MAX) OUTPUT
AS
	DECLARE @KeepOnDistributing AS BIT; 
	DECLARE @SelectedSKU		AS VARCHAR(50);
	DECLARE @SelectedLocation	AS VARCHAR(50);
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;  

		-- Setting messages
		DECLARE @Language                            AS VARCHAR(2) = 'en';  
		DECLARE @CodErrorResultMessages              AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages          AS NVARCHAR(MAX);
		DECLARE @MsgDistributeAvailableQuantityError AS NVARCHAR(MAX);  
		--DECLARE @Counter INT = 0;
		--DECLARE @Time AS DATETIME = CURRENT_TIMESTAMP;

		-- Get default language	 
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P] 
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE'; 
			
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DISTRIBUTE_AVAILABLE_QUANTITY_ERROR', @Language, '', '', '', 
			@MsgDistributeAvailableQuantityError OUTPUT;

		SET @KeepOnDistributing = 1;		

		/* OHLO 20180513: Since v4.9.0 update fields used in optimization before processing them */
		UPDATE #DestinationBuffersList
		   SET PROJECTED_REPLENISHMENT = 
					CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
						   -- ----------------------------------------------------------------
						   -- OHLO 20200825: Since v5.2.0, Origin Buffers are consumed unit
						   -- 				 by unit, and only if it reaches the Projected 
						   --                Priority of 0%
						   -- ----------------------------------------------------------------
						   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
								 	0 
								 ELSE 
									1 
							END)
						 WHEN (@GinDistributionType = 'SHORTAGE') AND
							  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																	-- Next Quantity will be the minimum replenishment
																	MINIMUM_REPLENISHMENT 
																ELSE 
																	PACKAGING_UNIT
														   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
							 0
						 ELSE
							 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
									  -- Next Quantity will be the minimum replenishment
									  MINIMUM_REPLENISHMENT 
								  ELSE 
									  PACKAGING_UNIT
							 END
					END, 
			   FACTORIZED_REPLENISHMENT = 
					CASE WHEN ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
									   -- ----------------------------------------------------
									   -- OHLO 20200825: Since v5.2.0, Origin Buffers are
									   -- 				 consumed unit by unit, and only if it  
									   --                reaches the Projected Priority of 0%
									   -- ----------------------------------------------------
									   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
												0 
											 ELSE 
												1 
										END)
									 WHEN (@GinDistributionType = 'SHORTAGE') AND
										  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																				-- Next Quantity will be the minimum replenishment
																				MINIMUM_REPLENISHMENT 
																			ELSE 
																				PACKAGING_UNIT
																	   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
										 0
									 ELSE
										 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
												  -- Next Quantity will be the minimum replenishment
												  MINIMUM_REPLENISHMENT 
											  ELSE 
												  PACKAGING_UNIT
										 END
								END) != 0) THEN
							(CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
									   -- ----------------------------------------------------
									   -- OHLO 20200825: Since v5.2.0, Origin Buffers are
									   -- 				 consumed unit by unit, and only if it  
									   --                reaches the Projected Priority of 0%
									   -- ----------------------------------------------------
									   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
												0 
											 ELSE 
												1 
										END)
								   WHEN (@GinDistributionType = 'SHORTAGE') AND
										((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																			-- Next Quantity will be the minimum replenishment
																			MINIMUM_REPLENISHMENT 
																		ELSE 
																			PACKAGING_UNIT
																	 END)) > SUGGESTED_BUFFER_REPLENISH) THEN
									   0
								   ELSE
									   CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
												-- Next Quantity will be the minimum replenishment
												MINIMUM_REPLENISHMENT 
											ELSE 
												PACKAGING_UNIT
									   END
							  END) * CONVERSION_FACTOR
						 ELSE
							FACTORIZED_REPLENISHMENT
					END,
			   PROJECTED_PRIORITY = 
					CASE WHEN ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
									   -- ----------------------------------------------------
									   -- OHLO 20200825: Since v5.2.0, Origin Buffers are
									   -- 				 consumed unit by unit, and only if it  
									   --                reaches the Projected Priority of 0%
									   -- ----------------------------------------------------
									   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
												0 
											 ELSE 
												1 
										END)
									 WHEN (@GinDistributionType = 'SHORTAGE') AND
										  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																				-- Next Quantity will be the minimum replenishment
																				MINIMUM_REPLENISHMENT 
																			ELSE 
																				PACKAGING_UNIT
																	   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
										 0
									 ELSE
										 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
												  -- Next Quantity will be the minimum replenishment
												  MINIMUM_REPLENISHMENT 
											  ELSE 
												  PACKAGING_UNIT
										 END
								END) != 0) THEN
							 (BUFFER + SECURITY_STOCK -  
								 ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
											-- -----------------------------------------------
											-- OHLO 20200825: Since v5.2.0, Add pending demand
											--                subtraction
											-- -----------------------------------------------
											OPTIMIZED_REPLENISHMENT - PENDING_DEMAND
										ELSE
											NET_INVENTORY + OPTIMIZED_REPLENISHMENT 
								   END) +
								  (CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
											   -- --------------------------------------------
											   -- OHLO 20200825: Since v5.2.0, Origin Buffers 
											   -- 				 are consumed unit by unit,   
											   --                and only if it reaches the 
											   -- 				 Projected Priority of 0%
											   -- --------------------------------------------
											   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
														0 
													 ELSE 
														1 
												END)
										   WHEN (@GinDistributionType = 'SHORTAGE') AND
												((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																					  -- Next Quantity will be the minimum replenishment
																					  MINIMUM_REPLENISHMENT 
																				  ELSE 
																					  PACKAGING_UNIT
																			 END)) > SUGGESTED_BUFFER_REPLENISH) THEN
											   0
										   ELSE
											   CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
														-- Next Quantity will be the minimum replenishment
														MINIMUM_REPLENISHMENT 
													ELSE 
														PACKAGING_UNIT
											   END
									  END))) / BUFFER
					ELSE
						PROJECTED_PRIORITY
				END
		 WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority)
		   -- AND (CONVERSION_FACTOR > 0)
		   AND (BUFFER > 0)
		   AND (MANAGED IS NULL OR MANAGED = 0);

		UPDATE #DestinationBuffersList
		   SET MANAGED = 1
		 WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority)
		   --AND (CONVERSION_FACTOR > 0)
		   AND (MANAGED IS NULL OR MANAGED = 0)
		   AND ((BUFFER = 0)
		     OR (PROJECTED_REPLENISHMENT = 0)
			 OR (@GinCanExceedTarget = 0 AND FACTORIZED_REPLENISHMENT > @GoutAvailableQuantity));

		WHILE (@KeepOnDistributing = 1)
		BEGIN
			-- It is assumed that all available buffers will be satisfied during this iteration
			SET @KeepOnDistributing = 0;
			
			-- Select the buffer with the maximum priority
			SELECT @SelectedSKU = SKU, @SelectedLocation = LOCATION									 
		      FROM (SELECT TOP 1 SKU, LOCATION, MAX(PROJECTED_PRIORITY) PROJECTED_PRIORITY
		    	      FROM #DestinationBuffersList 
			         WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority)
					   --AND (CONVERSION_FACTOR > 0)
					   AND (ISNULL(MANAGED,0) = 0)
			         GROUP BY SKU, LOCATION
			         ORDER BY 3 DESC, 1 ASC, 2 ASC
				 ) X;
			
			IF ((SELECT COUNT(1) 
			       FROM #DestinationBuffersList
        		  WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority)
				    --AND (CONVERSION_FACTOR > 0)
					AND (MANAGED IS NULL OR MANAGED = 0)) > 0)
			BEGIN
				-- Assign quantity to Buffer Optimized Replenishment to the selected buffer
				UPDATE #DestinationBuffersList  
				   SET OPTIMIZED_REPLENISHMENT  = OPTIMIZED_REPLENISHMENT + PROJECTED_REPLENISHMENT,
					   @KeepOnDistributing      = CASE WHEN (FACTORIZED_REPLENISHMENT < @GoutAvailableQuantity) THEN 1 ELSE 0 END,
					   @GoutAvailableQuantity   = @GoutAvailableQuantity   - FACTORIZED_REPLENISHMENT,
					   @GoutQuantityDistributed = @GoutQuantityDistributed + FACTORIZED_REPLENISHMENT
				 WHERE SKU      = @SelectedSKU 
				   AND LOCATION = @SelectedLocation;

				 -- Update quantities again
				UPDATE #DestinationBuffersList
				   SET PROJECTED_REPLENISHMENT = 
							CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
								   -- --------------------------------------------------------
								   -- OHLO 20200825: Since v5.2.0, Origin Buffers are consumed
								   -- 				 unit by unit, and only if it reaches the
								   --                Projected Priority of 0%
								   -- --------------------------------------------------------
								   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
											0 
										 ELSE 
											1 
									END)
								 WHEN (@GinDistributionType = 'SHORTAGE') AND
									  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																			-- Next Quantity will be the minimum replenishment
																			MINIMUM_REPLENISHMENT 
																		ELSE 
																			PACKAGING_UNIT
																   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
									 0
								 ELSE
									 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
											  -- Next Quantity will be the minimum replenishment
											  MINIMUM_REPLENISHMENT 
										  ELSE 
											  PACKAGING_UNIT
									 END
							END,
					   FACTORIZED_REPLENISHMENT = 
							CASE WHEN ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
											   -- --------------------------------------------
											   -- OHLO 20200825: Since v5.2.0, Origin Buffers 
											   -- 				 are consumed unit by unit,
											   --                and only if it reaches the
											   --                Projected Priority of 0%
											   -- --------------------------------------------
											   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
														0 
													 ELSE 
														1 
												END)
											 WHEN (@GinDistributionType = 'SHORTAGE') AND
												  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																						-- Next Quantity will be the minimum replenishment
																						MINIMUM_REPLENISHMENT 
																					ELSE 
																						PACKAGING_UNIT
																			   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
												 0
											 ELSE
												 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
														  -- Next Quantity will be the minimum replenishment
														  MINIMUM_REPLENISHMENT 
													  ELSE 
														  PACKAGING_UNIT
												 END
										END) != 0) THEN
									 (CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
											   -- --------------------------------------------
											   -- OHLO 20200825: Since v5.2.0, Origin Buffers 
											   -- 				 are consumed unit by unit,
											   --                and only if it reaches the
											   --                Projected Priority of 0%
											   -- --------------------------------------------
											   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
														0 
													 ELSE 
														1 
												END)
										   WHEN (@GinDistributionType = 'SHORTAGE') AND
												((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																					-- Next Quantity will be the minimum replenishment
																					MINIMUM_REPLENISHMENT 
																				ELSE 
																					PACKAGING_UNIT
																			 END)) > SUGGESTED_BUFFER_REPLENISH) THEN
											   0
										   ELSE
											   CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
														-- Next Quantity will be the minimum replenishment
														MINIMUM_REPLENISHMENT 
													ELSE 
														PACKAGING_UNIT
											   END
									  END) * CONVERSION_FACTOR
								 ELSE
									FACTORIZED_REPLENISHMENT
							END,
					   PROJECTED_PRIORITY = 
							CASE WHEN ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
											   -- --------------------------------------------
											   -- OHLO 20200825: Since v5.2.0, Origin Buffers 
											   -- 				 are consumed unit by unit,
											   --                and only if it reaches the
											   --                Projected Priority of 0%
											   -- --------------------------------------------
											   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
														0 
													 ELSE 
														1 
												END)
											 WHEN (@GinDistributionType = 'SHORTAGE') AND
												  ((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																						-- Next Quantity will be the minimum replenishment
																						MINIMUM_REPLENISHMENT 
																					ELSE 
																						PACKAGING_UNIT
																			   END)) > SUGGESTED_BUFFER_REPLENISH) THEN
												 0
											 ELSE
												 CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
														  -- Next Quantity will be the minimum replenishment
														  MINIMUM_REPLENISHMENT 
													  ELSE 
														  PACKAGING_UNIT
												 END
										END) != 0) THEN
									 (BUFFER + SECURITY_STOCK -  
										 ((CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
												  -- -----------------------------------------
												  -- OHLO 20200825: Since v5.2.0, Add pending 
												  --                demand subtraction
												  -- -----------------------------------------
												  OPTIMIZED_REPLENISHMENT - PENDING_DEMAND
												ELSE
												  NET_INVENTORY + OPTIMIZED_REPLENISHMENT
										   END) +
										  (CASE WHEN (IS_ORIGIN_BUFFER = 1) THEN
												   -- ----------------------------------------
												   -- OHLO 20200825: Since v5.2.0, Origin  
												   -- 				 Buffers are consumed unit 
												   --                by unit, and only if it 
												   --                reaches the Projected 
												   --                Priority of 0%
												   -- ----------------------------------------
												   (CASE WHEN ((OPTIMIZED_REPLENISHMENT + 1) > REPLENISHMENT_TARGET) THEN 
															0 
														 ELSE 
															1 
													END)
												WHEN (@GinDistributionType = 'SHORTAGE') AND
													((OPTIMIZED_REPLENISHMENT + (CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
																						  -- Next Quantity will be the minimum replenishment
																						  MINIMUM_REPLENISHMENT 
																					  ELSE 
																						  PACKAGING_UNIT
																				 END)) > SUGGESTED_BUFFER_REPLENISH) THEN
												   0
												ELSE
												   CASE WHEN (OPTIMIZED_REPLENISHMENT < MINIMUM_REPLENISHMENT) THEN
															-- Next Quantity will be the minimum replenishment
															MINIMUM_REPLENISHMENT 
														ELSE 
															PACKAGING_UNIT
												   END
										   END))) / BUFFER
							ELSE
								PROJECTED_PRIORITY
						END
				 WHERE SKU      = @SelectedSKU 
				   AND LOCATION = @SelectedLocation;
				
				UPDATE #DestinationBuffersList
				   SET MANAGED = 1
				 WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority)
                   --AND (CONVERSION_FACTOR > 0)
				   AND (MANAGED IS NULL OR MANAGED = 0)
				   AND ((PROJECTED_REPLENISHMENT = 0)
					 OR (@GinCanExceedTarget = 0 AND FACTORIZED_REPLENISHMENT > @GoutAvailableQuantity));
			END
		END

		-- SELECT @GoutOptimizedBuffers = @GoutOptimizedBuffers + COUNT(1)
		  -- FROM #DestinationBuffersList
		 -- WHERE (REPLENISHMENT_PRIORITY = @GinReplenishmentPriority);
	END TRY 
	BEGIN CATCH 
		SET @GoutResult  = '1';
		SET @GoutMessage = @MsgDistributeAvailableQuantityError + ' <br> ' + ' <br> ' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();		
	END CATCH	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_EXECUTE_AUTOMATION_RULES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================================
-- Author      : Isaac Florez
-- Upgrade date: 03/12/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 22/11/2020
-- Description : Exclude column FILE_ROW_NUMBER from some dynamic queries within the process.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : * Remove unused delimiter variables,
--				 * Add filter for updating just the current UPDATE_MOVEMENTS = @GinTempLoadDate  
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal Mokros
-- Upgrade date: 18/11/2019
-- Description : Optimize SP
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Michal Mokros
-- Upgrade date: 30/07/2019
-- Description : Optimize SP
-- Version     : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 29/05/2019
-- Description  : This procedure executes all active Automation Rules.
-- Version      : 4.13.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_EXECUTE_AUTOMATION_RULES] 
(	/* Input Parameters */
    @GinCdSection INT, 
	@GinTempLoadDate DATE, 
	@GinIsFromScreen SMALLINT, 	
	-- No Inputs
    /* Output Parameters */
    @ovaResult    VARCHAR(1)	OUTPUT,
    @ovaMessage   NVARCHAR(MAX) OUTPUT  
  ) 
AS 
	-- Message variables
	DECLARE @MSG_APPLY_BUFFER_CHANGES_SUGGESTIONS_EXPIRED AS NVARCHAR(MAX);
	DECLARE @MSG_APPLY_BUFFER_CHANGES_ERROR  AS NVARCHAR(MAX); 
	DECLARE @MSG_APPLY_BUFFER_CHANGES_SUCESS AS NVARCHAR(MAX);
	DECLARE @Language 						 AS VARCHAR(2) = 'es'; 
	DECLARE @CodErrorResultMessages 		 AS VARCHAR(1); 
	DECLARE @MessageErrorResultMessages 	 AS NVARCHAR(MAX); 

	-- It must be initialized because is used for calculation porpuses
	DECLARE @ServerDate 			    AS DATETIME      = GETDATE();
	
	DECLARE @SqlInsert					AS NVARCHAR(MAX) = '';
	DECLARE @SqlValues					AS NVARCHAR(MAX) = '';
	DECLARE @SqlTmpInsert		   		AS NVARCHAR(MAX) = ''; 
	
	DECLARE @SqlRulesSelect				AS NVARCHAR(MAX) = '';
	DECLARE @SqlRulesFrom 				AS NVARCHAR(MAX) = '';
	DECLARE @SqlRulesWhere 				AS NVARCHAR(MAX) = '';
	
	-- Auxiliar varaibles
	DECLARE @LogSQLQuery 				AS NVARCHAR(MAX) = '';
	DECLARE @MergeSQLQuery 				AS NVARCHAR(MAX) = '';
	DECLARE @ListSQLQuery 				AS NVARCHAR(MAX) = '';	 
	DECLARE @BufferList                 AS NVARCHAR(MAX) = '';
	DECLARE @AdjustmentActionExpire     AS VARCHAR(10)   = 'EXPIRE';
	DECLARE @AdjustmentActionAccept     AS VARCHAR(10)   = 'ACCEPT'; 
	DECLARE @AdjustmentActionIgnore     AS VARCHAR(10)   = 'IGNORE'; 
	DECLARE @ExpiredSuggestionCause     AS VARCHAR(50)   = '';
	DECLARE @ManagedFromApplyBC         AS VARCHAR(1)    = 'C';
	DECLARE @ovaGBASResult              AS VARCHAR(1)    = '';
	DECLARE @ovaGBASMessage             AS NVARCHAR(MAX) = '';
	DECLARE @ModifyUser					AS NVARCHAR(MAX) = 'FOCUSSSCM'; 	
	DECLARE @Sku					    AS VARCHAR(50)   = '';
	DECLARE @Location				    AS VARCHAR(50)   = '';
	DECLARE @BufferRecord 				AS NVARCHAR(MAX) = '';
	DECLARE @RemainingStr 				AS NVARCHAR(MAX) = '';
	DECLARE @EventStepId				AS INT           = -1;
	
BEGIN
  	BEGIN TRY 
		SET NOCOUNT ON;

		SELECT @Language = PARAM_VALUE
		  FROM TFSCM_COM_PARAMS
		 WHERE CDPARAM = 'DEFAULT_LANGUAGE';

		DECLARE @MsgDataExchangeBufferChangedByRuleInfo 	NVARCHAR(MAX); 
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO', @Language, '', '', '', @MsgDataExchangeBufferChangedByRuleInfo OUTPUT;

		DECLARE @MsgDataExchangeBufferChangedByRuleLogFilename 	NVARCHAR(MAX); 
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_LOG_FILENAME', @Language, '', '', '', @MsgDataExchangeBufferChangedByRuleLogFilename OUTPUT;
		
		DECLARE @locationList NVARCHAR(MAX) = '';

		SET @locationList = ''
			+ (SELECT STUFF((SELECT DISTINCT  N', SELECT ''' + [LOCATION] + ''' LOCATION '
				 FROM [dbo].[TFSCM_CLI_BUFFER_TEMP]
				WHERE [UPDATE_MOVEMENTS] = @GinTempLoadDate
				  FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''));

		SET @locationList = REPLACE(@locationList,',',' UNION ALL ')
	
		-- -----------------------------------------------------------------------------------
		 
		IF OBJECT_ID('TempFileNameTbl') IS NOT NULL 
			DROP TABLE TempFileNameTbl;
		
		SELECT DISTINCT CONVERT(BIGINT, 0) AS [IDEXCHANGE], CONVERT(BIGINT, 0) AS [ID], [T].[UPDATE_MOVEMENTS], [T].[FILE_NAME]
		  INTO TempFileNameTbl
	      FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [T] 
		 WHERE 2 = 1;

		INSERT INTO TempFileNameTbl ([IDEXCHANGE], [ID], [UPDATE_MOVEMENTS], [FILE_NAME])
 		SELECT DISTINCT [T].[IDEXCHANGE], [T].[ID], [T].[UPDATE_MOVEMENTS], [T].[FILE_NAME]
		  FROM [dbo].[TFSCM_CLI_BUFFER_TEMP] AS [T]
			 
		CREATE INDEX IdxTempFileNameTbl ON TempFileNameTbl ([IDEXCHANGE], [ID], [UPDATE_MOVEMENTS]);
		
		-- -----------------------------------------------------------------------------------
		-- 0) Before processing the rules, get the fields and its possible format expresion
		IF OBJECT_ID('TempRulesColsTbl') IS NOT NULL 
			DROP TABLE TempRulesColsTbl;
		
		SELECT DISTINCT R.[CDSECTION], R.[TARGET_FIELD], SPACE(100) TARGET_EXPRESSION
		  INTO TempRulesColsTbl
	      FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] R 
		 WHERE 2 = 1;
					  
											   
		INSERT INTO TempRulesColsTbl ([CDSECTION], [TARGET_FIELD], [TARGET_EXPRESSION])
		SELECT DISTINCT R.[CDSECTION], R.[TARGET_FIELD], 
			  (CASE WHEN (C.[DSTYPE] = 'datetime') THEN
					  ' CONVERT(datetime, ''[TARGET_VALUE]'', 103) '
				    WHEN (C.[DSTYPE] = 'numeric') THEN
					   ' [TARGET_VALUE] '  
				    ELSE
					  ' ''[TARGET_VALUE]'' '
			   END) TARGET_EXPRESSION
	      FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] R 
		  JOIN [dbo].[TFSCM_COM_COL_TABLE] C ON (C.[CDTABLE] = (CASE WHEN (@GinCdSection = 1) THEN
																  	   19
																  	 WHEN (@GinCdSection = 3) THEN
																  	   11
																  	 WHEN (@GinCdSection = 5) THEN
																  	    1
																  	 ELSE
																  	   99
																END) 
											   AND C.[CDCOLUMN]  = R.[TARGET_FIELD]
											   AND R.[IS_ACTIVE] = 'Y' 
											   AND R.[CDSECTION] = @GinCdSection);

		CREATE INDEX IdxTempRulesColsTbl ON TempRulesColsTbl ([CDSECTION], [TARGET_FIELD]);
		-- -----------------------------------------------------------------------------------
		--  And, get _STR columns, related to date or numeric ones in the temporary table.
		IF OBJECT_ID('TempNumToStrTbl') IS NOT NULL 
			DROP TABLE TempNumToStrTbl; 
		
		SELECT CONVERT(VARCHAR(100), '', 105) AS VARCHAR_COLUMN
		  INTO TempNumToStrTbl
	      FROM [dbo].[TFSCM_COM_COL_TABLE]
		 WHERE 2 = 1;
		
		INSERT INTO TempNumToStrTbl (VARCHAR_COLUMN)
		SELECT [CI].[COLUMN_NAME] + '_STR'  AS VARCHAR_COLUMN
		  FROM [INFORMATION_SCHEMA].[COLUMNS] AS [CI]
		 WHERE [CI].[TABLE_NAME]       = (CASE WHEN (@GinCdSection = 1) THEN
											     N'TFSCM_CLI_PURCHASE_ORDERS_TMP'
											   WHEN (@GinCdSection = 3) THEN
											     N'TFSCM_CLI_BUFFER_TEMP'
											   WHEN (@GinCdSection = 5) THEN
											     N'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
											   ELSE
											     N''
										   END)
		   AND [CI].[COLUMN_NAME] NOT IN ('IDEXCHANGE', 'ID', 'FILE_ROW_NUMBER')
		   AND [CI].[DATA_TYPE]       IN ('bigint', 'int', 'numeric', 'smallint', 'date', 'datetime');
		
		
		-- -----------------------------------------------------------------------------------
		-- 1) Update new records which are in temporary table
		DECLARE @UpdTemp NVARCHAR(MAX);
		DECLARE @CdRule VARCHAR(50);
		DECLARE @Sequence VARCHAR(10);
		DECLARE @Applied BIT;

		DECLARE curNewTmpRows CURSOR FAST_FORWARD FOR 				
		 SELECT DISTINCT  RULE_SENTENCE , CDRULE, ' /*' + RIGHT('0000000000' +  CAST(SEQUENCE AS VARCHAR), 10) + '*/' 								      
		   FROM ( SELECT SEQUENCE,  CDRULE, N'UPDATE ' + (CASE WHEN ([CDSECTION] = 1) THEN
		 											   N'PURCHASE_ORDERS'
		 											 WHEN ([CDSECTION] = 3) THEN
		 											   N'BUFFER'
		 											 WHEN ([CDSECTION] = 5) THEN
		 											   N'ORDERS'
		 											 ELSE
		 											   N''
		 										END) 
		 						 + N'   SET ' + [TARGET_FIELD] + ' = ' + (CASE WHEN ([TARGET_VALUE] IS NULL OR TRIM([TARGET_VALUE]) = '' OR UPPER(TRIM([TARGET_VALUE])) =  'NULL') THEN 
		 																		 ' NULL' 
		 																	   ELSE
																			    (SELECT REPLACE(TC.[TARGET_EXPRESSION], '[TARGET_VALUE]', [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_VALUE])
																				   FROM TempRulesColsTbl TC 
																				  WHERE TC.[CDSECTION]    = @GinCdSection 
																				    AND TC.[TARGET_FIELD] = [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_FIELD])		 																		  
		 																  END)
								 + N'      ' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = [TARGET_FIELD] + '_STR') THEN 
													   N', ' + [TARGET_FIELD] + '_STR' + ' = ' + (CASE WHEN ([TARGET_VALUE] IS NULL OR TRIM([TARGET_VALUE]) = '' OR UPPER(TRIM([TARGET_VALUE])) =  'NULL') THEN 
																										 ' NULL' 
																									   ELSE
																										(SELECT REPLACE(TC.[TARGET_EXPRESSION], '[TARGET_VALUE]', [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_VALUE])
																										   FROM TempRulesColsTbl TC 
																										  WHERE TC.[CDSECTION]    = @GinCdSection 
																											AND TC.[TARGET_FIELD] = [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_FIELD])		 																		  
																								  END)
												     ELSE  
													   N'' 
												END)
		 						 + N'      , FILE_NAME = CASE WHEN (FILE_NAME IS NOT NULL OR TRIM(FILE_NAME) <> '''') THEN FILE_NAME + '', '' ELSE '''' END + ''' + @MsgDataExchangeBufferChangedByRuleLogFilename + [CDRULE] + ' (' + CAST(SEQUENCE AS VARCHAR)  + ')'''
								 + N'  FROM ' + (CASE WHEN ([CDSECTION] = 1) THEN
		 											   N'[dbo].[TFSCM_CLI_PURCHASE_ORDERS_TMP]  PURCHASE_ORDERS '
		 											 WHEN ([CDSECTION] = 3) THEN
		 											   N'[dbo].[TFSCM_CLI_BUFFER_TEMP]  BUFFER '
		 											 WHEN ([CDSECTION] = 5) THEN
		 											   N'[dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] ORDERS '
		 											 ELSE
		 											   N''
		 										END) 
		 						 + N' WHERE ' + [FILTER]   
		 						 + N'   AND NOT EXISTS (SELECT 1 '
		 						 + N'                     FROM [dbo].[TFSCM_CLI_BUFFER] BUFFER_DEF '
		 						 + N'				     WHERE BUFFER_DEF.SKU = BUFFER.SKU '
		 						 + N'                      AND BUFFER_DEF.LOCATION = BUFFER.LOCATION) ' RULE_SENTENCE
		 											
		 		  FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] 
		 		 WHERE [IS_ACTIVE] = 'Y' 
		 		   AND [CDSECTION] = @GinCdSection) TMP1 
		 		   ORDER BY 3

		OPEN curNewTmpRows;
		FETCH curNewTmpRows INTO @UpdTemp, @CdRule, @Sequence;

		WHILE (@@FETCH_STATUS = 0) 
		BEGIN
			SET @Applied = 1;
			
			BEGIN TRY				 
				-- PRINT @UpdTemp
				IF (@UpdTemp IS NULL OR TRIM(@UpdTemp) = '')
				BEGIN
					SET @Applied = 0;
				END 
				ELSE
				BEGIN
					/* OHLO 20200727: Since v5.1.0, add UPDATE_MOVEMENTS filter */
					SET @UpdTemp = @UpdTemp 
								 + (CASE WHEN (@GinCdSection = 1) THEN
											N'   AND PURCHASE_ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate ' 
										 WHEN (@GinCdSection = 3) THEN
										 	N'   AND BUFFER.UPDATE_MOVEMENTS = @PinTempLoadDate ' 
										 WHEN (@GinCdSection = 5) THEN
											N'   AND ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate ' 
										 ELSE
											N''
									END);
							 
					EXEC sys.sp_executesql @UpdTemp,
							   N'@PinTempLoadDate DATETIME', 
							   @PinTempLoadDate = @GinTempLoadDate;
					
					IF (@@ROWCOUNT = 0)
					BEGIN  
						SET @Applied = 0;
					END
				END
			END TRY 
			BEGIN CATCH					
				SET @Applied = 0;	 
			END CATCH
			
			IF (@Applied = 1) 
			BEGIN
				SET @LogSQLQuery = N'' + 'INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) '
					+ (SELECT STUFF((
						SELECT DISTINCT  N'UNION ' + RULE_SENTENCE  , ' /*' +  RIGHT('0000000000' +  CAST(SEQUENCE AS VARCHAR), 10) + '*/'		
						  FROM (SELECT   SEQUENCE ,  N'  SELECT DISTINCT ''' 
									 + (CASE WHEN ([CDSECTION] = 1) THEN
									 			'' --@MSG_DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO 
									 		WHEN ([CDSECTION] = 3) THEN
									 			REPLACE(@MsgDataExchangeBufferChangedByRuleInfo, 'RRRR',  CDRULE +  ' (' + CAST(SEQUENCE AS VARCHAR)  + ')') 
									 		WHEN ([CDSECTION] = 5) THEN
									 			'' --@MSG_DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO 
									 		ELSE
									 			N''
									    END) 
									 + ''', NULL, ''I'', GETDATE(), '
									 + N'BUFFER.SKU, BUFFER.LOCATION, ''' + [TARGET_VALUE] + ''' AS RECORD_CONTENT, BUFFER.FILE_ROW_NUMBER, ''' + [TARGET_FIELD] + ''' AS COLUMN_NAME, '
									 + '   (SELECT FILE_NAME FROM TempFileNameTbl AS [T] WHERE [T].[IDEXCHANGE] = [BUFFER].[IDEXCHANGE] AND [T].[ID] = [BUFFER].[ID]  AND [T].[UPDATE_MOVEMENTS] = @PinTempLoadDate), @PinTempLoadDate'
									 + N'  FROM ' + (CASE WHEN ([CDSECTION] = 1) THEN
															N'[dbo].[TFSCM_CLI_PURCHASE_ORDERS_TMP]  PURCHASE_ORDERS '
														  WHEN ([CDSECTION] = 3) THEN
															N'[dbo].[TFSCM_CLI_BUFFER_TEMP]  BUFFER '
														  WHEN ([CDSECTION] = 5) THEN
															N'[dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] ORDERS '
														  ELSE
															N''
													END) 
									 + N' WHERE ' + [FILTER] 						 
									 + (CASE WHEN ([CDSECTION] = 1) THEN
											   N'   AND PURCHASE_ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 WHEN ([CDSECTION] = 3) THEN
										 	   N'   AND BUFFER.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 WHEN ([CDSECTION] = 5) THEN
											   N'   AND ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 ELSE
											   N''
										END)
									 + N'   AND NOT EXISTS (SELECT 1 '
									 + N'                     FROM [dbo].[TFSCM_CLI_BUFFER] BUFFER_DEF '
									 + N'				     WHERE BUFFER_DEF.SKU = BUFFER.SKU '
									 + N'                      AND BUFFER_DEF.LOCATION = BUFFER.LOCATION) '  RULE_SENTENCE  
								  FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] 
								 WHERE [IS_ACTIVE] = 'Y' 
								   AND [CDSECTION] = @GinCdSection
								   AND [CDRULE]    = @CdRule) TMP1 
								   ORDER BY 2
					   FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 6, N''));
					   --PRINT @LogSQLQuery
				/* Execute the log insertion */
				EXEC sys.sp_executesql @LogSQLQuery,
									   N'@PinTempLoadDate DATETIME', 
									   @PinTempLoadDate = @GinTempLoadDate;;
			END
			FETCH curNewTmpRows INTO @UpdTemp, @CdRule, @Sequence;
		END
		CLOSE curNewTmpRows;		
		DEALLOCATE curNewTmpRows;
		-- -----------------------------------------------------------------------------------

		DECLARE @SqlTemp		AS NVARCHAR(MAX) = '';
		DECLARE @Var100Col NVARCHAR(100) = CONVERT(VARCHAR(100), '', 105); 
		DECLARE @Var500Col NVARCHAR(500) = CONVERT(VARCHAR(500), '', 105); 

		IF OBJECT_ID('TempUpdRulesTbl') IS NOT NULL 
			DROP TABLE TempUpdRulesTbl;

		-- SET @GinCdSection = 1;
		/* 2) Create a temporary table that will be used for Inserting records got from REAL table by 
		      executing the filters for each automation rule */
		SET @SqlTemp = ''
			+ 'SELECT ' + CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('@PinVar100Col AS ' + [NTS].[VARCHAR_COLUMN] + ',', ' ') AS SELECT_SENTENCE
				                    FROM TempNumToStrTbl AS [NTS]), ''))
			+ '       @PinVar500Col AS FILE_NAME, CAST(0 AS INT) AS FILE_ROW_NUMBER, '
			+ '       CONVERT(BIGINT, 0) AS [IDEXCHANGE],  CONVERT(BIGINT, 0) AS [ID], '
			+ '       ' + CONVERT(NVARCHAR(MAX), (SELECT STRING_AGG([IC].[COLUMN_NAME], ', ') WITHIN GROUP (ORDER BY [IC].[COLUMN_NAME] ASC)  
									   FROM INFORMATION_SCHEMA.COLUMNS AS [IC] 
									  WHERE [IC].[TABLE_NAME] = (CASE WHEN (@GinCdSection = 1) THEN
																	'TFSCM_CLI_PURCHASE_ORDERS'
																WHEN (@GinCdSection = 3) THEN
																	'TFSCM_CLI_BUFFER'
																WHEN (@GinCdSection = 5) THEN
																	'TFSCM_CLI_PRODUCTION_ORDERS'
																ELSE
																	''
															END)
									    AND [IC].[COLUMN_NAME] NOT IN ('ID')
									    AND [IC].[COLUMN_NAME] NOT LIKE '%_STR'))
			+ '  INTO TempUpdRulesTbl '
			+ '  FROM ' + (CASE WHEN (@GinCdSection = 1) THEN
									'TFSCM_CLI_PURCHASE_ORDERS'
								WHEN (@GinCdSection = 3) THEN
									'TFSCM_CLI_BUFFER'
								WHEN (@GinCdSection = 5) THEN
									'TFSCM_CLI_PRODUCTION_ORDERS'
							END)
			+ ' WHERE 1 = 2; '
			+ ' CREATE INDEX TempUpdRulesTblIdx ON TempUpdRulesTbl '
			+ ' (' + (CASE WHEN (@GinCdSection = 1) THEN
							'CDORDER'
						WHEN (@GinCdSection = 3) THEN
							'SKU,LOCATION'
						WHEN (@GinCdSection = 5) THEN
							'CDORDER'
					END) + ');';
					
		-- PRINT @SqlTemp
		EXEC sys.sp_executesql @SqlTemp,
							   N'@PinVar100Col NVARCHAR(100), @PinVar500Col NVARCHAR(500)', 
							   @PinVar100Col = @Var100Col, @PinVar500Col = @Var500Col;
		
		-- -----------------------------------------------------------------------------------
		/* 3) Prepare the INSERT INTO part */
		SET @SqlInsert = '' 
			+ (SELECT 'INSERT INTO TempUpdRulesTbl ('
					+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ([NTS].[VARCHAR_COLUMN] + ',', ' ') AS INSERT_SENTENCE
				                    FROM TempNumToStrTbl AS [NTS]), ''))       
					+ 'FILE_NAME, FILE_ROW_NUMBER, [IDEXCHANGE], [ID], '
					+ CONVERT(NVARCHAR(MAX), (SELECT STRING_AGG([IC].[COLUMN_NAME], ', ') WITHIN GROUP (ORDER BY [IC].[COLUMN_NAME] ASC)  
									   FROM INFORMATION_SCHEMA.COLUMNS AS [IC] 
									  WHERE [IC].[TABLE_NAME] = (CASE WHEN (@GinCdSection = 1) THEN
																	'TFSCM_CLI_PURCHASE_ORDERS'
																WHEN (@GinCdSection = 3) THEN
																	'TFSCM_CLI_BUFFER'
																WHEN (@GinCdSection = 5) THEN
																	'TFSCM_CLI_PRODUCTION_ORDERS'
																ELSE
																	''
															END)
									    AND [IC].[COLUMN_NAME] NOT IN ('ID')
									    AND [IC].[COLUMN_NAME] NOT LIKE '%_STR')) + ')');
		/* 3.1) INSERT INTO for records in TEMP table */
		/* Prepare the VALUES part */ 	
		SET @SqlValues	= N''
			+ ' SELECT DISTINCT '
			+ CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('ISNULL(BUFFER_TMP.' + [NTS].[VARCHAR_COLUMN] + ', ISNULL(BUFFER_TMP.' + SUBSTRING([NTS].[VARCHAR_COLUMN], 0, LEN([NTS].[VARCHAR_COLUMN]) - 3)  + ', BUFFER.' + SUBSTRING([NTS].[VARCHAR_COLUMN], 0, LEN([NTS].[VARCHAR_COLUMN]) - 3) + ' )),', ' ') AS SELECT_SENTENCE
						FROM TempNumToStrTbl AS [NTS]), ''))
			+ 'BUFFER_TMP.FILE_NAME, BUFFER_TMP.FILE_ROW_NUMBER, BUFFER_TMP.IDEXCHANGE, BUFFER_TMP.ID, '	
			+ (SELECT STUFF((SELECT DISTINCT N',' + 	   
											   (CASE WHEN (@GinCdSection = 1) THEN
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N''	 
														    ELSE 
															  N'  PURCHASE_ORDERS.' + COLUMN_NAME + ' '
													   END
													 WHEN (@GinCdSection = 3) THEN 
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N' CASE WHEN (BUFFER_TMP.' + COLUMN_NAME + ' IS NOT NULL AND BUFFER.' + COLUMN_NAME + ' <> BUFFER_TMP.' + COLUMN_NAME + ')  THEN '
															  + '        BUFFER_TMP.' + COLUMN_NAME + ' '
															  + '      ELSE BUFFER.' + COLUMN_NAME + ' '
														      + ' END '														 
															ELSE 
															  N'  BUFFER.' + COLUMN_NAME + ' '
													   END
													 WHEN (@GinCdSection = 5) THEN
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N''	 
														    ELSE 
															  N'  ORDERS.' + COLUMN_NAME + ' '
													   END
													 ELSE
													    N''
											    END), COLUMN_NAME
										  FROM (SELECT IC.COLUMN_NAME,
													   (SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'Y') HAS_TMP_UPD,
													   (SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'N') HAS_TMP_NOTUPD,
													   (SELECT COUNT(0) 
													      FROM INFORMATION_SCHEMA.COLUMNS ICT 
														 WHERE ICT.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
																						'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
																					  WHEN (@GinCdSection = 3) THEN
																						'TFSCM_CLI_BUFFER_TEMP'
																					  WHEN (@GinCdSection = 5) THEN
																						'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
																					  ELSE 
																						''
																				END) 
													       AND ICT.COLUMN_NAME = IC.COLUMN_NAME
														   AND ICT.COLUMN_NAME NOT LIKE '%_STR') HAS_TMP
											      FROM INFORMATION_SCHEMA.COLUMNS IC 
											     WHERE IC.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
																		    'TFSCM_CLI_PURCHASE_ORDERS'
																		  WHEN (@GinCdSection = 3) THEN
																		    'TFSCM_CLI_BUFFER'
																		  WHEN (@GinCdSection = 5) THEN
																		    'TFSCM_CLI_PRODUCTION_ORDERS'
																		  ELSE 
																		    ''
																	END)	
											       AND IC.COLUMN_NAME NOT IN ('ID')
												   AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP	
									     ORDER BY COLUMN_NAME 

								FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''))
 			+ N'  FROM ' + (CASE WHEN (@GinCdSection = 1) THEN
									N'[dbo].[TFSCM_CLI_PURCHASE_ORDERS] PURCHASE_ORDERS'
									+ N''
								 WHEN (@GinCdSection = 3) THEN
									N'[dbo].[TFSCM_CLI_BUFFER_TEMP] BUFFER_TMP '
									+ N'    JOIN [dbo].[TFSCM_CLI_BUFFER] BUFFER '
									+ N'    ON BUFFER_TMP.SKU      = BUFFER.SKU '
									+ N'   AND BUFFER_TMP.LOCATION = BUFFER.LOCATION ' 
									+ N'   AND BUFFER_TMP.UPDATE_MOVEMENTS =  @PinTempLoadDate ' 
								 WHEN (@GinCdSection = 5) THEN
									N'[dbo].[TFSCM_CLI_PRODUCTION_ORDERS] ORDERS'
									+ N''
								 ELSE
									N''
							END);

		SET @SqlValues = @SqlValues + N' ORDER BY SKU ASC, LOCATION ASC ' 
		
		/* Concatenate Insert and Values parts: this will insert the records updated with temporary values */
		SET @SqlTmpInsert = @SqlInsert + CHAR(13) + @SqlValues; 
		/* Execute Insert into Acative Rules temporary table */
		EXEC sys.sp_executesql @SqlTmpInsert,
							   N'@PinTempLoadDate DATETIME', 
							   @PinTempLoadDate = @GinTempLoadDate;
							   
		-- SELECT CAST(N'<![CDATA[' + @SqlTmpInsert + N']]>' AS XML)  
		
		-- -----------------------------------------------------------------------------------
			
		/* 3.2) INSERT INTO for records which would be modified by rules */	
		/* Prepare the VALUES part */ 				
		SET @SqlValues	= N''
			+ (SELECT STUFF((
				 SELECT DISTINCT  N'UNION ' + RULE_SENTENCE
				   FROM (SELECT N'SELECT '
							   + CONVERT(NVARCHAR(MAX), ISNULL((SELECT STRING_AGG ('ISNULL(BUFFER_TMP.' + [NTS].[VARCHAR_COLUMN] + ', ISNULL(BUFFER_TMP.' + SUBSTRING([NTS].[VARCHAR_COLUMN], 0, LEN([NTS].[VARCHAR_COLUMN]) - 3)  + ', BUFFER.' + SUBSTRING([NTS].[VARCHAR_COLUMN], 0, LEN([NTS].[VARCHAR_COLUMN]) - 3) + ' )),', ' ') AS SELECT_SENTENCE
				                    FROM TempNumToStrTbl AS [NTS]), ''))
							   + 'BUFFER_TMP.FILE_NAME, BUFFER_TMP.FILE_ROW_NUMBER, BUFFER_TMP.IDEXCHANGE, BUFFER_TMP.ID, '
				               + STUFF((SELECT DISTINCT N',' + 	   
											   (CASE WHEN ([CDSECTION] = 1) THEN
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N''	 
														    ELSE 
															  N'  PURCHASE_ORDERS.' + COLUMN_NAME + ' '
													   END
													 WHEN ([CDSECTION] = 3) THEN 
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N' CASE WHEN (BUFFER_TMP.' + COLUMN_NAME + ' IS NOT NULL AND BUFFER.' + COLUMN_NAME + ' <> BUFFER_TMP.' + COLUMN_NAME + ')  THEN '
															  + '        BUFFER_TMP.' + COLUMN_NAME + ' '
															  + '      ELSE BUFFER.' + COLUMN_NAME + ' '
														      + ' END '														 
															ELSE 
															  N'  BUFFER.' + COLUMN_NAME + ' '
													   END
													 WHEN ([CDSECTION] = 5) THEN
													   CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
															  N''	 
														    ELSE 
															  N'  ORDERS.' + COLUMN_NAME + ' '
													   END
													 ELSE
													    N''
											    END), COLUMN_NAME
										  FROM (SELECT IC.COLUMN_NAME,
													   (SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'Y') HAS_TMP_UPD,
													   (SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'N') HAS_TMP_NOTUPD,
													   (SELECT COUNT(0) 
													      FROM INFORMATION_SCHEMA.COLUMNS ICT 
														 WHERE ICT.TABLE_NAME = (CASE WHEN ([CDSECTION] = 1) THEN
																						'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
																					  WHEN ([CDSECTION] = 3) THEN
																						'TFSCM_CLI_BUFFER_TEMP'
																					  WHEN ([CDSECTION] = 5) THEN
																						'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
																					  ELSE 
																						''
																				END) 
													       AND ICT.COLUMN_NAME = IC.COLUMN_NAME
														   AND ICT.COLUMN_NAME NOT LIKE '%_STR') HAS_TMP
											      FROM INFORMATION_SCHEMA.COLUMNS IC 
											     WHERE IC.TABLE_NAME = (CASE WHEN ([CDSECTION] = 1) THEN
																		    'TFSCM_CLI_PURCHASE_ORDERS'
																		  WHEN ([CDSECTION] = 3) THEN
																		    'TFSCM_CLI_BUFFER'
																		  WHEN ([CDSECTION] = 5) THEN
																		    'TFSCM_CLI_PRODUCTION_ORDERS'
																		  ELSE 
																		    ''
																	END)	
											       AND IC.COLUMN_NAME NOT IN ('ID')
												   AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP	
									     ORDER BY COLUMN_NAME 
									    FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N'')
							 + N'  FROM ' + (CASE WHEN ([CDSECTION] = 1) THEN
												    N'[dbo].[TFSCM_CLI_PURCHASE_ORDERS] PURCHASE_ORDERS'
												    + N''
												  WHEN ([CDSECTION] = 3) THEN
												    N'[dbo].[TFSCM_CLI_BUFFER] BUFFER'
												  + N' INNER JOIN (' + @locationList + ') X '
												  + N'    ON X.LOCATION = BUFFER.LOCATION '
												  + N'  LEFT OUTER JOIN [dbo].[TFSCM_CLI_BUFFER_TEMP] BUFFER_TMP '
												  + N'    ON BUFFER_TMP.SKU      = BUFFER.SKU '
												  + N'   AND BUFFER_TMP.LOCATION = BUFFER.LOCATION '
												  + N'   AND BUFFER_TMP.UPDATE_MOVEMENTS = @PinTempLoadDate '												  
												  WHEN ([CDSECTION] = 5) THEN
												    N'[dbo].[TFSCM_CLI_PRODUCTION_ORDERS] ORDERS'
												    + N''
												  ELSE
												    N''
											END) 
							 + N' WHERE ' + [FILTER] 
										  + (CASE WHEN ([CDSECTION] = 1) THEN
												   N''
												  WHEN ([CDSECTION] = 3) THEN
												     N'   AND BUFFER.INACTIVE  = 0 ' 
												   + N'   AND NOT EXISTS (SELECT 1 '
												   + N'                     FROM TempUpdRulesTbl BUFFER_DEF '
												   + N'				       WHERE BUFFER_DEF.SKU      = BUFFER.SKU '
												   + N'                      AND BUFFER_DEF.LOCATION = BUFFER.LOCATION) ' 												
												  WHEN ([CDSECTION] = 5) THEN
												    N''
												  ELSE
												    N''
											END)  RULE_SENTENCE
						  FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] 
						 WHERE [IS_ACTIVE] = 'Y' 
						   AND [CDSECTION] = @GinCdSection) TMP1 
			   FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 6, N''));

		SET @SqlValues = @SqlValues + N' ORDER BY 1' 

		/* Concatenate Insert and Values parts: this will insert the records updated with temporary values */
		SET @SqlTmpInsert = @SqlInsert + CHAR(13) + @SqlValues;
		-- SELECT CAST(N'<root><![CDATA[' + @SqlTmpInsert + N']]></root>' AS XML)  
		
		/* 4) Execute Insert into Acative Rules temporary table */
		EXEC sys.sp_executesql @SqlTmpInsert,
							   N'@PinTempLoadDate DATETIME', 
							   @PinTempLoadDate = @GinTempLoadDate; 

		-- -----------------------------------------------------------------------------------

		/* 5) Create the sentences for updating every given column defined in the automation rules */

		/* 5.1) Update Inventories columns which shoud have the same values total columns have */
		UPDATE TempUpdRulesTbl
		   SET INVENTORY_ON_PRODUCTION = TOTAL_INVENTORY_ON_PRODUCTION,
			   INVENTORY_ON_PURCHASING = TOTAL_INVENTORY_ON_PURCHASING,
			   INVENTORY_ON_SITE       = TOTAL_INVENTORY_ON_SITE,
			   INVENTORY_ON_TRANSIT    = TOTAL_INVENTORY_ON_TRANSIT,
			   UPDATE_MOVEMENTS        = @GinTempLoadDate;

		/* 5.2) Records on TempUpdRulesTbl should be updated with _TEMP table values, first.*/
		DECLARE @SqlTmpPrevMerge AS NVARCHAR(MAX);
		SET @SqlTmpPrevMerge = '';
	 
		DECLARE @SqlTmpPrevUpd AS NVARCHAR(MAX);
		SET @SqlTmpPrevUpd = ''  
			+ ' UPDATE target'
			+ '    SET ';
				
		SET @SqlTmpPrevUpd   = @SqlTmpPrevUpd   
			+ (SELECT STUFF((SELECT DISTINCT N', target.' + COLUMN_NAME + ' = '  --target.' + COLUMN_NAME + ' = source.' + COLUMN_NAME 
											   + (CASE WHEN ((HAS_TMP_UPD = 1)
													           OR (HAS_TMP_NOTUPD = 1 AND @GinIsFromScreen = 1)
													           OR (HAS_TMP = 1 AND @GinIsFromScreen = 1)) THEN
														 N'source.'
												  	   ELSE 
												  	     N'target.'
												 END) + COLUMN_NAME 
							FROM (SELECT IC.COLUMN_NAME,
										(SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'Y') HAS_TMP_UPD,
										(SELECT COUNT(0) FROM TFSCM_DEX_INT_DETAIL I WHERE I.CDINTERFACE = 3 AND I.CDFIELD = IC.COLUMN_NAME AND I.IS_UPGRADEABLE = 'N') HAS_TMP_NOTUPD,
										(SELECT COUNT(0) 
										   FROM INFORMATION_SCHEMA.COLUMNS ICT 
										  WHERE ICT.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
																		'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
																	   WHEN (@GinCdSection = 3) THEN
																		'TFSCM_CLI_BUFFER_TEMP'
																	   WHEN (@GinCdSection = 5) THEN
																		'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
																	   ELSE 
																		''
																 END) 
										    AND ICT.COLUMN_NAME = IC.COLUMN_NAME
											AND ICT.COLUMN_NAME NOT LIKE '%_STR') HAS_TMP
							    	FROM INFORMATION_SCHEMA.COLUMNS IC 
								   WHERE TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
															'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
															WHEN (@GinCdSection = 3) THEN
															'TFSCM_CLI_BUFFER_TEMP'
															WHEN (@GinCdSection = 5) THEN
															'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
															ELSE 
															''
														END)
									 AND IC.COLUMN_NAME NOT IN ('ID', 'IDEXCHANGE', 'FILE_NAME', 'IS_CREATION', 'UPDATE_MOVEMENTS', 'FILE_ROW_NUMBER')
									 AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP
									FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''));
					 
		SET @SqlTmpPrevMerge  = @SqlTmpPrevMerge  + @SqlTmpPrevUpd;
		
		/* Get the FROM section */
		DECLARE @SqlTmpPrevFrom AS NVARCHAR(MAX);  
		SET @SqlTmpPrevFrom  = ' FROM TempUpdRulesTbl target JOIN ' 
											+ (CASE WHEN (@GinCdSection = 1) THEN
												'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
											 WHEN (@GinCdSection = 3) THEN
												'TFSCM_CLI_BUFFER_TEMP'
											 WHEN (@GinCdSection = 5) THEN
												'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
											 ELSE 
												''
										END) 
									 + ' source '
									 + (CASE WHEN (@GinCdSection = 1) THEN
									 			+ ' ON (target.CDOR = source.CDOR)  '
											 WHEN (@GinCdSection = 3) THEN
												+ ' ON (target.SKU      = source.SKU  '
												+ ' AND target.LOCATION = source.LOCATION '
												+ ' AND source.UPDATE_MOVEMENTS = @PinTempLoadDate)'
											 WHEN (@GinCdSection = 5) THEN
												+ ' ON (target.CDOR = source.CDOR)  '
											 ELSE 
											  ''
										END);
										
		SET @SqlTmpPrevMerge = @SqlTmpPrevMerge + @SqlTmpPrevFrom;
		--SELECT  @SqlTmpPrevMerge
		EXEC sys.sp_executesql @SqlTmpPrevMerge,
							   N'@PinTempLoadDate DATETIME', 
							   @PinTempLoadDate = @GinTempLoadDate; 
		
		/* 5.3) Create a temporary table for creating the rues log */
		IF OBJECT_ID('LogRulesTbl') IS NOT NULL 
			DROP TABLE LogRulesTbl;

		-- SET @GinCdSection = 1;
		SET @SqlTemp = ''
			+ 'SELECT 0 SEQUENCE, * '
			+ '  INTO LogRulesTbl '
			+ '  FROM TFSCM_COM_LOG '
			+ ' WHERE 1 = 2;'
			+ ' CREATE INDEX LogRulesTblIdx ON LogRulesTbl '
			+ ' (' + (CASE WHEN (@GinCdSection = 1) THEN
							'CDORDER'
						WHEN (@GinCdSection = 3) THEN
							'IDLOG'
						WHEN (@GinCdSection = 5) THEN
							'CDORDER'
					END) + ');';

		-- PRINT @SqlTemp
		EXEC sys.sp_executesql @SqlTemp;

		/* 5.4) Insert the alerts for records on the temporary table which were modified by rules */
		SET @LogSQLQuery = N'' + 'INSERT INTO LogRulesTbl(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, SEQUENCE, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE) '
			+ (SELECT STUFF((
				SELECT DISTINCT  N'UNION ' + RULE_SENTENCE    		
				  FROM (SELECT   N'  SELECT DISTINCT ''' 
					+ (CASE WHEN ([CDSECTION] = 1) THEN
								'' --@MSG_DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO 
							WHEN ([CDSECTION] = 3) THEN
								REPLACE(@MsgDataExchangeBufferChangedByRuleInfo, 'RRRR',  CDRULE +  ' (' + CAST(SEQUENCE AS VARCHAR)  + ')') 
							WHEN ([CDSECTION] = 5) THEN
								'' --@MSG_DATA_EXCHANGE_BUFFER_CHANGED_BY_RULE_INFO 
							ELSE
								N''
					   END) 
						+ ''', NULL, ''I'', GETDATE(), ' + CAST(SEQUENCE AS VARCHAR) + ', '
							  + N'BUFFER.SKU, BUFFER.LOCATION, ''' + [TARGET_VALUE] + ''' AS RECORD_CONTENT, BUFFER.FILE_ROW_NUMBER, ''' + [TARGET_FIELD] + ''' AS COLUMN_NAME, '
							   + '   (SELECT FILE_NAME FROM TempFileNameTbl AS [T] WHERE [T].[IDEXCHANGE] = [BUFFER].[IDEXCHANGE] AND [T].[ID] = [BUFFER].[ID] AND [T].[UPDATE_MOVEMENTS] = @PinTempLoadDate), @PinTempLoadDate'
							  + N'  FROM ' + (CASE WHEN ([CDSECTION] = 1) THEN
															   N'TempUpdRulesTbl PURCHASE_ORDERS '
															 WHEN ([CDSECTION] = 3) THEN
															   N'TempUpdRulesTbl BUFFER '
															 WHEN ([CDSECTION] = 5) THEN
															   N'TempUpdRulesTbl ORDERS '
															 ELSE
															   N''          
														END)
							 + N' WHERE ' + [FILTER]					 
							 + (CASE WHEN ([CDSECTION] = 1) THEN
											   N'   AND PURCHASE_ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 WHEN ([CDSECTION] = 3) THEN
										 	   N'   AND BUFFER.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 WHEN ([CDSECTION] = 5) THEN
											   N'   AND ORDERS.UPDATE_MOVEMENTS = @PinTempLoadDate '
											 ELSE
											   N''
										END)
								RULE_SENTENCE  
						  FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] 
						 WHERE [IS_ACTIVE] = 'Y' 
						   AND [CDSECTION] = @GinCdSection) TMP1  
			   FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 6, N''));

		-- SELECT CAST(N'<root><![CDATA[' + @LogSQLQuery + N']]></root>' AS XML) 
		/* 6) Execute the log insertion */
		EXEC sys.sp_executesql @LogSQLQuery,
							   N'@PinTempLoadDate DATE', 
							   @PinTempLoadDate = @GinTempLoadDate;
		
		-- -----------------------------------------------------------------------------------
		/* 7) Insert the info messages for records on the temporary table which were modified by rules */
		INSERT INTO TFSCM_COM_LOG(DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
		SELECT DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE
		  FROM LogRulesTbl
		 ORDER BY SEQUENCE ASC;		  

		-- -----------------------------------------------------------------------------------
		/* 8) Now Rules values should be applied to those records  */
		DECLARE @SqlUpdate NVARCHAR(MAX);
		SET @SqlUpdate = N'' 
			+ (SELECT STUFF((				
				SELECT DISTINCT  N'; ' + RULE_SENTENCE , ' /*' + RIGHT('0000000000' +  CAST(SEQUENCE AS VARCHAR), 10) + '*/'									      
				  FROM ( SELECT SEQUENCE, N'UPDATE ' + (CASE WHEN ([CDSECTION] = 1) THEN
															   N'PURCHASE_ORDERS'
															 WHEN ([CDSECTION] = 3) THEN
															   N'BUFFER'
															 WHEN ([CDSECTION] = 5) THEN
															   N'ORDERS'
															 ELSE
															   N''
														END) 
										 + N'   SET ' + [TARGET_FIELD] + ' = ' + (CASE WHEN ([TARGET_VALUE] IS NULL OR TRIM([TARGET_VALUE]) = '' OR UPPER(TRIM([TARGET_VALUE])) =  'NULL') THEN 
																						 ' NULL' 
																					   ELSE  
																						 (SELECT REPLACE(TC.[TARGET_EXPRESSION], '[TARGET_VALUE]', [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_VALUE])
																						    FROM TempRulesColsTbl TC 
																						   WHERE TC.[CDSECTION]    = @GinCdSection 
																							 AND TC.[TARGET_FIELD] = [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_FIELD])		
																				  END)
										 + N'      ' + (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = [TARGET_FIELD] + '_STR') THEN 
															   N', ' + [TARGET_FIELD] + '_STR' + ' = ' + (CASE WHEN ([TARGET_VALUE] IS NULL OR TRIM([TARGET_VALUE]) = '' OR UPPER(TRIM([TARGET_VALUE])) =  'NULL') THEN 
																												 ' NULL' 
																											   ELSE  
																												 (SELECT REPLACE(TC.[TARGET_EXPRESSION], '[TARGET_VALUE]', [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_VALUE])
																													FROM TempRulesColsTbl TC 
																												   WHERE TC.[CDSECTION]    = @GinCdSection 
																													 AND TC.[TARGET_FIELD] = [dbo].[TFSCM_CLI_AUTOMATION_RULES].[TARGET_FIELD])		
																										  END)
															 ELSE  
															   N'' 
														END)
										+ N'      , FILE_NAME = CASE WHEN (FILE_NAME IS NOT NULL OR TRIM(FILE_NAME) <> '''') THEN FILE_NAME + '', '' ELSE '''' END + ''' + @MsgDataExchangeBufferChangedByRuleLogFilename + [CDRULE] + ' (' + CAST(SEQUENCE AS VARCHAR)  + ')'''
										+ N'  FROM ' + (CASE WHEN ([CDSECTION] = 1) THEN
															   N'TempUpdRulesTbl PURCHASE_ORDERS '
															 WHEN ([CDSECTION] = 3) THEN
															   N'TempUpdRulesTbl BUFFER '
															 WHEN ([CDSECTION] = 5) THEN
															   N'TempUpdRulesTbl ORDERS '
															 ELSE
															   N''
														END) 
										 + N' WHERE ' + [FILTER] RULE_SENTENCE  
						  FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES] 
						 WHERE [IS_ACTIVE] = 'Y' 
						   AND [CDSECTION] = @GinCdSection) TMP1 
						   ORDER BY 2
			   FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''));			 

		/* Execute Insert into Acative Rules temporary table */
		EXEC sys.sp_executesql @SqlUpdate;		
		-- -----------------------------------------------------------------------------------
		
		/* 9) Update records in Temporary table that match active rules */
		DECLARE @SqlTempMerge AS NVARCHAR(MAX);
		SET @SqlTempMerge  = '';
	 
		DECLARE @SqlTempMatchUpd AS NVARCHAR(MAX);
		SET @SqlTempMatchUpd  = ''  
			+ ' UPDATE target'
			+ '    SET ';
				
		SET @SqlTempMatchUpd  = @SqlTempMatchUpd  
			+ (SELECT STUFF((SELECT DISTINCT N', target.' + COLUMN_NAME + ' = source.' + COLUMN_NAME
											+ (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = [COLUMN_NAME] + '_STR') THEN 
											   	      N', target.' + [COLUMN_NAME] + '_STR' + ' = source.' + [COLUMN_NAME] + '_STR'
											   	    ELSE  
											   	      N'' 
											   END)
							FROM (SELECT IC.COLUMN_NAME
									FROM INFORMATION_SCHEMA.COLUMNS IC 
								   WHERE IC.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
															'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
															WHEN (@GinCdSection = 3) THEN
															'TFSCM_CLI_BUFFER_TEMP'
															WHEN (@GinCdSection = 5) THEN
															'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
															ELSE 
															''
														END)
									 AND IC.COLUMN_NAME NOT IN ('ID', 'IDEXCHANGE', 'FILE_NAME', 'IS_CREATION', 'UPDATE_MOVEMENTS', 'FILE_ROW_NUMBER')
									 AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP
									FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''))
			+ ', target.FILE_NAME       = source.FILE_NAME '
			+ ', target.FILE_ROW_NUMBER = source.FILE_ROW_NUMBER ';
					 
		SET @SqlTempMerge = @SqlTempMerge + @SqlTempMatchUpd;
		
		DECLARE @SqlTempFrom AS NVARCHAR(MAX);
		SET @SqlTempFrom  = ' FROM ' + (CASE WHEN (@GinCdSection = 1) THEN
												'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
											 WHEN (@GinCdSection = 3) THEN
												'TFSCM_CLI_BUFFER_TEMP'
											 WHEN (@GinCdSection = 5) THEN
												'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
											 ELSE 
												''
										END) 
									 + ' AS target JOIN  TempUpdRulesTbl source '
									 + (CASE WHEN (@GinCdSection = 1) THEN
									 			+ ' ON (target.CDOR = source.CDOR)  '
											 WHEN (@GinCdSection = 3) THEN
												+ ' ON (target.SKU      = source.SKU  '
												+ ' AND target.LOCATION = source.LOCATION '
												+ ' AND target.UPDATE_MOVEMENTS = @PinTempLoadDate)'
											 WHEN (@GinCdSection = 5) THEN
												+ ' ON (target.CDOR = source.CDOR)  '
											 ELSE 
											  ''
										END);
										
		SET @SqlTempMerge = @SqlTempMerge + @SqlTempFrom;
		
		EXEC sys.sp_executesql @SqlTempMerge,
							   N'@PinTempLoadDate DATETIME', 
							   @PinTempLoadDate = @GinTempLoadDate;

		-- -----------------------------------------------------------------------------------
		/* 10) Insert into temporary table those rules records which does not match  */
		DECLARE @SqlTempNotMatchIns AS NVARCHAR(MAX);
		SET @SqlTempNotMatchIns  = ''  
			+ ' INSERT INTO ' + (CASE WHEN (@GinCdSection = 1) THEN
										'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
									 WHEN (@GinCdSection = 3) THEN
										'TFSCM_CLI_BUFFER_TEMP'
									 WHEN (@GinCdSection = 5) THEN
										'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
									 ELSE 
										''
								END);
				
		SET @SqlTempNotMatchIns  = @SqlTempNotMatchIns  + '('
			+ (SELECT STUFF((SELECT DISTINCT N', ' + COLUMN_NAME
										+ (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = [COLUMN_NAME] + '_STR') THEN 
												  N', ' + [COLUMN_NAME] + '_STR' 
												ELSE  
												  N'' 
										   END)
							FROM (SELECT IC.COLUMN_NAME
									FROM INFORMATION_SCHEMA.COLUMNS IC 
								   WHERE IC.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
																'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
															WHEN (@GinCdSection = 3) THEN
																'TFSCM_CLI_BUFFER_TEMP'
															WHEN (@GinCdSection = 5) THEN
																'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
															ELSE 
																''
														END)
									AND IC.COLUMN_NAME NOT IN ('ID', 'IDEXCHANGE', /*'FILE_NAME',*/ 'IS_CREATION', 'UPDATE_DATE', 
															   'UPDATE_MOVEMENTS', 'ORDER_MODIFY_DATE', 'FILE_ROW_NUMBER')
									AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP
									FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''));

		SET @SqlTempNotMatchIns  = @SqlTempNotMatchIns  
							   + ', IDEXCHANGE, '
							   + (CASE WHEN (@GinCdSection = 1) THEN
										 'UPDATE_DATE'
									   WHEN (@GinCdSection = 3) THEN
										 'UPDATE_MOVEMENTS'
									   WHEN (@GinCdSection = 5) THEN
										 'ORDER_MODIFY_DATE'
									   ELSE 
										 ''
								  END) 
								+ ', FILE_ROW_NUMBER)';
							   
		SET @SqlTempMerge = @SqlTempNotMatchIns;

		DECLARE @IdExchange NUMERIC(10);
		DECLARE @LoadDate   DATE;
		SET @IdExchange = (CASE WHEN (@GinCdSection = 1) THEN
								  (SELECT MAX(TMP.IDEXCHANGE) FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP)
								WHEN (@GinCdSection = 3) THEN 
								  (SELECT MAX(TMP.IDEXCHANGE) FROM TFSCM_CLI_BUFFER_TEMP TMP)
								WHEN (@GinCdSection = 5) THEN
								  (SELECT MAX(TMP.IDEXCHANGE) FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP)
								ELSE 
								  1
						   END);
						   
		IF (@GinTempLoadDate IS NOT NULL)
		BEGIN
			SET @LoadDate = @GinTempLoadDate;
		END
		ELSE
		BEGIN
			SET @LoadDate = (CASE WHEN (@GinCdSection = 1) THEN
								    (SELECT MAX(TMP.UPDATE_DATE) FROM TFSCM_CLI_PURCHASE_ORDERS_TEMP TMP)
								  WHEN (@GinCdSection = 3) THEN 
								    (SELECT MAX(TMP.UPDATE_MOVEMENTS) FROM TFSCM_CLI_BUFFER_TEMP TMP)
								  WHEN (@GinCdSection = 5) THEN
								    (SELECT MAX(TMP.ORDER_MODIFY_DATE) FROM TFSCM_CLI_PRODUCTION_ORDERS_TEMP TMP)
								  ELSE 
								    GETDATE()
						    END);
		END
		IF (@IdExchange IS NULL)
		BEGIN
			SET @IdExchange = 1;
			SET @LoadDate = GETDATE();
		END 
									  
		DECLARE @SqlTempNotMatchInsVal AS NVARCHAR(MAX);
		SET @SqlTempNotMatchInsVal  = ''  
			+ ' SELECT DISTINCT ' 
			+ (SELECT STUFF((SELECT DISTINCT N', source.' + COLUMN_NAME
										+ (CASE WHEN EXISTS (SELECT 1 FROM TempNumToStrTbl AS [NTS] WHERE [NTS].[VARCHAR_COLUMN] = [COLUMN_NAME] + '_STR') THEN 
												  N', source.' + [COLUMN_NAME] + '_STR' 
												ELSE  
												  N'' 
										   END)
							   FROM (SELECT IC.COLUMN_NAME
								 	   FROM INFORMATION_SCHEMA.COLUMNS IC 
								      WHERE IC.TABLE_NAME = (CASE WHEN (@GinCdSection = 1) THEN
															     'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
															   WHEN (@GinCdSection = 3) THEN
															     'TFSCM_CLI_BUFFER_TEMP'
															   WHEN (@GinCdSection = 5) THEN
															     'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
															   ELSE 
															     ''
													      END)
									    AND IC.COLUMN_NAME NOT IN ('ID', 'IDEXCHANGE', /* 'FILE_NAME', */ 'IS_CREATION', 'UPDATE_DATE', 
															    'UPDATE_MOVEMENTS', 'ORDER_MODIFY_DATE', 'FILE_ROW_NUMBER')
										AND IC.COLUMN_NAME NOT LIKE '%_STR') TMP
								FOR XML PATH, TYPE).value(N'.[1]', N'nvarchar(max)'), 1, 1, N''));

		SET @SqlTempNotMatchInsVal  = @SqlTempNotMatchInsVal 
									+ ', ' + CAST(@IdExchange AS VARCHAR) 
									+ ', CONVERT(DATETIME,''' + CONVERT(VARCHAR, @LoadDate, 103) + ''',103) '
									+ ', source.FILE_ROW_NUMBER';
 
		SET @SqlTempNotMatchInsVal  = @SqlTempNotMatchInsVal 
								  + '  FROM TempUpdRulesTbl source '
								  + ' WHERE NOT EXISTS (SELECT 1 ' 
													 + '  FROM ' + (CASE WHEN (@GinCdSection = 1) THEN
																		   'TFSCM_CLI_PURCHASE_ORDERS_TEMP'
																		 WHEN (@GinCdSection = 3) THEN
																		   'TFSCM_CLI_BUFFER_TEMP'
																		 WHEN (@GinCdSection = 5) THEN
																		   'TFSCM_CLI_PRODUCTION_ORDERS_TEMP'
																		 ELSE 
																		   ''
																	END) + ' AS target'
													 + ' WHERE ' + (CASE WHEN (@GinCdSection = 1) THEN
																		   ' (target.CDOR = source.CDOR)  '
																		 WHEN (@GinCdSection = 3) THEN
																		   ' (target.SKU      = source.SKU AND '
																		 + '  target.LOCATION = source.LOCATION)  '
																		 WHEN (@GinCdSection = 5) THEN
																		   ' (target.CDOR = source.CDOR)  '
																		 ELSE 
																		 ''
																	END) + ')';
									
		SET @SqlTempMerge = @SqlTempMerge + @SqlTempNotMatchInsVal;
		--SELECT CAST(N'<root><![CDATA[' + @SqlTempMerge + N']]></root>' AS XML) 
		EXEC sys.sp_executesql @SqlTempMerge;
		-- -----------------------------------------------------------------------------------
		 
		SET @ovaResult = '0'; 
		SET @ovaMessage = 'OK'	
	END TRY 
	BEGIN CATCH	
		
		IF ((SELECT CURSOR_STATUS('global','curNewTmpRows')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curNewTmpRows')) IN (0,1))
			BEGIN
				CLOSE curNewTmpRows; 			
			END
			DEALLOCATE curNewTmpRows; 
		END			
		SET @ovaResult  = '1';
		SET @ovaMessage = '' 
			+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar) 
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar) 
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_EXECUTE_AUTOMATION_RULES]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
		
		-- DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		-- SET @ErMessage = ERROR_MESSAGE()
		-- SET @ErSeverity = ERROR_SEVERITY()
		-- SET @ErState = ERROR_STATE()
		
		-- RAISERROR (@ErMessage, @ErSeverity, @ErState)              
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 11/11/2020
-- Description : Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				 BAA_OUT_CLASSIFICATION.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 25/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--               * Add the parameter ManagementWay: F (Focuss, from Focuss Buffers Master)
--				                                    A (Automatic, from Buffers Data Exchange)
--				 * Add the parameter ManagementWay when calling 
--						USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 29/01/2020
-- Description : Add Daily Average Consumption column to be sent to History .
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 02/01/2020
-- Description : * cursorStartedEvents cursor simplifying 
--               * GET_MESSAGEs from SP_UPDATE_BUFFER_HISTORY
--               * Custom columns updates construction from SP_UPDATE_BUFFER_HISTORY
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/12/2019
-- Description : * Rename BUFFER_EXECUTE_PSEUDOCODES to USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS
--				 * Change the name of SP_UPDATE_BUFFER_HISTORY to USP_UPDATE_BUFFER_HISTORY
--				 * Change the name of SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED to 
--				   USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡ - Oscar Londoño
-- Upgrade date: 01/06/2019
-- Description : Improve performance for cursors declaration and for mass updating of a buffer
--               history column 'Ignore Outs in BAA'
-- Version     : 4.10.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 13/12/2018
-- Description : * Modify default value for column IGNORE_OUTS_IN_BAA to 'N'
--               * Add REPLENISHMENT_FREQUENCY to be saved in the history
-- Version     : 4.10.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/02/2018
-- Description : Add column EXCLUDED_OUTS
-- Version     : 4.8.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 31/01/2018
-- Description : Rename REPLENISHMENT_COEFFICIENT by PROTECTION_FACTOR
-- Version     : 4.8.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/09/2017
-- Description : Add column REPLENISHMENT_PRIORITY
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 22/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and CHAIN_PRIORITY_COLOR by 
--                 NET_PRIORITY_COLOR
--               * Add columns PENDING_DEMAND, NET_INVENTORY
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Julian Gonzalez
-- Upgrade date: 19/05/2016
-- Description : add column named REPLENISHMENT_PROBLEM 
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade Date: 26/11/2014 
-- Description : Change the calling to SP_UPDATE_BUFFER_HISTORY
-- ------------------------------------------------------------------------------------------- 
-- Author       : Edward Rodriguez
-- Creation date: 04/03/2014 
-- Description  : BUFFER_EXECUTE_PSEUDOCODES
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS] 
   /* Input Parameters */
    @GinLocations            NVARCHAR(MAX),
	--@GinLocationsOnlyWorkDay AS NVARCHAR(MAX),
	@GinDelimiter            VARCHAR(1),
	@GinUpdateMovements      DATE,
	@GinCreatorOrModifyUser  NVARCHAR(MAX),
	@GinManagementWay        VARCHAR(1),
   /* Output Parameters */
    @GoutResult  VARCHAR(1)    OUTPUT,
    @GoutMessage NVARCHAR(MAX) OUTPUT
AS

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @GoutResult = '0';
		SET @GoutMessage = '';
		
		DECLARE @ResultTmp      VARCHAR(1) = '';
		DECLARE @MessageTmpAux  NVARCHAR(MAX) = '';
		DECLARE @MsgTmpSP_UPDATE_BUFFER_HISTORY 					NVARCHAR(MAX) = '';
		DECLARE @MsgTmpUSP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED 	NVARCHAR(MAX) = ''; 
		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
		-- -----------------------------------------------------------------------------------
		DECLARE @BAA_OUT_CLASSIFICATION_NORMAL_BY_DEFAULT		 	VARCHAR(2)    = 'N'; 
		DECLARE @BAA_OUT_CLASSIFICATION_SCHEDULED					VARCHAR(2)    = 'S'; 
		
		-- -----------------------------------------------------------------------------------
		-- MESSAGES
		-- -----------------------------------------------------------------------------------
		DECLARE @Language					VARCHAR(2) = 'es';  
		DECLARE @ResultMessagesErrorCode	VARCHAR(1); 
		DECLARE @ResultMessagesErrorMessage	NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR				NVARCHAR(MAX);
		DECLARE @MSG_DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS	NVARCHAR(MAX);
		DECLARE @MSG_DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA	NVARCHAR(MAX); 
		DECLARE @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY				NVARCHAR(MAX);
		DECLARE @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL		NVARCHAR(MAX);
		DECLARE @MSG_CALC_UPDATE_BUFFER_HISTORY_ERROR					NVARCHAR(MAX);
		DECLARE @MSG_UPDATE_BUFFER_HISTORY_SUCCESS						NVARCHAR(MAX);
		-- -----------------------------------------------------------------------------------
		--  TIME
		-- -----------------------------------------------------------------------------------
		DECLARE @StartTimeExe AS DATETIME
		-- -----------------------------------------------------------------------------------
		
		SET @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR             = 'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR';
		SET @MSG_DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS = 'DATA_EXCHANGE_BUFFERS_INTERFACE_WITH_UPDATE_MOVEMENTS';
		SET @MSG_DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA = 'DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA';
		SET @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY               = 'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY';
		SET @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL     = 'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL';
		
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE';
				
		-- ----------------------------------------------------------------------------------- 
		
		IF (@GinUpdateMovements IS NOT NULL)
		BEGIN
			-- USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED:
			BEGIN TRY
				--EXEC ADD_TRACE 'Ya hizo la carga y va a llamar USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED  para ',
				-- @StartTimeExe	
				--SET @StartTimeExe = GETDATE()
				
				-- ---------------------------------------------------------------------------
 		        -- OHLO 20200404: Since v5.0.0, send @GinManagementWay paramter
 		        -- ---------------------------------------------------------------------------
 		        EXEC [dbo].[USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED]
						@GinUpdateMovements, 
						@GinCreatorOrModifyUser,
						@GinLocations, 
						@GinDelimiter,
						@GinManagementWay,
						@ResultTmp OUTPUT, 
						@MsgTmpUSP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED OUTPUT;
												
				IF (@ResultTmp = '1') 
				BEGIN 
					SET @GoutResult = '1';
				END 
				--EXEC ADD_TRACE 'Ya hizo USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED  
				-- y va a llamar USP_UPDATE_BUFFER_HISTORY  para ', @StartTimeExe
			END TRY
			BEGIN CATCH
				EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
					'DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR', @Language, '', '', '', 
					@MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR OUTPUT;
				
				SET @GoutResult = '1';
				SET @MsgTmpUSP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED = @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR;
				
				IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (-1,0,1))
				BEGIN
					IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (0,1))
					BEGIN
						CLOSE cursorLocations; 							
					END
					DEALLOCATE cursorLocations; 
				END	
			END CATCH
						
			-- USP_UPDATE_BUFFER_HISTORY:
			BEGIN TRY 
				DECLARE @CdLocation       VARCHAR(50);
				DECLARE @Sku              VARCHAR(50); 
				DECLARE @GoutMessageTMP   VARCHAR(MAX);
				SET NOCOUNT ON;
									
				EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
					'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL', @Language, '', '', '', 
					@MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL OUTPUT;
		
				SET @MsgTmpSP_UPDATE_BUFFER_HISTORY = @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_SUCESSFUL;
				
				EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
		             'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY_ERROR', @Language, '', '', '', 
					 @MSG_CALC_UPDATE_BUFFER_HISTORY_ERROR OUTPUT;
		
		        EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
		             'UPDATE_BUFFER_HISTORY_SUCCESS', @Language, '', '', '', 
					 @MSG_UPDATE_BUFFER_HISTORY_SUCCESS OUTPUT;

				-- ---------------------------------------------------------------------------
 		        -- Check for custom fields from location and buffer tables
 		        -- ---------------------------------------------------------------------------
 		        DECLARE @SqlTmp    VARCHAR(MAX) = ' SET ';
		        DECLARE @FromTmp   VARCHAR(MAX) = '';
		        DECLARE @ColsTmp   VARCHAR(MAX) = ' FROM ( SELECT ';
		        DECLARE @SqlUpdate NVARCHAR(MAX) = '';
		 
		        SELECT  @SqlTmp  += [C].[CDCOLUMN] + ' = [t].' + C.CDCOLUMN + ', ', 
			        	@ColsTmp += [C].[CDCOLUMN] + ', ',
			        	@FromTmp  = '         FROM ' + [T].[TABLE_NAME] + CHAR (13)
								   + '        WHERE CDLOCATION = @LinLocation ) [t] '
		          FROM [dbo].[TFSCM_COM_COL_TABLE] [C], [dbo].[TFSCM_COM_TABLES] [T]
		         WHERE [C].[CDTABLE]      = [T].CDTABLE
			       AND [C].[IS_SYSTEM]    = 'N'
			       AND [C].[SAVE_HISTORY] = 'Y'
			       AND [C].[CDTABLE]      = 5;
			   
		        IF (LTRIM(RTRIM(@SqlTmp)) = 'SET')
	        	BEGIN
			        SET @SqlUpdate  = ' ';
		        END
		        ELSE
		        BEGIN 
			        SET @SqlTmp  = LTRIM(RTRIM(@SqlTmp));
			        SET @ColsTmp = LTRIM(RTRIM(@ColsTmp));

			        SET @SqlTmp  = '   ' + SUBSTRING (@SqlTmp , 1, LEN(@SqlTmp)  - 1);
			        SET @ColsTmp = '  '  + SUBSTRING (@ColsTmp, 1, LEN(@ColsTmp) - 1);

			        SET @SqlTmp    += ' ' + CHAR(13) + @ColsTmp + ' ' + CHAR(13) + '  ' + @FromTmp;
		        	SET @SqlUpdate  = 'UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ' + CHAR(13);
			        SET @SqlUpdate += @SqlTmp + CHAR(13);
			        SET @SqlUpdate += ' WHERE [SKU ]             = @LinSku ' + CHAR(13)
								    + '   AND [LOCATION]         = @LinLocation  ' + CHAR(13)
								    + '   AND [UPDATE_MOVEMENTS] = @LinUpdateMovements ; ';
		        END 
				
		        DECLARE @SqlTmpBuff    VARCHAR(MAX) = ' SET ';
		        DECLARE @FromTmpBuff   VARCHAR(MAX) = '';
		        DECLARE @ColsTmpBuff   VARCHAR(MAX) = ' FROM ( SELECT ';
		        DECLARE @SqlUpdateBuff VARCHAR(MAX) = '';
		 
		        SELECT  @SqlTmpBuff  += C.CDCOLUMN + ' = [t].'+ C.CDCOLUMN + ', ',
				        @ColsTmpBuff += C.CDCOLUMN + ', ',
				        @FromTmpBuff  = '         FROM ' + T.TABLE_NAME + CHAR(13)
								      + '        WHERE [SKU]              = @LinSku ' + CHAR(13)
								      + '          AND [LOCATION]         = @LinLocation ' + CHAR(13)
								      + '          AND [UPDATE_MOVEMENTS] = @LinUpdateMovements ) [t] ' 		 
		        FROM [dbo].[TFSCM_COM_COL_TABLE] [C], [dbo].[TFSCM_COM_TABLES] [T]
		        WHERE C.IS_SYSTEM    = 'N' 
				  AND C.SAVE_HISTORY = 'Y'
				  AND C.CDTABLE      = T.CDTABLE
				  AND C.CDTABLE      = 11;		
		 
		        IF (LTRIM(RTRIM(@SqlTmpBuff)) = 'SET')
        		BEGIN
		        	SET @SqlTmpBuff  = ' ';
		        END
		        ELSE 
		        BEGIN
			        SET @SqlTmpBuff  = LTRIM(RTRIM(@SqlTmpBuff));
			        SET @ColsTmpBuff = LTRIM(RTRIM(@ColsTmpBuff));

			        SET @SqlTmpBuff  = '   ' + SUBSTRING(@SqlTmpBuff , 1, LEN(@SqlTmpBuff)  - 1);
			        SET @ColsTmpBuff = '  '  + SUBSTRING(@ColsTmpBuff, 1, LEN(@ColsTmpBuff) - 1);

			        SET @SqlTmpBuff    += ' ' + CHAR(13) + @ColsTmpBuff + ' ' + CHAR(13)+ '  '+ @FromTmpBuff;
			        SET @SqlUpdateBuff  = 'UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ' + CHAR(13);
			        SET @SqlUpdateBuff += @SqlTmpBuff  + CHAR(13);
			        SET @SqlUpdateBuff += ' WHERE [SKU]              = @LinSku ' + CHAR(13)
								        + '   AND [LOCATION]         = @LinLocation  ' + CHAR(13)
								        + '   AND [UPDATE_MOVEMENTS] = @LinUpdateMovements ; ';
		        END

		        IF (RTRIM(LTRIM(@SqlUpdate)) <> '')
				BEGIN
			        SET @SqlUpdate += CHAR(13);
				END
				
		        SET @SqlUpdate += @SqlUpdateBuff;
		
		        -- ---------------------------------------------------------------------------
 		        -- Check for custom fields which save history from location and buffer tables
 		        -- ---------------------------------------------------------------------------
        		DECLARE @SqlTmpH    VARCHAR(MAX) = ' SET ';
        		DECLARE @FromTmpH   VARCHAR(MAX) = '';
		        DECLARE @ColsTmpH   VARCHAR(MAX) = ' FROM ( SELECT ';
		        DECLARE @SqlUpdateH NVARCHAR(MAX) = '';
				 
		        SELECT  @SqlTmpH  += C.CDCOLUMN + ' = t.'+ C.CDCOLUMN + ', ',
				        @ColsTmpH += C.CDCOLUMN + ', ',
			        	@FromTmpH  = '         FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] ' + CHAR (13)
				                   + '        WHERE [SKU]              = @LinSku  ' + CHAR (13)
				                   + '			AND [LOCATION]		   = @LinLocation  ' + CHAR(13)
				                   + '			AND [UPDATE_MOVEMENTS] = @LinLastBufferUpdateDate ) t '
		        FROM TFSCM_COM_COL_TABLE C, TFSCM_COM_TABLES T
		        WHERE C.CDTABLE          = T.CDTABLE
			          AND C.IS_SYSTEM    = 'N' 
			          AND C.SAVE_HISTORY = 'Y'
			          AND C.CDTABLE      IN  (5,11);
			   
		        IF (LTRIM(RTRIM(@SqlTmpH)) = 'SET')
		        BEGIN
			        SET @SqlTmpH  = ' ';
        		END
		        ELSE 
		        BEGIN	
		          SET @SqlTmpH	 = LTRIM(RTRIM(@SqlTmpH));
		          SET @ColsTmpH = LTRIM(RTRIM(@ColsTmpH));
								 
		          SET @SqlTmpH	 = SUBSTRING(@SqlTmpH,  1, LEN(@SqlTmpH)  - 1);
		          SET @ColsTmpH = SUBSTRING(@ColsTmpH, 1, LEN(@ColsTmpH) - 1);
		          SET @SqlTmpH  += ' ' + CHAR(13) + @ColsTmpH + ' ' + CHAR(13) + '  ' + @FromTmpH;
	
		          SET @SqlUpdateH  = 'UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY] ' + CHAR(13);
			      SET @SqlUpdateH += @SqlTmpH  + CHAR(13);
			      SET @SqlUpdateH += ' WHERE [SKU]              = @LinSku ' + CHAR(13)
					      		   + '   AND [LOCATION]         = @LinLocation  ' + CHAR(13)
							       + '   AND [UPDATE_MOVEMENTS] = @LinUpdateMovements; ';
		        END																			
		        -- ---------------------------------------------------------------------------
																							
				DECLARE cursorLocations CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
				 SELECT DISTINCT value AS LOCATION   
				   FROM STRING_SPLIT(@GinLocations, @GinDelimiter);

				OPEN cursorLocations;
				FETCH NEXT FROM cursorLocations INTO @CdLocation;
				
				 --DECLARE @contar NUMERIC(17,0) = 0;
				WHILE (@@FETCH_STATUS = 0 )
				BEGIN
					--SET @contar	 = @contar + 1.0;					
					--SET @GoutMessageTMP = @GoutMessageTMP + ' USP_UPDATE_BUFFER_HISTORY ' + @MessageTmpAux;
					SET @StartTimeExe = GETDATE();
				
					DECLARE @Msg AS VARCHAR(1000);					 
					DECLARE @bufferDTO AS  BufferTblType;
					
					-- -----------------------------------------------------------------------
					-- Add data to the table variable.
					-- -----------------------------------------------------------------------
					INSERT INTO @bufferDTO 
						(  [SKU],                           [LOCATION],                      [UPDATE_MOVEMENTS],
						   [FAMILY],                        [ORIGIN_LOCATION],               [REPLENISHMENT_TIME],
						   [BUFFER],                        [TOTAL_INVENTORY_ON_SITE],       [TOTAL_INVENTORY_ON_TRANSIT],
						   [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION], [CDUNIT],
						   [MINIMUM_BUFFER],                [SECURITY_STOCK],                [MINIMUM_REPLENISHMENT],
						   [PACKAGING_UNIT],                [UNIT_PRICE],                    [TVC],
						   [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUSTMENTS],          [CONSUMPTION],
						   [NEGATIVE_ADJUSTMENTS],          [LOCATION_TYPE],                 [UNIT_THROUGHPUT],
						   [CREATION_DATE],                 [ALLOWED_OVERSTOCKING],          [EFFECTIVE_BUFFER],
						   [INVENTORY_ON_SITE],             [INVENTORY_ON_TRANSIT],          [INVENTORY_ON_PURCHASING],
						   [INVENTORY_ON_PRODUCTION],       [INVENTORY_ON_CHAIN],            [SITE_PRIORITY],
						   [SITE_PRIORITY_COLOR],           [NET_PRIORITY],                  [NET_PRIORITY_COLOR],
						   [TOTAL_CONSOLIDATED_INPUTS],     [TOTAL_CONSOLIDATED_OUTPUTS],    [DAYS_SINCE_LAST_OUT],
						   [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],             [WORST_INVENTORY_ON_SITE],
						   [BAA_OUT_CLASSIFICATION],        [LAST_TOTAL_INVENTORY_ON_SITE],  [NEXT_BUFFER_ANALYSIS],
						   [REPLENISHMENT_PROBLEM],         [PENDING_DEMAND],                [NET_INVENTORY],
						   [REPLENISHMENT_PRIORITY],        [EXCLUDED_OUTS],                 [REPLENISHMENT_FREQUENCY],
						   [DAILY_AVERAGE_CONSUMPTION])							
					SELECT [BUFFER].[SKU],                            [BUFFER].[LOCATION],                      [BUFFER].[UPDATE_MOVEMENTS],
						   [BUFFER].[FAMILY],                         [BUFFER].[ORIGIN_LOCATION],               [BUFFER].[REPLENISHMENT_TIME],
						   [BUFFER].[BUFFER],                         [BUFFER].[TOTAL_INVENTORY_ON_SITE],       [BUFFER].[TOTAL_INVENTORY_ON_TRANSIT],
						   [BUFFER].[TOTAL_INVENTORY_ON_PURCHASING],  [BUFFER].[TOTAL_INVENTORY_ON_PRODUCTION], [BUFFER].[CDUNIT],
						   [BUFFER].[MINIMUM_BUFFER],                 [BUFFER].[SECURITY_STOCK],                [BUFFER].[MINIMUM_REPLENISHMENT],
						   [BUFFER].[PACKAGING_UNIT],                 [BUFFER].[UNIT_PRICE],                    [BUFFER].[TVC],
						   [BUFFER].[CONSOLIDATED_REPLENISHMENT],     [BUFFER].[POSITIVE_ADJUSTMENTS],          [BUFFER].[CONSUMPTION],
						   [BUFFER].[NEGATIVE_ADJUSTMENTS],           [BUFFER].[LOCATION_TYPE],                 [BUFFER].[UNIT_THROUGHPUT],
						   [BUFFER].[CREATION_DATE],                  [BUFFER].[ALLOWED_OVERSTOCKING],          [BUFFER].[EFFECTIVE_BUFFER],
						   [BUFFER].[INVENTORY_ON_SITE],              [BUFFER].[INVENTORY_ON_TRANSIT],          [BUFFER].[INVENTORY_ON_PURCHASING],
						   [BUFFER].[INVENTORY_ON_PRODUCTION],        [BUFFER].[INVENTORY_ON_CHAIN],            [BUFFER].[SITE_PRIORITY],
						   [BUFFER].[SITE_PRIORITY_COLOR],            [BUFFER].[NET_PRIORITY],                  [BUFFER].[NET_PRIORITY_COLOR],
						   [BUFFER].[TOTAL_CONSOLIDATED_INPUTS],      [BUFFER].[TOTAL_CONSOLIDATED_OUTPUTS],    [BUFFER].[DAYS_SINCE_LAST_OUT],
						   [BUFFER].[LAST_TOTAL_OUTS_MAX_SUM],        [BUFFER].[PROTECTION_FACTOR],             [BUFFER].[WORST_INVENTORY_ON_SITE],
						   @BAA_OUT_CLASSIFICATION_NORMAL_BY_DEFAULT, [BUFFER].[LAST_INVENTORY_ON_SITE],        (SELECT MAX([HST].[UPDATE_MOVEMENTS])
																												 FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [HST]
																												WHERE [HST].[SKU]      = [BUFFER].[SKU]
																												  AND [HST].[LOCATION] = [BUFFER].[LOCATION]),
						   [BUFFER].[REPLENISHMENT_PROBLEM],          [BUFFER].[PENDING_DEMAND],                [BUFFER].[NET_INVENTORY],
						   [BUFFER].[REPLENISHMENT_PRIORITY],         [BUFFER].[EXCLUDED_OUTS],                 [BUFFER].[REPLENISHMENT_FREQUENCY],
						   [BUFFER].[DAILY_AVERAGE_CONSUMPTION]
					  FROM [dbo].[TFSCM_CLI_BUFFER] [BUFFER]
					 WHERE [BUFFER].[LOCATION] = @CdLocation 
					   AND [BUFFER].[INACTIVE] = 0
					   AND ((@GinManagementWay = 'F' AND [BUFFER].[UPDATE_MOVEMENTS] = @GinUpdateMovements)
						 OR (@GinManagementWay = 'A'));
					
					--SET @GoutMessageTMP =  ' -->   NUEVAMENTE <br>';					
					--SET @Msg = 'ahora si va a llamar USP_UPDATE_BUFFER_HISTORY  para ' + @CdLocation;
					--EXEC ADD_TRACE @Msg, @StartTimeExe		
		 			--SET @StartTimeExe = GETDATE()
					
					EXEC [dbo].[USP_UPDATE_BUFFER_HISTORY] @bufferDTO, 
														   @MSG_CALC_UPDATE_BUFFER_HISTORY_ERROR,
														   @MSG_UPDATE_BUFFER_HISTORY_SUCCESS,
														   @SqlUpdate,
														   @SqlUpdateH,												  
														   @ResultTmp     OUTPUT,
														   @MessageTmpAux OUTPUT;
									
					--SET @Msg = 'Ya ha pasado el USP_UPDATE_BUFFER_HISTORY  para ' + @CdLocation;
					--EXEC ADD_TRACE @Msg, @StartTimeExe	
		 
					IF @ResultTmp = '1' 
					BEGIN 
						SET @GoutResult = '1' 
						SET @MsgTmpSP_UPDATE_BUFFER_HISTORY = @MessageTmpAux;
					END
					DELETE FROM @bufferDTO;					
					FETCH NEXT FROM cursorLocations INTO @CdLocation;	
				END

				CLOSE cursorLocations;
				DEALLOCATE cursorLocations;
				
				-- ---------------------------------------------------------------------------
				-- OHLO 20181213: Since v4.10.0, mark records with atypical consumption,
				--                if they occur in the period between the Event Start
				--                Date and the Event End Date of any programmed buffer
				--                change, including the corresponding buffer in their 
				--                filters and marked with the 'Started' value in the  
				--                column Atypical Consumption Status. 
				-- ---------------------------------------------------------------------------
				DECLARE @EventsSQLQuery   NVARCHAR(MAX);
				DECLARE @MergeSQLQuery    NVARCHAR(MAX);
				DECLARE @Filter           VARCHAR(MAX),
						@EventStartDate   DATE,
						@EventEndDate     DATE;
				
				IF OBJECT_ID('tempdb..#StartedEventsTbl') IS NOT NULL 
					DROP TABLE #StartedEventsTbl;
				 
				SELECT [BUFHIS].[SKU],
					   [BUFHIS].[LOCATION],
					   [BUFHIS].[UPDATE_MOVEMENTS] [EVENT_START_DATE],
					   [BUFHIS].[UPDATE_MOVEMENTS] [EVENT_END_DATE]
				  INTO #StartedEventsTbl 
				  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY]	[BUFHIS]
				 WHERE 1 = 2;

				-- ---------------------------------------------------------------------------
				-- Get started (Atypical consumption status equals to 'S') events 
				-- ---------------------------------------------------------------------------
				DECLARE cursorStartedEvents CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR   	
				 SELECT [BC].[FILTER],
						[BC].[EVENT_STARTING_DATE],
						[BC].[EVENT_ENDING_DATE]
				   FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES] [BC]
				  WHERE [BC].[ATYPICAL_CONSUMPTION_STATUS] = 'S'
				  ORDER BY [BC].[EVENT_STARTING_DATE] ASC, [BC].[EVENT_ENDING_DATE] ASC, [BC].[FILTER] ASC;
				  
				OPEN cursorStartedEvents;				
				FETCH NEXT FROM cursorStartedEvents INTO @Filter, @EventStartDate, @EventEndDate;
					  
				WHILE (@@FETCH_STATUS = 0)
				BEGIN
					-- -----------------------------------------------------------------------
					-- Get buffers that match the event filter
					-- -----------------------------------------------------------------------
					SET @EventsSQLQuery  = N''
							+ 'SELECT [BUFFER].[SKU], [BUFFER].[LOCATION], ' + CHAR(13)
							+ '       @LinEventStartDate  EVENT_START_DATE, ' + CHAR(13)
							+ '       @LinEventEndDate    EVENT_END_DATE ' + CHAR(13)
							+ '  FROM [dbo].[TFSCM_CLI_BUFFER] [BUFFER] ' + CHAR(13)
							+ ' WHERE [BUFFER].[INACTIVE] = 0 ' + CHAR(13);
							
					IF (@Filter IS NOT NULL AND @Filter != '')
					BEGIN
						SET @EventsSQLQuery = @EventsSQLQuery + ' AND ' + @Filter;
					END	
					
					INSERT INTO #StartedEventsTbl ([SKU], [LOCATION], [EVENT_START_DATE], [EVENT_END_DATE])
					EXEC sp_executesql @EventsSQLQuery, 
									   N'@LinEventStartDate DATE, @LinEventEndDate DATE', 
									   @EventStartDate, @EventEndDate;
					
					FETCH NEXT FROM cursorStartedEvents INTO @Filter, @EventStartDate, @EventEndDate;
				END
				CLOSE      cursorStartedEvents;
				DEALLOCATE cursorStartedEvents;
				
				CREATE INDEX IDX_StartedEventsTbl ON #StartedEventsTbl ([SKU], [LOCATION], [EVENT_START_DATE], [EVENT_END_DATE]);
	
				-- ---------------------------------------------------------------------------
				-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
				-- ---------------------------------------------------------------------------
				-- Mark records with atypical consumption
				-- ---------------------------------------------------------------------------
				UPDATE [BUFHIS]
				   SET [BUFHIS].[BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_SCHEDULED
				  FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY] [BUFHIS]
				 INNER JOIN	#StartedEventsTbl [TMP]
					ON ([BUFHIS].[SKU]               = [TMP].[SKU]
					AND [BUFHIS].[LOCATION]          = [TMP].[LOCATION]
					AND [BUFHIS].[UPDATE_MOVEMENTS] >= [TMP].[EVENT_START_DATE]
					AND [BUFHIS].[UPDATE_MOVEMENTS] <= [TMP].[EVENT_END_DATE]);

			END TRY
			BEGIN CATCH 
				SET @GoutResult = '1';				
				SET @GoutMessageTMP = ISNULL(@GoutMessageTMP, '') 
								   + ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
								   + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
								   + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
								   + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS](H)')
								   + ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
								   + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
                           
				SET @MsgTmpSP_UPDATE_BUFFER_HISTORY = @MSG_DATA_EXCHANGE_BUFFERS_UNEXPECTED_ERROR 
													+ ' ERROR: ' + ISNULL(@GoutMessageTMP, '');
													
				IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (-1,0,1))
				BEGIN
					IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (0,1))
					BEGIN
						CLOSE cursorLocations; 							
					END
					DEALLOCATE cursorLocations; 
				END
				IF ((SELECT CURSOR_STATUS('global','cursorStartedEvents')) IN (-1,0,1))
				BEGIN
					IF ((SELECT CURSOR_STATUS('global','cursorStartedEvents')) IN (0,1))
					BEGIN
						CLOSE cursorStartedEvents;  		
					END
					DEALLOCATE cursorStartedEvents;  
				END
						
			END CATCH 
			
			EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
				'DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA', @Language, '', '', '', 
				@MSG_DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA OUTPUT;

			EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
				'DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY', @Language, '', '', '',
				@MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY OUTPUT;

			-- GENERAL MESSAGE
			SET @GoutMessage =  '<br>' 
				+'(' 
				+ @MSG_DEX_BUFFERS_SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDA + ': ' 
				+ @MsgTmpUSP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED + ', '
				+ @MSG_DEX_BUFFERS_SP_UPDATE_BUFFER_HISTORY +': ' + @MsgTmpSP_UPDATE_BUFFER_HISTORY 
				+ ')';
		END
		ELSE
		BEGIN
			EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
				'DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS', @Language, '', '', '', 
				@MSG_DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS OUTPUT;

			SET @GoutMessage = '<br>' + @MSG_DATA_EXCHANGE_BUFFERS_INTERF_WITH_UPDATE_MOVEMENTS + ''''':(' + ')';
		END
	END TRY
	
	BEGIN CATCH
		--PRINT	@Trace	
		SET @GoutResult = '1';
		SET @GoutMessage =  ''
				+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
				+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
				+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
				+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_LAST_BUFFER_DATA_EXCHANGE_ACTIONS]')
				+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
				+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (0,1))
			BEGIN
				CLOSE cursorLocations;  		
			END
			DEALLOCATE cursorLocations;  
		END		
		IF ((SELECT CURSOR_STATUS('global','cursorStartedEvents')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorStartedEvents')) IN (0,1))
			BEGIN
				CLOSE cursorStartedEvents;  		
			END
			DEALLOCATE cursorStartedEvents;  
		END
		
		--DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		--SET @ErMessage = ERROR_MESSAGE()
		--SET @ErSeverity = ERROR_SEVERITY()
		--SET @ErState = ERROR_STATE()		
		--RAISERROR (@ErMessage, @ErSeverity, @ErState)
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño 
-- Upgrade date: 24/01/2020
-- Description : * Fix the way Release Status and Release Problem were being updated
--               * Rename AFTHER_FINISHED_PRODUCTION_ORDERS_ACTIONS to 
--                 USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Modified    : Michal MokroÅ¡
-- Upgrade date: 09/01/2020
-- Description : Decreasing commit blocks to 10 records 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño 
-- Upgrade date: 24/12/2019
-- Description : Add columns Release Problem and Release Problem Date and their default 
--               values assignment 
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Julián Andrés González Vélez
-- Upgrade date: 04/21/2016 
-- Description : Set new field DATE_INSERTION
-- -------------------------------------------------------------------------------------------
-- Author      : Julián Andrés González Vélez
-- Upgrade date: 10/15/2015 
-- Description : Setting quarantine validations
-- -------------------------------------------------------------------------------------------
-- Author       : Julián Andrés González Vélez
-- Creation date: 11/28/2014 
-- Description  : Execute actions after finished production orders
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS] 
	/* Input Parameters */
	@vDATE_CALCULATION 	DATETIME,
	/* Output Parameters */
    @ovaResult 			VARCHAR(1) OUTPUT,
    @ovaMessage 		NVARCHAR(MAX) OUTPUT 
AS
DECLARE @vTrace 					NVARCHAR(MAX); 
DECLARE @ovaPriorityResul 			NUMERIC(10,2) ;
DECLARE @ovaYellowZoneStart 		NUMERIC(5,2);
DECLARE @ovaRedZoneStart 			NUMERIC(5,2);
DECLARE @skuBefore 					VARCHAR(50);
DECLARE @cdDestinationBefore 		VARCHAR(50);
DECLARE @sumProductionStock 		NUMERIC(38,5);
DECLARE @sumTofinishProductionStock NUMERIC(38,5);
DECLARE @vCOMMIT_COUNT 				NUMERIC(4) = 0;

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;  
		SET @ovaResult = '0';
		SET @ovaMessage = '';
				  
		SET @vTrace = 'getting the table name';
		
		SET @skuBefore = '';
		SET @cdDestinationBefore ='';
		
		DECLARE @DATE_SERVER_NO_TIME  DATE     = GETDATE(); 
		DECLARE @DATE_CALCULATION 	  DATETIME = GETDATE();
		
		-- ----------------------------------------------------------------------------------- 
		-- MESSAGES
		-- ----------------------------------------------------------------------------------- 
		DECLARE @vLanguage 						VARCHAR(2) = 'es';  
		DECLARE @vCodErrorResultMessages 		VARCHAR(1); 
		DECLARE @vMessageErrorResultMessages 	NVARCHAR(MAX); 
		DECLARE @vMSG_DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED AS NVARCHAR(MAX); 
		
		-- ----------------------------------------------------------------------------------- 
		-- CALCULATED FIELDS
		-- -----------------------------------------------------------------------------------		
		DECLARE @RECOMMENDED_RELEASE_DATE 		DATETIME;
		DECLARE @RELEASE_STATUS 				VARCHAR(1);
		DECLARE @PRIORITY_COLOR 				VARCHAR(50);
		DECLARE @MANAGED_ORDER 					BIT;
		DECLARE @NON_WORKING_DAYS 				NUMERIC(10,2);
		
		-- -----------------------------------------------------------------------------------  
		-- OHLO 20191224: Since v4.14.0, update new columns Release Problem and Release 
		--                Problem Date 
		-- -----------------------------------------------------------------------------------
		DECLARE @RELEASE_PROBLEM_OLD         	VARCHAR(10);
		DECLARE @RELEASE_PROBLEM_DATE_OLD    	DATETIME;
		DECLARE @RELEASE_PROBLEM            	VARCHAR(10);
		DECLARE @RELEASE_PROBLEM_DATE       	DATETIME = '1901-01-01';
		DECLARE @RELEASE_PROBLEM_BY_DEFAULT		VARCHAR(10);
		DECLARE @RELEASE_PROBLEM_NOT_ASSIGNED	VARCHAR(10); 		
		-- -----------------------------------------------------------------------------------  
		SELECT TOP(1) @RELEASE_PROBLEM_BY_DEFAULT = C.CDCAUSE 
		  FROM TFSCM_CLI_CAUSES C 
		 WHERE C.DSCAUSE   = 'release_problem_none_cause' 
		   AND C.IS_SYSTEM = 'Y'; 

		SELECT TOP(1) @RELEASE_PROBLEM_NOT_ASSIGNED = C.CDCAUSE 
		  FROM TFSCM_CLI_CAUSES C 
		 WHERE C.DSCAUSE   = 'release_problem_not_assigned_cause' 
		   AND C.IS_SYSTEM = 'Y'; 
		-- ----------------------------------------------------------------------------------- 
		
		SELECT @vLanguage = PARAM_VALUE  
		  FROM TFSCM_COM_PARAMS 
		 WHERE CDPARAM = 'DEFAULT_LANGUAGE';

		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED', @vLanguage, '', '', '', @vMSG_DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED OUTPUT;
				
		DECLARE @CDORDER 				VARCHAR(50),
				@CDORDER_TYPE 			VARCHAR(1),
				@PRIORITY 				NUMERIC(17,2),
				@PRIORITY_COLOR_OLD 	VARCHAR(50);
		DECLARE @SKU 					VARCHAR(50),
				@CDDESTINATION 			VARCHAR(50),
				@PENDING_AMOUNT 		NUMERIC(19,2),
				@CREATION_DATE 			DATETIME;
		DECLARE @PROMISED_DELIVERY_DATE DATETIME,
				@REAL_RELEASE_DATE 		DATETIME, 
				@LAST_COLOR_UPDATE 		DATETIME,
				@ORDER_MODIFY_DATE 		DATETIME, 
				@RECOMMENDED_RELEASE_DATE_OLD DATETIME;
		DECLARE @FINALIZATION_DATE 	 	DATETIME,
				@PRODUCTION_BUFFER 	 	NUMERIC(10,0), 
				@PROGRESS_PERCENTAGE 	NUMERIC(17,5),
				@TOUCH_TIME 		 	NUMERIC(17,5);
		DECLARE @EXCHANGES_IN_QUARANTINE NUMERIC(8,0), 
				@QUARANTINE_DATE 		DATETIME,
				@SHIPPING_TIME 	 		VARCHAR(5),
				@CDCALENDAR 	 		NUMERIC(4,0); 
		DECLARE @YELLOW_ZONE_START 		NUMERIC(5,2), 
				@RED_ZONE_START 		NUMERIC(5,2);
		
		DECLARE cCdOrderCursor CURSOR FAST_FORWARD FOR			
		 SELECT CPO.CDORDER, CPO.CDORDER_TYPE, CPO.SKU, CPO.CDDESTINATION, CPO.PENDING_AMOUNT, CPO.CREATION_DATE,
				CPO.PROMISED_DELIVERY_DATE, CPO.PRIORITY_COLOR, CPO.REAL_RELEASE_DATE, CPO.LAST_COLOR_UPDATE,
				CPO.LAST_COLOR_UPDATE, CPO.ORDER_MODIFY_DATE, CPO.RECOMMENDED_RELEASE_DATE, CPO.FINALIZATION_DATE,
				CPO.PRODUCTION_BUFFER, CPO.PROGRESS_PERCENTAGE, CPO.TOUCH_TIME, CPO.EXCHANGES_IN_QUARANTINE, 
				CPO.QUARANTINE_DATE, CC.SHIPPING_TIME, CC.CDCALENDAR, CPF.YELLOW_ZONE_START, CPF.RED_ZONE_START,
				CPO.RELEASE_PROBLEM, CPO.RELEASE_PROBLEM_DATE
		   FROM TFSCM_CLI_PRODUCTION_ORDERS CPO
		  INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = CPO.CDFAMILY)
		  INNER JOIN TFSCM_CLI_LOCATION CL           ON (CL.CDLOCATION = CPF.CDLOCATION)
		  INNER JOIN TFSCM_CLI_CALENDAR CC           ON (CC.CDCALENDAR = CL.CDCALENDAR)
		  WHERE (CPO.FINALIZATION_DATE IS NULL
			 OR CONVERT(DATETIME, CONVERT(VARCHAR, CPO.FINALIZATION_DATE, 103), 103) = CONVERT(DATETIME, CONVERT(VARCHAR, @vDATE_CALCULATION, 103), 103)) 
			AND CDPARENT_ORDER IS NULL 
		  ORDER BY CPO.SKU, CPO.CDDESTINATION, CPO.DATE_INSERTION 
		
		OPEN cCdOrderCursor;
		
		FETCH NEXT FROM cCdOrderCursor 
		 INTO @CDORDER, @CDORDER_TYPE, @SKU, @CDDESTINATION, @PENDING_AMOUNT, @CREATION_DATE, @PROMISED_DELIVERY_DATE,
			  @PRIORITY_COLOR_OLD, @REAL_RELEASE_DATE, @LAST_COLOR_UPDATE, @LAST_COLOR_UPDATE, @ORDER_MODIFY_DATE,
			  @RECOMMENDED_RELEASE_DATE_OLD, @FINALIZATION_DATE, @PRODUCTION_BUFFER, @PROGRESS_PERCENTAGE, @TOUCH_TIME,
			  @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE, @SHIPPING_TIME, @CDCALENDAR, @YELLOW_ZONE_START, @RED_ZONE_START,
			  @RELEASE_PROBLEM, @RELEASE_PROBLEM_DATE;
			  
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SET @RECOMMENDED_RELEASE_DATE = NULL;
			SET @MANAGED_ORDER = NULL;	
			SET @PRIORITY = NULL;
			
			IF (@ORDER_MODIFY_DATE < @DATE_SERVER_NO_TIME) 
			BEGIN 
				SET @DATE_CALCULATION = dbo.ADD_TIME_TO_DATE(@ORDER_MODIFY_DATE,@SHIPPING_TIME);
			END 
			ELSE IF (@ORDER_MODIFY_DATE = @DATE_SERVER_NO_TIME) 
			BEGIN 
				SET @DATE_CALCULATION = GETDATE();
			END 
			
			IF ((SELECT dbo.VALIDATE_NON_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR)) > 0) 
			BEGIN 
				SET @DATE_CALCULATION = dbo.GET_PREVIOUS_WORK_DAY(@DATE_CALCULATION, @CDCALENDAR);
			END 
			
			IF (@FINALIZATION_DATE IS NULL AND @EXCHANGES_IN_QUARANTINE = 0 AND @PROMISED_DELIVERY_DATE IS NOT NULL AND @CDORDER_TYPE != 'S') 
			BEGIN 	
				--PRINT 'BAJO PEDIDO '	
				SET @NON_WORKING_DAYS  = dbo.GET_CALCULATE_NON_WORKING_DAYS(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @CDCALENDAR);
				SET @PRIORITY          = dbo.GET_CALCULATE_PRIORITY(@PROMISED_DELIVERY_DATE, @DATE_CALCULATION, @PRODUCTION_BUFFER, @NON_WORKING_DAYS, @CDORDER_TYPE, @PROGRESS_PERCENTAGE, @TOUCH_TIME);
				SET @PRIORITY_COLOR    = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY, @CDORDER_TYPE, @YELLOW_ZONE_START, @RED_ZONE_START);
				SET @LAST_COLOR_UPDATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @ORDER_MODIFY_DATE, @CDORDER, 0);
				SET @MANAGED_ORDER     = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);

				-- Only the fiels related to order priority and color are included in this update because the other fields
				-- are calculated in the PRODUCTION_ORDERS (generated)
				--PRINT 'VA A ACTUALIZAR OP '+ @CDORDER+' CON PRIORIDAD '+CAST(@PRIORITY AS VARCHAR)
				UPDATE TFSCM_CLI_PRODUCTION_ORDERS
				   SET PRIORITY		     = @PRIORITY,
					   PRIORITY_COLOR	 = @PRIORITY_COLOR,
					   LAST_COLOR_UPDATE = @LAST_COLOR_UPDATE,
					   MANAGED_ORDER     = @MANAGED_ORDER
				 WHERE (CDORDER = @CDORDER OR CDPARENT_ORDER = @CDORDER)
				   AND (FINALIZATION_DATE IS NULL);
			END 
				
			-- STOCK TYPE ORDERS
			IF (@CDORDER_TYPE = 'S' 
			AND (CONVERT(DATETIME,CONVERT(VARCHAR,@FINALIZATION_DATE, 103),103) = CONVERT(DATETIME,CONVERT(VARCHAR,@vDATE_CALCULATION, 103),103)
			 OR (@FINALIZATION_DATE IS NULL AND @EXCHANGES_IN_QUARANTINE = 0)))
			BEGIN 		
				--PRINT 'ES INVENTARIO '+ @CDORDER+' CON PRIORIDAD '+CAST(@PRIORITY AS VARCHAR)	
				IF (@SKU != @skuBefore OR @CDDESTINATION != @cdDestinationBefore)
				BEGIN
					SET @sumProductionStock = 0;
					SET @sumTofinishProductionStock = 0;
				END
				IF (@sumProductionStock IS NULL)
				BEGIN
					SET @sumProductionStock = 0;
				END 
				
				IF (@sumTofinishProductionStock IS NULL)
				BEGIN
					SET @sumTofinishProductionStock = 0;
				END						
				
				IF (@FINALIZATION_DATE IS NOT NULL)
				BEGIN
					EXEC GET_CALCULATE_STOCK_PO_PRIORITY @CDORDER_TYPE, @SKU, @CDDESTINATION, @sumTofinishProductionStock, @PROGRESS_PERCENTAGE, @TOUCH_TIME, @PRODUCTION_BUFFER, @ovaPriorityResul OUTPUT, @ovaYellowZoneStart OUTPUT, @ovaRedZoneStart OUTPUT;

					SET @PRIORITY       = @ovaPriorityResul;
					SET @PRIORITY_COLOR = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY,@CDORDER_TYPE,@ovaYellowZoneStart,@ovaRedZoneStart);

					IF (@PRIORITY IS NOT NULL AND @PRIORITY>0)
					BEGIN
						SET @RECOMMENDED_RELEASE_DATE = dbo.GET_CALCULATE_RECOMMENDED_RELEASE_DATE(@PROMISED_DELIVERY_DATE, NULL, NULL, @CDORDER_TYPE,@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @RECOMMENDED_RELEASE_DATE_OLD, @vDATE_CALCULATION);
					END
					
					SET @RELEASE_STATUS    = dbo.GET_CALCULATE_RELEASE_STATUS(@REAL_RELEASE_DATE, @RECOMMENDED_RELEASE_DATE, @ORDER_MODIFY_DATE);
					SET @LAST_COLOR_UPDATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @ORDER_MODIFY_DATE, @CDORDER, 0);
					SET @MANAGED_ORDER     = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);
				
					SET @skuBefore           = @SKU;
					SET @cdDestinationBefore = @CDDESTINATION;					
					--PRINT 'ES INVENTARIO @FINALIZATION_DATE IS NOT NULL '+ @CDORDER+' CON PRIORIDAD '+CAST(@PRIORITY AS VARCHAR)							
				END
				ELSE
				BEGIN															
					EXEC GET_CALCULATE_STOCK_PO_PRIORITY @CDORDER_TYPE, @SKU, @CDDESTINATION, @sumProductionStock, @PROGRESS_PERCENTAGE, @TOUCH_TIME, @PRODUCTION_BUFFER, @ovaPriorityResul OUTPUT, @ovaYellowZoneStart OUTPUT, @ovaRedZoneStart OUTPUT;
					
					SET @PRIORITY       = @ovaPriorityResul;
					SET @PRIORITY_COLOR = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY, @CDORDER_TYPE, @ovaYellowZoneStart, @ovaRedZoneStart);
					
					IF (@PRIORITY IS NOT NULL AND @PRIORITY > 0)
					BEGIN
						SET @RECOMMENDED_RELEASE_DATE = dbo.GET_CALCULATE_RECOMMENDED_RELEASE_DATE(@PROMISED_DELIVERY_DATE, NULL, NULL, @CDORDER_TYPE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @RECOMMENDED_RELEASE_DATE_OLD, @vDATE_CALCULATION);
					END						
					
					SET @RELEASE_STATUS    = dbo.GET_CALCULATE_RELEASE_STATUS(@REAL_RELEASE_DATE, @RECOMMENDED_RELEASE_DATE, @ORDER_MODIFY_DATE);
					SET @LAST_COLOR_UPDATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE, @PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @ORDER_MODIFY_DATE, @CDORDER, 0);
					SET @MANAGED_ORDER     = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @PRIORITY_COLOR, @CDORDER);
				
					SET @skuBefore           = @SKU;
					SET @cdDestinationBefore = @CDDESTINATION;
					
					/* Only when an order is open is correct adding pending amount into	@sumProductionStock*/										
					SET @sumProductionStock = @sumProductionStock + @PENDING_AMOUNT;
					--PRINT 'ES INVENTARIO @FINALIZATION_DATE IS OPEN '+ @CDORDER+' CON PRIORIDAD '+CAST(@PRIORITY AS VARCHAR)						
				END
			
				-- ---------------------------------------------------------------------------  
				-- OHLO 20191224: Since v4.14.0, update new columns Release Problem and Release 
				--                Problem Date  
				-- ---------------------------------------------------------------------------
				-- When release status is equal to Early or Late then set both Release Problem 
				-- and Release Problem Date columns 
				-- --------------------------------------------------------------------------- 
				IF ((@FINALIZATION_DATE IS NULL OR @FINALIZATION_DATE = '1901-01-01') 
				AND (@RELEASE_PROBLEM IS NULL OR @RELEASE_PROBLEM = @RELEASE_PROBLEM_BY_DEFAULT) 
				AND (@RELEASE_STATUS IN ('E', 'O')))
				BEGIN  
					SET @RELEASE_PROBLEM      = @RELEASE_PROBLEM_NOT_ASSIGNED; 
					SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; 
				END  

				IF (@REAL_RELEASE_DATE IS NOT NULL
				AND @RELEASE_PROBLEM_DATE <> @REAL_RELEASE_DATE 
				AND @RELEASE_PROBLEM_DATE <> '1901-01-01')  
				BEGIN  
					SET @RELEASE_PROBLEM_DATE = @REAL_RELEASE_DATE; 
				END  
				-- ---------------------------------------------------------------------------
			
				/* If an order is finished (or it isn't) adding pending amount into sumTofinishProductionStock is correct*/
				SET @sumTofinishProductionStock = @sumTofinishProductionStock + @PENDING_AMOUNT;				
				--PRINT 'VA A ACTUALIZAR OCs '+' CON PRIORIDAD '+CAST(@PRIORITY AS VARCHAR)
				
				-- ---------------------------------------------------------------------------
				-- OHLO 20191224: Since v4.15.0, Release Status column for Child orders will 
				--                not be updated with Parent Orders' Release Status.
				--  			  But also recalculate the Release Status because Recommended
				-- 				  Release Date value possibly have changed. And, since Release
				--				  Problem and Release Problem Date depend on Release Status,
				--				  it is necessary to recalculate them too.
				-- ---------------------------------------------------------------------------
				UPDATE TFSCM_CLI_PRODUCTION_ORDERS
				   SET PRIORITY		            = @PRIORITY,
					   PRIORITY_COLOR	        = @PRIORITY_COLOR,
					   RECOMMENDED_RELEASE_DATE = @RECOMMENDED_RELEASE_DATE,
					   LAST_COLOR_UPDATE        = @LAST_COLOR_UPDATE,
					   MANAGED_ORDER            = @MANAGED_ORDER,
					   RELEASE_PROBLEM_DATE     = (CASE WHEN (CDPARENT_ORDER = @CDORDER) THEN
												   	   (CASE WHEN ((RELEASE_PROBLEM IS NULL OR RELEASE_PROBLEM = @RELEASE_PROBLEM_BY_DEFAULT) 
													     AND (dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, @RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE) IN ('E', 'O'))) THEN
													        REAL_RELEASE_DATE
													    ELSE 
														    (CASE WHEN (RELEASE_PROBLEM_DATE IS NULL) THEN 
																'1901-01-01'
															 ELSE
																RELEASE_PROBLEM_DATE
															 END)
													    END)
												   ELSE
												   	   (CASE WHEN (@RELEASE_PROBLEM_DATE IS NULL) THEN 
															'1901-01-01'
														ELSE
															@RELEASE_PROBLEM_DATE
														END)
												   END),
					   RELEASE_PROBLEM			= (CASE WHEN (CDPARENT_ORDER = @CDORDER) THEN
												       (CASE WHEN ((RELEASE_PROBLEM IS NULL OR RELEASE_PROBLEM = @RELEASE_PROBLEM_BY_DEFAULT) 
													     AND (dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, @RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE) IN ('E', 'O'))) THEN
													        @RELEASE_PROBLEM_NOT_ASSIGNED
													    ELSE 
															(CASE WHEN (RELEASE_PROBLEM IS NULL) THEN 
																@RELEASE_PROBLEM_BY_DEFAULT
															 ELSE
																RELEASE_PROBLEM
															 END)
													    END)
												   ELSE
													   (CASE WHEN (@RELEASE_PROBLEM IS NULL) THEN 
															@RELEASE_PROBLEM_BY_DEFAULT
														ELSE
															@RELEASE_PROBLEM
														END)
												   END),
					   RELEASE_STATUS	 		= (CASE WHEN (CDPARENT_ORDER = @CDORDER) THEN
												   	   dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, @RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE)
												   ELSE
												   	   @RELEASE_STATUS
												   END)
				 WHERE (CDORDER = @CDORDER OR CDPARENT_ORDER = @CDORDER)
				   AND (FINALIZATION_DATE IS NULL);
			END
			ELSE IF (@CDORDER_TYPE = 'O')
			BEGIN
				-- ---------------------------------------------------------------------------
				-- OHLO 20191224: Since v4.14.0, if this is a Parent Order with type "Order",
				--                update child Release Status column, because Recommended 
				-- 				  Release Date value possibly have changed. And, since Release
				--				  Problem and Release Problem Date depend on Release Status,
				--				  it is necessary to recalculate them too.
				-- ---------------------------------------------------------------------------
				UPDATE TFSCM_CLI_PRODUCTION_ORDERS
				   SET RELEASE_PROBLEM_DATE = (CASE WHEN ((RELEASE_PROBLEM IS NULL OR RELEASE_PROBLEM = @RELEASE_PROBLEM_BY_DEFAULT) 
												AND (dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE) IN ('E', 'O'))) THEN
													REAL_RELEASE_DATE
												ELSE 
													(CASE WHEN (RELEASE_PROBLEM_DATE IS NULL) THEN 
														'1901-01-01'
													 ELSE
														RELEASE_PROBLEM_DATE
													 END)
												END),
					   RELEASE_PROBLEM	    = (CASE WHEN ((RELEASE_PROBLEM IS NULL OR RELEASE_PROBLEM = @RELEASE_PROBLEM_BY_DEFAULT) 
												AND (dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE) IN ('E', 'O'))) THEN
													@RELEASE_PROBLEM_NOT_ASSIGNED
											   ELSE 
												   (CASE WHEN (RELEASE_PROBLEM IS NULL) THEN 
														@RELEASE_PROBLEM_BY_DEFAULT
													ELSE
														RELEASE_PROBLEM
													END)
											   END),
					   RELEASE_STATUS       = dbo.GET_CALCULATE_RELEASE_STATUS(REAL_RELEASE_DATE, RECOMMENDED_RELEASE_DATE, ORDER_MODIFY_DATE)					   
				 WHERE (CDORDER = @CDORDER OR CDPARENT_ORDER = @CDORDER)
				   AND (FINALIZATION_DATE IS NULL);
			END
					
			SET @vCOMMIT_COUNT = @vCOMMIT_COUNT + 1;
			IF(@vCOMMIT_COUNT = 10)
			BEGIN 
				COMMIT;
				SET @vCOMMIT_COUNT = 0;
			END

			FETCH NEXT FROM cCdOrderCursor 
			 INTO @CDORDER, @CDORDER_TYPE, @SKU, @CDDESTINATION, @PENDING_AMOUNT, @CREATION_DATE, @PROMISED_DELIVERY_DATE,
				  @PRIORITY_COLOR_OLD, @REAL_RELEASE_DATE, @LAST_COLOR_UPDATE, @LAST_COLOR_UPDATE, @ORDER_MODIFY_DATE,
				  @RECOMMENDED_RELEASE_DATE_OLD, @FINALIZATION_DATE, @PRODUCTION_BUFFER, @PROGRESS_PERCENTAGE, @TOUCH_TIME,
				  @EXCHANGES_IN_QUARANTINE, @QUARANTINE_DATE, @SHIPPING_TIME, @CDCALENDAR, @YELLOW_ZONE_START, @RED_ZONE_START,
				  @RELEASE_PROBLEM, @RELEASE_PROBLEM_DATE;
		END

		CLOSE cCdOrderCursor;
		DEALLOCATE cCdOrderCursor;						  

		SET @ovaMessage =  '<br>'+'(' + @vMSG_DATA_EXCHANGE_STOCK_PRIORITY_SUCESSFUL_CALCULATED+ ')';
		SET @vTrace     = 'End of USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS';
	END TRY
	BEGIN CATCH
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = ''	
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_LAST_PRODUCTION_ORDERS_DATA_EXCHANGE_ACTIONS]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
				
		IF ((SELECT CURSOR_STATUS('global','cCdOrderCursor')) = -1)
		BEGIN
			DEALLOCATE cCdOrderCursor;
		END		
		IF ((SELECT CURSOR_STATUS('global','cCdOrderCursor')) > -1)
		BEGIN
			CLOSE cCdOrderCursor;
			DEALLOCATE cCdOrderCursor;
		END
		
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage  = ERROR_MESSAGE();
		SET @ErSeverity = ERROR_SEVERITY();
		SET @ErState    = ERROR_STATE();
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState)		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 04/10/2020
-- Description : Refactor user-defined table types to temporary tables
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/09/2020
-- Description : Fix Optimized Replenishment calculation by assigning any remaining quantity
--               to the origin buffer.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 26/08/2020
-- Description : Add Replenishment Target and Pending Demand columns 
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londono
-- Upgrade date: 18/10/2018
-- Description : Use OS for @CreateFromAction when the Optimizer calls SP
--               GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY
-- Version     : 4.9.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 05/01/2018
-- Description : When @TargetQuantity <= @AvailableQuantity the optimized replenishment is 
--               assigned but have to be saved as well. 
-- Version     : 4.8.1
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 27/09/2017
-- Description  : Optimize suggestions automatically.
-- Version      : 4.8.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY]
	/* Input Parameters: NONE */  
	/* Output Parameters */
	@GoutOptimizedBuffers  INT           OUTPUT,
  	@GoutResult            VARCHAR(1)    OUTPUT,
    @GoutMessage           NVARCHAR(MAX) OUTPUT
AS
	DECLARE @Sku                   VARCHAR(50);
	DECLARE @Location              VARCHAR(50);
	DECLARE @InventoryOnSite       NUMERIC(17,5);
	DECLARE @ReplenishmentPriority INT;
	-- Can Exeed Targer : true for Yes, false for No 
	DECLARE @CanExceedTarget       BIT;
	-- Distribution type can be 'EXCESS' or 'SHORTAGE'
	DECLARE @DistributionType      VARCHAR(10);
	DECLARE @AvailableQuantity	   NUMERIC(17,5);
	DECLARE @QuantityDistributed   NUMERIC(17,5);
	DECLARE @TargetQuantity	   	   NUMERIC(17,5);
	DECLARE @LinOptimizationMode   VARCHAR(1) = 'A';	 
	DECLARE @LinApprovedByUser 	   VARCHAR(10) = 'FOCUSSSCM';
	-- JEBE 20200825: Since v5.2.0, Add Available Inventory column to be used to establish Available Quantity
	DECLARE @AvailableInventory	   NUMERIC(15,5); 	

	/* Local Output Parameters */
	DECLARE @LoutResult            VARCHAR(1)    = '0';
	DECLARE @LoutMessage           NVARCHAR(MAX) = '';	
BEGIN
	--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY main procedure', 'START'
	BEGIN TRY
		SET NOCOUNT ON;  
		
		-- Setting messages
		DECLARE @Language 					AS VARCHAR(2) = 'en';  
		DECLARE @UseAvailableInventory 		AS VARCHAR(10) = 'N'; 
		DECLARE @CodErrorResultMessages 	AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages AS NVARCHAR(MAX);
		DECLARE @MsgOptimizeSuggestionsAutomaticallyError AS NVARCHAR(MAX);  
		DECLARE @MsgOptimizedBuffersTitle 	AS NVARCHAR(MAX);
		
		-- Get default language	 
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P] 
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE'; 
			
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'OPTIMIZE_SUGGESTIONS_AUTOMATICALLY_ERROR', @Language, '', '', '', 
			@MsgOptimizeSuggestionsAutomaticallyError OUTPUT;
 		
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'OPTIMIZED_BUFFERS_TITLE', @Language, '', '', '', 
			@MsgOptimizedBuffersTitle OUTPUT;
		
		-- -----------------------------------------------------------------------------------
		-- JEBE 20200825: Since v5.2.0, Add the param Use Inventory on Hand for Automatic 
		-- 				  Replenishment Optimizations.
		-- -----------------------------------------------------------------------------------
		SELECT @UseAvailableInventory = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 9 
		   AND [P].[CDPARAM]     = 'USE_INVENTORY_ON_HAND_AUTO_REPLENISH_OPTIMIZATIONS'; 	
		
		-- -----------------------------------------------------------------------------------
		-- Create OriginBuffersList temporary table
		-- -----------------------------------------------------------------------------------
		IF OBJECT_ID('tempdb..#OriginBuffersList') IS NOT NULL 
          DROP TABLE #OriginBuffersList;

		SELECT SKU,                   LOCATION,                  ORIGIN_LOCATION,            BUFFER,
			   SECURITY_STOCK,        MINIMUM_REPLENISHMENT,     PACKAGING_UNIT,             INVENTORY_ON_SITE,
			   NET_INVENTORY,         EFFECTIVE_BUFFER,          SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
			   1 AS IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,   CAST(1 AS NUMERIC(17,5)) AS CONVERSION_FACTOR,     SITE_PRIORITY,
			   NET_PRIORITY,          MISSING_BUFFER_INVENTORY,  APPROVED_BUFFER_REPLENISH,  SUGGESTED_BUFFER_REPLENISH FACTORIZED_SUGGESTED_REPLENISHMENT,
			   FAMILY,                LOCATION_TYPE,             CDUNIT,                     AVAILABLE_INVENTORY,
			   PENDING_DEMAND, 		  CAST(0 AS NUMERIC(17,5)) PROJECTED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) FACTORIZED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) PROJECTED_PRIORITY,      
			   MANAGED,				  (BUFFER + SECURITY_STOCK + PENDING_DEMAND) AS REPLENISHMENT_TARGET 			   
		  INTO #OriginBuffersList
		  FROM [dbo].[TFSCM_CLI_BUFFER]
		 WHERE 1 = 2;
		
		-- Get origin buffer to be optimized list 
		DELETE FROM #OriginBuffersList;
		INSERT INTO #OriginBuffersList 
			  (SKU,              LOCATION,                 ORIGIN_LOCATION,            BUFFER,
		       SECURITY_STOCK,   MINIMUM_REPLENISHMENT,    PACKAGING_UNIT,             INVENTORY_ON_SITE,
		       NET_INVENTORY,    EFFECTIVE_BUFFER,         SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
		       IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,  CONVERSION_FACTOR,          SITE_PRIORITY,
		       NET_PRIORITY,     MISSING_BUFFER_INVENTORY, APPROVED_BUFFER_REPLENISH,  FACTORIZED_SUGGESTED_REPLENISHMENT,
		       FAMILY,           LOCATION_TYPE,            CDUNIT,                     AVAILABLE_INVENTORY,
			   PENDING_DEMAND,   PROJECTED_REPLENISHMENT,  FACTORIZED_REPLENISHMENT,   PROJECTED_PRIORITY,
			   MANAGED,			 REPLENISHMENT_TARGET)
		SELECT SKU,                   LOCATION,                     ORIGIN_LOCATION,            BUFFER,
			   SECURITY_STOCK,        MINIMUM_REPLENISHMENT,        PACKAGING_UNIT,             INVENTORY_ON_SITE,
			   NET_INVENTORY,         EFFECTIVE_BUFFER,             SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
			   1 AS IS_ORIGIN_BUFFER, 0 AS OPTIMIZED_REPLENISHMENT, 1 AS CONVERSION_FACTOR,     SITE_PRIORITY,
			   NET_PRIORITY,          MISSING_BUFFER_INVENTORY,     APPROVED_BUFFER_REPLENISH,  SUGGESTED_BUFFER_REPLENISH,
			   FAMILY,                LOCATION_TYPE,                CDUNIT,                     AVAILABLE_INVENTORY,
			   PENDING_DEMAND, 		  0 PROJECTED_REPLENISHMENT,    0 FACTORIZED_REPLENISHMENT, -9999999999 PROJECTED_PRIORITY,
			   MANAGED,				  (BUFFER + SECURITY_STOCK + PENDING_DEMAND) AS REPLENISHMENT_TARGET 
		  FROM [dbo].[TFSCM_CLI_BUFFER] BUFFER
		 WHERE INACTIVE = 0
		   AND EXISTS (SELECT 1
						 FROM [dbo].[TFSCM_CLI_BUFFER] O 
						WHERE O.SKU             = BUFFER.SKU 
						  AND O.ORIGIN_LOCATION = BUFFER.LOCATION)
		   AND BUFFER.INVENTORY_ON_SITE > 0; 

		CREATE INDEX IDX_OriginBuffersList ON #OriginBuffersList (SKU, LOCATION);
		
		--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY outermost cursor', 'START'		  
		SET @GoutMessage = @MsgOptimizedBuffersTitle;
		
		DECLARE originCursor CURSOR FAST_FORWARD FOR 
		 SELECT SKU, LOCATION, INVENTORY_ON_SITE, AVAILABLE_INVENTORY
		   FROM #OriginBuffersList;

		OPEN originCursor;
		FETCH NEXT FROM originCursor INTO @Sku, @Location, @InventoryOnSite, @AvailableInventory;
				
		-- For each Origin Buffer in the list
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			-- ------------------------------------------------------------------------------- 
			-- JEBE 20200825: Since v5.2.0, check the parameter Use Inventory on Hand for  
			-- 				  Automatic Replenishment Optimizations, in order to set the 
			--				  proper Available Quantity
			-- -------------------------------------------------------------------------------
			SET @AvailableQuantity    = CASE 
										WHEN (@UseAvailableInventory = 'Y') THEN 
											@AvailableInventory
										ELSE  
											@InventoryOnSite
										END;

			IF (@AvailableQuantity > 0)
			BEGIN	
				SET @QuantityDistributed  = 0;
				SET @GoutOptimizedBuffers = 0;
				 
				-- -------------------------------------------------------------------------------
				-- Create DestinationBuffersList temporary table
				-- -------------------------------------------------------------------------------
				IF OBJECT_ID('tempdb..#DestinationBuffersList') IS NOT NULL 
				  DROP TABLE #DestinationBuffersList;

				SELECT SKU,                   LOCATION,                  ORIGIN_LOCATION,            BUFFER,
					   SECURITY_STOCK,        MINIMUM_REPLENISHMENT,     PACKAGING_UNIT,             INVENTORY_ON_SITE,
					   NET_INVENTORY,         EFFECTIVE_BUFFER,          SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
					   1 AS IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,   CAST(1 AS NUMERIC(17,5)) AS CONVERSION_FACTOR,     SITE_PRIORITY,
					   NET_PRIORITY,          MISSING_BUFFER_INVENTORY,  APPROVED_BUFFER_REPLENISH,  SUGGESTED_BUFFER_REPLENISH FACTORIZED_SUGGESTED_REPLENISHMENT,
					   FAMILY,                LOCATION_TYPE,             CDUNIT,                     AVAILABLE_INVENTORY,
					   PENDING_DEMAND, 	      CAST(0 AS NUMERIC(17,5)) PROJECTED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) FACTORIZED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) PROJECTED_PRIORITY, 	     
					   MANAGED,				  (BUFFER + SECURITY_STOCK + PENDING_DEMAND) AS REPLENISHMENT_TARGET 			   
				  INTO #DestinationBuffersList
				  FROM [dbo].[TFSCM_CLI_BUFFER]
				 WHERE 1 = 2; 
				 
				INSERT INTO #DestinationBuffersList 
					(SKU,              LOCATION,                 ORIGIN_LOCATION,            BUFFER,
					 SECURITY_STOCK,   MINIMUM_REPLENISHMENT,    PACKAGING_UNIT,             INVENTORY_ON_SITE,
					 NET_INVENTORY,    EFFECTIVE_BUFFER,         SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
					 IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,  CONVERSION_FACTOR,          SITE_PRIORITY,
					 NET_PRIORITY,     MISSING_BUFFER_INVENTORY, APPROVED_BUFFER_REPLENISH,  FACTORIZED_SUGGESTED_REPLENISHMENT,
					 FAMILY,           LOCATION_TYPE,            CDUNIT,                     AVAILABLE_INVENTORY,
					 PENDING_DEMAND,   PROJECTED_REPLENISHMENT,  FACTORIZED_REPLENISHMENT,   PROJECTED_PRIORITY,
					 REPLENISHMENT_TARGET)
				SELECT SKU,                   LOCATION,                     ORIGIN_LOCATION,            BUFFER,
					   SECURITY_STOCK,        MINIMUM_REPLENISHMENT,        PACKAGING_UNIT,             INVENTORY_ON_SITE,
					   NET_INVENTORY,         EFFECTIVE_BUFFER,             SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
					   0 AS IS_ORIGIN_BUFFER, 0 AS OPTIMIZED_REPLENISHMENT, 1 AS CONVERSION_FACTOR,     SITE_PRIORITY,
					   NET_PRIORITY,          MISSING_BUFFER_INVENTORY,     APPROVED_BUFFER_REPLENISH,  SUGGESTED_BUFFER_REPLENISH,
					   FAMILY,                LOCATION_TYPE,                CDUNIT,                     AVAILABLE_INVENTORY,
					   PENDING_DEMAND,        0 PROJECTED_REPLENISHMENT,    0 FACTORIZED_REPLENISHMENT, -9999999999 PROJECTED_PRIORITY,
					   (BUFFER + SECURITY_STOCK + PENDING_DEMAND) AS REPLENISHMENT_TARGET
				  FROM [dbo].[TFSCM_CLI_BUFFER] B
				 WHERE REPLENISHMENT_ACTION IN ('ANALYZE', 'REJECT')
				   AND SKU                   = @Sku
				   AND ORIGIN_LOCATION       = @Location
				 UNION 
				SELECT SKU,              LOCATION,                  ORIGIN_LOCATION,            BUFFER,
					   SECURITY_STOCK,   MINIMUM_REPLENISHMENT,     PACKAGING_UNIT,             INVENTORY_ON_SITE,
					   NET_INVENTORY,    EFFECTIVE_BUFFER,          SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
					   IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,   CONVERSION_FACTOR,          SITE_PRIORITY,
					   NET_PRIORITY,     MISSING_BUFFER_INVENTORY,  APPROVED_BUFFER_REPLENISH,  FACTORIZED_SUGGESTED_REPLENISHMENT,
					   FAMILY,           LOCATION_TYPE,             CDUNIT,                     AVAILABLE_INVENTORY,
					   PENDING_DEMAND,   0 PROJECTED_REPLENISHMENT, 0 FACTORIZED_REPLENISHMENT, -9999999999 PROJECTED_PRIORITY,
					   REPLENISHMENT_TARGET
				  FROM #OriginBuffersList  
				 WHERE SKU      = @Sku
				   AND LOCATION = @Location;

				CREATE INDEX IDX_DestinationBuffersList ON #DestinationBuffersList (REPLENISHMENT_PRIORITY, SKU, LOCATION);

				--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY priority cursor', 'START'
				DECLARE prioritiesCursor CURSOR FAST_FORWARD FOR 
				 SELECT DISTINCT REPLENISHMENT_PRIORITY
				   FROM #DestinationBuffersList
				  ORDER BY REPLENISHMENT_PRIORITY ASC;

				OPEN prioritiesCursor; 
				FETCH NEXT FROM prioritiesCursor INTO @ReplenishmentPriority;

				-- For each Priority in the list
				WHILE (@@FETCH_STATUS = 0)
				BEGIN
					/* Local Output Parameters */
					SET @LoutResult  = '0';
					SET @LoutMessage = '';
					
					IF (@AvailableQuantity > 0)
					BEGIN				
						-- If origin buffer is within the list
						IF EXISTS (SELECT 1 FROM #DestinationBuffersList 
									WHERE REPLENISHMENT_PRIORITY = @ReplenishmentPriority AND SKU = @Sku AND LOCATION = @Location)
						BEGIN
							SET @DistributionType = 'SHORTAGE';
							SET @CanExceedTarget  = 0;
							
							EXEC [dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY] @ReplenishmentPriority, @DistributionType,  
								@CanExceedTarget, @LinOptimizationMode, @LinApprovedByUser,
								@AvailableQuantity OUTPUT, @QuantityDistributed OUTPUT, 
								@GoutOptimizedBuffers OUTPUT, @LoutResult OUTPUT, @LoutMessage OUTPUT;

							IF (@LoutResult = 1) 
							BEGIN 
								-- (@ErMessage, @ErSeverity, @ErState)
								RAISERROR (@LoutMessage, 11, 1);
							END						
						END
						ELSE 
						BEGIN
							/* SET @TargetQuantity = [dbo].[UFN_GET_TARGET_QUANTITY] (@PrioritizedDestinationsList); */						
							SELECT @TargetQuantity = SUM(FACTORIZED_SUGGESTED_REPLENISHMENT) 
							  FROM #DestinationBuffersList
							 WHERE (REPLENISHMENT_PRIORITY = @ReplenishmentPriority); 
						 
							IF (@TargetQuantity > 0)
							BEGIN
								IF (@TargetQuantity <= @AvailableQuantity)
								BEGIN
									DECLARE @ThisSku                 VARCHAR(50);
									DECLARE @ThisLocation            VARCHAR(50)
									DECLARE @SuggestedReplenishment	 NUMERIC(17,5);
									DECLARE @FactorizedReplenishment NUMERIC(17,5);
									
									DECLARE bufferListCursor CURSOR FAST_FORWARD FOR 
									 SELECT SKU, LOCATION, SUGGESTED_BUFFER_REPLENISH, FACTORIZED_SUGGESTED_REPLENISHMENT
									   FROM #DestinationBuffersList
									  WHERE (REPLENISHMENT_PRIORITY = @ReplenishmentPriority);

									OPEN bufferListCursor;
									FETCH NEXT FROM bufferListCursor
									 INTO @ThisSku, @ThisLocation, @SuggestedReplenishment, @FactorizedReplenishment;
												
									-- For each Buffer in the list
									WHILE (@@FETCH_STATUS = 0)
									BEGIN
										-- Assign quantity to Buffer Optimized Replenishment
										UPDATE #DestinationBuffersList  
										   SET OPTIMIZED_REPLENISHMENT = OPTIMIZED_REPLENISHMENT + @SuggestedReplenishment
										 WHERE SKU      = @ThisSku
										   AND LOCATION = @ThisLocation;

										SET @AvailableQuantity   = @AvailableQuantity   - @FactorizedReplenishment;
										SET @QuantityDistributed = @QuantityDistributed + @FactorizedReplenishment;
										
										FETCH NEXT FROM bufferListCursor
										 INTO @ThisSku, @ThisLocation, @SuggestedReplenishment, @FactorizedReplenishment;
									END 

									CLOSE bufferListCursor;
									DEALLOCATE bufferListCursor;
									--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY innermost cursor', 'END'
								END
								ELSE
								BEGIN
									SET @DistributionType = 'SHORTAGE';
									SET @CanExceedTarget  = 0;

									EXEC [dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY] @ReplenishmentPriority, @DistributionType,
										@CanExceedTarget, @LinOptimizationMode, @LinApprovedByUser,
										@AvailableQuantity OUTPUT, @QuantityDistributed OUTPUT,
										@GoutOptimizedBuffers OUTPUT, @LoutResult OUTPUT, @LoutMessage OUTPUT;

									IF (@LoutResult = 1) 
									BEGIN 
										-- (@ErMessage, @ErSeverity, @ErState)
										RAISERROR (@LoutMessage, 11, 1);
									END
								END
							END
						END
					END

					SELECT @GoutOptimizedBuffers = @GoutOptimizedBuffers + COUNT(1)
					  FROM #DestinationBuffersList
					 WHERE (REPLENISHMENT_PRIORITY = @ReplenishmentPriority);

					FETCH NEXT FROM prioritiesCursor INTO @ReplenishmentPriority;
				END
				
				CLOSE prioritiesCursor;
				DEALLOCATE prioritiesCursor;

				-- -------------------------------------------------------------------------------
				-- OHLO 20201004: Since v5.2.0, Right after distributing the available quantity,
				-- 				  assign any remaining quantity to the origin buffer, and save.
				-- -------------------------------------------------------------------------------
				UPDATE #DestinationBuffersList
				   SET OPTIMIZED_REPLENISHMENT = OPTIMIZED_REPLENISHMENT + @AvailableQuantity
				 WHERE SKU      = @Sku
				   AND LOCATION = @Location;

				EXEC [dbo].[USP_SAVE_OPTIMIZATION_RESULT] @LinOptimizationMode,	@LinApprovedByUser, 
														  @LoutResult OUTPUT,   @LoutMessage OUTPUT;

				IF (@LoutResult = 1) 
				BEGIN
					-- (@ErMessage, @ErSeverity, @ErState)
					RAISERROR (@LoutMessage, 11, 1);
				END  
				-- -------------------------------------------------------------------------------

				--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY priority cursor', 'END'
				SET @GoutMessage = @GoutMessage 
								 + @Sku + '@' + @Location + '&nbsp;&nbsp;&nbsp;&nbsp;'
								 + CAST(@InventoryOnSite AS VARCHAR) + '&nbsp;&nbsp;&nbsp;&nbsp;'
								 + CAST(@GoutOptimizedBuffers AS VARCHAR) + '</br>';
			END

			FETCH NEXT FROM originCursor INTO @Sku, @Location, @InventoryOnSite, @AvailableInventory;
		END 

		CLOSE originCursor;
		DEALLOCATE originCursor;
  
		-- Insert History for Accepted suggestions
		-- Since 4.9.4, Use OS as a type for Optimizer Suggestions
		DECLARE @CreateFromAction VARCHAR(3)  = 'OS';
		
		DECLARE acceptedReplenishmentCursor CURSOR FAST_FORWARD FOR 
		 SELECT DISTINCT B.SKU, B.LOCATION
		   FROM [dbo].[TFSCM_CLI_BUFFER] B
		   JOIN #OriginBuffersList O ON (B.SKU = O.SKU AND B.ORIGIN_LOCATION = O.LOCATION)
		  WHERE B.REPLENISHMENT_ACTION IN ('ACCEPT');
			
		OPEN acceptedReplenishmentCursor;
		FETCH NEXT FROM acceptedReplenishmentCursor INTO @Sku, @Location;
			
		-- For each location in the list
		WHILE (@@FETCH_STATUS = 0)
		BEGIN		
			EXEC [dbo].[GENERATE_REPLENISHMENT_SUGGESTIONS_HISTORY]
				@ivaCreateFromAction = @CreateFromAction,
				@ivaApprovedByUser   = @LinApprovedByUser,
				@ivaLocation         = @Location,
				@ivaSku              = @Sku,
				@ovaResult           = @LoutResult  OUTPUT,
				@ovaMessage          = @LoutMessage OUTPUT;
				
			IF (@LoutResult = 1)
			BEGIN 
				-- (@ErMessage, @ErSeverity, @ErState)
				RAISERROR (@LoutMessage, 11, 1);
			END
			FETCH NEXT FROM acceptedReplenishmentCursor INTO @Sku, @Location;
		END
		CLOSE acceptedReplenishmentCursor;
		DEALLOCATE acceptedReplenishmentCursor;   
				 
		--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY outermost cursor', 'END'
	 
		SET @GoutResult  = '0'; 
	END TRY 
	BEGIN CATCH 
		SET @GoutResult  = '1';
		SET @GoutMessage = @MsgOptimizeSuggestionsAutomaticallyError + ' <br> ' + ' <br> ' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST( ERROR_STATE() AS varchar )
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
       
		IF ((SELECT CURSOR_STATUS('global','bufferListCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','bufferListCursor')) IN (0,1))
			BEGIN
				CLOSE bufferListCursor; 			
			END
			DEALLOCATE bufferListCursor; 
		END		
		
		IF ((SELECT CURSOR_STATUS('global','prioritiesCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','prioritiesCursor')) IN (0,1))
			BEGIN
				CLOSE prioritiesCursor;
			END
			DEALLOCATE prioritiesCursor; 
		END		
		
		IF ((SELECT CURSOR_STATUS('global','originCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','originCursor')) IN (0,1))
			BEGIN
				CLOSE originCursor;
			END
			DEALLOCATE originCursor; 
		END		

		IF ((SELECT CURSOR_STATUS('global','acceptedReplenishmentCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','acceptedReplenishmentCursor')) IN (0,1))
			BEGIN
				CLOSE acceptedReplenishmentCursor; 			
			END
			DEALLOCATE acceptedReplenishmentCursor; 
		END		
	END CATCH
	--EXEC [dbo].[LOG_TIME] 'USP_OPTIMIZE_SUGGESTIONS_AUTOMATICALLY main procedure', 'END'
END
GO
/****** Object:  StoredProcedure [dbo].[USP_OPTIMIZE_SUGGESTIONS_MANUALLY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Isaac Florez
-- Upgrade date: 20/11/2020
-- Description : Add new columns in TFSCM_COM_LOG with value
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 04/10/2020
-- Description : Refactor user-defined table types to temporary tables
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 27/08/2020
-- Description : Add Replenishment Target and Pending Demand columns 
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 04/06/2020
-- Description : Add validation for buffers with conversion factor <= 0 
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 30/05/2018
-- Description : In order to show the proper result message to the user, 
--               return TargetQuantity into GoutAvailableQuantity 
-- Version     : 4.9.1
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 11/10/2017
-- Description  : Optimize suggestions manually.
-- Version      : 4.8.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_OPTIMIZE_SUGGESTIONS_MANUALLY]
	/* Input Parameters */   
	@GinConversionFactor 		VARCHAR(50), 
	-- Can Exeed Targer : true for Yes, false for No 
	@GinCanExceedTarget         BIT,  
    @GinUserFilters             NVARCHAR(MAX),
	@GinApprovedByUser 			VARCHAR(10),
	/* Output Parameters */     
	@GoutAvailableQuantity      NUMERIC(17,5) OUTPUT,
	@GoutQuantityDistributed    NUMERIC(17,5) OUTPUT,         
	@GoutOptimizedBuffers       INT           OUTPUT,
	@GoutResult                 VARCHAR(1)    OUTPUT,
    @GoutMessage                NVARCHAR(MAX) OUTPUT
AS
	DECLARE @Sku                     VARCHAR(50);
	DECLARE @Location                VARCHAR(50);
	DECLARE @InventoryOnSite         NUMERIC(17,5);
	DECLARE @ReplenishmentPriority   INT;  
	DECLARE @TargetQuantity	   	     NUMERIC(17,5);	
	DECLARE @FactorizedReplenishment NUMERIC(17,5);
	-- Distribution type can be 'EXCESS' or 'SHORTAGE'
	DECLARE @DistributionType        VARCHAR(10);
	 
	DECLARE @sqlStatement            NVARCHAR(MAX);
	DECLARE @sqlSelStatement         NVARCHAR(MAX);
	DECLARE @sqlEndStatement         NVARCHAR(MAX);
	DECLARE @SqlOrderByStatement     NVARCHAR(MAX);

	DECLARE @LinOptimizationMode    	  VARCHAR(1) = 'M';
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;  

		-- Setting messages
		DECLARE @Language                            AS VARCHAR(2) = 'en';
		DECLARE @CodErrorResultMessages              AS VARCHAR(1); 
		DECLARE @MessageErrorResultMessages          AS NVARCHAR(MAX);
		DECLARE @MsgOptimizeSuggestionsManuallyError AS NVARCHAR(MAX);
		DECLARE @MsgOptimizeSuggestionsNonRequired   AS NVARCHAR(MAX);
 
		-- Get default language	 
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P] 
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE'; 

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
			'OPTIMIZE_SUGGESTIONS_MANUALLY_ERROR', @Language, '', '', '', 
			@MsgOptimizeSuggestionsManuallyError OUTPUT;

		-- -----------------------------------------------------------------------------------
		-- OHLO 20200604: Since v5.1.0, log records with conversion factor <= 0 
		-- -----------------------------------------------------------------------------------
		DECLARE @MsgNonPositiveConversionFactorError AS NVARCHAR(MAX);
		DECLARE @MsgOptimizationAlerts				 AS NVARCHAR(MAX);
		DECLARE @NumberOfAlerts				 		 AS INT = 0;	
		DECLARE @CurDate							 AS DATETIME;

		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'NON_POSITIVE_CONVERSION_FACTOR_ERROR', @Language, '', '', '', 
			@MsgNonPositiveConversionFactorError OUTPUT;

		-- -----------------------------------------------------------------------------------
		-- Create DestinationBuffersList temporary table
		-- -----------------------------------------------------------------------------------
		IF OBJECT_ID('tempdb..#DestinationBuffersList') IS NOT NULL 
		  DROP TABLE #DestinationBuffersList;

		SELECT SKU,                   LOCATION,                  ORIGIN_LOCATION,            BUFFER,
			   SECURITY_STOCK,        MINIMUM_REPLENISHMENT,     PACKAGING_UNIT,             INVENTORY_ON_SITE,
			   NET_INVENTORY,         EFFECTIVE_BUFFER,          SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
			   1 AS IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,   CAST(1 AS NUMERIC(17,5))  AS CONVERSION_FACTOR,     SITE_PRIORITY,
			   NET_PRIORITY,          MISSING_BUFFER_INVENTORY,  APPROVED_BUFFER_REPLENISH,  SUGGESTED_BUFFER_REPLENISH FACTORIZED_SUGGESTED_REPLENISHMENT,
			   FAMILY,                LOCATION_TYPE,             CDUNIT,                     AVAILABLE_INVENTORY,
			   PENDING_DEMAND, 	      CAST(0 AS NUMERIC(17,5)) PROJECTED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) FACTORIZED_REPLENISHMENT, CAST(0 AS NUMERIC(17,5)) PROJECTED_PRIORITY, 	     
			   MANAGED,				  (BUFFER + SECURITY_STOCK + PENDING_DEMAND) AS REPLENISHMENT_TARGET 			   
		  INTO #DestinationBuffersList
		  FROM [dbo].[TFSCM_CLI_BUFFER]
		 WHERE 1 = 2; 

 		-- -----------------------------------------------------------------------------------
		-- JEBE 20200827: Since v5.2.0, add Replenishment Target and Pending Demand columns 
		-- -----------------------------------------------------------------------------------
		-- Get the buffer list to be optimized 	
		SET @sqlSelStatement = ''
			+ 'SELECT BUFFER.SKU,	         BUFFER.LOCATION,	              BUFFER.ORIGIN_LOCATION,            BUFFER.BUFFER, '
			+ '		  BUFFER.SECURITY_STOCK, BUFFER.MINIMUM_REPLENISHMENT,	  BUFFER.PACKAGING_UNIT,             BUFFER.INVENTORY_ON_SITE, '
			+ '		  BUFFER.NET_INVENTORY,  BUFFER.EFFECTIVE_BUFFER,	      BUFFER.SUGGESTED_BUFFER_REPLENISH, BUFFER.REPLENISHMENT_PRIORITY, '
			+ '		  0 AS IS_ORIGIN_BUFFER, 0 AS OPTIMIZED_REPLENISHMENT,	  ISNULL(' + @GinConversionFactor + ', CAST(0 AS NUMERIC(17,5))) AS CONVERSION_FACTOR, BUFFER.SITE_PRIORITY, '
			+ '		  BUFFER.NET_PRIORITY,	 BUFFER.MISSING_BUFFER_INVENTORY, BUFFER.APPROVED_BUFFER_REPLENISH,  BUFFER.SUGGESTED_BUFFER_REPLENISH * ISNULL(' + @GinConversionFactor + ', 0) AS FACTORIZED_SUGGESTED_REPLENISHMENT, '
			+ '		  BUFFER.FAMILY,	     BUFFER.LOCATION_TYPE,	          BUFFER.CDUNIT,                     BUFFER.AVAILABLE_INVENTORY, '
			+ '		  BUFFER.PENDING_DEMAND, 0 PROJECTED_REPLENISHMENT,       0 FACTORIZED_REPLENISHMENT,        -9999999999 PROJECTED_PRIORITY, '
			+ '		  (BUFFER.BUFFER + BUFFER.SECURITY_STOCK + BUFFER.PENDING_DEMAND) AS REPLENISHMENT_TARGET '
			+ '  FROM TFSCM_CLI_BUFFER BUFFER '
			+ '  JOIN TFSCM_CLI_BUFFER_FAMILY FAMILY ON BUFFER.FAMILY = FAMILY.CDBUFFER_FAMILY '
			+ '									   AND FAMILY.REPLENISHMENT_MODE = ''M'' '
			+ '									   AND FAMILY.IS_ACTIVE = ''1'' '
			+ '  JOIN TFSCM_CLI_LOCATION LOC ON BUFFER.LOCATION = LOC.CDLOCATION ';

		SET @sqlEndStatement = ''
			+ ' WHERE BUFFER.INACTIVE              = 0 '
			+ '   AND BUFFER.REPLENISHMENT_ACTION != ''ACCEPT'' '; 

		SET @SqlOrderByStatement = ''
			+ ' ORDER BY BUFFER.SKU ASC, BUFFER.LOCATION ASC ';

		SET @sqlStatement = @sqlSelStatement + @sqlEndStatement;

		IF (@GinUserFilters IS NOT NULL AND RTRIM(LTRIM(@GinUserFilters)) <> '')
		BEGIN
			SET @sqlStatement = @sqlStatement  + ' AND ' + @GinUserFilters;
		END

		SET @sqlStatement = @sqlStatement;

		-- -----------------------------------------------------------------------------------
		-- JEBE 20200827: Since v5.2.0, add Replenishment Target and Pending Demand columns 
		-- -----------------------------------------------------------------------------------
		INSERT INTO #DestinationBuffersList  
			 (SKU,              LOCATION,                 ORIGIN_LOCATION,            BUFFER,
			  SECURITY_STOCK,   MINIMUM_REPLENISHMENT,    PACKAGING_UNIT,             INVENTORY_ON_SITE,
			  NET_INVENTORY,    EFFECTIVE_BUFFER,         SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
			  IS_ORIGIN_BUFFER, OPTIMIZED_REPLENISHMENT,  CONVERSION_FACTOR,          SITE_PRIORITY,
			  NET_PRIORITY,     MISSING_BUFFER_INVENTORY, APPROVED_BUFFER_REPLENISH,  FACTORIZED_SUGGESTED_REPLENISHMENT,
			  FAMILY,           LOCATION_TYPE,            CDUNIT,                     AVAILABLE_INVENTORY,
			  PENDING_DEMAND,   PROJECTED_REPLENISHMENT,  FACTORIZED_REPLENISHMENT,   PROJECTED_PRIORITY,
			  REPLENISHMENT_TARGET)			  
		EXEC sp_executesql @sqlStatement;

		CREATE INDEX IDX_DestinationBuffersList ON #DestinationBuffersList (REPLENISHMENT_PRIORITY, SKU, LOCATION);

		/* Local Output Parameters */
		DECLARE @LoutResult  VARCHAR(1)    = '0';
		DECLARE @LoutMessage NVARCHAR(MAX) = '';

		SET @GoutResult  = '0';
		SET @GoutMessage = '';

		/* SET @TargetQuantity = [dbo].[UFN_GET_TARGET_QUANTITY] (#DestinationBuffersList); */
		SELECT @TargetQuantity = SUM(FACTORIZED_SUGGESTED_REPLENISHMENT) 
		  FROM #DestinationBuffersList; 

		SELECT @DistributionType = 
				CASE WHEN (@TargetQuantity > @GoutAvailableQuantity) THEN 
					'SHORTAGE'
				WHEN (@TargetQuantity < @GoutAvailableQuantity) THEN 
					'EXCESS'
				ELSE 
					'NONE'
				END;

		-- It is not necessary to optimize (the target quantity is equal to available quantity)
        IF (@DistributionType = 'NONE')
		BEGIN
			SET @GoutQuantityDistributed = 0;
			SET @GoutAvailableQuantity   = 0;
			EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT, 
				'OPTIMIZE_SUGGESTIONS_NON_REQUIRED', @Language, '', '', '',
				@MsgOptimizeSuggestionsNonRequired OUTPUT;

			SET @GoutResult  = '0'; 
			SET @GoutMessage = @MsgOptimizeSuggestionsNonRequired;
        END
		ELSE
		BEGIN
			SET @GoutQuantityDistributed = 0;

			IF (@DistributionType = 'EXCESS')
			BEGIN
				-- Assign quantity to Buffer Optimized Replenishment
				UPDATE #DestinationBuffersList  
				   SET OPTIMIZED_REPLENISHMENT = OPTIMIZED_REPLENISHMENT + SUGGESTED_BUFFER_REPLENISH;

				SELECT @FactorizedReplenishment = SUM(FACTORIZED_SUGGESTED_REPLENISHMENT)
				  FROM #DestinationBuffersList;

				SET @GoutAvailableQuantity   = @GoutAvailableQuantity   - @FactorizedReplenishment;
				SET @GoutQuantityDistributed = @GoutQuantityDistributed + @FactorizedReplenishment;
			END 

			-- -------------------------------------------------------------------------------
			-- OHLO 20201009: Since v5.2.0, log records with conversion factor < 0 only
			-- -------------------------------------------------------------------------------
			-- OHLO 20200604: Since v5.1.0, log records with conversion factor <= 0 
			-- -------------------------------------------------------------------------------					
			SET @CurDate = GETDATE();
			INSERT INTO [dbo].[TFSCM_COM_LOG] (DSLOG, LOG_DETAIL, CDTYPE, LOG_TIME, ELEMENT_CODE, LOCATION_CODE, RECORD_CONTENT, ROW_NUMBER, COLUMN_NAME, FILE_NAME, UPDATE_DATE)
			SELECT @MsgNonPositiveConversionFactorError, NULL, 'A', @CurDate,
				   SKU, LOCATION, CONVERT(VARCHAR, CONVERSION_FACTOR, 105), NULL, 'CONVERSION_FACTOR', NULL, @CurDate
			  FROM #DestinationBuffersList
			 WHERE CONVERSION_FACTOR < 0;

			 SET @NumberOfAlerts = @NumberOfAlerts 
								 + (SELECT COUNT(1) 
									  FROM [dbo].[TFSCM_COM_LOG] [L]
									 WHERE [L].[LOG_TIME] = @CurDate 
									   AND [L].[DSLOG]    = @MsgNonPositiveConversionFactorError); 

			DELETE FROM #DestinationBuffersList
			 WHERE CONVERSION_FACTOR < 0;
			-- -------------------------------------------------------------------------------				

			DECLARE prioritiesCursor CURSOR FAST_FORWARD FOR 
			 SELECT DISTINCT REPLENISHMENT_PRIORITY
			   FROM #DestinationBuffersList
			  ORDER BY REPLENISHMENT_PRIORITY ASC;

			OPEN prioritiesCursor; 
			FETCH NEXT FROM prioritiesCursor INTO @ReplenishmentPriority;		

			-- For each Priority in the list
			WHILE (@@FETCH_STATUS = 0)
			BEGIN
				IF (@GoutAvailableQuantity > 0)
				BEGIN
					EXEC [dbo].[USP_DISTRIBUTE_AVAILABLE_QUANTITY] @ReplenishmentPriority, @DistributionType,
						@GinCanExceedTarget, @LinOptimizationMode, @GinApprovedByUser,
						@GoutAvailableQuantity OUTPUT, @GoutQuantityDistributed OUTPUT,
						@GoutOptimizedBuffers OUTPUT, @LoutResult OUTPUT, @LoutMessage OUTPUT;

					IF (@LoutResult = 1) 
					BEGIN
						SET @GoutQuantityDistributed = 0;
						SET @GoutAvailableQuantity   = 0;
						-- (@ErMessage, @ErSeverity, @ErState)
						RAISERROR (@LoutMessage, 11, 1);
					END
				END

				FETCH NEXT FROM prioritiesCursor INTO @ReplenishmentPriority;
			END
			CLOSE prioritiesCursor;
			DEALLOCATE prioritiesCursor; 

			EXEC [dbo].[USP_SAVE_OPTIMIZATION_RESULT] @LinOptimizationMode, @GinApprovedByUser,
													  @LoutResult OUTPUT,   @LoutMessage OUTPUT;

			IF (@LoutResult = 1) 
			BEGIN
				SET @GoutQuantityDistributed = 0;
				SET @GoutAvailableQuantity   = 0;
				-- (@ErMessage, @ErSeverity, @ErState)
				RAISERROR (@LoutMessage, 11, 1);
			END

			SET @GoutAvailableQuantity = @TargetQuantity;
		END 

		IF (@NumberOfAlerts >= 0)
		BEGIN 
			IF (@GoutMessage IS NOT NULL AND LTRIM(RTRIM(@GoutMessage)) <> '')
			BEGIN
				SET @GoutMessage = @GoutMessage + '<br>'  + '<br>';
			END

			EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
				'OPTIMIZATION_ALERTS', @Language, '', '', '', @MsgOptimizationAlerts OUTPUT;			

			SET @GoutMessage = @GoutMessage + @MsgOptimizationAlerts + ': '+ CAST(@NumberOfAlerts AS VARCHAR);
		END
  	END TRY 
	BEGIN CATCH 
		SET @GoutResult  = '1';
		SET @GoutMessage = @MsgOptimizeSuggestionsManuallyError + ' <br> ' + ' <br> ' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST( ERROR_STATE() AS varchar )
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_OPTIMIZE_SUGGESTIONS_MANUALLY]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
		
		IF ((SELECT CURSOR_STATUS('global','prioritiesCursor')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','prioritiesCursor')) IN (0,1))
			BEGIN
				CLOSE prioritiesCursor;
			END
			DEALLOCATE prioritiesCursor; 
		END
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_PROCESS_PENDING_BUFFER_CHANGES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================================================
-- Author      : Michal MokroÅ¡
-- Upgrade date: 29/11/2020
-- Description : Optimizations: 1) Add commits to cursors, 
--               2) Refactor the way Atypical Consumption Status is bein updated from Stasted
--                  to Finished.
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/03/2020
-- Description : Replace Buffer Update Date column by Update Movements column
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/12/2019
-- Description : Fix the finishing event update  (Issue 9433)
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 27/05/2019
-- Description : Full column names in dynamic queries
-- Version     : 4.13.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/03/2019
-- Description : Fix the finishing event update 
-- Version     : 4.11.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 10/01/2019
-- Description : Issue (8426) 
--               Fix variable size when casting from numeric to varchar 
-- Version     : 4.11.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 06/12/2018
-- Description  : Process pending buffer changes, creating steps detail
-- Version      : 4.10.1
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_PROCESS_PENDING_BUFFER_CHANGES] 
(	/* Input Parameters */ 	
	-- No Inputs
    /* Output Parameters */
    @ovaResult 	VARCHAR(1)	  OUTPUT,
    @ovaMessage NVARCHAR(MAX) OUTPUT  
  ) 
AS 
	-- Message Variables
	DECLARE @Language 						 	    VARCHAR(2) = 'es'; 
	DECLARE @CodErrorResultMessages 			    VARCHAR(1); 
	DECLARE @MessageErrorResultMessages 		    NVARCHAR(MAX);
	DECLARE @MsgProcessPendingBufferChangesFailed   NVARCHAR(MAX);
	DECLARE @MsgProcessPendingBufferChangesSucceed  NVARCHAR(MAX);
	
	-- Auxiliar varaibles
	DECLARE @NextBufferAuxConstant   INT         = 6;
	DECLARE @DateDefaultValue		 DATE        = CONVERT(DATE,'1901-01-01');
	DECLARE @ChangeTypeP 			 VARCHAR(1)  = 'P';
	DECLARE @ChangeTypeA 			 VARCHAR(1)  = 'A';
	DECLARE @PartialChangeMode   	 VARCHAR(10) = 'PARTIAL';
	DECLARE @TotalChangeMode 		 VARCHAR(10) = 'TOTAL';
	
	-- It must be initialized because is used for calculation porpuses
	DECLARE @ServerDate 			 DATETIME      = GETDATE();
	
	-- Buffer changes cursor variables
	DECLARE @IdEvent 				 VARCHAR(50), 	 
			@Filter 				 VARCHAR(MAX),
			@ChangeType 			 VARCHAR(1),
			@RequiredChange 		 NUMERIC(17,5),
			@PreparationStartDate 	 DATE,
			@PreparationEndDate 	 DATE,
			@ChangeSteps 			 NUMERIC(10,0),
			@EventStartingDate    	 DATE,
			@EventEndingDate      	 DATE,
			@Mode 					 VARCHAR(50),
			@DaysBetweenChanges  	 NUMERIC(17,5);
			
	DECLARE @BuffersListSQLQuery 	 NVARCHAR(MAX);
	DECLARE @BuffersSQLQuery 		 NVARCHAR(MAX);
	DECLARE @MergeSQLQuery   		 NVARCHAR(MAX);
	
	-- Calculation variables strings
	DECLARE @TotalDelta				 NVARCHAR(MAX) = '',
			@Delta					 NVARCHAR(MAX) = '',
			@StepDelta				 NVARCHAR(MAX) = '',
			@StepDate				 NVARCHAR(MAX) = '',
			@BaseBufferDelta		 NVARCHAR(MAX) = '',
			@StepsSQLQuery           NVARCHAR(MAX) = '',
			@NextBufferAnalysis      NVARCHAR(MAX) = '',
			@MinimumBufferUpdateDate DATE ;
BEGIN
  	BEGIN TRY
  		SET NOCOUNT ON;
		-- ********************* OJO **************************
		---SET @ServerDate = '2019-07-15';
		-- ********************* OJO **************************

	    IF OBJECT_ID('tempdb..#BuffersListTbl') IS NOT NULL 
          DROP TABLE #BuffersListTbl;
		 
		SELECT [BUFFER].[SKU], 
			   [BUFFER].[LOCATION], 
			   [BUFFER].[REPLENISHMENT_TIME] [STEP], 
		       [BUFFER].[REPLENISHMENT_FREQUENCY], 
			   [BUFFER].[REPLENISHMENT_TIME],
			   [BUFFER].[SBC_BUFFER_SIZE],
			   [UNIT].[INVENTORY_ACCURACY],
			   [BUFFER].[NEXT_BUFFER_ANALYSIS],
			   [BUFFER].[UPDATE_MOVEMENTS] 
		  INTO #BuffersListTbl 
		  FROM [dbo].[TFSCM_CLI_BUFFER] [BUFFER]
		  JOIN [dbo].[TFSCM_CLI_UNITS]  [UNIT] ON ([BUFFER].[CDUNIT] = [UNIT].[CDUNIT]) 
		 WHERE 1 = 2;
		 
		CREATE INDEX IDX_ExpiredBuffersTbl ON #BuffersListTbl (SKU, LOCATION, STEP);
		/*
	    CREATE TABLE #BuffersListTbl 
		([SKU]                     [VARCHAR](50)   NOT NULL,
	     [LOCATION]                [VARCHAR](50)   NOT NULL,
		 [STEP]      			   [NUMERIC](10,0) NOT NULL,
	     [REPLENISHMENT_FREQUENCY] [NUMERIC](17,5)     NULL,
	     [REPLENISHMENT_TIME]      [INT]               NULL,
	     [SBC_BUFFER_SIZE]         [NUMERIC](17,5)     NULL,
         [INVENTORY_ACCURACY]      [NUMERIC](3,0)      NULL,
         [NEXT_BUFFER_ANALYSIS]    [DATETIME]          NULL,
		 [UPDATE_MOVEMENTS]        [DATE]              NULL,
	     PRIMARY KEY CLUSTERED ([SKU] ASC, [LOCATION] ASC, [STEP] ASC) WITH (IGNORE_DUP_KEY = OFF)
        );*/
  			  		
		SET @ovaMessage = '';
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDPARAM] = 'DEFAULT_LANGUAGE';
		DECLARE cursorBufferChangesEvents CURSOR FAST_FORWARD FOR   	
  		 SELECT [BC].[EVENT], 				   [BC].[FILTER],			   [BC].[CHANGE_TYPE],  [BC].[REQUIRED_CHANGE],
				[BC].[PREPARATION_START_DATE], [BC].[EVENT_ENDING_DATE],   [BC].[CHANGE_STEPS],
				[BC].[PREPARATION_END_DATE],   [BC].[EVENT_STARTING_DATE], [BC].[MODE],		    [BC].[DAYS_BETWEEN_CHANGES]
		   FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES] [BC]
		  WHERE [BC].[PROCESSING_DATE]         = '1901-01-01 00:00' 
		    AND [BC].[PREPARATION_START_DATE] <= @ServerDate
		   -- AND BC.EVENT in ('Evento46', 'Evento53') -- >>>>>>>>>>>>>>>>> OJO >>>>>>>>>>>>>>>>>>>>>>>>
		OPEN cursorBufferChangesEvents;
		
		FETCH NEXT FROM cursorBufferChangesEvents
 		 INTO @IdEvent, 		   	 @Filter,		     @ChangeType,  @RequiredChange,
			  @PreparationStartDate, @EventEndingDate,   @ChangeSteps,
			  @PreparationEndDate,   @EventStartingDate, @Mode,		   @DaysBetweenChanges;
			  
		WHILE (@@FETCH_STATUS = 0)
		BEGIN			
			SET @BuffersListSQLQuery  = 
				+ 'SELECT BUFFER.SKU + '','' + BUFFER.LOCATION AS ID' + CHAR(13)
				+ '  FROM TFSCM_CLI_BUFFER BUFFER ' + CHAR(13)
				+ '  JOIN TFSCM_CLI_UNITS  UNIT ON (BUFFER.CDUNIT = UNIT.CDUNIT) ' + CHAR(13)
				+ ' WHERE BUFFER.INACTIVE = 0 ' + CHAR(13);
					
			/* It is depending on the @filter value, if null or empty It won't be added */ 			
			IF (@Filter IS NOT NULL AND @Filter != '')
			BEGIN
				SET @BuffersListSQLQuery = @BuffersListSQLQuery + ' AND ' + @Filter;	
			END
		 	
			DELETE #BuffersListTbl;
			DECLARE @step INT = 1;

			WHILE @step <= @ChangeSteps + 1
			BEGIN
				SET @BuffersSQLQuery  = ''
					+ 'SELECT BUFFER.SKU, BUFFER.LOCATION, BUFFER.REPLENISHMENT_FREQUENCY, BUFFER.REPLENISHMENT_TIME, ' + CHAR(13)
					+ '		  BUFFER.SBC_BUFFER_SIZE, UNIT.INVENTORY_ACCURACY, BUFFER.NEXT_BUFFER_ANALYSIS, ' + CHAR(13)
					+ '       ' + CAST(@step AS VARCHAR) + ' STEP, BUFFER.UPDATE_MOVEMENTS ' + CHAR(13)
					+ '  FROM TFSCM_CLI_BUFFER BUFFER ' + CHAR(13)
					+ '  JOIN TFSCM_CLI_UNITS  UNIT ON (BUFFER.CDUNIT = UNIT.CDUNIT) ' + CHAR(13)
					+ ' WHERE BUFFER.INACTIVE = 0 ' + CHAR(13);
					
				IF (@Filter IS NOT NULL AND @Filter != '')
				BEGIN
					SET @BuffersSQLQuery = @BuffersSQLQuery + ' AND ' + @Filter;	
				END	
				
				INSERT INTO #BuffersListTbl ([SKU], [LOCATION], [REPLENISHMENT_FREQUENCY], [REPLENISHMENT_TIME],
										     [SBC_BUFFER_SIZE], [INVENTORY_ACCURACY], [NEXT_BUFFER_ANALYSIS], [STEP],
											 [UPDATE_MOVEMENTS])
				EXEC (@BuffersSQLQuery);
				SET @step = @step + 1;
			END;

			/* The value for the Total Delta has to be rounded with the buffer accuracy */
			SET @TotalDelta = ''
				+ '       (dbo.VALIDATE_COLUMN_ACCURACY(SOURCE.INVENTORY_ACCURACY, '  + CHAR(13)
				+ '           (CASE '  + CHAR(13) 
				+ '             WHEN ''' + @ChangeType + ''' = ''' + @ChangeTypeP + ''' THEN ' + CHAR(13)
				+ '               (SOURCE.SBC_BUFFER_SIZE * ' + CAST(@RequiredChange AS VARCHAR) + ') ' + CHAR(13) 
				+ '             WHEN ''' + @ChangeType + ''' = ''' + @ChangeTypeA + ''' THEN ' + CHAR(13) 
				+ '               /* In this type, the minimum required change allowed is the - SBC Buffer Size, ' + CHAR(13)
				+ '                  otherwise the buffer would be set with a negative value */ ' + CHAR(13)
				+ '              (dbo.GET_MAXIMUM_OF (' + CAST(@RequiredChange AS VARCHAR) + ', (-1) * SOURCE.SBC_BUFFER_SIZE, -99999999, -99999999)) ' + CHAR(13)
				+ '           END))) ' + CHAR(13);
				
			/* Calculate delta, rounding it according to the buffer accuracy */
			SET @Delta = ''
				+ '       (dbo.VALIDATE_COLUMN_ACCURACY(SOURCE.INVENTORY_ACCURACY, '  + CHAR(13)
				+ '                                     (' + @TotalDelta + ' / ' + CAST(@ChangeSteps AS VARCHAR) + ')))'  + CHAR(13);

			SET @StepDelta = ''
				+ '       CASE '  + CHAR(13)
				+ '         WHEN SOURCE.STEP = ' + CAST(@ChangeSteps AS VARCHAR) + ' THEN '  + CHAR(13)
				+ '           /* Calculate cumulative applied change for steps before the last one */ ' + CHAR(13)
				+ '           ' + @TotalDelta + ' - (' + @Delta + ' * ' + CAST((@ChangeSteps - 1) AS VARCHAR) + ')' + CHAR(13)
				+ '         ELSE ' + CHAR(13)
				+ '           ' + @Delta  + CHAR(13)
 				+ '         END ';
				
			SET @StepDate = ''
				+ '       (CAST(DATEADD(dd, ROUND((' + CAST (@DaysBetweenChanges AS VARCHAR) + ' * (SOURCE.STEP - 1)), 0), ''' + CAST(@PreparationStartDate AS VARCHAR(30)) + ''') AS DATE)) ';

			SET @BaseBufferDelta = ''
				+ '       CASE '  + CHAR(13)
				+ '         /* Calculate cumulative applied change for steps before the last one */'  + CHAR(13)
				+ '         WHEN SOURCE.STEP = ' + CAST(@ChangeSteps AS VARCHAR) + CHAR(13)
				+ '          AND ''' + CAST(@EventEndingDate AS VARCHAR(30)) + ''' = ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''' THEN '  + CHAR(13)
				+ '           ' + @TotalDelta  + CHAR(13)
				+ '         ELSE ' + CHAR(13)
				+ '           0 ' + CHAR(13) 
				+ '       END ';

			SET @StepsSQLQuery  = ''
				+ 'SELECT ''' + @IdEvent + ''', SOURCE.SKU, SOURCE.LOCATION, SOURCE.STEP, ' + CHAR(13)
				+ '       ' + @StepDate + ', ' + CHAR(13) + @StepDelta  + ',' + CHAR(13)
				+ '       ' + @BaseBufferDelta + ', ' + CHAR(13)
				+ '       ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + '''' + CHAR(13)
				+ '  FROM #BuffersListTbl SOURCE ' + CHAR(13)
				+ ' WHERE SOURCE.STEP <= ' + CAST(@ChangeSteps AS VARCHAR) + CHAR(13)
				+ ' ORDER BY SOURCE.STEP ASC ' + CHAR(13);	
				
			INSERT INTO [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS] (EVENT, SKU, LOCATION, STEP, DATE, DELTA, BASE_BUFFER_DELTA, PROCESSING_DATE)
			EXEC (@StepsSQLQuery);

			IF (@EventEndingDate <> @DateDefaultValue) 
			BEGIN
				SET @StepDate = ''
					+ '       CASE '  + CHAR(13)
					+ '         WHEN ''' + @Mode + ''' = ''' + @TotalChangeMode + ''' THEN '  + CHAR(13)
					+ '           ''' + CAST(@EventStartingDate AS VARCHAR(30)) + ''''  + CHAR(13)
					+ '         ELSE ' + CHAR(13)
					+ '           CASE ' + CHAR(13)
					+ '             WHEN (DATEADD(dd, -(SOURCE.REPLENISHMENT_TIME - SOURCE.REPLENISHMENT_FREQUENCY), ''' + CAST(@EventEndingDate AS VARCHAR(30)) + ''') > ''' + CAST(@EventStartingDate AS VARCHAR(30)) + ''') THEN ' + CHAR(13)
					+ '               DATEADD(day, -(SOURCE.REPLENISHMENT_TIME - SOURCE.REPLENISHMENT_FREQUENCY), ''' + CAST(@EventEndingDate AS VARCHAR(30)) + ''') ' + CHAR(13)
					+ '             ELSE ' + CHAR(13)
					+ '               ''' + CAST(@EventStartingDate AS VARCHAR(30)) + '''' + CHAR(13)
					+ '         END ' + CHAR(13)
					+ '       END ';

				SET @StepsSQLQuery  = ''
					+ 'SELECT ''' + @IdEvent + ''', SOURCE.SKU, SOURCE.LOCATION, SOURCE.STEP, ' + CHAR(13)
					+ '		  ' + @StepDate +  ', ' + CHAR(13) + ' (-1) * ' + @TotalDelta  + ',' + CHAR(13)
					+ '		  0, ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + '''' + CHAR(13)
					+ '  FROM #BuffersListTbl SOURCE ' + CHAR(13)
					+ ' WHERE SOURCE.STEP = ' + CAST((@ChangeSteps + 1) AS VARCHAR) + CHAR(13);

				INSERT INTO [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS] (EVENT, SKU, LOCATION, STEP, DATE, DELTA, BASE_BUFFER_DELTA, PROCESSING_DATE)
				EXEC (@StepsSQLQuery);
			END
 
			-- Update next buffer analysis date
			SET @NextBufferAnalysis = '' 
				+ ' [dbo].[UFN_GET_MAXIMUM_DATE_OF]( ' + CHAR(13)
				+ '		(CASE ' + CHAR(13)
				+ '		  WHEN ''' + CAST(@EventEndingDate AS VARCHAR(30)) + ''' = ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''' THEN ' + CHAR(13)
				+ '		    DATEADD(day, SOURCE.REPLENISHMENT_TIME + ' + CAST(@NextBufferAuxConstant AS VARCHAR) + ', ''' + CAST(@EventStartingDate AS VARCHAR(30)) + ''') ' + CHAR(13)
				+ '		  WHEN ''' + @Mode + ''' = ''' + @TotalChangeMode + ''' THEN ' + CHAR(13)
				+ '		    ''' + CAST(@EventStartingDate AS VARCHAR(30)) + ''' ' + CHAR(13)
				+ '		  WHEN ''' + @Mode + ''' = ''' + @PartialChangeMode + ''' THEN ' + CHAR(13)
				+ '		    [dbo].[UFN_GET_MAXIMUM_DATE_OF](DATEADD(day, -(SOURCE.REPLENISHMENT_TIME - SOURCE.REPLENISHMENT_FREQUENCY), ''' + CAST(@EventEndingDate AS VARCHAR(30)) + '''), ' + CHAR(13)
				+ '					''' + CAST(@EventStartingDate AS VARCHAR(30)) + ''' , ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''', ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''')' + CHAR(13)
				+ '		  ELSE ' + CHAR(13)
				+ '		    null '  + CHAR(13)
				+ '		END), SOURCE.NEXT_BUFFER_ANALYSIS, ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''', ''' + CAST(@DateDefaultValue AS VARCHAR(30)) + ''')';
		
			SET @MergeSQLQuery = ''
				+ 'MERGE TFSCM_CLI_BUFFER AS TARGET ' + CHAR(13)
				+ 'USING (SELECT DISTINCT A.SKU, A.LOCATION, A.REPLENISHMENT_TIME, A.REPLENISHMENT_FREQUENCY, A.NEXT_BUFFER_ANALYSIS ' + CHAR(13)
				+ '         FROM #BuffersListTbl A) AS SOURCE ' + CHAR(13)
				+ '   ON (TARGET.SKU = SOURCE.SKU AND TARGET.LOCATION = SOURCE.LOCATION) ' + CHAR(13)
				+ ' WHEN MATCHED THEN UPDATE ' + CHAR(13)
				+ '  SET TARGET.NEXT_BUFFER_ANALYSIS = ' + @NextBufferAnalysis + ';' + CHAR(13);

			EXEC sp_executesql @MergeSQLQuery;
			
			-- Update processing date for current event
			UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
			   SET [PROCESSING_DATE] = @ServerDate
			 WHERE [EVENT]           = @IdEvent;
			 
			-- -------------------------------------------------------------------------------
			-- OHLO 20201125: Since v5.3.0, add a commit sentence to avoid large amounts of 
			-- 				  data within a single transaction.
			-- -------------------------------------------------------------------------------
			COMMIT;

			FETCH NEXT FROM cursorBufferChangesEvents
			 INTO @IdEvent, 		   	 @Filter,		     @ChangeType,  @RequiredChange,
				  @PreparationStartDate, @EventEndingDate,   @ChangeSteps,
				  @PreparationEndDate,   @EventStartingDate, @Mode,		   @DaysBetweenChanges;
		END 
		
		CLOSE cursorBufferChangesEvents;
		DEALLOCATE cursorBufferChangesEvents;

		-- Mark as Started (S) events which generate atypical consumptions
		UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
		   SET [ATYPICAL_CONSUMPTION_STATUS] = 'S'
		 WHERE [ATYPICAL_CONSUMPTION_STATUS] = 'N'
		   AND [PROCESSING_DATE]            <> '1901-01-01 00:00' 
		   AND [EVENT_ENDING_DATE]		    <> '1901-01-01';
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20190320: Since v4.11.1, get the list of the buffers for started events 
		--                     in order to fix the update for finishing of events 
		-- -----------------------------------------------------------------------------------
		DECLARE @FilterList AS VARCHAR(MAX) = '';
		SET @FilterList = '';
		SET @step       = 1;	 

		SET @BuffersSQLQuery  = ''
				+ 'SELECT @MinimumBufferUpdateDate = MIN(BUFFER.UPDATE_MOVEMENTS) ' + CHAR(13)
				+ '  FROM TFSCM_CLI_BUFFER BUFFER ' + CHAR(13)
				+ ' WHERE BUFFER.INACTIVE = 0 ' + CHAR(13);

		DELETE #BuffersListTbl;

		DECLARE cursorFinishEvents CURSOR FAST_FORWARD FOR
  		 SELECT [BC].[EVENT], [BC].[FILTER], [BC].[CHANGE_STEPS]
		   FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES] [BC]
		  WHERE [BC].[ATYPICAL_CONSUMPTION_STATUS] = 'S'
		OPEN cursorFinishEvents;

		FETCH NEXT FROM cursorFinishEvents
 		 INTO @IdEvent, @Filter, @ChangeSteps;

		-- -----------------------------------------------------------------------------------
		-- TODO OHLO 20191227: Since v4.14.0, fix the way for getting the minimum update date
		--                     and finishing events properly
		-- -----------------------------------------------------------------------------------
		DECLARE @MinDateSQLQuery   NVARCHAR(MAX) = '';
		
		DECLARE @MaxOfMinBufferUpdateDates DATE = NULL;
																														 
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			IF (@Filter IS NOT NULL AND @Filter != '')
			BEGIN
				SET @MinDateSQLQuery = @BuffersSQLQuery + CHAR(13) + '   AND (' + @Filter + ')';
			
				EXEC sp_executesql 
					@MinDateSQLQuery  = @MinDateSQLQuery,
					@Params = N'@MinimumBufferUpdateDate DATE OUTPUT',
					@MinimumBufferUpdateDate = @MinimumBufferUpdateDate OUTPUT;
			
				IF (@MaxOfMinBufferUpdateDates < @MinimumBufferUpdateDate) OR (@MaxOfMinBufferUpdateDates IS NULL)
				BEGIN
					SET @MaxOfMinBufferUpdateDates = @MinimumBufferUpdateDate;
				END
				-- -------------------------------------------------------------------------------
		   	    -- OHLO 20201125: Since v5.3.0, add a commit sentence to avoid large amounts of 
			    -- 				  data within a single transaction.
			    -- -------------------------------------------------------------------------------
			    --COMMIT;															  
			END	
			FETCH NEXT FROM cursorFinishEvents
			 INTO @IdEvent, @Filter, @ChangeSteps;
		
		END
		
		CLOSE cursorFinishEvents;
		DEALLOCATE cursorFinishEvents;

			-- Mark as Finished (F) those started events that are already finished
		IF (@MaxOfMinBufferUpdateDates IS NOT NULL)
		BEGIN
			UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
			   SET ATYPICAL_CONSUMPTION_STATUS = 'F'
			 WHERE ATYPICAL_CONSUMPTION_STATUS = 'S'
			   AND EVENT_ENDING_DATE < @MaxOfMinBufferUpdateDates;
		END
		
		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'PROCESS_PENDING_BUFFER_CHANGES_SUCCEED', @Language, '', '', '', @MsgProcessPendingBufferChangesSucceed OUTPUT;
		
		SET @ovaResult = '0'; 
		SET @ovaMessage = @ovaMessage + @MsgProcessPendingBufferChangesSucceed ;	
	END TRY 
	BEGIN CATCH 
		IF ((SELECT CURSOR_STATUS('global','cursorBufferChangesEvents')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorBufferChangesEvents')) IN (0,1))
			BEGIN
				CLOSE cursorBufferChangesEvents;
			END
			DEALLOCATE cursorBufferChangesEvents;
		END
	 	IF ((SELECT CURSOR_STATUS('global','cursorFinishEvents')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorFinishEvents')) IN (0,1))
			BEGIN
				CLOSE cursorFinishEvents;
			END
			DEALLOCATE cursorFinishEvents;
		END
	 		
		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'PROCESS_PENDING_BUFFER_CHANGES_FAILED', @Language, '', '', '', @MsgProcessPendingBufferChangesFailed OUTPUT;
																						
		SET @ovaResult  = '1';
		SET @ovaMessage = @MsgProcessPendingBufferChangesFailed 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR) 
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_PROCESS_PENDING_BUFFER_CHANGES]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT;
		
		SET @ErMessage  = ERROR_MESSAGE();
		SET @ErSeverity = ERROR_SEVERITY();
		SET @ErState    = ERROR_STATE();
		
		RAISERROR (@ErMessage, @ErSeverity, @ErState);     
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REMOVE_COLUMN]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 15/11/2017
-- Description  : Remove column and its contraints.
-- Version      : 4.8.0
-- ===========================================================================
CREATE PROCEDURE [dbo].[USP_REMOVE_COLUMN]
	/* Input Parameters */ 
	@GinTableName        NVARCHAR(500),
	/* M Manual, A Automatic */
	@GinColumnName		 NVARCHAR(500) 
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		 

		DECLARE @DynSQL NVARCHAR(MAX), @constraintSQL NVARCHAR(MAX);

		SET @DynSQL = 'ALTER TABLE ' + @GinTableName + ' DROP' ;
		
		-- Get all constraints related to the column @GinColumnName
		DECLARE constraintsCursor CURSOR FAST_FORWARD FOR   
		 SELECT DISTINCT 
				ISNULL(' CONSTRAINT ' + QUOTENAME(OBJECT_NAME(c.default_object_id)) + ',','') + 
				ISNULL(check_constraints,'') 
		   FROM sys.columns c
				CROSS APPLY (SELECT ' CONSTRAINT ' + QUOTENAME(OBJECT_NAME(referencing_id)) + ','
							   FROM sys.sql_expression_dependencies
							  WHERE referenced_id = c.object_id
								AND referenced_minor_id = c.column_id
								AND OBJECTPROPERTYEX(referencing_id, 'BaseType') = 'C'
							FOR XML PATH('')) ck(check_constraints)
		   WHERE c.object_id = object_id(@GinTableName)
		     AND c.name = @GinColumnName;

		OPEN constraintsCursor  

		FETCH NEXT FROM constraintsCursor INTO @constraintSQL 

		WHILE (@@FETCH_STATUS = 0)
		BEGIN  
			IF ( @constraintSQL IS NOT NULL AND RTRIM(LTRIM(@constraintSQL)) <> '')
			BEGIN
				SET @DynSQL = @DynSQL + @constraintSQL;
			END 

			FETCH NEXT FROM constraintsCursor INTO @constraintSQL;
		END

		CLOSE constraintsCursor;
		DEALLOCATE constraintsCursor;
 
		-- Add the column to be droped at the end of the statement
		SET @DynSQL = @DynSQL + ' COLUMN ' + QUOTENAME(@GinColumnName)

		-- Finally, execute the statement only if the column actually exists
		IF EXISTS (SELECT 1 FROM sys.sysobjects T INNER JOIN sys.syscolumns C ON T.id = C.id
			        WHERE T.name = @GinTableName AND C.name = @GinColumnName)
		BEGIN
			
			--PRINT @DynSQL;
			EXEC (@DynSQL); 
			--PRINT 'Column ' + @GinTableName + '.' + @GinColumnName + ' removed successfully!';
		END
		
	END TRY
	BEGIN CATCH
		PRINT 'Error removing the column ' + @GinTableName + '.' + @GinColumnName + CHAR(13)
		PRINT '	ERROR_NUMBER:    ' + ISNULL(CAST (ERROR_NUMBER() AS varchar), '') + CHAR(13)
			+ '	ERROR_SEVERITY:  ' + ISNULL(CAST (ERROR_SEVERITY() AS varchar), '') + CHAR(13)
			+ '	ERROR_STATE:     ' + ISNULL(CAST (ERROR_STATE() AS varchar), '') + CHAR(13)
			+ '	ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '') + CHAR(13)
			+ '	ERROR_LINE:      ' + ISNULL(CAST (ERROR_LINE() AS varchar), '') + CHAR(13)
			+ '	ERROR_MESSAGE:   ' + ISNULL(ERROR_MESSAGE(), '') + CHAR(13); 

		PRINT '		"' + @DynSQL + '"'

	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REMOVE_FILTERED_BUFFERS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author       : Isaac Florez
-- Creation date: 09/09/2020
-- Description  : Remove records from TFSCM_CLI_BUFFER_CHANGES_STEPS table when master buffer
--				  is removed
-- Version      : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 28/07/2018
-- Description  : Remove all filtered records from Buffers
-- Version      : 4.9.2
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_REMOVE_FILTERED_BUFFERS]
	/* Input Parameters */ 
    @GinUserFilters             NVARCHAR(MAX), 
	/* Output Parameters */
	@GoutResult                 VARCHAR(1)    OUTPUT,
    @GoutMessage                NVARCHAR(MAX) OUTPUT
AS
	DECLARE @Sku                     VARCHAR(50);
	DECLARE @Location                VARCHAR(50);
	
	DECLARE @sqlStatement            NVARCHAR(MAX);
	DECLARE @sqlSelStatement         NVARCHAR(MAX);
	DECLARE @sqlEndStatement         NVARCHAR(MAX);
	DECLARE @SqlOrderByStatement     NVARCHAR(MAX);
  
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;  

		IF OBJECT_ID('BufferListTbl') IS NOT NULL 
			DROP TABLE BufferListTbl;

		SELECT DISTINCT [B].[SKU], [B].[LOCATION]
		  INTO BufferListTbl
		  FROM [dbo].[TFSCM_CLI_BUFFER] [B] 
		 WHERE 2 = 1;	
	 
	 /*
		IF (OBJECT_ID('tempdb..#BufferListTbl') IS NOT NULL)
		BEGIN
			DROP TABLE #BufferListTbl;
		END 
	    
		CREATE TABLE #BufferListTbl 
			([SKU]      [varchar](50) NOT NULL,
			 [LOCATION] [varchar](50) NOT NULL 
			 PRIMARY KEY CLUSTERED ([SKU] ASC, [LOCATION] ASC) WITH (IGNORE_DUP_KEY = OFF)
			); */
		
		-- Setting messages
		DECLARE @Language                             VARCHAR(2) = 'en';
		DECLARE @CodErrorResultMessages               VARCHAR(1); 
		DECLARE @MessageErrorResultMessages           NVARCHAR(MAX);
		DECLARE @MsgOptimizeSuggestionsManuallyError  NVARCHAR(MAX);
		DECLARE @MsgOptimizeSuggestionsNonRequired    NVARCHAR(MAX)

		-- Get default language	 
		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE'; 
			
		EXEC GET_MESSAGE @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,
			'OPTIMIZE_SUGGESTIONS_MANUALLY_ERROR', @Language, '', '', '', 
			@MsgOptimizeSuggestionsManuallyError OUTPUT;
 		
		DECLARE @ServerDate                    DATETIME   = GETDATE(); 
		DECLARE @CdInterfaceBuffers            VARCHAR(1) = 3;
		DECLARE @ComponentInventoryBuffers     SMALLINT   = 9;
		DECLARE @EnableDeletingPhysicalBuffers VARCHAR(1000) = 'N';
		
		-- Get EnableDeletingPhysicalBuffers param value	 
		SELECT @EnableDeletingPhysicalBuffers = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P] 
		 WHERE [P].[CDCOMPONENT] = @ComponentInventoryBuffers 
		   AND [P].[CDPARAM]     = 'ENABLE_DELETING_PHYSICAL_BUFFERS'; 
		
		-- Get the buffer list to be removed
		SET @sqlSelStatement = ''
			+ 'SELECT [BUFFER].[SKU], [BUFFER].[LOCATION] '
			+ '  FROM [dbo].[TFSCM_CLI_BUFFER] [BUFFER] ';
			
		SET @sqlEndStatement = ''
			+ ' WHERE [BUFFER].[INACTIVE] = 0 '; 
			 			
		SET @sqlStatement = @sqlSelStatement + @sqlEndStatement;
	
		IF (@GinUserFilters IS NOT NULL AND RTRIM(LTRIM(@GinUserFilters)) <> '')
		BEGIN
			SET @sqlStatement = @sqlStatement  + ' AND ' + @GinUserFilters;
		END
 		
		DELETE FROM BufferListTbl;
		INSERT INTO BufferListTbl (SKU, LOCATION) 
		  EXEC (@sqlStatement);
		
		CREATE INDEX IdxBufferListTbl ON BufferListTbl ([SKU], [LOCATION]);

		DELETE FROM [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS].[LOCATION]
							  AND a.SKU      = [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS].[SKU]);

		-- This part does the delete according to the ENABLE_DELETING_PHYSICAL_BUFFERS parameter 
		IF (@EnableDeletingPhysicalBuffers = 'Y')
		BEGIN					
			DELETE FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY]
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_BUFFER_HISTORY].[LOCATION]
							  AND a.SKU      = [dbo].[TFSCM_CLI_BUFFER_HISTORY].[SKU]);

			DELETE FROM [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY].[CDLOCATION]
							  AND a.SKU      = [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY].[SKU]);

			DELETE FROM [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY]
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY].[LOCATION] 
							  AND a.SKU      = [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY].[SKU]);

			DELETE FROM [dbo].[TFSCM_CLI_BUFFER]
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_BUFFER].[LOCATION] 
							  AND a.SKU      = [dbo].[TFSCM_CLI_BUFFER].[SKU]);
		END
		ELSE
		BEGIN
			-- If Deleting Buffers Physically is not allowed, then mark them as Inactive
			UPDATE [dbo].[TFSCM_CLI_BUFFER]
			   SET INACTIVE          = 1, 
			       INACTIVATION_DATE = @ServerDate 
			 WHERE EXISTS (SELECT 1 
							 FROM BufferListTbl a 
							WHERE a.LOCATION = [dbo].[TFSCM_CLI_BUFFER].[LOCATION] 
							  AND a.SKU      = [dbo].[TFSCM_CLI_BUFFER].[SKU]);
		END
		
		UPDATE [TBL] 
		   SET [TBL].[UPGRADE_TABLE_DATE] = @ServerDate
		  FROM [dbo].[TFSCM_COM_TABLES] [TBL]
		  JOIN [dbo].[TFSCM_DEX_INTERFACES] [INTER] 
			ON ([INTER].[CDTABLE] = [TBL].[CDTABLE] AND [INTER].[CDINTERFACE] = @CdInterfaceBuffers);
		
		SET @GoutResult = 0;
		SET @GoutMessage = ''; 
  	END TRY 
	BEGIN CATCH 
		SET @GoutResult  = '1';
		SET @GoutMessage = ' <br> ' + ' <br> '  
						 + ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		                 + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
                         + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
                         + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_REMOVE_FILTERED_BUFFERS]')
                         + ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
                         + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	 
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REMOVE_JSON_SUMMARY_FIELD]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 24/03/2020
-- Description  : Procedure to replace GinOldField column by GinNewField column, for the 
--                GinCdSection and the list (pipe | separated) GinViewTypeList
-- Version      : 5.0.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_REMOVE_JSON_SUMMARY_FIELD] 
	/* Input Parameters */	
    @GinCdSection      	SMALLINT,
    @GinOldField	   	VARCHAR(50),
	@GinNewField		VARCHAR(50),
    @GinViewTypeList  	NVARCHAR(MAX),
	/* Output Parameters */
    @GoutRemoved    	VARCHAR(1) OUTPUT,
    @GoutMessage    	NVARCHAR(MAX) OUTPUT
AS
	
BEGIN	
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;

		DECLARE @Delimiter			VARCHAR(1)    = '|'
		DECLARE @SumJsonViewConf 	NVARCHAR(MAX);
		DECLARE @SumVarsStrJson 	NVARCHAR(MAX);
		DECLARE @UserSumStrJson 	NVARCHAR(MAX); 
		DECLARE @TempJsonStart 	    NVARCHAR(MAX);
		DECLARE @TempJsonEnd     	NVARCHAR(MAX);
		DECLARE @TempSubStr     	NVARCHAR(MAX);
		DECLARE @FinalJsonViewConf 	NVARCHAR(MAX);
		DECLARE @FieldVarCode		VARCHAR(50)   = '';
	 
		DECLARE @CdView    			INT;  	 
		DECLARE @HasCommaAtStart 	VARCHAR(1) = 'Y';
		DECLARE @HasCommaAtEnd   	VARCHAR(1) = 'N';
		DECLARE @PosUserSum 		NUMERIC(10) = CHARINDEX('userSummary:{', @SumJsonViewConf);
		DECLARE @PosSumVars 		NUMERIC(10) = CHARINDEX('summaryVars:{', @SumJsonViewConf);
		DECLARE @PosTemp    		NUMERIC(10)
		DECLARE @PosDelete    		NUMERIC(10)

		DECLARE cursorViews CURSOR FAST_FORWARD FOR
		SELECT [V].[CDVIEW], [V].[JSON_VIEW_CONF]
		  FROM [dbo].[TFSCM_CLI_VIEWS] [V] 
		 WHERE [V].[CDSECTION]         = @GinCdSection 
		   AND (@GinViewTypeList         IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [V].[VIEW_TYPE]        IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter))) 
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinOldField + '%'
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinNewField + '%'
		   AND [JSON_VIEW_CONF]  LIKE '%userSummary%';
		OPEN cursorViews;
							
		FETCH NEXT FROM cursorViews INTO @CdView, @SumJsonViewConf;

		-- -----------------------------------------------------------------------------------
		-- Loop for each view 
		-- -----------------------------------------------------------------------------------
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			SET @PosUserSum      = CHARINDEX('userSummary:{', @SumJsonViewConf);
			SET @PosSumVars      = CHARINDEX('summaryVars:{', @SumJsonViewConf);
			SET @HasCommaAtStart = 'Y';
			SET @HasCommaAtEnd   = 'N';
		 
			-- -------------------------------------------------------------------------------
			-- Loop for each userSummary section into JSON view configuration
			-- -------------------------------------------------------------------------------
			WHILE (@PosUserSum > 0)
			BEGIN			
				SET @TempJsonStart  = SUBSTRING(@SumJsonViewConf, 0, @PosUserSum);
				SET @UserSumStrJson = SUBSTRING(@SumJsonViewConf, @PosUserSum, @PosSumVars - @PosUserSum);
				SET @PosTemp	    = CHARINDEX('}', @SumJsonViewConf, @PosSumVars + 1);
				SET @SumVarsStrJson = SUBSTRING(@SumJsonViewConf, @PosSumVars, @PosTemp - @PosSumVars + 1);
				SET @TempJsonEnd    = SUBSTRING(@SumJsonViewConf, @PosTemp + 1, len(@SumJsonViewConf));			
				SET @PosTemp	    = CHARINDEX(':\"' + @GinOldField + '\"', @SumVarsStrJson);
				
				-- ---------------------------------------------------------------------------
				-- If JSON contains the old field...
				-- ---------------------------------------------------------------------------
				IF (@PosTemp > 0)
				BEGIN 
					-- -----------------------------------------------------------------------
					-- ...and JSON contains also the new field...
					-- -----------------------------------------------------------------------
					IF (CHARINDEX(':\"' + @GinNewField + '\"', @SumVarsStrJson) > 0)
					BEGIN
						-- -------------------------------------------------------------------
						-- ...then remove the old field from the JSON 
						-- -------------------------------------------------------------------					
						SET @TempSubStr = REVERSE(SUBSTRING(@SumVarsStrJson, 0, @PosTemp));
						SET @PosTemp    = CHARINDEX(',', @TempSubStr);

						IF (@PosTemp = 0)
						BEGIN
							SET @PosTemp         = CHARINDEX('{', @TempSubStr);
							SET @HasCommaAtStart = 'N'
						END
					
						SET @FieldVarCode   = REVERSE(SUBSTRING(@TempSubStr, 0, @PosTemp));				 
						SET @UserSumStrJson = REPLACE(@UserSumStrJson, '#{' + @FieldVarCode + '}', '')
						SET @PosTemp	    = CHARINDEX(@FieldVarCode + ':\"' + @GinOldField + '\"', @SumVarsStrJson);				 
						SET @TempSubStr     = SUBSTRING(@SumVarsStrJson, 0, @PosTemp);				
						SET @PosDelete      = @PosTemp + LEN(@FieldVarCode + ':\"' + @GinOldField + '\"');
					
						IF (SUBSTRING(@SumVarsStrJson, @PosDelete, 1) = ',')
						BEGIN
							SET @HasCommaAtEnd = 'Y'; 
							SET @PosDelete     = @PosDelete + 1;						
						END
						ELSE
						BEGIN
							IF (@HasCommaAtStart = 'Y')
							BEGIN
								SET @TempSubStr = SUBSTRING(@TempSubStr, 0, LEN(@TempSubStr));
							END
						END 
					
						SET @SumVarsStrJson    = @TempSubStr + SUBSTRING(@SumVarsStrJson, @PosDelete, LEN(@SumVarsStrJson))
						SET @FinalJsonViewConf = @TempJsonStart + @UserSumStrJson + @SumVarsStrJson + @TempJsonEnd
						SET @SumJsonViewConf   = @FinalJsonViewConf;					 
					END 
				END
			
				-- ---------------------------------------------------------------------------
				-- Now, look for the next occurrence of a userSummary label  
				-- ---------------------------------------------------------------------------
				SET @PosUserSum      = CHARINDEX('userSummary:{', @SumJsonViewConf, @PosUserSum + 1);
				SET @PosSumVars      = CHARINDEX('summaryVars:{', @SumJsonViewConf, @PosUserSum + 1);
 				SET @HasCommaAtStart = 'Y';
				SET @HasCommaAtEnd   = 'N'				
			END  
			 
			UPDATE [dbo].[TFSCM_CLI_VIEWS]
			   SET [JSON_VIEW_CONF] = @SumJsonViewConf
			 WHERE [CDVIEW] = @CdView;
				 
			FETCH NEXT FROM cursorViews INTO @CdView, @SumJsonViewConf;
		END
		CLOSE cursorViews;
		DEALLOCATE cursorViews;	 
		 
		SET @GoutRemoved = 'Y';
		SET @GoutMessage = 'OK'
	END TRY
	BEGIN CATCH
		SET @GoutRemoved = 'N';	 
		SET @GoutMessage = ''
						+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
						+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
						+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
						+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_REMOVE_JSON_SUMMARY_FIELD]')
						+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
						+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cursorViews')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorViews')) IN (0,1))
			BEGIN
				CLOSE cursorViews;  		
			END
			DEALLOCATE cursorViews;  
		END 
		
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : 
-- Upgrade date: dd/mm/yyyy
-- Description : 
-- Version     : X.Y.Z
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 23/05/2019
-- Description  : Reorder the sequence for a given section in automation rules master.
-- Version      : 4.13.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE] 
	/* Input Parameters */
	@GinCdSection      AS VARCHAR(10),
	@GinCdRule         AS VARCHAR(50),
	@GinOldSequence    AS INT,
	@GinNewSequence    AS INT,
	@GinCdOperation    AS VARCHAR(1),
	/* Input Parameters */
	@ovaResult   VARCHAR(1)    OUTPUT,
	@ovaMessage  NVARCHAR(MAX) OUTPUT 
AS
    DECLARE @NewSequence AS INT; 
	DECLARE @CdRule        AS VARCHAR(50) ;
			
BEGIN 
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRANSACTION;
		
		IF (@GinCdOperation = 'I') 
		BEGIN
			UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
				   SET [SEQUENCE] = [SEQUENCE] + 1  
				 WHERE [SEQUENCE]  >= @GinNewSequence
				   AND [CDSECTION] =  @GinCdSection
				   AND [CDRULE]    <> @GinCdRule;
		END
		ELSE IF (@GinCdOperation = 'U') 
		BEGIN
			IF (@GinOldSequence > @GinNewSequence)
			BEGIN
				UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
				   SET [SEQUENCE] = [SEQUENCE] + 1  
				 WHERE [SEQUENCE]  >= @GinNewSequence
				   AND [SEQUENCE]  <  @GinOldSequence
				   AND [CDSECTION] =  @GinCdSection
				   AND [CDRULE]    <> @GinCdRule;
			END
			ELSE
			BEGIN
				UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
				   SET [SEQUENCE] = [SEQUENCE] - 1  
				 WHERE [SEQUENCE]  >  @GinOldSequence
				   AND [SEQUENCE]  <= @GinNewSequence
				   AND [CDSECTION] =  @GinCdSection
				   AND [CDRULE]    <> @GinCdRule;
			END
		END
		ELSE IF (@GinCdOperation = 'D') 
		BEGIN
 			SET @NewSequence = 0;
			DECLARE curSectionRules CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR 
			 SELECT ROW_NUMBER() OVER (ORDER BY [SEQUENCE] ASC) AS ID, [CDRULE]
			   FROM [dbo].[TFSCM_CLI_AUTOMATION_RULES]
			  WHERE [CDSECTION] = @GinCdSection;
			   
			OPEN curSectionRules; 
			FETCH curSectionRules INTO @NewSequence, @CdRule;
					
			WHILE (@@FETCH_STATUS = 0 ) 
				BEGIN	
					UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
					   SET [SEQUENCE]  = @NewSequence
					 WHERE [CDSECTION] = @GinCdSection
					   AND [CDRULE]    = @CdRule;
					  
					FETCH curSectionRules INTO @NewSequence, @CdRule;		
				END
			CLOSE curSectionRules;
			DEALLOCATE curSectionRules;
		END
		COMMIT;
		SET @ovaResult = '0';
		SET @ovaMessage = 'successReorderSequence';
	END TRY
	BEGIN CATCH
		ROLLBACK;
		SET @ovaResult = '1';
	
		IF ((SELECT CURSOR_STATUS('global','curSectionRules')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curSectionRules')) IN (0,1))
			BEGIN
				CLOSE curSectionRules;  		
			END
			DEALLOCATE curSectionRules;  
		END	
		
		SET @ovaMessage =  ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()
	END CATCH
	
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REPLACE_JSON_FIELD]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 24/03/2020
-- Description  : Procedure to replace GinOldField column by GinNewField column, for the 
--                GinCdSection and the list (pipe | separated) GinViewTypeList
-- Version      : 5.0.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_REPLACE_JSON_FIELD] 
	/* Input Parameters */	
    @GinCdSection      	SMALLINT,
    @GinOldField	   	VARCHAR(50),
	@GinNewField		VARCHAR(50),
    @GinViewTypeList  	NVARCHAR(MAX),
	/* Output Parameters */
    @GoutReplaced    	VARCHAR(1) OUTPUT,
    @GoutMessage    	NVARCHAR(MAX) OUTPUT
AS
	
BEGIN	
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;

		DECLARE @Delimiter CHAR(1) = '|';  
		DECLARE @ColumnTemp VARCHAR(100) = '';  
		
		/* 1) Restre the OldField in JsonViewConf */
		IF EXISTS (SELECT * FROM [dbo].[TFSCM_CLI_VIEWS] V 
					WHERE [V].[CDSECTION]      = @GinCdSection 
					  AND [V].[VIEW_TYPE]      IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter))
					  AND [V].[JSON_VIEW_CONF] NOT LIKE '%' + @GinOldField + '%')
		BEGIN
			DECLARE @pos1      INT;
			DECLARE @pos2      INT;
			DECLARE @CdView    INT; 
			DECLARE @JsonViewConf         NVARCHAR(MAX);
			DECLARE @JsonViewConfStart    NVARCHAR(MAX);
			DECLARE @JsonViewConfEnd      NVARCHAR(MAX);
			DECLARE @JsonViewConfNew      NVARCHAR(MAX);
			DECLARE @JsonViewConfResponse NVARCHAR(MAX);			 

			DECLARE cursorViews CURSOR FAST_FORWARD FOR
			 SELECT [V].[CDVIEW], [V].[JSON_VIEW_CONF]
			   FROM [dbo].[TFSCM_CLI_VIEWS] [V] 
			  WHERE [V].[CDSECTION]           = @GinCdSection 
				AND (@GinViewTypeList         IS NULL 
					OR TRIM(@GinViewTypeList) = '' 
					OR [V].[VIEW_TYPE]        IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
				AND [V].[JSON_VIEW_CONF] NOT LIKE '%' + @GinOldField + '%'

			OPEN cursorViews;
						
			FETCH NEXT FROM cursorViews INTO @CdView, @JsonViewConf;

			WHILE (@@FETCH_STATUS = 0)
			BEGIN
				/* If it is Buffers section, the OldField will be restored next to Protection Factor field */
				IF (@GinCdSection = 23)
				BEGIN
					SET @pos1 = CHARINDEX('{name:\"PROTECTION_FACTOR\",', @JsonViewConf); 
				END
				
				SET @JsonViewConfNew = ',{name:\"' + @GinOldField + '\",visible:false,autoFitWidth:false,width:180}';
				 
				SET @pos2 = CHARINDEX('}', @JsonViewConf, @pos1);
				SET	@JsonViewConfStart    = SUBSTRING(@JsonViewConf, 1,  @pos2);	
				SET	@JsonViewConfEnd      = SUBSTRING(@JsonViewConf, @pos2 + 1,  LEN(@JsonViewConf));
				
				SET @JsonViewConfResponse = @JsonViewConfStart + @JsonViewConfNew + @JsonViewConfEnd;

				UPDATE [dbo].[TFSCM_CLI_VIEWS]
				   SET [JSON_VIEW_CONF] = @JsonViewConfResponse
				 WHERE [CDVIEW] = @CdView;
				 
				FETCH NEXT FROM cursorViews INTO @CdView, @JsonViewConf;
			END

			CLOSE cursorViews;
			DEALLOCATE cursorViews;
		END

		/* 2) Fixing views sorting  */ 
		/* 2.1) Remove OldField when GinNewField is also part of the view sorting */ 
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'property:\"' + @GinOldField + '\"', 'property:\"' + @GinOldField  + '_rem\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%property:\"' + @GinOldField + '\"%'
		   AND [JSON_VIEW_CONF]  LIKE '%property:\"' + @GinNewField + '\"%';

		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'fieldName:\"' + @GinOldField + '\"', 'fieldName:\"' + @GinOldField  + '_rem\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%fieldName:\"' + @GinOldField + '\"%'
		   AND [JSON_VIEW_CONF]  LIKE '%fieldName:\"' + @GinNewField + '\"%';
		
		SET @ColumnTemp = @GinOldField + '_rem';
		   
		EXEC  [dbo].[SP_REMOVE_JSON_FIELD] 0, @ColumnTemp,  null;		
		
		/* 2.2) Replace OldField with GinNewField for views sorting  */ 
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'property:\"' + @GinOldField + '\"', 'property:\"' + @GinNewField  + '_sort\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%property:\"' + @GinOldField + '\"%';
		   
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'fieldName:\"' + @GinOldField + '\"', 'fieldName:\"' + @GinNewField  + '_sort\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%fieldName:\"' + @GinOldField + '\"%';
		   
		/* 2.3) Replace OldField with GinNewField for views sorting  */ 
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'property:\"' + @GinNewField + '\"', 'property:\"' + @GinNewField  + '_sort\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%property:\"' + @GinNewField + '\"%';
		   
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'fieldName:\"' + @GinNewField + '\"', 'fieldName:\"' + @GinNewField  + '_sort\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%fieldName:\"' + @GinNewField + '\"%';	
		  
		/* 3) Replace OldField with GinNewField */
		/* 3.1) Replace it in views where both fields are visible */
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField, @GinOldField + '_1')
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",autoFitWidth%'  OR [JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",width%')
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",autoFitWidth%'  OR [JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",width%');
		   
		SET @ColumnTemp = @GinOldField + '_1';
		   
		EXEC  [dbo].[SP_REMOVE_JSON_FIELD] 0, @ColumnTemp,  null;
		
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField + '_1', @GinOldField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinOldField + '_1' + '%';
		   
		/* 3.2) Replace it in views where only OldField is visible */
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE(REPLACE([JSON_VIEW_CONF], @GinNewField, @GinNewField + '_1'), @GinOldField, @GinNewField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",autoFitWidth%'  OR [JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",width%')
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",visible:false%' OR [JSON_VIEW_CONF] NOT LIKE '%{name:\"' + @GinNewField + '\"%');
		
		SET @ColumnTemp = @GinNewField + '_1';
		   
		EXEC  [dbo].[SP_REMOVE_JSON_FIELD] 0, @ColumnTemp,  null;
		
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinNewField + '_1', @GinNewField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinNewField + '_1' + '%';
		   
		/* 3.3) Replace it in views where only NewField is visible */
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField, @GinOldField + '_1')
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",visible:false%' OR [JSON_VIEW_CONF] NOT LIKE '%{name:\"' + @GinOldField + '\"%')
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",autoFitWidth%'  OR [JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",width%');
		 
		SET @ColumnTemp = @GinOldField + '_1';
		   
		EXEC  [dbo].[SP_REMOVE_JSON_FIELD] 0, @ColumnTemp,  null;
		
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField + '_1', @GinOldField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinOldField + '_1' + '%';
		   
		/* 3.4) Replace it in views where both fields are hidden */	 	 
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField, @GinOldField + '_1')
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinOldField + '\",visible:false%' OR [JSON_VIEW_CONF] NOT LIKE '%{name:\"' + @GinOldField + '\"%')
		   AND ([JSON_VIEW_CONF] LIKE '%{name:\"' + @GinNewField + '\",visible:false%' OR [JSON_VIEW_CONF] NOT LIKE '%{name:\"' + @GinNewField + '\"%');	 

		SET @ColumnTemp = @GinOldField + '_1';
		   
		EXEC  [dbo].[SP_REMOVE_JSON_FIELD] 0, @ColumnTemp,  null;

		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], @GinOldField + '_1', @GinOldField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinOldField + '_1' + '%';
		   
		/* 4) Fix new sorting */
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'property:\"' + @GinNewField + '_sort\"', 'property:\"' + @GinNewField  + '\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%property:\"' + @GinNewField + '_sort\"%';
		  
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF], 'fieldName:\"' + @GinNewField + '_sort\"', 'fieldName:\"' + @GinNewField  + '\"' )
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%fieldName:\"' + @GinNewField + '_sort\"%';

		/* 5) Fix any existing BUD column */
		UPDATE [dbo].[TFSCM_CLI_VIEWS]
		   SET [JSON_VIEW_CONF] = REPLACE([JSON_VIEW_CONF],  @GinOldField, @GinNewField)
		 WHERE [CDSECTION]       = @GinCdSection
		   AND (@GinViewTypeList IS NULL 
				OR TRIM(@GinViewTypeList) = '' 
				OR [VIEW_TYPE]   IN (SELECT DISTINCT value FROM STRING_SPLIT(@GinViewTypeList, @Delimiter)))
		   AND [JSON_VIEW_CONF]  LIKE '%' + @GinOldField + '%';
		 
		SET @GoutReplaced = 'Y';
		SET @GoutMessage = 'OK'
	END TRY
	BEGIN CATCH
		SET @GoutReplaced = 'N';	 
		SET @GoutMessage = ''
						+ ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
						+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
						+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
						+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_REPLACE_JSON_FIELD]')
						+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
						+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
		
		IF ((SELECT CURSOR_STATUS('global','cursorViews')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorViews')) IN (0,1))
			BEGIN
				CLOSE cursorViews;  		
			END
			DEALLOCATE cursorViews;  
		END 
		
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_REPLACE_SKU_VALUE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Upgrade date : 05/07/2019
-- Description  : Update the new sku value into Filter column for Automation Rules
-- Version      : 4.13.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 05/04/2019
-- Description  : Replace the value for a SKU sent and replicate that value in related tables
-- Version      : 4.12.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_REPLACE_SKU_VALUE] 
	/* Input Parameters */  
	@GinOldSku      VARCHAR(50),
	@GinOldLocation VARCHAR(50),
	@GinNewSku      VARCHAR(50),
	
    /* Output Parameters */	    
    @GoutResult VARCHAR(1)     OUTPUT,
    @GoutMessage NVARCHAR(MAX) OUTPUT 
AS
	
BEGIN	
	BEGIN TRY		
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;
		
		DECLARE @NewSkuTextIEQ            VARCHAR(MAX);
		DECLARE @NewSkuTextEQ             VARCHAR(MAX);
		DECLARE @OldSkuTextIEQ            VARCHAR(MAX);
		DECLARE @OldSkuTextEQ             VARCHAR(MAX);
		DECLARE @NewSkuChgTextIEQ         VARCHAR(MAX);
		DECLARE @NewSkuChgTextEQ          VARCHAR(MAX);
		DECLARE @OldSkuChgTextIEQ         VARCHAR(MAX);
		DECLARE @OldSkuChgTextEQ          VARCHAR(MAX);
		DECLARE @OldLocationTextIEQ       VARCHAR(MAX);
		DECLARE @OldLocationTextEQ        VARCHAR(MAX);
		DECLARE @OldLocationChgTextIEQ    VARCHAR(MAX);
		DECLARE @OldLocationChgTextEQ     VARCHAR(MAX);
		DECLARE @OldCdLocationTextIEQ     VARCHAR(MAX);
		DECLARE @OldCdLocationTextEQ      VARCHAR(MAX);
		DECLARE @OldDestinationTextIEQ    VARCHAR(MAX);
		DECLARE @OldDestinationTextEQ     VARCHAR(MAX);
		DECLARE @OldCdDestinationTextIEQ  VARCHAR(MAX);
		DECLARE @OldCdDestinationTextEQ   VARCHAR(MAX);
		
		SET @NewSkuTextIEQ = '"fieldName":"SKU", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
		
		SET @NewSkuTextEQ = '"fieldName":"SKU", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
			
		SET @OldSkuTextIEQ = '"fieldName":"SKU", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldSku + '"';
			
		SET @OldSkuTextEQ = '"fieldName":"SKU", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldSku + '"';
			
		SET @NewSkuChgTextIEQ = '"fieldName":"SKU_CHG", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
		
		SET @NewSkuChgTextEQ = '"fieldName":"SKU_CHG", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
		
		SET @OldSkuChgTextIEQ = '"fieldName":"SKU_CHG", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
			
		SET @OldSkuChgTextEQ = '"fieldName":"SKU_CHG", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinNewSku + '"';
		
		SET @OldLocationTextIEQ = '"fieldName":"LOCATION", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldLocationTextEQ = '"fieldName":"LOCATION", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldLocationChgTextIEQ = '"fieldName":"LOCATION_CHG", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldLocationChgTextEQ = '"fieldName":"LOCATION_CHG", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldCdLocationTextIEQ = '"fieldName":"CDLOCATION", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldCdLocationTextEQ = '"fieldName":"CDLOCATION", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
			
		SET @OldDestinationTextIEQ = '"fieldName":"DESTINATION", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldDestinationTextEQ = '"fieldName":"DESTINATION", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
			
		SET @OldCdDestinationTextIEQ = '"fieldName":"CDDESTINATION", ' + CHAR(13)
			+ '            "operator":"iEquals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		SET @OldCdDestinationTextEQ = '"fieldName":"CDDESTINATION", ' + CHAR(13)
			+ '            "operator":"equals", ' + CHAR(13)
			+ '            "value":"' + @GinOldLocation + '"';
		
		/* Change filters with both SKU and Locatoion in one filter string */	
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldLocationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldLocationTextEQ + '%') ;		
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldLocationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldLocationTextEQ + '%') ;
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldCdLocationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldCdLocationTextEQ + '%') ;		
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldCdLocationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldCdLocationTextEQ + '%') ;
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldDestinationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldDestinationTextEQ + '%') ;		
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldDestinationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldDestinationTextEQ + '%') ;
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldCdDestinationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldCdDestinationTextEQ + '%') ;		
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldCdDestinationTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldCdDestinationTextEQ + '%') ;
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuChgTextIEQ, @NewSkuChgTextIEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuChgTextIEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldLocationChgTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldLocationChgTextEQ + '%') ;		
		
		UPDATE [dbo].[TFSCM_CLI_USER_FILTER]
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuChgTextEQ, @NewSkuChgTextEQ)
		 WHERE JSON_USER_FILTER like '%' + @OldSkuChgTextEQ + '%'
		   AND (JSON_USER_FILTER like  '%' + @OldLocationChgTextIEQ + '%' 
		     OR JSON_USER_FILTER like  '%' + @OldLocationChgTextEQ + '%') ;
		
		/* Change filters with one filter line for SKU and other filter line for Locatoion */	
		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuTextIEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldLocationTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldLocationTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);

		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuTextEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldLocationTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldLocationTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);

		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextIEQ, @NewSkuTextIEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuTextIEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuTextIEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldDestinationTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldDestinationTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);

		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuTextEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuTextEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldCdDestinationTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldCdDestinationTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);		
		
		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuChgTextIEQ, @NewSkuChgTextIEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuChgTextIEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuChgTextIEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldLocationChgTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldLocationChgTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);
		
		UPDATE F2
		   SET [JSON_USER_FILTER] = REPLACE([JSON_USER_FILTER], @OldSkuChgTextEQ, @NewSkuTextEQ)
		  FROM [dbo].[TFSCM_CLI_USER_FILTER] F2
		 WHERE F2.JSON_USER_FILTER like '%' + @OldSkuChgTextEQ + '%' 
		   AND EXISTS (SELECT 1
					     FROM [TFSCM_CLI_USER_FILTER] F1 
					    WHERE F1.JSON_USER_FILTER NOT like '%' + @OldSkuChgTextEQ + '%' 
					      AND (F1.JSON_USER_FILTER LIKE '%' + @OldLocationChgTextIEQ + '%'
						    OR F1.JSON_USER_FILTER LIKE '%' + @OldLocationChgTextEQ + '%')
					      AND F1.CDVIEW = F2.CDVIEW);						
		
		-- -----------------------------------------------------------------------------------
		SET @NewSkuTextIEQ = '"operator":"iEquals",'
			+ '             "fieldName":"SKU",'
			+ '             "value":"' + @GinNewSku + '"';

		SET @OldSkuTextIEQ = '"operator":"iEquals",'
			+ '             "fieldName":"SKU",'
			+ '             "value":"' + @GinOldSku + '"';
			
		SET @NewSkuTextEQ = '"fieldName":"SKU",'
			+ '             "operator":"equals",'
			+ '             "value":"' + @GinNewSku + '"';
			
		SET @OldSkuTextEQ = '"fieldName":"SKU",'
			+ '             "operator":"equals",'
			+ '             "value":"' + @GinOldSku + '"';
			
		UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
		   SET [FILTER]      = REPLACE([FILTER], 
						     		   'BUFFER.SKU =''' + @GinOldSku + '''', 
						     		   'BUFFER.SKU =''' + @GinNewSku + ''''),
			   [JSON_FILTER] = REPLACE((REPLACE([JSON_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)), @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE [FILTER] LIKE '%BUFFER.SKU =''' + @GinOldSku + '''%' 
		   AND [FILTER] LIKE '%BUFFER.LOCATION =''' + @GinOldLocation + '''%'

		UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
		   SET [FILTER]      = REPLACE([FILTER],
									   'BUFFER.SKU = ''' + @GinOldSku + '''',
									   'BUFFER.SKU = ''' + @GinNewSku + ''''),
			   [JSON_FILTER] = REPLACE((REPLACE([JSON_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)), @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE [FILTER] LIKE '%BUFFER.SKU = ''' + @GinOldSku + '''%' 
		   AND [FILTER] LIKE '%BUFFER.LOCATION = ''' + @GinOldLocation + '''%'

		UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES_STEPS]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]      = @GinOldSku
		   AND [LOCATION] = @GinOldLocation;

		UPDATE [dbo].[TFSCM_CLI_BUFFER_CHANGES]
		   SET [SKU_CHG] = @GinNewSku
		 WHERE [SKU_CHG]      = @GinOldSku
		   AND [LOCATION_CHG] = @GinOldLocation;
		   
		-- -----------------------------------------------------------------------------------
		
		UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]	  = @GinOldSku
		   AND [LOCATION] = @GinOldLocation;

		UPDATE [dbo].[TFSCM_CLI_BUFFER_REPLENISHMENT_HISTORY]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]        = @GinOldSku
		   AND [CDLOCATION] = @GinOldLocation;

		UPDATE [dbo].[TFSCM_CLI_SUGGESTION_BUFFER_ADJUSTMENT_HISTORY]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]      = @GinOldSku
		   AND [LOCATION] = @GinOldLocation;
		   
		-- -----------------------------------------------------------------------------------

		UPDATE [dbo].[TFSCM_CLI_PURCHASE_ORDERS]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]         = @GinOldSku
		   AND [DESTINATION] = @GinOldLocation;

		UPDATE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]           = @GinOldSku
		   AND [CDDESTINATION] = @GinOldLocation;

 		UPDATE [dbo].[TFSCM_CLI_BUFFER]
		   SET [SKU] = @GinNewSku
		 WHERE [SKU]      = @GinOldSku
		   AND [LOCATION] = @GinOldLocation;
	 
		-- -----------------------------------------------------------------------------------
		SET @NewSkuTextIEQ = '"operator":"iEquals",'
			+ '             "fieldName":"SKU",'
			+ '             "value":"' + @GinNewSku + '"';

		SET @OldSkuTextIEQ = '"operator":"iEquals",'
			+ '             "fieldName":"SKU",'
			+ '             "value":"' + @GinOldSku + '"';
			
		SET @NewSkuTextEQ = '"fieldName":"SKU",'
			+ '             "operator":"equals",'
			+ '             "value":"' + @GinNewSku + '"';
			
		SET @OldSkuTextEQ = '"fieldName":"SKU",'
			+ '             "operator":"equals",'
			+ '             "value":"' + @GinOldSku + '"';
		
		UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
		   SET [FILTER]      = REPLACE([FILTER], 
						     		   'BUFFER.SKU =''' + @GinOldSku + '''', 
						     		   'BUFFER.SKU =''' + @GinNewSku + ''''),
			   [JSON_FILTER] = REPLACE((REPLACE([JSON_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)), @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE [FILTER] LIKE '%BUFFER.SKU =''' + @GinOldSku + '''%' 
		   AND [FILTER] LIKE '%BUFFER.LOCATION =''' + @GinOldLocation + '''%';

		UPDATE [dbo].[TFSCM_CLI_AUTOMATION_RULES]
		   SET [FILTER]      = REPLACE([FILTER],
									   'BUFFER.SKU = ''' + @GinOldSku + '''',
									   'BUFFER.SKU = ''' + @GinNewSku + ''''),
			   [JSON_FILTER] = REPLACE((REPLACE([JSON_FILTER], @OldSkuTextEQ, @NewSkuTextEQ)), @OldSkuTextIEQ, @NewSkuTextIEQ)
		 WHERE [FILTER] LIKE '%BUFFER.SKU = ''' + @GinOldSku + '''%' 
		   AND [FILTER] LIKE '%BUFFER.LOCATION = ''' + @GinOldLocation + '''%';
		   
		-- -----------------------------------------------------------------------------------
		
		SET @GoutResult = '0';
		SET @GoutMessage = 'OK'
	END TRY
	BEGIN CATCH
		SET @GoutResult = '1';
		SET @GoutMessage =  ' ERROR_NUMBER: ' + CAST (ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST (ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST (ERROR_STATE() AS varchar)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_REPLACE_SKU_VALUE]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()		
	
	END CATCH		
END
GO
/****** Object:  StoredProcedure [dbo].[USP_SAVE_OPTIMIZATION_RESULT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 04/10/2020
-- Description : Refactor user-defined table types to temporary tables
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 25/08/2020
-- Description : Modify the way Optimized Priority is being calculated, by adding Pending 
--               Demand column to its formula.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 09/10/2017
-- Description  : Save the optimization result.
-- Version      : 4.8.0
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_SAVE_OPTIMIZATION_RESULT]
	/* Input Parameters */ 
	/* M Manual, A Automatic */
	@GinOptimizationMode		VARCHAR(1),
	@GinApprovedByUser 			VARCHAR(10),
	
	/* Output Parameters */	
  	@GoutResult                 VARCHAR(1)    OUTPUT,
    @GoutMessage                NVARCHAR(MAX) OUTPUT
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @CreateFromAction VARCHAR(3)  = 'RS';
		DECLARE @Location         VARCHAR(50); 
		
		MERGE INTO [dbo].[TFSCM_CLI_BUFFER] AS target  
		USING (SELECT B.SKU,                B.LOCATION,                B.ORIGIN_LOCATION,            B.BUFFER,
				      B.SECURITY_STOCK,     B.MINIMUM_REPLENISHMENT,   B.PACKAGING_UNIT,             B.INVENTORY_ON_SITE,
				      B.NET_INVENTORY,      B.EFFECTIVE_BUFFER,        B.SUGGESTED_BUFFER_REPLENISH, B.REPLENISHMENT_PRIORITY,
				      B.IS_ORIGIN_BUFFER,   B.OPTIMIZED_REPLENISHMENT, B.CONVERSION_FACTOR,          B.FACTORIZED_SUGGESTED_REPLENISHMENT,
				      BF.YELLOW_ZONE_START, BF.RED_ZONE_START,         B.PENDING_DEMAND
				 FROM #DestinationBuffersList B JOIN TFSCM_CLI_BUFFER_FAMILY BF ON (B.FAMILY = BF.CDBUFFER_FAMILY)) 
		   AS source (SKU,               LOCATION,                ORIGIN_LOCATION,            BUFFER,
				      SECURITY_STOCK,    MINIMUM_REPLENISHMENT,   PACKAGING_UNIT,             INVENTORY_ON_SITE,
				      NET_INVENTORY,     EFFECTIVE_BUFFER,        SUGGESTED_BUFFER_REPLENISH, REPLENISHMENT_PRIORITY,
				      IS_ORIGIN_BUFFER,  OPTIMIZED_REPLENISHMENT, CONVERSION_FACTOR,          FACTORIZED_SUGGESTED_REPLENISHMENT,
				      YELLOW_ZONE_START, RED_ZONE_START,          PENDING_DEMAND)  
		   ON (target.SKU       = source.SKU AND 
		       target.LOCATION  = source.LOCATION)
					
		 WHEN MATCHED THEN UPDATE
		  SET target.OPTIMIZED_REPLENISHMENT = CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
												   NULL
											   ELSE 
												   source.OPTIMIZED_REPLENISHMENT
											   END,
			  target.APPROVED_BUFFER_REPLENISH = CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
													 target.APPROVED_BUFFER_REPLENISH
												 ELSE 
													 source.OPTIMIZED_REPLENISHMENT
												 END,			   
			  target.REPLENISHMENT_ACTION = CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
												target.REPLENISHMENT_ACTION
											ELSE
												CASE WHEN (@GinOptimizationMode = 'A' 
													  AND  source.OPTIMIZED_REPLENISHMENT IS NOT NULL
													  AND  source.OPTIMIZED_REPLENISHMENT > 0) THEN
													'ACCEPT'
												ELSE
													target.REPLENISHMENT_ACTION
												END
											END,
			  -- -----------------------------------------------------------------------------
			  -- OHLO 20200825: Since v5.2.0, Add pending demand subtraction.
			  -- -----------------------------------------------------------------------------
			  target.OPTIMIZED_PRIORITY = CASE WHEN(source.BUFFER > 0) THEN
											 CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
												  ((source.BUFFER  + source.SECURITY_STOCK - ISNULL(source.OPTIMIZED_REPLENISHMENT - source.PENDING_DEMAND, 0)) / source.BUFFER) * 100
											  ELSE 
												  ((source.BUFFER  + source.SECURITY_STOCK - ISNULL(source.NET_INVENTORY +  source.OPTIMIZED_REPLENISHMENT , 0)) / source.BUFFER) * 100
											  END
										   ELSE
											  NULL
										   END,
			  -- -----------------------------------------------------------------------------
			  -- OHLO 20200825: Since v5.2.0, Add pending demand subtraction.
			  -- -----------------------------------------------------------------------------
			  target.OPTIMIZED_PRIORITY_COLOR = [dbo].[UFN_GET_OPTIMIZED_PRIORITY_COLOR] (
													/* GinOptimizedPriority */
													CASE WHEN(source.BUFFER > 0) THEN
														CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
															((source.BUFFER  + source.SECURITY_STOCK - ISNULL(source.OPTIMIZED_REPLENISHMENT - source.PENDING_DEMAND, 0)) / source.BUFFER) * 100														 
														ELSE 
															((source.BUFFER  + source.SECURITY_STOCK - ISNULL(source.NET_INVENTORY +  source.OPTIMIZED_REPLENISHMENT , 0)) / source.BUFFER) * 100
														END
													ELSE
														NULL
													END,
													/* GinOptimizedInventory */
													CASE WHEN(source.IS_ORIGIN_BUFFER = 1) THEN
													    source.OPTIMIZED_REPLENISHMENT - source.PENDING_DEMAND
													ELSE 
													    source.NET_INVENTORY +  source.OPTIMIZED_REPLENISHMENT
													END,  
													source.EFFECTIVE_BUFFER, 
													source.YELLOW_ZONE_START,
													source.RED_ZONE_START); 

		SET @GoutResult  = '0';
		SET @GoutMessage = '';
	END TRY
	BEGIN CATCH	
		SET @GoutResult  = 1;
		SET @GoutMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_SAVE_OPTIMIZATION_RESULT]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE() ;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_SET_DATABASE_LOG]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author     : Oscar Londoño
-- Create date: 04/03/2021
-- Description:	Change the name of the stored procedure from SP_SET_DATABASE_LOG to 
--              USP_SET_DATABASE_LOG
-- Version    : 5.3.1
-- -------------------------------------------------------------------------------------------
-- Author:		Oscar Londoño
-- Create date: 02/05/2014
-- Description:	Procedure to set database log with version and file
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_SET_DATABASE_LOG]
	@currentFile varchar(MAX),
	@currentVersion varchar(100),
	@outCode varchar(10) OUTPUT,
	@outMessage NVARCHAR(MAX) OUTPUT
AS
	DECLARE @previousVersion varchar(100),
			@priorFile varchar(MAX);
BEGIN
	SET @outCode = 0;
	SET @outMessage = '';
	-- 'Log Insert Start'
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		SET NOCOUNT ON;
			
		SELECT TOP 1 
			   @previousVersion = CURRENT_VERSION, @priorFile = CURRENT_SCRIPT_FILE 
		  FROM TFSCM_LOG_DATABASE
		 WHERE EXECUTION_DATE < CURRENT_TIMESTAMP
		 ORDER BY EXECUTION_DATE DESC;
		  
		 -- 'Version '+ ISNULL(@previousVersion, '') + ' - File '+ ISNULL(@priorFile,'')
		 		 
		 INSERT INTO TFSCM_LOG_DATABASE (CURRENT_SCRIPT_FILE, CURRENT_VERSION, PRIOR_SCRIPT_FILE, PRIOR_VERSION)
		 VALUES (@currentFile, @currentVersion, @priorFile, @previousVersion);
				  
		-- 'Log Insert Finish'	 		
		SET @outCode = 0;
		SET @outMessage = 'The log for version ' + @currentVersion + ', was created successfully!';
	END TRY
	BEGIN CATCH
		SET @outCode = ERROR_NUMBER();
		SET @outMessage = ''
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_SET_DATABASE_LOG]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 10/11/2020
-- Description : * Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				   BAA_OUT_CLASSIFICATION.
--				 * Rename SP from USP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY to
--				   USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY. 
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 24/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--				 * Rename SP from SP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY to
--				   USP_UPDATE_IGNORE_OUTS_IN_BAA_BUFFER_HISTORY.
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author       : Hernan Dario Jimenez
-- Creation date: 15-12-2014
-- Description  : Update IGNORE_OUTS_IN_BAA field in Buffer History
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY]
	/* Input Parameters */ 
	@GinSku				AS  VARCHAR(50),
	@GinLocation		AS  VARCHAR(50),
	@GinFirstPeriodDate	AS  DATE,
	@GinLastPeriodDate	AS  DATE,
	@GinMinimunUnit		AS  NUMERIC(15,5),
  	/* Output Parameters */ 
  	@GoutResult   		AS VARCHAR(1)    OUTPUT,
    @GoutMessage  		AS NVARCHAR(MAX) OUTPUT
AS	

	DECLARE @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR	AS NVARCHAR(MAX); 
	DECLARE @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS	AS NVARCHAR(MAX);
	DECLARE @Language							AS VARCHAR(2) = 'es'; 
	DECLARE @ResultMessagesErrorCode			AS VARCHAR(1); 
	DECLARE @ResultMessagesErrorMessage			AS NVARCHAR(MAX);
	-- -------------------------------------------------------------------------------------------
	-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
	-- -------------------------------------------------------------------------------------------
	DECLARE @BAA_OUT_CLASSIFICATION_NORMAL		AS VARCHAR(2) = 'N';
	DECLARE @BAA_OUT_CLASSIFICATION_ATYPICAL	AS VARCHAR(2) = 'A';
	DECLARE @BAA_OUT_CLASSIFICATION_PENDING		AS VARCHAR(2) = 'P';
			
BEGIN	
	BEGIN TRY	
		SET NOCOUNT ON;

		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM]     = 'DEFAULT_LANGUAGE'; 
		
		-- -----------------------------------------------------------------------------------
		-- OHLO 20201110: Since v5.3.0, use new BAA out classification types.
		-- -----------------------------------------------------------------------------------
		-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update Movements
		--                column.
		-- -----------------------------------------------------------------------------------
		UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
		   SET [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_PENDING
		 WHERE [SKU]                    = @GinSku 
		   AND [LOCATION]               = @GinLocation 
		   AND [BAA_OUT_CLASSIFICATION] = @BAA_OUT_CLASSIFICATION_NORMAL
		   AND [UPDATE_MOVEMENTS]      >= @GinFirstPeriodDate 
		   AND [UPDATE_MOVEMENTS]      <= @GinLastPeriodDate
		   AND [TOTAL_CONSOLIDATED_OUTPUTS] > ([BUFFER] * (1 - ([RED_ZONE_START] / 100)))
		   AND [TOTAL_CONSOLIDATED_OUTPUTS] > @GinMinimunUnit;
		
		EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
			'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCESS', @Language, '', '', '', @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS OUTPUT;
		
		SET @GoutResult = '0';    
		SET @GoutMessage = @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS;
		
	END TRY 	
	BEGIN CATCH 
		EXEC [dbo].[GET_MESSAGE] @ResultMessagesErrorCode OUTPUT, @ResultMessagesErrorMessage OUTPUT,  
			'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR OUTPUT;
			
		SET @GoutResult = '1';
		SET @GoutMessage = @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_UPDATE_BAA_OUT_CLASSIFICATION_BUFFER_HISTORY]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH 
	
END 
GO
/****** Object:  StoredProcedure [dbo].[USP_UPDATE_BUFFER_HISTORY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño
-- Upgrade date: 11/11/2020
-- Description : Rename the column IGNORE_OUTS_IN_BAA and all related variable names to 
--				 BAA_OUT_CLASSIFICATION.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 14/10/2020
-- Description : Set the proper value for Worst Inventory On Site.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Johan Berrio
-- Upgrade date: 09/09/2020
-- Description : Set the proper value for Days Since Last Out column.
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 27/08/2020
-- Description : Change the call of the function
--				 CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY 
--			     and add var AverageConsumptionFrequency
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Hardik Borad
-- Upgrade date: 01/07/2020
-- Description : Add the corresponding calculations for Worst Inventory On Site, Days Since 
--               Last Out and Daily Average Consumption.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 25/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 29/01/2020
-- Description : Add Daily Average Consumption column to History.
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡
-- Upgrade date: 02/01/2020
-- Description : * GET_MESSAGE calls replaced by parameters
--               * Custom columns updates construction replaced by parameters
--               * Commiting after 10 loops instead of 100
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/12/2019
-- Description : * Add reset sentence for Excluded Outs column.
--				 * Rename SP from SP_UPDATE_BUFFER_HISTORY to USP_UPDATE_BUFFER_HISTORY.
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Michal MokroÅ¡ - Oscar Londoño
-- Upgrade date: 01/05/2019
-- Description : Improve performance for cursors declaration
-- Version     : 4.10.1
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 13/12/2018
-- Description : Add REPLENISHMENT_FREQUENCY to be saved in the history
-- Version     : 4.10.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 15/03/2018
-- Description : Increment REPLENISHMENT_PROBLEM column length to 10, and the variables 
--               related to it
-- Version     : 4.8.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 23/02/2018
-- Description : Add column EXCLUDED_OUTS
-- Version     : 4.8.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 31/01/2018
-- Description : Rename REPLENISHMENT_COEFFICIENT by PROTECTION_FACTOR
-- Version     : 4.8.2
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 20/09/2017
-- Description : Add column REPLENISHMENT_PRIORITY
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 11/08/2017
-- Description : When there is an insert into the Buffer History table, CREATION_DATE must be 
--               CURRENT SERVER DATETIME
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 22/06/2017
-- Description : * Rename CHAIN_PRIORITY by NET_PRIORITY and CHAIN_PRIORITY_COLOR by 
--                 NET_PRIORITY_COLOR
--               * Add columns PENDING_DEMAND, NET_INVENTORY
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Julian Gonzalez
-- Upgrade date: 19/05/2016
-- Description : add column named REPLENISHMENT_PROBLEM 
-- ------------------------------------------------------------------------------------------- 
-- Author      : Oscar Londoño
-- Upgrade date: 22/12/2015
-- Description : Remove AVERAGE_ZONE_IN_LAST_RT 
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 12-08-2015 
-- Description : Remove Creation Date from update statement
-- -------------------------------------------------------------------------------------------
-- Author      : Julian Gonzalez
-- Upgrade date: 22-04-2015 
-- Description : Using user defined tables for buffer history in order to improve the 
--               performance         
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 04-02-2015 
-- Description : Mantis Issue 0008673
--               If it is necessary to fill dates for the history, it must take the data from
--               TFSCM_CLI_BUFFER_HISTORY              
-- -------------------------------------------------------------------------------------------
-- Author      : Julian Gonzalez
-- Upgrade date: 14-11-2014 
-- Description : Change parameters and cursor 
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar Londoño
-- Creation date: 16-04-2014
-- Description  : Insert buffer history
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_UPDATE_BUFFER_HISTORY]
	/* Input Parameters */ 
	@GinBufferDTO						AS BufferTblType READONLY, 
	@GinMsgCalcUpdateBufferHistoryError	AS NVARCHAR(MAX),
    @GinMsgUpdateBufferHistorySuccess	AS NVARCHAR(MAX),  
	@GinSqlUpdate						AS NVARCHAR(MAX),
    @GinSqlUpdateH						AS NVARCHAR(MAX),									 
  	/* Output Parameters */ 
  	@GoutResult		AS VARCHAR(1)    OUTPUT,
    @GoutMessage	AS NVARCHAR(MAX) OUTPUT 
AS
	DECLARE @Sku                          AS VARCHAR(50);
    DECLARE @Location                     AS VARCHAR(50); 
	DECLARE @Family                       AS VARCHAR(50);
	DECLARE @OriginLocation               AS VARCHAR(50);
	DECLARE @ReplenishmentTime            AS INT;
	DECLARE @Buffer                       AS NUMERIC(17,5);
	DECLARE @TotalInventoryOnSite         AS NUMERIC(17,5);
	DECLARE @TotalInventoryOnTransit      AS NUMERIC(17,5);
	DECLARE @TotalInventoryOnPurchasing   AS NUMERIC(17,5);
	DECLARE @TotalInventoryOnProduction   AS NUMERIC(17,5); 
	DECLARE @MeasurementUnit              AS VARCHAR(50);
	DECLARE @MinimumBuffer                AS NUMERIC(17,5);
	DECLARE @SecurityStock                AS NUMERIC(17,5);
	DECLARE @MinimumReplenishment         AS NUMERIC(17,5);
	DECLARE @PackagingUnit                AS NUMERIC(17,5);
	DECLARE @UnitPrice                    AS NUMERIC(17,2);
	DECLARE @Tvc                          AS NUMERIC(17,2);
	DECLARE @ConsolidatedReplenishment    AS NUMERIC(17,5);
	DECLARE @PositiveAdjustments          AS NUMERIC(17,5);
	DECLARE @Consumption                  AS NUMERIC(17,5);
	DECLARE @NegativeAdjustments          AS NUMERIC(17,5);
	DECLARE @LocationType                 AS VARCHAR(50);
	DECLARE @UnitThroughput               AS NUMERIC(17,2); 
	DECLARE @CreationDate                 AS DATETIME;
	DECLARE @AllowedOverstocking          AS NUMERIC(17,5);
	DECLARE @EffectiveBuffer              AS NUMERIC(17,5);
	DECLARE @InventoryOnSite              AS NUMERIC(17,5);
	DECLARE @InventoryOnTransit           AS NUMERIC(17,5);
	DECLARE @InventoryOnPurchasing        AS NUMERIC(17,5);
	DECLARE @InventoryOnProduction        AS NUMERIC(17,5);
	DECLARE @InventoryOnChain             AS NUMERIC(17,5);
	DECLARE @SitePriority                 AS NUMERIC(17,2);
	DECLARE @SitePriorityColor            AS VARCHAR(50);
	DECLARE @NetPriority                  AS NUMERIC(17,2);
	DECLARE @NetPriorityColor             AS VARCHAR(50);
	DECLARE @TotalConsolidatedInputs      AS NUMERIC(17,5);
	DECLARE @TotalConsolidatedOutputs     AS NUMERIC(17,5);
	DECLARE @YellowZoneStart              AS NUMERIC(10,2);
	DECLARE @RedZoneStart                 AS NUMERIC(10,2);
	DECLARE @CurrentDatetime              AS DATETIME;
	DECLARE @UpdateMovements              AS DATE;
	DECLARE @LastBufferUpdateDate         AS DATE;
	DECLARE @ConsolidatedReplenishmentTmp AS NUMERIC(17,5);
	DECLARE @PositiveAdjustmentsTmp       AS NUMERIC(17,5);
	DECLARE @ConsumptionTmp               AS NUMERIC(17,5);
	DECLARE @NegativeAdjustmentsTmp       AS NUMERIC(17,5);
	DECLARE @TotalConsolidatedInputsTmp   AS NUMERIC(17,5);
	DECLARE @TotalConsolidatedOutputsTmp  AS NUMERIC(17,5);
	DECLARE @ExcludedOutsTmp     		  AS NUMERIC(17,5);
	-- ---------------------------------------------------------------------------------------
	-- JEBE 20200809: Since v5.2.0, set the proper value for Days Since Last Out column.
	-- ---------------------------------------------------------------------------------------
	DECLARE @DaysSinceLastOutTmp    	  AS NUMERIC(5);
	DECLARE @DaysSinceLastOut             AS NUMERIC(5);
	DECLARE	@LastTotalOutsMaxSum          AS NUMERIC(17,5);
	DECLARE @ProtectionFactor             AS NUMERIC(17,2);
	DECLARE @WorstInventoryOnSite         AS NUMERIC(17,5);
	DECLARE @BaaOutClassification         AS VARCHAR(2);
	DECLARE @ReplenishmentProblem         AS VARCHAR(10);
	DECLARE @PendingDemand                AS NUMERIC(17,5);
	DECLARE @NetInventory                 AS NUMERIC(17,5);
	DECLARE @ReplenishmentPriority        AS INT;
	DECLARE @ExcludedOuts                 AS NUMERIC(17,5);
	DECLARE @ReplenishmentFrequency       AS INT;
	DECLARE @DailyAverageConsumption      AS NUMERIC(17,5);
	-- --------------------------------------------------------------------------------------
	-- IAFJ 20200827: Since v5.2.0, Add the new Average Consumption Frequency column 
	--                setting (for further use)
	-- ---------------------------------------------------------------------------------------
	DECLARE @AverageConsumptionFrequency  AS NUMERIC(15,5);
	DECLARE @DacHorizon                   AS NUMERIC(10,0); 
	DECLARE @DifDays                      AS INT;
	DECLARE @ItemDay                      AS INT; 
	DECLARE @Trace                        AS VARCHAR(MAX);
	DECLARE @Count                        AS NUMERIC(5);
	DECLARE @STARTTIMEEXE                 AS DATETIME= GETDATE();
	DECLARE @Msg                          AS VARCHAR(1000);	
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;	
		
		--declare Auxiliar variable
		DECLARE @BufferHistoryTable AS BufferHistoryTblType;
		DECLARE @ParmDefinition     AS NVARCHAR(MAX);
		DECLARE @ParmDefinitionH    AS NVARCHAR(MAX);

		SET @ParmDefinition  = N'@LinSku VARCHAR(50), @LinLocation VARCHAR(50), @LinUpdateMovements DATE';
		SET @ParmDefinitionH = N'@LinSku VARCHAR(50), @LinLocation VARCHAR(50), @LinUpdateMovements DATE, @LinLastBufferUpdateDate DATE';
		
		IF (RTRIM(LTRIM(@GinSqlUpdate)) = '') 
			SET @ParmDefinition = ' ';
		-- -------------------------------------------------------------------
		DECLARE cursorHistoryBuffers CURSOR LOCAL STATIC READ_ONLY FORWARD_ONLY FOR
		 SELECT [B].[SKU],                        [B].[LOCATION],                      [B].[UPDATE_MOVEMENTS],          	[B].[FAMILY],                    
			    [B].[ORIGIN_LOCATION],            [B].[REPLENISHMENT_TIME],            [B].[BUFFER],                    	[B].[TOTAL_INVENTORY_ON_SITE],   
			    [B].[TOTAL_INVENTORY_ON_TRANSIT], [B].[TOTAL_INVENTORY_ON_PURCHASING], [B].[TOTAL_INVENTORY_ON_PRODUCTION], [B].[CDUNIT],            
			    [B].[MINIMUM_BUFFER],			  [B].[SECURITY_STOCK],            	   [B].[MINIMUM_REPLENISHMENT],         [B].[PACKAGING_UNIT],               
			    [B].[UNIT_PRICE], 				  [B].[TVC],                           [B].[CONSOLIDATED_REPLENISHMENT],    [B].[POSITIVE_ADJUSTMENTS],    
				[B].[CONSUMPTION],                [B].[NEGATIVE_ADJUSTMENTS],          [B].[LOCATION_TYPE],                 [B].[UNIT_THROUGHPUT],
				[B].[CREATION_DATE],              [B].[ALLOWED_OVERSTOCKING],          [B].[EFFECTIVE_BUFFER],              [B].[INVENTORY_ON_SITE],       
				[B].[INVENTORY_ON_TRANSIT],       [B].[INVENTORY_ON_PURCHASING],       [B].[INVENTORY_ON_PRODUCTION],       [B].[INVENTORY_ON_CHAIN],      
				[B].[SITE_PRIORITY],              [B].[SITE_PRIORITY_COLOR],           [B].[NET_PRIORITY],                  [B].[NET_PRIORITY_COLOR],      
				[B].[TOTAL_CONSOLIDATED_INPUTS],  [B].[TOTAL_CONSOLIDATED_OUTPUTS],    [B].[DAYS_SINCE_LAST_OUT],           [B].[LAST_TOTAL_OUTS_MAX_SUM], 
				[B].[PROTECTION_FACTOR],          [B].[WORST_INVENTORY_ON_SITE],       [B].[BAA_OUT_CLASSIFICATION],        [F].[YELLOW_ZONE_START],  	  
				[F].[RED_ZONE_START],    	      [B].[NEXT_BUFFER_ANALYSIS],          [B].[REPLENISHMENT_PROBLEM],         [B].[PENDING_DEMAND],          
				[B].[NET_INVENTORY],              [B].[REPLENISHMENT_PRIORITY],        [B].[EXCLUDED_OUTS],                 [B].[REPLENISHMENT_FREQUENCY], 
				[B].[DAILY_AVERAGE_CONSUMPTION],  [F].[DAC_HORIZON]
		   FROM @GinBufferDTO [B]
		  INNER JOIN [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F] ON ([B].[FAMILY] = [F].[CDBUFFER_FAMILY])

		OPEN cursorHistoryBuffers;
		FETCH NEXT FROM cursorHistoryBuffers INTO 
			@Sku,                      @Location,                   @UpdateMovements,            @Family,                 
			@OriginLocation,           @ReplenishmentTime,          @Buffer,                     @TotalInventoryOnSite,   
			@TotalInventoryOnTransit,  @TotalInventoryOnPurchasing, @TotalInventoryOnProduction, @MeasurementUnit,        
			@MinimumBuffer,            @SecurityStock,              @MinimumReplenishment,       @PackagingUnit,          
			@UnitPrice,                @Tvc,                        @ConsolidatedReplenishment,  @PositiveAdjustments,    
			@Consumption,              @NegativeAdjustments,        @LocationType,               @UnitThroughput,         
			@CreationDate,             @AllowedOverstocking,        @EffectiveBuffer,            @InventoryOnSite,        
			@InventoryOnTransit,       @InventoryOnPurchasing,      @InventoryOnProduction,      @InventoryOnChain,       
			@SitePriority,             @SitePriorityColor,          @NetPriority,                @NetPriorityColor,       
			@TotalConsolidatedInputs,  @TotalConsolidatedOutputs,   @DaysSinceLastOut,           @LastTotalOutsMaxSum,    
			@ProtectionFactor,         @WorstInventoryOnSite,       @BaaOutClassification,       @YellowZoneStart,        
			@RedZoneStart,             @LastBufferUpdateDate,       @ReplenishmentProblem,       @PendingDemand,          
			@NetInventory,             @ReplenishmentPriority,      @ExcludedOuts,               @ReplenishmentFrequency, 
			@DailyAverageConsumption,  @DacHorizon;
	
		SET @Count = 0;
    	WHILE (@@FETCH_STATUS = 0)
		BEGIN	
			SET @Count = @Count + 1;
			
			IF (@Count = 10)
			BEGIN
				COMMIT;
				SET @Count = 0;
			END		
			
		    IF (@LastBufferUpdateDate IS NULL)
			BEGIN
				-- 'Insert history for '+ @Sku +', '+ @Location +' and '+ CAST(@UpdateMovements AS VARCHAR);
				SET @CurrentDatetime = SYSDATETIME();		    
				--SET @STARTTIMEEXE = GETDATE()
	    		--	SET @Msg = 'INSERT EN TFSCM_CLI_BUFFER_HISTORY @LastBufferUpdateDate ES NULLL';
					--EXEC ADD_TRACE @Msg, @STARTTIMEEXE	
				INSERT INTO [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					( [SKU],                        [LOCATION],                      [FAMILY],                       
					  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                       
					  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION],
					  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],               
					  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                   
					  [TVC],                        [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUST_CONSOLIDATED], 
					  [CONSOLIDATED_CONSUMPTION],   [NEGATIVE_ADJUST_CONSOLIDATED],  [LOCATION_TYPE],                
					  [UNIT_THROUGHPUT],            [UPDATE_MOVEMENTS],              [CREATION_DATE],                
					  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],            
					  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],      
					  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],          
					  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            [TOTAL_CONSOLIDATED_INPUTS],    
					  [TOTAL_CONSOLIDATED_OUTPUTS], [YELLOW_ZONE_START],             [RED_ZONE_START],               
					  [DAYS_SINCE_LAST_OUT],        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],            
					  [WORST_INVENTORY_ON_SITE],    [BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],        
					  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],       
					  [EXCLUDED_OUTS],              [REPLENISHMENT_FREQUENCY],       [DAILY_AVERAGE_CONSUMPTION])
				VALUES 
					( @Sku,                       @Location,                   @Family,                    
				      @OriginLocation,            @ReplenishmentTime,          @Buffer,                    
				      @TotalInventoryOnTransit,   @TotalInventoryOnPurchasing, @TotalInventoryOnProduction,
				      @MeasurementUnit,           @MinimumBuffer,              @SecurityStock,             
				      @MinimumReplenishment,      @PackagingUnit,              @UnitPrice,                 
				      @Tvc,                       @ConsolidatedReplenishment,  @PositiveAdjustments,       
				      @Consumption,               @NegativeAdjustments,        @LocationType,              
				      @UnitThroughput,            @UpdateMovements,            @CurrentDatetime,           
				      @AllowedOverstocking,       @EffectiveBuffer,            @InventoryOnSite,           
				      @InventoryOnTransit,        @InventoryOnPurchasing,      @InventoryOnProduction,     
				      @InventoryOnChain,          @SitePriority,               @SitePriorityColor,         
				      @NetPriority,               @NetPriorityColor,           @TotalConsolidatedInputs,   
				      @TotalConsolidatedOutputs,  @YellowZoneStart,            @RedZoneStart,              
				      @DaysSinceLastOut,          @LastTotalOutsMaxSum,        @ProtectionFactor,          
				      @WorstInventoryOnSite,      @BaaOutClassification,       @ReplenishmentProblem,      
				      @PendingDemand,             @NetInventory,               @ReplenishmentPriority,     
				      @ExcludedOuts,              @ReplenishmentFrequency,     @DailyAverageConsumption);
								  
				-- EXEC (@SQLString)				
				EXECUTE sp_executesql @GinSqlUpdate, @ParmDefinition,
									  @LinSku = @Sku, @LinLocation = @Location, @LinUpdateMovements = @UpdateMovements;
                 
				--SET @Msg = 'FIN INSERT EN TFSCM_CLI_BUFFER_HISTORY @LastBufferUpdateDate ES NULLL';
				--EXEC ADD_TRACE @Msg, @STARTTIMEEXE
			END 		 
			ELSE
			BEGIN			 
				-- 'Check the number of days since last history record'
    			SELECT @DifDays  = DATEDIFF(day, @LastBufferUpdateDate, @UpdateMovements);    
	    		 	    
				IF (@DifDays = 0)
				BEGIN
					-- 'If it is the same day, it will be updated ';
    				SET @CurrentDatetime = SYSDATETIME();
					--SET @STARTTIMEEXE = GETDATE()
	    			--SET @Msg = 'ACTUALIZA EN TFSCM_CLI_BUFFER_HISTORY difDays= 0 ';
					--EXEC ADD_TRACE @Msg, @STARTTIMEEXE		
		 					
    				-- 'Updating the record for '+ @Sku +', '+ @Location +' and '+ CAST(@LastBufferUpdateDate AS VARCHAR);
					UPDATE [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					   SET [FAMILY]                        = @Family,
						   [ORIGIN_LOCATION]               = @OriginLocation,
						   [REPLENISHMENT_TIME]            = @ReplenishmentTime,
						   [BUFFER]                        = @Buffer,
						   [TOTAL_INVENTORY_ON_TRANSIT]    = @TotalInventoryOnTransit,
						   [TOTAL_INVENTORY_ON_PURCHASING] = @TotalInventoryOnPurchasing,
						   [TOTAL_INVENTORY_ON_PRODUCTION] = @TotalInventoryOnProduction,
						   [MEASUREMENT_UNIT]              = @MeasurementUnit,
						   [MINIMUM_BUFFER]                = @MinimumBuffer,
						   [SECURITY_STOCK]                = @SecurityStock,
						   [MINIMUM_REPLENISHMENT]         = @MinimumReplenishment,
						   [PACKAGING_UNIT]                = @PackagingUnit,
						   [UNIT_PRICE]                    = @UnitPrice,
						   [TVC]         				   = @Tvc,
						   [CONSOLIDATED_REPLENISHMENT]    = @ConsolidatedReplenishment,
						   [POSITIVE_ADJUST_CONSOLIDATED]  = @PositiveAdjustments,
						   [CONSOLIDATED_CONSUMPTION]      = @Consumption,
						   [NEGATIVE_ADJUST_CONSOLIDATED]  = @NegativeAdjustments,
						   [LOCATION_TYPE]                 = @LocationType,
						   [UNIT_THROUGHPUT]               = @UnitThroughput,
						   [ALLOWED_OVERSTOCKING]          = @AllowedOverstocking,
						   [EFFECTIVE_BUFFER]              = @EffectiveBuffer,
						   [INVENTORY_ON_SITE]             = @InventoryOnSite,
						   [INVENTORY_ON_TRANSIT]          = @InventoryOnTransit,
						   [INVENTORY_ON_PURCHASING]       = @InventoryOnPurchasing,
						   [INVENTORY_ON_PRODUCTION]       = @InventoryOnProduction,
						   [INVENTORY_ON_CHAIN]            = @InventoryOnChain,
						   [SITE_PRIORITY]                 = @SitePriority,
						   [SITE_PRIORITY_COLOR]           = @SitePriorityColor,
						   [NET_PRIORITY]                  = @NetPriority,
						   [NET_PRIORITY_COLOR]            = @NetPriorityColor,
						   [TOTAL_CONSOLIDATED_INPUTS]     = @TotalConsolidatedInputs,
						   [TOTAL_CONSOLIDATED_OUTPUTS]    = @TotalConsolidatedOutputs,
						   [YELLOW_ZONE_START]             = @YellowZoneStart,             
						   [RED_ZONE_START]                = @RedZoneStart,						   
						   [DAYS_SINCE_LAST_OUT]		   = @DaysSinceLastOut,				
						   [LAST_TOTAL_OUTS_MAX_SUM]	   = @LastTotalOutsMaxSum,			
						   [PROTECTION_FACTOR]	           = @ProtectionFactor,
						   [WORST_INVENTORY_ON_SITE]	   = @WorstInventoryOnSite,			
						   [BAA_OUT_CLASSIFICATION]		   = @BaaOutClassification,
						   [REPLENISHMENT_PROBLEM]		   = @ReplenishmentProblem,
						   [PENDING_DEMAND]				   = @PendingDemand,
						   [NET_INVENTORY]				   = @NetInventory,
						   [REPLENISHMENT_PRIORITY]		   = @ReplenishmentPriority,
						   [EXCLUDED_OUTS]                 = @ExcludedOuts,
						   [REPLENISHMENT_FREQUENCY]	   = @ReplenishmentFrequency,
						   [DAILY_AVERAGE_CONSUMPTION]     = @DailyAverageConsumption 
					 WHERE [SKU]              = @Sku
					   AND [LOCATION]         = @Location
					   AND [UPDATE_MOVEMENTS] = @UpdateMovements; 
					 
					EXECUTE sp_executesql @GinSqlUpdate, @ParmDefinition,
										  @LinSku = @Sku, @LinLocation = @Location, @LinUpdateMovements = @UpdateMovements;	
						
					--SET @Msg = ' FIN ACTUALIZA EN TFSCM_CLI_BUFFER_HISTORY difDays= 0 ';
					--EXEC ADD_TRACE @Msg, @STARTTIMEEXE		   
				END			 
				ELSE
				BEGIN
					-- 'For one or more days, insert: ' + CAST(@DifDays AS VARCHAR)+ 
					-- ' days ' + CAST(@LastBufferUpdateDate AS VARCHAR)+ ' - '+ CAST(@UpdateMovements AS VARCHAR)   ;				
     				SET @ItemDay = 1;
	     			--SET @STARTTIMEEXE = GETDATE()
	    			--SET @Msg = 'ACTUALIZA EN TFSCM_CLI_BUFFER_HISTORY For one or more days ';
					--EXEC ADD_TRACE @Msg, @STARTTIMEEXE
	     			SET @CurrentDatetime = SYSDATETIME();
					-- -----------------------------------------------------------------------
					-- Add data to the table variable. 
					-- -----------------------------------------------------------------------
					INSERT INTO @BufferHistoryTable 
						( [SKU],                        [LOCATION],                      [FAMILY],                       
						  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                       
						  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION],
						  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],               
						  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                   
						  [TVC],                        [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUST_CONSOLIDATED], 
						  [CONSOLIDATED_CONSUMPTION],   [NEGATIVE_ADJUST_CONSOLIDATED],  [LOCATION_TYPE],                
						  [UNIT_THROUGHPUT],            [UPDATE_MOVEMENTS],              [CREATION_DATE],                
						  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],            
						  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],      
						  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],          
						  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            [TOTAL_CONSOLIDATED_INPUTS],    
						  [TOTAL_CONSOLIDATED_OUTPUTS], [YELLOW_ZONE_START],             [RED_ZONE_START],               
						  [DAYS_SINCE_LAST_OUT],        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],            
						  [WORST_INVENTORY_ON_SITE],    [BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],        
						  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],       
						  [EXCLUDED_OUTS],              [REPLENISHMENT_FREQUENCY],       [DAILY_AVERAGE_CONSUMPTION])
				   SELECT [SKU],                        [LOCATION],                      [FAMILY],                        
						  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                        
						  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION], 
						  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],                
						  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                    
						  [TVC],                        [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUST_CONSOLIDATED],  
						  [CONSOLIDATED_CONSUMPTION],   [NEGATIVE_ADJUST_CONSOLIDATED],  [LOCATION_TYPE],                 
						  [UNIT_THROUGHPUT],            [UPDATE_MOVEMENTS],              @CurrentDatetime CREATION_DATE,
						  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],             
						  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],       
						  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],           
						  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            [TOTAL_CONSOLIDATED_INPUTS],     
						  [TOTAL_CONSOLIDATED_OUTPUTS], [YELLOW_ZONE_START],             [RED_ZONE_START],                
						  [DAYS_SINCE_LAST_OUT],        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],             
						  [WORST_INVENTORY_ON_SITE],    [BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],         
						  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],        
						  [EXCLUDED_OUTS],              [REPLENISHMENT_FREQUENCY],       [DAILY_AVERAGE_CONSUMPTION]
					 FROM [dbo].[TFSCM_CLI_BUFFER_HISTORY]
					WHERE [SKU]              = @Sku
					  AND [LOCATION]         = @Location
					  AND [UPDATE_MOVEMENTS] = @LastBufferUpdateDate; 

					WHILE (@ItemDay <= @DifDays)
					BEGIN
						SET @CurrentDatetime  = SYSDATETIME();
						SET @UpdateMovements = DATEADD(day, @ItemDay, @LastBufferUpdateDate);
						 
						IF (@ItemDay = @DifDays)
						BEGIN
							-- ---------------------------------------------------------------
							-- For current day, update consolidated movements columns 
							-- ---------------------------------------------------------------
							SET @ConsolidatedReplenishmentTmp = @ConsolidatedReplenishment;
							SET @PositiveAdjustmentsTmp       = @PositiveAdjustments;
							SET @ConsumptionTmp               = @Consumption;
							SET @NegativeAdjustmentsTmp       = @NegativeAdjustments;
							SET @TotalConsolidatedInputsTmp   = @TotalConsolidatedInputs;
							SET @TotalConsolidatedOutputsTmp  = @TotalConsolidatedOutputs;
							SET @ExcludedOutsTmp              = @ExcludedOuts;
							SET @WorstInventoryOnSite         = @InventoryOnSite;
							-- ---------------------------------------------------------------
							-- JEBE 20200809: Since v5.2.0, set the proper value for Days
							--                Since Last Out column.
							-- ---------------------------------------------------------------
							SET @DaysSinceLastOutTmp         = @DaysSinceLastOut;
                            
							-- ---------------------------------------------------------------
							-- IAFJ 20200827: Since v5.2.0, Add the new Average Consumption  
							--                Frequency column setting (for further use)
							-- ---------------------------------------------------------------
							SELECT @DailyAverageConsumption     = GoutResult1, 
					   			   @AverageConsumptionFrequency = GoutResult2 
				  			  FROM [dbo].[UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY](@UpdateMovements, @DacHorizon, @Sku, @Location);
							
							-- 'Inserting the record for '+ @Sku +', '+ @Location +' and '+ CAST(@UpdateMovements AS VARCHAR);
							INSERT INTO [dbo].[TFSCM_CLI_BUFFER_HISTORY]
								( [SKU],                        [LOCATION],                      [FAMILY],                       
								  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                       
								  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION],
								  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],               
								  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                   
								  [TVC],                        [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUST_CONSOLIDATED], 
								  [CONSOLIDATED_CONSUMPTION],   [NEGATIVE_ADJUST_CONSOLIDATED],  [LOCATION_TYPE],                
								  [UNIT_THROUGHPUT],            [UPDATE_MOVEMENTS],              [CREATION_DATE],                
								  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],            
								  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],      
								  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],          
								  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            [TOTAL_CONSOLIDATED_INPUTS],    
								  [TOTAL_CONSOLIDATED_OUTPUTS], [YELLOW_ZONE_START],             [RED_ZONE_START],               
								  [DAYS_SINCE_LAST_OUT],        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],            
								  [WORST_INVENTORY_ON_SITE],    [BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],        
								  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],       
								  [EXCLUDED_OUTS],              [REPLENISHMENT_FREQUENCY],       [DAILY_AVERAGE_CONSUMPTION])
							VALUES 
								( @Sku,                         @Location,                     @Family,                     
								  @OriginLocation,              @ReplenishmentTime,            @Buffer,                     
								  @TotalInventoryOnTransit,     @TotalInventoryOnPurchasing,   @TotalInventoryOnProduction, 
								  @MeasurementUnit,             @MinimumBuffer,                @SecurityStock,              
								  @MinimumReplenishment,        @PackagingUnit,                @UnitPrice,                  
								  @Tvc,                         @ConsolidatedReplenishmentTmp, @PositiveAdjustmentsTmp,     
								  @ConsumptionTmp,              @NegativeAdjustmentsTmp,       @LocationType,               
								  @UnitThroughput,              @UpdateMovements,              @CurrentDatetime,            
								  @AllowedOverstocking,         @EffectiveBuffer,              @InventoryOnSite,            
								  @InventoryOnTransit,          @InventoryOnPurchasing,        @InventoryOnProduction,      
								  @InventoryOnChain,            @SitePriority,                 @SitePriorityColor,          
								  @NetPriority,                 @NetPriorityColor,             @TotalConsolidatedInputsTmp, 
								  @TotalConsolidatedOutputsTmp, @YellowZoneStart,              @RedZoneStart,               
								  @DaysSinceLastOutTmp,         @LastTotalOutsMaxSum,          @ProtectionFactor,           
								  @WorstInventoryOnSite,        @BaaOutClassification,         @ReplenishmentProblem,       
								  @PendingDemand,               @NetInventory,                 @ReplenishmentPriority,      
								  @ExcludedOutsTmp,             @ReplenishmentFrequency,       @DailyAverageConsumption);								
						END
						ELSE
						BEGIN
							-- ---------------------------------------------------------------
							-- For those days with no update data, the consolidated movements 
							-- columns should be reseted
							-- ---------------------------------------------------------------
							SET @ConsolidatedReplenishmentTmp = 0;
							SET @PositiveAdjustmentsTmp       = 0;
							SET @ConsumptionTmp               = 0;
							SET @NegativeAdjustmentsTmp       = 0;
							SET @TotalConsolidatedInputsTmp   = 0;
							SET @TotalConsolidatedOutputsTmp  = 0;
							SET @ExcludedOutsTmp              = 0;
                            SET @DaysSinceLastOutTmp          = DATEDIFF(day, @LastBufferUpdateDate, @UpdateMovements);
							
							-- ---------------------------------------------------------------
							-- IAFJ 20200827: Since v5.2.0, Add the new Average Consumption 
							--                Frequency column setting (for further use)
							-- ---------------------------------------------------------------
							SELECT @DailyAverageConsumption     = GoutResult1,
							  	   @AverageConsumptionFrequency = GoutResult2 
				  			  FROM [dbo].[UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY](@UpdateMovements, @DacHorizon, @Sku, @Location);
							
							INSERT INTO [dbo].[TFSCM_CLI_BUFFER_HISTORY]
								( [SKU],                        [LOCATION],                      [FAMILY],                       
								  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                       
								  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION],
								  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],               
								  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                   
								  [TVC],                        [CONSOLIDATED_REPLENISHMENT],    [POSITIVE_ADJUST_CONSOLIDATED], 
								  [CONSOLIDATED_CONSUMPTION],   [NEGATIVE_ADJUST_CONSOLIDATED],  [LOCATION_TYPE],                
								  [UNIT_THROUGHPUT],            [UPDATE_MOVEMENTS],              [CREATION_DATE],                
								  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],            
								  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],      
								  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],          
								  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            [TOTAL_CONSOLIDATED_INPUTS],    
								  [TOTAL_CONSOLIDATED_OUTPUTS], [YELLOW_ZONE_START],             [RED_ZONE_START],               
								  [DAYS_SINCE_LAST_OUT],        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],            
								  [WORST_INVENTORY_ON_SITE],    [BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],        
								  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],       
								  [EXCLUDED_OUTS],              [REPLENISHMENT_FREQUENCY],       [DAILY_AVERAGE_CONSUMPTION])
						   SELECT [SKU],                        [LOCATION],                      [FAMILY],                        
								  [ORIGIN_LOCATION],            [REPLENISHMENT_TIME],            [BUFFER],                        
								  [TOTAL_INVENTORY_ON_TRANSIT], [TOTAL_INVENTORY_ON_PURCHASING], [TOTAL_INVENTORY_ON_PRODUCTION], 
								  [MEASUREMENT_UNIT],           [MINIMUM_BUFFER],                [SECURITY_STOCK],                
								  [MINIMUM_REPLENISHMENT],      [PACKAGING_UNIT],                [UNIT_PRICE],                    
								  [TVC],                        @ConsolidatedReplenishmentTmp,   @PositiveAdjustmentsTmp,       
								  @ConsumptionTmp,              @NegativeAdjustmentsTmp,         [LOCATION_TYPE],                 
								  [UNIT_THROUGHPUT],            @UpdateMovements,                @CurrentDatetime CREATION_DATE,
								  [ALLOWED_OVERSTOCKING],       [EFFECTIVE_BUFFER],              [INVENTORY_ON_SITE],             
								  [INVENTORY_ON_TRANSIT],       [INVENTORY_ON_PURCHASING],       [INVENTORY_ON_PRODUCTION],       
								  [INVENTORY_ON_CHAIN],         [SITE_PRIORITY],                 [SITE_PRIORITY_COLOR],           
								  [NET_PRIORITY],               [NET_PRIORITY_COLOR],            @TotalConsolidatedInputsTmp,   
								  @TotalConsolidatedOutputsTmp, [YELLOW_ZONE_START],             [RED_ZONE_START],                
								  @DaysSinceLastOutTmp,	        [LAST_TOTAL_OUTS_MAX_SUM],       [PROTECTION_FACTOR],             
								  [INVENTORY_ON_SITE],  		[BAA_OUT_CLASSIFICATION],        [REPLENISHMENT_PROBLEM],         
								  [PENDING_DEMAND],             [NET_INVENTORY],                 [REPLENISHMENT_PRIORITY],        
								  @ExcludedOutsTmp,             [REPLENISHMENT_FREQUENCY],       @DailyAverageConsumption
							 FROM @BufferHistoryTable
						END									 
					 
						IF (@ItemDay < @DifDays)
						BEGIN
							EXECUTE sp_executesql @GinSqlUpdateH, @ParmDefinitionH,
												  @LinSku = @Sku, @LinLocation = @Location, @LinUpdateMovements = @UpdateMovements,
												  @LinLastBufferUpdateDate = @LastBufferUpdateDate;						
						END
						ELSE
						BEGIN
							EXECUTE sp_executesql @GinSqlUpdate, @ParmDefinition,
												  @LinSku = @Sku, @LinLocation = @Location, @LinUpdateMovements = @UpdateMovements;	
						END

						SET @ItemDay += 1;  						
					END

					--SET @STARTTIMEEXE = GETDATE()
	    			--SET @Msg = 'FIN EN TFSCM_CLI_BUFFER_HISTORY For one or more days ';
					--EXEC ADD_TRACE @Msg, @STARTTIMEEXE
				END 		
			END 
			--SET @STARTTIMEEXE = GETDATE()
			--SET @Msg = 'INICIO delete TABLE type ';
			--EXEC ADD_TRACE @Msg, @STARTTIMEEXE
			DELETE FROM @BufferHistoryTable;
			--SET @Msg = 'FIN delete TABLE type ';
			--EXEC ADD_TRACE @Msg, @STARTTIMEEXE

			FETCH NEXT FROM cursorHistoryBuffers INTO 
				@Sku,                      @Location,                   @UpdateMovements,            @Family,                 
				@OriginLocation,           @ReplenishmentTime,          @Buffer,                     @TotalInventoryOnSite,   
				@TotalInventoryOnTransit,  @TotalInventoryOnPurchasing, @TotalInventoryOnProduction, @MeasurementUnit,        
				@MinimumBuffer,            @SecurityStock,              @MinimumReplenishment,       @PackagingUnit,          
				@UnitPrice,                @Tvc,                        @ConsolidatedReplenishment,  @PositiveAdjustments,    
				@Consumption,              @NegativeAdjustments,        @LocationType,               @UnitThroughput,         
				@CreationDate,             @AllowedOverstocking,        @EffectiveBuffer,            @InventoryOnSite,        
				@InventoryOnTransit,       @InventoryOnPurchasing,      @InventoryOnProduction,      @InventoryOnChain,       
				@SitePriority,             @SitePriorityColor,          @NetPriority,                @NetPriorityColor,       
				@TotalConsolidatedInputs,  @TotalConsolidatedOutputs,   @DaysSinceLastOut,           @LastTotalOutsMaxSum,    
				@ProtectionFactor,         @WorstInventoryOnSite,       @BaaOutClassification,       @YellowZoneStart,        
				@RedZoneStart,             @LastBufferUpdateDate,       @ReplenishmentProblem,       @PendingDemand,          
				@NetInventory,             @ReplenishmentPriority,      @ExcludedOuts,               @ReplenishmentFrequency, 
				@DailyAverageConsumption,  @DacHorizon;
		END
		
		CLOSE cursorHistoryBuffers;
		DEALLOCATE cursorHistoryBuffers;
		
		--Procedure result
		SET @GoutResult  = '0';    
		SET @GoutMessage = @GinMsgUpdateBufferHistorySuccess;  
	END TRY
	BEGIN CATCH		
		IF ((SELECT CURSOR_STATUS('global','cursorHistoryBuffers')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorHistoryBuffers')) IN (0,1))
			BEGIN
				CLOSE cursorHistoryBuffers; 			
			END
			DEALLOCATE cursorHistoryBuffers; 
		END		
		
		SET @GoutResult  = '1';
		SET @GoutMessage = @GinMsgCalcUpdateBufferHistoryError + ' <br> ' + ' <br> '
						+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
		                + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
                        + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
                        + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_UPDATE_BUFFER_HISTORY]')
                        + ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR )
                        + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar Londoño 
-- Upgrade date: 18/12/2020
-- Description : Fix the size of Priority variable to (17, 2)
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 09/04/2020
-- Description : * Rename SP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY to 
--				   USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY
--				 * Change the date sent to GET_CALCULATE_LAST_COLOR_UPDATE when calculating
--				   last color update date for purchase orders
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 27/06/2017
-- Description : Select column PENDING_DEMAND used in priority calculation.
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Julián Andrés González Vélez
-- Upgrade Date: 03/11/2016
-- Description : Set new column named DATE_INSERTION and the records ordering for Stock OCs 
-- -------------------------------------------------------------------------------------------
-- Created    : Oscar Hernán Londoño Ospina
-- Date       : 03/11/2015
-- Description: Method for update the priority for buffer related orders
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY] 
	/* Input Parameters */
    @ivaSku         VARCHAR(50),
    @ivaLocation    VARCHAR(50),
	@ivaUpdateDate  DATETIME,
	/* Output Parameters */
    @ovaResult		VARCHAR(1) OUTPUT,
    @ovaMessage		NVARCHAR(MAX) OUTPUT
AS
DECLARE @vTrace				   NVARCHAR(MAX); 
DECLARE @finalizationDateNull  DATETIME = CONVERT(DATETIME,'01/01/1901',103);   

BEGIN 
	 BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		SET @ovaResult  = '0';
		SET @ovaMessage = '';
		SET @vTrace     = 'getting the table name'

        -- -------------------------------------------------------------------
		-- MESSAGES
		-- -------------------------------------------------------------------
		DECLARE @vLanguage                                             VARCHAR(2) = 'es';
		DECLARE @vCodErrorResultMessages                               VARCHAR(1);
		DECLARE @vMessageErrorResultMessages                           NVARCHAR(MAX);
		DECLARE @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS     NVARCHAR(MAX);
		DECLARE @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL NVARCHAR(MAX);

		BEGIN TRY  
			SELECT @vLanguage = PARAM_VALUE
			  FROM TFSCM_COM_PARAMS
			 WHERE CDCOMPONENT = 6 AND CDPARAM = 'DEFAULT_LANGUAGE';

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS', @vLanguage, '', '', '',
				@vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS OUTPUT;

			EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,
				'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL', @vLanguage, '', '', '',
				@vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL OUTPUT;

		END TRY
		BEGIN CATCH
			SET @vLanguage = 'es';
			SET @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS     = 'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS';
			SET @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL = 'UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL';
		END CATCH
		-- -------------------------------------------------------------------
		-- SE DEBE CALCULAR LAS PRIORIDADES PARA OPs TIPO S
		-- -------------------------------------------------------------------
		--PRINT 'VA A CALCULAR PRIORIDAD PARA ORDENES'
		DECLARE @CDORDER                       AS VARCHAR(50);
		DECLARE @CDORDER_TYPE                  AS VARCHAR(1);
		DECLARE @PRIORITY                      AS NUMERIC(17,2);
		DECLARE @PRIORITY_COLOR_OLD            AS VARCHAR(50);
		DECLARE @ORDER_SKU                     AS VARCHAR(50);
		DECLARE @CDDESTINATION                 AS VARCHAR(50);
		DECLARE @PENDING_AMOUNT                AS NUMERIC(19,2);
		DECLARE @CREATION_DATE                 AS DATETIME;
		DECLARE @PROMISED_DELIVERY_DATE        AS DATETIME;
		DECLARE @REAL_RELEASE_DATE             AS DATETIME;
		DECLARE @LAST_COLOR_UPDATE             AS DATETIME;
		DECLARE @ORDER_MODIFY_DATE             AS DATETIME;
		DECLARE @RECOMMENDED_RELEASE_DATE_OLD  AS DATETIME;
		DECLARE @FINALIZATION_DATE             AS DATETIME;
		DECLARE @PRODUCTION_BUFFER             AS NUMERIC(10,0);
		DECLARE @PROGRESS_PERCENTAGE           AS NUMERIC(17,5);
		DECLARE @TOUCH_TIME                    AS NUMERIC(17,5);

		DECLARE @OP_PRIORITY_COLOR             AS VARCHAR(50);
		DECLARE @OP_RELEASE_STATUS             AS VARCHAR(1);
		DECLARE @STOCK_ORDER_TYPE              AS VARCHAR(1) = 'S';
		DECLARE @priorSku                      AS VARCHAR(50);
		DECLARE @priorDestination              AS VARCHAR(50);
		DECLARE @MANAGED_ORDER                 AS BIT;
		DEClARE @OP_YELLOW_ZONE_START          AS NUMERIC(5,2);
		DECLARE @OP_RED_ZONE_START             AS NUMERIC(5,2);
	    DECLARE @sumProductionStock            AS NUMERIC(38,5);
		DECLARE @sumPurchaseStock              AS NUMERIC(38,5);
		DECLARE @opPriorityResul               AS NUMERIC(10,2);

		DECLARE curStockProductionOrders CURSOR FAST_FORWARD FOR
		 SELECT CPO.CDORDER, CPO.CDORDER_TYPE, CPO.SKU, CPO.CDDESTINATION, CPO.PENDING_AMOUNT, CPO.CREATION_DATE,
		        CPO.PROMISED_DELIVERY_DATE, CPO.PRIORITY_COLOR, CPO.REAL_RELEASE_DATE, CPO.LAST_COLOR_UPDATE,
		        CPO.LAST_COLOR_UPDATE, CPO.ORDER_MODIFY_DATE, CPO.RECOMMENDED_RELEASE_DATE, CPO.FINALIZATION_DATE,
			    CPO.PRODUCTION_BUFFER, CPO.PROGRESS_PERCENTAGE,	CPO.TOUCH_TIME
		   FROM TFSCM_CLI_PRODUCTION_ORDERS CPO
			    INNER JOIN TFSCM_CLI_PRODUCTION_FAMILY CPF ON (CPF.CDFAMILY = CPO.CDFAMILY)
			    INNER JOIN TFSCM_CLI_LOCATION CL           ON (CL.CDLOCATION = CPF.CDLOCATION)
		  WHERE CPO.FINALIZATION_DATE IS NULL 
			AND CPO.CDPARENT_ORDER    IS NULL 
			AND CPO.SKU                = @ivaSku
			AND CPO.CDDESTINATION      = @ivaLocation
			AND CPO.CDORDER_TYPE       = @STOCK_ORDER_TYPE
		  ORDER BY CPO.SKU, CPO.CDDESTINATION, CPO.DATE_INSERTION;

		OPEN curStockProductionOrders;
		FETCH NEXT FROM curStockProductionOrders 
		 INTO @CDORDER, @CDORDER_TYPE, @ORDER_SKU, @CDDESTINATION, @PENDING_AMOUNT, @CREATION_DATE, 
			  @PROMISED_DELIVERY_DATE, @PRIORITY_COLOR_OLD, @REAL_RELEASE_DATE, @LAST_COLOR_UPDATE, 
			  @LAST_COLOR_UPDATE, @ORDER_MODIFY_DATE, @RECOMMENDED_RELEASE_DATE_OLD, @FINALIZATION_DATE, 
			  @PRODUCTION_BUFFER, @PROGRESS_PERCENTAGE, @TOUCH_TIME;

		WHILE (@@FETCH_STATUS = 0 )
		BEGIN
			------SET @RECOMMENDED_RELEASE_DATE = NULL;	
			SET @MANAGED_ORDER = NULL;

			IF (@ivaSku != @priorSku OR @CDDESTINATION != @priorDestination)
			BEGIN
				SET @sumProductionStock = 0;
			END

			IF (@sumProductionStock IS NULL)
			BEGIN
				SET @sumProductionStock = 0;
			END
			--PRINT 'VA A LLAMAR PRIORIDAD CON '+@ORDER_SKU+@CDDESTINATION	
			--PRINT 'ANTES PRIORIDAD ES '+CAST(@PRIORITY AS VARCHAR)

			EXEC GET_CALCULATE_STOCK_PO_PRIORITY 
				@CDORDER_TYPE,
				@ORDER_SKU,
				@CDDESTINATION,
				@sumProductionStock,
			    @PROGRESS_PERCENTAGE,
				@TOUCH_TIME,
				@PRODUCTION_BUFFER,
			    @opPriorityResul OUTPUT,
				@OP_YELLOW_ZONE_START OUTPUT,
				@OP_RED_ZONE_START OUTPUT;

			SET @PRIORITY = @opPriorityResul;

			--PRINT 'DESPUES PRIORIDAD ES '+CAST(@PRIORITY AS VARCHAR)
			SET @OP_PRIORITY_COLOR  = dbo.GET_CALCULATE_PRIORITY_COLOR(@PRIORITY,@CDORDER_TYPE,@OP_YELLOW_ZONE_START,@OP_RED_ZONE_START);
			SET @LAST_COLOR_UPDATE  = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@LAST_COLOR_UPDATE, @PRIORITY_COLOR_OLD,@OP_PRIORITY_COLOR, @ivaUpdateDate, @CDORDER, 0);
			SET @MANAGED_ORDER      = dbo.GET_CALCULATE_MANAGED_ORDER(@PRIORITY_COLOR_OLD, @OP_PRIORITY_COLOR, @CDORDER);
			SET @priorSku           = @ORDER_SKU;
			SET @priorDestination   = @CDDESTINATION; 
			SET @sumProductionStock = @sumProductionStock + @PENDING_AMOUNT;

			UPDATE TFSCM_CLI_PRODUCTION_ORDERS
			   SET PRIORITY		     = @PRIORITY,
				   PRIORITY_COLOR	 = @OP_PRIORITY_COLOR,
				   LAST_COLOR_UPDATE = @LAST_COLOR_UPDATE,
				   MANAGED_ORDER     = @MANAGED_ORDER
			 WHERE ( CDORDER =  @CDORDER  OR CDPARENT_ORDER = @CDORDER )
			   AND FINALIZATION_DATE      IS NULL 
			   AND EXCHANGES_IN_QUARANTINE = 0;

			FETCH NEXT FROM curStockProductionOrders
			 INTO @CDORDER, @CDORDER_TYPE, @ORDER_SKU, @CDDESTINATION, @PENDING_AMOUNT, @CREATION_DATE, 
				  @PROMISED_DELIVERY_DATE, @PRIORITY_COLOR_OLD, @REAL_RELEASE_DATE, @LAST_COLOR_UPDATE, 
				  @LAST_COLOR_UPDATE, @ORDER_MODIFY_DATE, @RECOMMENDED_RELEASE_DATE_OLD, @FINALIZATION_DATE, 
				  @PRODUCTION_BUFFER, @PROGRESS_PERCENTAGE, @TOUCH_TIME;
		END
		CLOSE curStockProductionOrders;
		DEALLOCATE curStockProductionOrders;

        -- -------------------------------------------------------------------
		-- SE DEBE CALCULAR LAS PRIORIDADES PARA OCs TIPO S
		-- -------------------------------------------------------------------
		-- PRINT 'VA A CALCULAR PRIORIDAD PARA PURCHASES'
		SET @priorSku         = '';
		SET @priorDestination = '';

		--Calculate priority and color for purchase orders where type = S
		DECLARE @PUO_PRIORITY_COLOR             AS VARCHAR(50);
		DECLARE @PUO_PRIORITY                   AS NUMERIC(17,2);
		DECLARE @PUO_MANAGED_ORDER              AS BIT;
		--Cursor variables
		DECLARE @PUO_CDPURCHASE_ORDER           AS VARCHAR(50);
		DECLARE @PUO_SUPPLIER                   AS VARCHAR(50);
		DECLARE @PUO_PO_TYPE                    AS VARCHAR(1);
		DECLARE @PUO_SKU                        AS VARCHAR(50);
		DECLARE @PUO_DESTINATION                AS VARCHAR(50);
		DECLARE @PUO_PENDING_QUANTITY           AS NUMERIC(19,2);
		DECLARE @PUO_CREATION_DATE              AS DATETIME;
		DECLARE @PUO_PROMISED_DELIVERY_DATE     AS DATETIME;
		DECLARE @PUO_PRIORITY_COLOR_OLD         AS VARCHAR(50);
		DECLARE @PUO_COLOR_CHANGE_DATE          AS DATETIME; 
		DECLARE @PUO_UPDATE_DATE                AS DATETIME; 
		DECLARE @PUO_FINALIZATION_DATE          AS DATETIME;	
		DECLARE @BUFFER_BUFFER                  AS NUMERIC(17,5); 
		DECLARE @BUFFER_SECURITY_STOCK          AS NUMERIC(17,5); 
		DECLARE @BUFFER_INVENTORY_ON_SITE       AS NUMERIC(17,5); 
		DECLARE @BUFFER_INVENTORY_ON_TRANSIT    AS NUMERIC(17,5); 
		DECLARE @BUFFER_INVENTORY_ON_PRODUCTION AS NUMERIC(17,5); 
		DECLARE @BUFFER_PENDING_DEMAND          AS NUMERIC(17,5); 
		DECLARE @BF_YELLOW_ZONE_START           AS NUMERIC(5,2); 
		DECLARE @BF_RED_ZONE_START              AS NUMERIC(5,2);

		DECLARE @puoPriority                    AS NUMERIC(17,2);
		DECLARE @puoPriorityColor               AS VARCHAR(50);
		DECLARE @puoPriorityResul               AS VARCHAR(1);
		DECLARE @puoPriorityMessage             AS NVARCHAR(max);

		DECLARE curStockPurchaseOrders CURSOR FAST_FORWARD FOR
		 SELECT PUO.CDPURCHASE_ORDER, PUO.SUPPLIER, PUO.PO_TYPE, PUO.SKU, PUO.DESTINATION, PUO.PENDING_QUANTITY, 
		        PUO.CREATION_DATE, PUO.PROMISED_DELIVERY_DATE, PUO.PRIORITY_COLOR, PUO.COLOR_CHANGE_DATE, 
		        PUO.UPDATE_DATE, PUO.FINALIZATION_DATE, BUFFER.BUFFER, BUFFER.SECURITY_STOCK, BUFFER.INVENTORY_ON_SITE,
		        BUFFER.INVENTORY_ON_TRANSIT, BUFFER.INVENTORY_ON_PRODUCTION, BF.YELLOW_ZONE_START, BF.RED_ZONE_START,
				BUFFER.PENDING_DEMAND
		   FROM TFSCM_CLI_PURCHASE_ORDERS PUO
				INNER JOIN TFSCM_CLI_LOCATION CL      ON (CL.CDLOCATION = PUO.DESTINATION)
				INNER JOIN TFSCM_CLI_BUFFER BUFFER    ON (BUFFER.SKU = PUO.SKU AND BUFFER.LOCATION = PUO.DESTINATION)
				INNER JOIN TFSCM_CLI_BUFFER_FAMILY BF ON (BUFFER.FAMILY = BF.CDBUFFER_FAMILY)
		  WHERE PUO.FINALIZATION_DATE = @finalizationDateNull
			AND PUO.SKU               = @ivaSku
			AND PUO.DESTINATION       = @ivaLocation
			AND PUO.PO_TYPE           = @STOCK_ORDER_TYPE
		  ORDER BY PUO.SKU, PUO.DESTINATION, PUO.PROMISED_DELIVERY_DATETIME;

		OPEN curStockPurchaseOrders;
		FETCH NEXT FROM curStockPurchaseOrders
		 INTO @PUO_CDPURCHASE_ORDER, @PUO_SUPPLIER, @PUO_PO_TYPE, @PUO_SKU, @PUO_DESTINATION, @PUO_PENDING_QUANTITY,
			  @PUO_CREATION_DATE, @PUO_PROMISED_DELIVERY_DATE, @PUO_PRIORITY_COLOR_OLD, @PUO_COLOR_CHANGE_DATE,
			  @PUO_UPDATE_DATE, @PUO_FINALIZATION_DATE, @BUFFER_BUFFER, @BUFFER_SECURITY_STOCK, @BUFFER_INVENTORY_ON_SITE,
			  @BUFFER_INVENTORY_ON_TRANSIT, @BUFFER_INVENTORY_ON_PRODUCTION, @BF_YELLOW_ZONE_START, @BF_RED_ZONE_START,
			  @BUFFER_PENDING_DEMAND;

		WHILE (@@FETCH_STATUS = 0) 
		BEGIN
			SET @PUO_MANAGED_ORDER = NULL;

			IF (@ivaSku != @priorSku OR @PUO_DESTINATION != @priorDestination)
			BEGIN
				SET @sumPurchaseStock = 0;
			END

			IF (@sumPurchaseStock IS NULL)
			BEGIN
				SET @sumPurchaseStock = 0;
			END 

			--PRINT 'VA A LLAMAR PRIORIDAD DE PURCHASE CON '+@PUO_SKU+@PUO_DESTINATION	
			EXEC SP_GET_STOCK_PURCHASE_PRIORITY_VALUES 
				@BF_YELLOW_ZONE_START,
				@BF_RED_ZONE_START,
				@BUFFER_BUFFER, 
				@BUFFER_SECURITY_STOCK,
				@BUFFER_INVENTORY_ON_SITE,
				@BUFFER_INVENTORY_ON_TRANSIT,
				@BUFFER_INVENTORY_ON_PRODUCTION,
				@sumPurchaseStock,
				@BUFFER_PENDING_DEMAND,
				@puoPriority        OUTPUT,
				@puoPriorityColor   OUTPUT,
				@puoPriorityResul   OUTPUT,
				@puoPriorityMessage OUTPUT	

			--PRINT 'DESPUES PRIORIDAD PURCHASE ES '+CAST(@puoPriority AS VARCHAR)
			SET @PUO_PRIORITY          = @puoPriority;
			SET @PUO_PRIORITY_COLOR    = @puoPriorityColor;
			SET @PUO_COLOR_CHANGE_DATE = dbo.GET_CALCULATE_LAST_COLOR_UPDATE(@PUO_COLOR_CHANGE_DATE, @PUO_PRIORITY_COLOR_OLD,@PUO_PRIORITY_COLOR, @ivaUpdateDate, @PUO_CDPURCHASE_ORDER, 1);
			SET @PUO_MANAGED_ORDER     = dbo.GET_CALCULATE_MANAGED_ORDER(@PUO_PRIORITY_COLOR_OLD, @PUO_PRIORITY_COLOR, @PUO_CDPURCHASE_ORDER);
			SET @priorSku              = @PUO_SKU;
			SET @priorDestination      = @PUO_DESTINATION;
			SET @sumPurchaseStock      = @sumPurchaseStock + @PUO_PENDING_QUANTITY;
			
			UPDATE TFSCM_CLI_PURCHASE_ORDERS
			   SET PRIORITY		     = @PUO_PRIORITY,
				   PRIORITY_COLOR	 = @PUO_PRIORITY_COLOR,
				   COLOR_CHANGE_DATE = @PUO_COLOR_CHANGE_DATE,
				   MANAGED           = @PUO_MANAGED_ORDER
			 WHERE CDPURCHASE_ORDER        = @PUO_CDPURCHASE_ORDER 
			   AND SUPPLIER                = @PUO_SUPPLIER	
			   AND EXCHANGES_IN_QUARANTINE = 0;

			FETCH NEXT FROM curStockPurchaseOrders
			 INTO @PUO_CDPURCHASE_ORDER, @PUO_SUPPLIER, @PUO_PO_TYPE, @PUO_SKU, @PUO_DESTINATION, @PUO_PENDING_QUANTITY,
				  @PUO_CREATION_DATE, @PUO_PROMISED_DELIVERY_DATE, @PUO_PRIORITY_COLOR_OLD, @PUO_COLOR_CHANGE_DATE,
				  @PUO_UPDATE_DATE, @PUO_FINALIZATION_DATE, @BUFFER_BUFFER, @BUFFER_SECURITY_STOCK, @BUFFER_INVENTORY_ON_SITE,
				  @BUFFER_INVENTORY_ON_TRANSIT, @BUFFER_INVENTORY_ON_PRODUCTION, @BF_YELLOW_ZONE_START, @BF_RED_ZONE_START,
				  @BUFFER_PENDING_DEMAND;
		END
		CLOSE curStockPurchaseOrders;
		DEALLOCATE curStockPurchaseOrders;
		
		SET @ovaResult = '0';
		SET @ovaMessage = @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_SUCCESSFUL;
	END TRY	
	BEGIN CATCH	
		IF ((SELECT CURSOR_STATUS('global','curStockProductionOrders')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curStockProductionOrders')) IN (0,1))
			BEGIN
				CLOSE curStockProductionOrders;
			END
			DEALLOCATE curStockProductionOrders;
		END

		IF ((SELECT CURSOR_STATUS('global','curStockPurchaseOrders')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','curStockPurchaseOrders')) IN (0,1))
			BEGIN
				CLOSE curStockPurchaseOrders;  		
			END
			DEALLOCATE curStockPurchaseOrders;  
		END	
 
		--PRINT	@vTrace	
		SET @ovaResult = '1';
		SET @ovaMessage = @vMSG_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY_ERRORS 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR)
			+ ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_UPDATE_BUFFER_RELATED_ORDERS_PRIORITY]')
			+ ' ERROR_LINE: ' + CAST(ERROR_LINE() AS VARCHAR)
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE();

		DECLARE @ErMessage NVARCHAR(2048), @ErSeverity INT, @ErState INT
		
		SET @ErMessage = ERROR_MESSAGE()
		SET @ErSeverity = ERROR_SEVERITY()
		SET @ErState = ERROR_STATE()

		RAISERROR (@ErMessage, @ErSeverity, @ErState)
		
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Johan Berrio
-- Upgrade date: 07/12/2020
-- Description : Add the Origin Inventory On Site, Origin Net Inventory, and Origin Buffer
--				 Family columns update.
-- Version     : 5.3.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 25/08/2020
-- Description : * Change the name for the function UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION to
--				   UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY
--				 * Add the new Calculated Consumption Frequency column setting
-- Version     : 5.2.0
-- -------------------------------------------------------------------------------------------
-- Author      : Isaac Florez
-- Upgrade date: 29/07/2020
-- Description : Remove Previous Inventory on Site wrong update.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 16/06/2020
-- Description : Change UDF dbo.split by T-SQL built-in function STRING_SPLIT
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 11/06/2020
-- Description : * Add the LAST_TOTAL_INVENTORY_ON_SITE  set to the Update
--				 * Change the way the validation is being performed in order to update the
--                 Worst Inventory On Site column.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 24/03/2020
-- Description : * Replace Buffer Update Date column by Update Movements column
--               * Add the parameter ManagementWay: F (Focuss, from Focuss Buffers Master)
--				                                    A (Automatic, from Buffers Data Exchange)
--				 * Add a join with a temporary table (BUFFER_DATES_TEMP) which contains "old"
--				   movements date, that is, the one after the current buffer data interchange 
--				   in order to calculate Days Since Last Out properly.
--				 * Minor code refactoring changes.
-- Version     : 5.0.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 29/01/2020
-- Description : Add Daily Average Consumption calculation and updating.
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londoño
-- Upgrade date: 19/12/2019
-- Description : * Add the Excluded Outs column reset
--				 * Rename SP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED to 
--				   USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED
--     			 * Add BUFFER_UPDATE_DATE column filter in order to obtain the proper buffers
--                 list related to each location.
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author:		Ricardo Osorio Loaiza
-- Create date: 28/04/2013
-- Description:	Procedure to calculate input and outputs
-- ===========================================================================================
CREATE PROCEDURE [dbo].[USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED]
	/* Input Parameters */
	@GinUpdateMovements DATE,
	@GinUserSession     VARCHAR(50),
    @GinLocations       NVARCHAR(MAX),
    @GinDelimiter       CHAR(1),
	@GinManagementWay   VARCHAR(1),
	/* Output Parameters */
    @GoutResult         VARCHAR(1)    OUTPUT,
    @GoutMessage        NVARCHAR(MAX) OUTPUT
AS
	--Fields use for calculation
	DECLARE @CdLocation                    VARCHAR(50);
	DECLARE @ConsolidatedReplenishment     NUMERIC(15,5);
	DECLARE @PositiveAdjustment            NUMERIC(15,5);
	DECLARE @Consumption                   NUMERIC(15,5);
	DECLARE @NegativeAdjustment            NUMERIC(15,5);
	DECLARE @TotalConsolidatedInputs       NUMERIC(15,5);
	DECLARE @TotalConsolidatedOutputs      NUMERIC(15,5);
	DECLARE @UpdateMovements               DATE;
	DECLARE @UpdateMovementsInTemp         DATE;
	DECLARE @UpdateMovementsOld            DATE;
	DECLARE @Sku                           VARCHAR(50);
	DECLARE @Location                      VARCHAR(50);
	DECLARE @ExcludedOuts		           NUMERIC(15,5);
	DECLARE @DailyAverageConsumption       NUMERIC(15,5);
	-- ---------------------------------------------------------------------------------------
	-- IAFJ 20200825: Since v5.2.0, Add the new Average Consumption Frequency column 
	--                setting
	-- ---------------------------------------------------------------------------------------
	DECLARE @AverageConsumptionFrequency   NUMERIC(15,5);				  
	DECLARE @DacHorizon				   	   INT;
	DECLARE @InventoryAccuracy			   INT;
	-- ---------------------------------------------------------------------------------------
	-- JEBE 20201204: Since v5.3.0, Add the Origin Inventory OnSite, Origin Net Inventory
	--				  Origin Buffer Family	columns                
	-- ---------------------------------------------------------------------------------------
	DECLARE @OriginInventoryOnSite		   NUMERIC(15,5);
	DECLARE @OriginNetInventory			   NUMERIC(15,5);
	DECLARE @OriginBufferFamily			   VARCHAR(50);
	
	-- 2.2.2
	DECLARE @DaysSinceLastOut              NUMERIC(5) = NULL;
	DECLARE @DaysSinceLastOut_old          NUMERIC(5);
	DECLARE @LastInventoryOnSite           NUMERIC(15,5); 
	DECLARE @WorstInventoryOnSite          NUMERIC(15,5);
	DECLARE @InventoryOnSite               NUMERIC(15,5);

	--Message variables
	DECLARE @Language                      VARCHAR(2) = 'es'; 
	DECLARE @CodErrorResultMessages        VARCHAR(1); 
	DECLARE @MessageErrorResultMessages    NVARCHAR(MAX);
	DECLARE @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR    NVARCHAR(MAX); 
	DECLARE @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS  NVARCHAR(MAX);
	
BEGIN
	BEGIN TRY
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;

		SELECT @Language = [P].[PARAM_VALUE]
		  FROM [dbo].[TFSCM_COM_PARAMS] [P]
		 WHERE [P].[CDCOMPONENT] = 6 
		   AND [P].[CDPARAM] = 'DEFAULT_LANGUAGE';

		DECLARE cursorLocations CURSOR FAST_FORWARD FOR 
		 SELECT DISTINCT [value] LOCATION   
		   FROM STRING_SPLIT(@GinLocations, @GinDelimiter)

		OPEN cursorLocations;

		FETCH NEXT FROM cursorLocations INTO @CdLocation;

		WHILE (@@FETCH_STATUS = 0 )
		BEGIN
			-- -------------------------------------------------------------------------------
			-- OHLO 20200404: Since v5.0.0, if @GinManagementWay is Focuss Buffers Master,
			--				  include only those records for which movements columns where 
			--				  modified.
			-- -------------------------------------------------------------------------------
			-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update
			-- 				  Movements column
			-- -------------------------------------------------------------------------------
			DECLARE cursorBuffers CURSOR FAST_FORWARD FOR
			 SELECT [B].[CONSOLIDATED_REPLENISHMENT], [B].[POSITIVE_ADJUSTMENTS],       [B].[CONSUMPTION],        	    [B].[NEGATIVE_ADJUSTMENTS],
			 	    [B].[TOTAL_CONSOLIDATED_INPUTS],  [B].[TOTAL_CONSOLIDATED_OUTPUTS], [B].[SKU],					    [B].[LOCATION],
			 	    [B].[LAST_INVENTORY_ON_SITE],     [B].[UPDATE_MOVEMENTS], 			[B].[WORST_INVENTORY_ON_SITE],  [B].[INVENTORY_ON_SITE],
			 	    [B].[DAYS_SINCE_LAST_OUT],        [B].[EXCLUDED_OUTS],     			[B].[ORIGIN_INVENTORY_ON_SITE], [B].[ORIGIN_NET_INVENTORY],
					[B].[ORIGIN_BUFFER_FAMILY],		  [F].[DAC_HORIZON],			    [U].[INVENTORY_ACCURACY],	    [T].[UPDATE_MOVEMENTS],			  
					[D].[UPDATE_MOVEMENTS_OLD]
			   FROM [dbo].[TFSCM_CLI_BUFFER] [B] 
			   JOIN [dbo].[TFSCM_CLI_BUFFER_FAMILY] [F] ON ([F].[CDBUFFER_FAMILY] = [B].[FAMILY]) 
			   JOIN [dbo].[TFSCM_CLI_UNITS]         [U] ON ([U].[CDUNIT] = [B].[CDUNIT])
			   LEFT OUTER JOIN [dbo].[TFSCM_CLI_BUFFER_TEMP] [T] ON ([T].[SKU]              = [B].[SKU] 
																 AND [T].[LOCATION]         = [B].[LOCATION] 
																 AND [T].[UPDATE_MOVEMENTS] = @GinUpdateMovements) 
			   LEFT OUTER JOIN [BUFFER_DATES_TEMP] [D] ON ([D].[SKU]              = [B].[SKU] 
													   AND [D].[LOCATION]         = [B].[LOCATION] 
													   AND [D].[UPDATE_MOVEMENTS] = @GinUpdateMovements) 
			  WHERE ([B].[LOCATION] = @CdLocation)
			    AND ([B].[INACTIVE] = 0)
			    AND ((@GinManagementWay = 'F' AND [B].[UPDATE_MOVEMENTS] = @GinUpdateMovements)
				  OR (@GinManagementWay = 'A' AND ([B].[UPDATE_MOVEMENTS] IS NULL OR [B].[UPDATE_MOVEMENTS] <= @GinUpdateMovements)));

			OPEN cursorBuffers;
			FETCH NEXT FROM cursorBuffers 
			 INTO @ConsolidatedReplenishment, @PositiveAdjustment,       @Consumption,     		 @NegativeAdjustment,
				  @TotalConsolidatedInputs,   @TotalConsolidatedOutputs, @Sku, 					 @Location,
				  @LastInventoryOnSite,       @UpdateMovements,		 	 @WorstInventoryOnSite,  @InventoryOnSite,
				  @DaysSinceLastOut_old,      @ExcludedOuts,    		 @OriginInventoryOnSite, @OriginNetInventory,       
				  @OriginBufferFamily,		  @DacHorizon,				 @InventoryAccuracy,	 @UpdateMovementsInTemp, 	  
				  @UpdateMovementsOld;

			WHILE (@@FETCH_STATUS = 0)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- OHLO 20200331: Since v5.0.0, check if the buffer has information on the
				--                temporary table for the date 'GinUpdateMovements', which 
				--                indicates that it could have new reported information.  
				--                Otherwise, it is a buffer updated by omission.
				-- ---------------------------------------------------------------------------
				IF ((@UpdateMovementsInTemp IS NOT NULL AND @UpdateMovementsInTemp < @GinUpdateMovements)
				 OR (@UpdateMovementsInTemp IS NULL AND @UpdateMovements < @GinUpdateMovements))
				BEGIN
					SET @ConsolidatedReplenishment = 0;
					SET @PositiveAdjustment        = 0;
					SET @Consumption               = 0;
					SET @NegativeAdjustment        = 0;
					-- -----------------------------------------------------------------------
					-- OHLO 20191212: Since v4.14.0, add the Excluded Outs column reset
					-- -----------------------------------------------------------------------
					SET @ExcludedOuts = 0;
					-- -----------------------------------------------------------------------
				END

				SET @TotalConsolidatedInputs  = @ConsolidatedReplenishment + @PositiveAdjustment;
				SET @TotalConsolidatedOutputs = @Consumption + @NegativeAdjustment;
				-- 2.2.2
				SET @DaysSinceLastOut = NULL;

				IF (@TotalConsolidatedOutputs > 0)
				BEGIN
					SET @DaysSinceLastOut = 0;
				END
				ELSE IF (@LastInventoryOnSite > 0 
				    AND ((@UpdateMovementsOld IS NOT NULL AND @UpdateMovementsOld < @GinUpdateMovements)
				      OR (@UpdateMovementsOld IS NULL AND @UpdateMovements < @GinUpdateMovements)))
				BEGIN					
					IF (@DaysSinceLastOut_old IS NULL)
					BEGIN
						SET @DaysSinceLastOut_old = 0;
					END
					
					IF (@UpdateMovementsOld IS NOT NULL) 
					BEGIN
						SET @DaysSinceLastOut = @DaysSinceLastOut_old + DATEDIFF(D, @UpdateMovementsOld, @GinUpdateMovements);
					END
					ELSE 
					BEGIN
						SET @DaysSinceLastOut = @DaysSinceLastOut_old + DATEDIFF(D, @UpdateMovements, @GinUpdateMovements);
					END
				END 

				-- ---------------------------------------------------------------------------
				-- OHLO 20200331: Since v5.1.0, check if the buffer has information on the
				--                temporary table for the date 'GinUpdateMovements', which 
				--                indicates that it could have new reported information.  
				--                Otherwise, it is a buffer updated by omission.
				-- ---------------------------------------------------------------------------
				IF (@WorstInventoryOnSite > @InventoryOnSite 
					OR @UpdateMovements IS NULL 
						--OR @UpdateMovements < @GinUpdateMovements)
						OR ((@UpdateMovementsOld IS NOT NULL AND @UpdateMovementsOld < @GinUpdateMovements)
						 OR (@UpdateMovementsOld IS NULL     AND @UpdateMovements    < @GinUpdateMovements)))
				BEGIN
					SET @WorstInventoryOnSite = @InventoryOnSite;
				END
				
				SET @LastInventoryOnSite = @InventoryOnSite;
				
				IF (@DaysSinceLastOut IS NULL)
				BEGIN
					SET @DaysSinceLastOut = @DaysSinceLastOut_old
				END

				-- ---------------------------------------------------------------------------
				-- IAFJ 20200825: Since v5.2.0, add Average Consumption Frequency setting and
				-- 				  change the function name. 
				-- ---------------------------------------------------------------------------
				-- OHLO 20200129: Since v4.15.0, add Daily Average Consumption calculation
				-- ---------------------------------------------------------------------------
				SELECT @DailyAverageConsumption     = GoutResult1, 
					   @AverageConsumptionFrequency = GoutResult2 
				  FROM [dbo].[UFN_CALCULATE_DAILY_AVERAGE_CONSUMPTION_AND_FREQUENCY](@GinUpdateMovements, @DacHorizon, @Sku, @Location);
				
				SET @DailyAverageConsumption = [dbo].[VALIDATE_COLUMN_ACCURACY](@InventoryAccuracy, @DailyAverageConsumption);
				-- ---------------------------------------------------------------------------
				-- IAFJ 20200825: Since v5.2.0, add Average Consumption Frequency setting.
				-- ---------------------------------------------------------------------------
				-- IAFJ 20200729: Since v5.1.0, remove Previous Inventory on Site wrong update
				-- ---------------------------------------------------------------------------
				-- OHLO 20200324: Since v5.1.0, add LAST_TOTAL_INVENTORY_ON_SITE update
				-- ---------------------------------------------------------------------------
				-- OHLO 20200324: Since v5.0.0, replace Buffer Update Date column by Update 
				--                Movements column
				-- ---------------------------------------------------------------------------
				-- JEBE 20201204: Since v5.3.0, add Origin Inventory On Site, Origin Net 
				-- Inventory and Origin Buffer Family to Update.
				-- ---------------------------------------------------------------------------
				UPDATE [B] 
				   SET [B].[CONSOLIDATED_REPLENISHMENT] = @ConsolidatedReplenishment,
					   [B].[POSITIVE_ADJUSTMENTS]       = @PositiveAdjustment,
					   [B].[CONSUMPTION]                = @Consumption,
					   [B].[NEGATIVE_ADJUSTMENTS]       = @NegativeAdjustment,
					   [B].[TOTAL_CONSOLIDATED_INPUTS]  = @TotalConsolidatedInputs,
					   [B].[TOTAL_CONSOLIDATED_OUTPUTS] = @TotalConsolidatedOutputs,
					   [B].[UPDATE_MOVEMENTS]			= @GinUpdateMovements,
					   [B].[LAST_INVENTORY_ON_SITE]     = @LastInventoryOnSite,
					   [B].[WORST_INVENTORY_ON_SITE]    = @WorstInventoryOnSite,
					   [B].[DAYS_SINCE_LAST_OUT]        = @DaysSinceLastOut,
					   [B].[EXCLUDED_OUTS]	            = @ExcludedOuts,
					   [B].[ORIGIN_INVENTORY_ON_SITE]	= [O].[INVENTORY_ON_SITE],	
					   [B].[ORIGIN_NET_INVENTORY]		= [O].[NET_INVENTORY],		
					   [B].[ORIGIN_BUFFER_FAMILY]  		= [O].[FAMILY],  		
					   [B].[DAILY_AVERAGE_CONSUMPTION]  = @DailyAverageConsumption,
					   [B].[AVERAGE_CONSUMPTION_FREQUENCY]	= @AverageConsumptionFrequency
				  FROM [dbo].[TFSCM_CLI_BUFFER] [B]
				  LEFT OUTER JOIN [dbo].[TFSCM_CLI_BUFFER] [O] ON ([O].[SKU] = [B].[SKU]
													   AND [O].[LOCATION] = [B].[ORIGIN_LOCATION] 
													   AND [O].[INACTIVE] = 0)
				 WHERE [B].[SKU]      = @Sku 
				   AND [B].[LOCATION] = @Location;
						
				FETCH NEXT FROM cursorBuffers 
				 INTO @ConsolidatedReplenishment, @PositiveAdjustment,       @Consumption,     		 @NegativeAdjustment,
					  @TotalConsolidatedInputs,   @TotalConsolidatedOutputs, @Sku, 					 @Location,
					  @LastInventoryOnSite,       @UpdateMovements,		 	 @WorstInventoryOnSite,  @InventoryOnSite,
					  @DaysSinceLastOut_old,      @ExcludedOuts,    		 @OriginInventoryOnSite, @OriginNetInventory,       
					  @OriginBufferFamily,        @DacHorizon,			     @InventoryAccuracy,	 @UpdateMovementsInTemp, 	  
					  @UpdateMovementsOld;
			END	
			
			CLOSE cursorBuffers;
			DEALLOCATE cursorBuffers;
								
			FETCH NEXT FROM cursorLocations INTO @CdLocation;	
		END

		CLOSE cursorLocations;
		DEALLOCATE cursorLocations;
		
		--Procedure result
		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCESS', @Language, '', '', '', @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS OUTPUT;
		
		SET @GoutResult  = '0';    
		SET @GoutMessage = @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_SUCCESS;
	END TRY 
	BEGIN CATCH 
		EXEC [dbo].[GET_MESSAGE] @CodErrorResultMessages OUTPUT, @MessageErrorResultMessages OUTPUT,  
			'DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR', @Language, '', '', '', @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR OUTPUT;
		
		SET @GoutResult = '1';
                        
		SET @GoutMessage = @MSG_DATA_EXCHANGE_UPDATE_INPUT_OUTPUTS_ERROR + ' <br> ' + ' <br> ' 
			+ ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS varchar)
			+ ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS varchar)
			+ ' ERROR_STATE: ' + CAST( ERROR_STATE() AS varchar )
			+ ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_UPDATE_INPUTS_AND_OUTPUTS_CONSOLIDATED]')
			+ ' ERROR_LINE: ' + CAST (ERROR_LINE() AS varchar )
			+ ' ERROR_MESSAGE: ' + ERROR_MESSAGE()

		IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorLocations')) IN (0,1))
			BEGIN
				CLOSE cursorLocations; 	 
			END
			DEALLOCATE cursorLocations; 
		END	
		IF ((SELECT CURSOR_STATUS('global','cursorBuffers')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','cursorBuffers')) IN (0,1))
			BEGIN
				CLOSE cursorBuffers; 			
			END
			DEALLOCATE cursorBuffers; 
		END
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[USP_UPDATE_SCRIPT_DEFAULT_LOG_VERSION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author      : 
-- Upgrade date: 
-- Description : 
--               
-- Version     : 
-- ---------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 03/10/2018
-- Description  : This SP creates default log for the filename and version
--                If the script type is Creation 'C', then there must be a
--                default database JDBC connection 
-- Version      : 4.9.4
-- ===========================================================================
CREATE PROCEDURE [dbo].[USP_UPDATE_SCRIPT_DEFAULT_LOG_VERSION]
	/* Input Parameters */ 
    @GinVersion             	NVARCHAR(100), 
	@GinScriptType            	NVARCHAR(1), 
	/* Output Parameters */
	@GoutResult                 VARCHAR(1)    OUTPUT,
    @GoutMessage                NVARCHAR(MAX) OUTPUT
AS  
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;  
		
		DECLARE @ScriptName	 VARCHAR(100) = N'';
		-- PRINT  CHAR(13) + 'Registering the version ' + @GinVersion  

		TRUNCATE TABLE [dbo].[TFSCM_COM_DATABASES];
		
		/* If it is Creation script 'C', otherwise it is Backup script 'B' */
		IF (@GinScriptType = 'C')
		BEGIN
			SET @ScriptName = 'Create_SCM_' + @GinVersion + '.sql'
			
			/* A default database JDBC connection must be created */
			INSERT [dbo].[TFSCM_COM_DATABASES] ([JNDI], [DATABASE_NAME]) 
			VALUES (N'jdbc/FocussDefault', N'databaseNewName');
		END
		ELSE
		BEGIN
			/* It is a backup script */
			SET @ScriptName = 'Backup_SCM_' + @GinVersion + '.sql'
		END 
		
		/* Log the database filename and version */
		TRUNCATE TABLE [dbo].[TFSCM_LOG_DATABASE];
		SET IDENTITY_INSERT [dbo].[TFSCM_LOG_DATABASE] ON 
		
		INSERT [dbo].[TFSCM_LOG_DATABASE] ([IDDBLOG], [CURRENT_SCRIPT_FILE], [CURRENT_VERSION], [PRIOR_SCRIPT_FILE], 
										   [PRIOR_VERSION], [EXECUTION_DATE], [EXECUTION_USER]) 
		VALUES (CAST(0 AS Numeric(17, 0)), @ScriptName, @GinVersion, NULL, 
				NULL, CURRENT_TIMESTAMP, N'FOCUSSSCM');

		SET IDENTITY_INSERT [dbo].[TFSCM_LOG_DATABASE] OFF
		SET ANSI_PADDING ON
		
		SET @GoutResult = 0;
		SET @GoutMessage = ''; 
  	END TRY 
	BEGIN CATCH 
		SET @GoutResult  = '1';
		SET @GoutMessage = ' <br> ' + ' <br> '
		  + ' ERROR_NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR) 
		  + ' ERROR_SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR) 
		  + ' ERROR_STATE: ' + CAST(ERROR_STATE() AS VARCHAR)
		  + ' ERROR_PROCEDURE: ' + ISNULL(ERROR_PROCEDURE(), '[dbo].[USP_UPDATE_SCRIPT_DEFAULT_LOG_VERSION]')
		  + ' ERROR_LINE: ' + CAST (ERROR_LINE() AS VARCHAR)
		  + ' ERROR_MESSAGE: ' + ERROR_MESSAGE();
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[VALIDATE_EVENT_BUFFER_CHANGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 29/11/2018
-- Description  : Remove overlap validations
-- Version      : 4.10.1
-- ---------------------------------------------------------------------------
-- Modified   : JAG
-- Modify Date: 26-08-2016
-- Description: Changes for performance Improvment due to bug 12408 
-- ---------------------------------------------------------------------------
-- Modified   : Oscar HernÃƒÂ¡n LondoÃƒÂ±o Ospina
-- Modify Date: 11/11/2015
-- Description: Change double apostrophe ('') for a single apostrophe (')
--              in the variable @actualFilter if any, to avoid errors 
--              executing the sql statement
-- ---------------------------------------------------------------------------
-- Author:		Hernan Dario  Jimenez
-- Create date: 29-05-2015
-- ===========================================================================
CREATE PROCEDURE [dbo].[VALIDATE_EVENT_BUFFER_CHANGE]
	@ivaTempSKUBuffer tempSKUBuffer READONLY,
	@filter AS VARCHAR(MAX),
	@preparation_start_date AS DATE,
	@event_date as DATE,	
	@event AS VARCHAR(50),
	@vLanguage AS VARCHAR(50),
	@ovaResult   AS VARCHAR(1) OUTPUT,
    @ovaMessage  AS NVARCHAR(MAX) OUTPUT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
	DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX);
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR AS NVARCHAR(MAX); 
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_ERROR AS NVARCHAR(MAX); 
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR AS NVARCHAR(MAX); 
	
	DECLARE @vPreparationStartDate AS DATE;
	DECLARE @vEventDate AS DATE;
	DECLARE @vOtherEvent AS VARCHAR(50);
	
	BEGIN TRY
			
	EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
	'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR OUTPUT ;
	
	EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
	'EVENT_BUFFER_CHANGE_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_ERROR OUTPUT ;
	
	EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
	'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR OUTPUT ;
	
	END TRY
	BEGIN CATCH
	
		SET @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR = 'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR' ;
		SET @vMSG_EVENT_BUFFER_CHANGE_ERROR = 'EVENT_BUFFER_CHANGE_ERROR' ;
		SET @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR = 'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR' ;
	
	END CATCH

    BEGIN TRY
    
		SET @ovaResult = '0';
    
		DECLARE @sqlExistBuffer           NVARCHAR(MAX);
		DECLARE @sqlOverlapEvent          NVARCHAR(MAX);		
		DECLARE @count_buffers            NUMERIC = -1;
		DECLARE @actualFilter             NVARCHAR(MAX);
		DECLARE @cursor_buffer_change_sql NVARCHAR(MAX);
		DECLARE @sql_cursor               NVARCHAR(MAX);
		DECLARE @validateOverlappingSQL   NVARCHAR(MAX);			
		DECLARE @oneApostrophe            CHAR(1) = '''';
		DECLARE @twoApostrophe            CHAR(2) = '''''';
		
		SET @sqlExistBuffer  = N' SELECT @count_buffers = COUNT(SKU) FROM TFSCM_CLI_BUFFER BUFFER INNER JOIN '+
								' TFSCM_CLI_LOCATION LOCATION ON BUFFER.LOCATION = LOCATION.CDLOCATION AND '+
								''+@filter+' AND BUFFER.INACTIVE = 0 ';
								
		EXEC sp_executesql @sqlExistBuffer, N'@count_buffers NUMERIC out', @count_buffers out;
				
		IF (@count_buffers = 0)
		BEGIN	
			SET @ovaResult  = '1';
			SET @ovaMessage = @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR;		
		END
    
    
		IF(@ovaResult <> '1')
			BEGIN			
				SET @ovaResult  = '0';
				SET @ovaMessage = 'OK';
			END    
    END TRY
    BEGIN CATCH  
		SET @ovaResult  = '1';
		SET @ovaMessage = @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR + ' - '+ERROR_MESSAGE();    
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[VALIDATE_EVENT_BUFFER_CHANGE_MANUAL_ACTION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 22/11/2018
-- Description  : Remove overlap validations
-- Version      : 4.10.1
-- ---------------------------------------------------------------------------
-- Modified     : JAG
-- Creation Date: 26-08-2016
-- Description  : Changes for performance Improvment due to bug 12408  
-- ===========================================================================
CREATE PROCEDURE [dbo].[VALIDATE_EVENT_BUFFER_CHANGE_MANUAL_ACTION]
	@filter AS VARCHAR(MAX),
	@preparation_start_date AS DATE,
	@event_date as DATE,	
	@event AS VARCHAR(50),
	@vLanguage AS VARCHAR(50),
	@ovaResult   AS VARCHAR(1) OUTPUT,
    @ovaMessage  AS NVARCHAR(MAX) OUTPUT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @vCodErrorResultMessages AS VARCHAR(1); 
	DECLARE @vMessageErrorResultMessages AS NVARCHAR(MAX);
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR AS NVARCHAR(MAX); 
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_ERROR AS NVARCHAR(MAX); 
	DECLARE @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR AS NVARCHAR(MAX); 
	
	DECLARE @vPreparationStartDate AS DATE;
	DECLARE @vEventDate AS DATE;
	DECLARE @vOtherEvent AS VARCHAR(50);
	--declare temporal table
		DECLARE @tempSKUBuffer AS tempSKUBuffer;
	
	BEGIN TRY			
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
		'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR OUTPUT;
		
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
		'EVENT_BUFFER_CHANGE_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_ERROR OUTPUT;
		
		EXEC GET_MESSAGE @vCodErrorResultMessages OUTPUT, @vMessageErrorResultMessages OUTPUT,  
		'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR', @vLanguage, '', '', '', @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR OUTPUT;	
	END TRY
	BEGIN CATCH	
		SET @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR = 'EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR';
		SET @vMSG_EVENT_BUFFER_CHANGE_ERROR = 'EVENT_BUFFER_CHANGE_ERROR';
		SET @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR = 'EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR';	
	END CATCH

    BEGIN TRY
    
		SET @ovaResult = '0';
    
		DECLARE @sqlExistBuffer           NVARCHAR(MAX);
		DECLARE @sqlOverlapEvent          NVARCHAR(MAX);		
		DECLARE @count_buffers            NUMERIC = -1;
		DECLARE @actualFilter             NVARCHAR(MAX);
		DECLARE @cursor_buffer_change_sql NVARCHAR(MAX);
		DECLARE @sql_cursor               NVARCHAR(MAX);
		DECLARE @validateOverlappingSQL   NVARCHAR(MAX);			
		DECLARE @oneApostrophe            CHAR(1) = '''';
		DECLARE @twoApostrophe            CHAR(2) = '''''';
		
		SET @sqlExistBuffer  = ''
			+ ' SELECT @count_buffers = COUNT(SKU) '
			+ '   FROM TFSCM_CLI_BUFFER BUFFER INNER JOIN '
			+ '        TFSCM_CLI_LOCATION LOCATION ON BUFFER.LOCATION = LOCATION.CDLOCATION AND '
			+ '        ' + @filter + ' AND BUFFER.INACTIVE = 0 ';
								
		EXEC sp_executesql @sqlExistBuffer, N'@count_buffers NUMERIC out', @count_buffers out;
				
		IF (@count_buffers = 0)
		BEGIN 		
			SET @ovaResult  = '1';
			SET @ovaMessage = @vMSG_EVENT_BUFFER_CHANGE_BUFFER_NOT_FOUND_ERROR;		
		END
    
		IF(@ovaResult <> '1')
			BEGIN			
				SET @ovaResult  = '0';
				SET @ovaMessage = 'OK';
			END    
    END TRY
    BEGIN CATCH  
    	
    	IF ((SELECT CURSOR_STATUS('global','c_event_buffer_change')) IN (-1,0,1))
		BEGIN
			IF ((SELECT CURSOR_STATUS('global','c_event_buffer_change')) IN (0,1))
			BEGIN
				CLOSE c_event_buffer_change;  		
			END
			DEALLOCATE c_event_buffer_change;  
		END	
		
		SET @ovaResult  = '1';
		SET @ovaMessage = @vMSG_EVENT_BUFFER_CHANGE_SQL_STRUCTURE_ERROR + ' - ' + ERROR_MESSAGE();
    
    END CATCH
END
GO
/****** Object:  Trigger [dbo].[TR_AUTOMATION_RULES_SEQUENCE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : 
-- Upgrade date: dd/mm/yyyy
-- Description : 
-- Version     : X.Y.Z
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 23/05/2019
-- Description  : Reorder the sequence after any operation.
-- Version      : 4.13.0
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_AUTOMATION_RULES_SEQUENCE] on [dbo].[TFSCM_CLI_AUTOMATION_RULES]
 
AFTER INSERT, UPDATE, DELETE
AS
 
DECLARE @CdSection      AS VARCHAR(10);
DECLARE @CdRule         AS VARCHAR(50);
DECLARE @NewSequence    AS INT;
DECLARE @OldSequence    AS INT;
 
BEGIN	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF  EXISTS(SELECT SEQUENCE FROM INSERTED ) AND EXISTS(SELECT SEQUENCE FROM DELETED )
	BEGIN 
		/* Update */
		SELECT @CdSection   = CDSECTION FROM INSERTED;
		SELECT @CdRule      = CDRULE    FROM INSERTED; 
		SELECT @NewSequence = SEQUENCE  FROM INSERTED;
		SELECT @OldSequence = SEQUENCE  FROM DELETED;
				
		EXEC USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE @CdSection, @CdRule, @OldSequence, @NewSequence, 'U', '', ''
	END	
	ELSE IF  EXISTS(SELECT SEQUENCE FROM INSERTED)
	BEGIN
		/* Insert */
		SELECT @CdSection   = CDSECTION FROM INSERTED;
		SELECT @CdRule      = CDRULE    FROM INSERTED;
		SELECT @NewSequence = SEQUENCE  FROM INSERTED;
		SELECT @OldSequence = -1;
				
		EXEC USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE @CdSection, @CdRule, @OldSequence, @NewSequence, 'I', '', ''
		/* When some non-saved records are deleted, the sequence has to be reordered */
		EXEC USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE @CdSection, @CdRule, @OldSequence, @NewSequence, 'D', '', ''
	END
	ELSE IF  EXISTS(SELECT SEQUENCE FROM DELETED)
	BEGIN
		/* Delete */
		SELECT @CdSection   = CDSECTION FROM DELETED;
		SELECT @CdRule      = CDRULE    FROM DELETED;
		SELECT @NewSequence = -1;
		SELECT @OldSequence = -1;
				
		EXEC USP_REORDER_AUTOMATION_RULES_SECTION_SEQUENCE @CdSection, @CdRule, @OldSequence, @NewSequence, 'D', '', ''
	END	
	
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_AUTOMATION_RULES] ENABLE TRIGGER [TR_AUTOMATION_RULES_SEQUENCE]
GO
/****** Object:  Trigger [dbo].[TR_UPDATE_BUFFER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 08/04/2019
-- Description : When a SKU is changed, then replicate the value in tables and columns realted
-- Version     : 4.12.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 04/04/2018
-- Description : When a buffer is re-activated, then reset the next buffer 
--				 analysis date (Fix BUFFER_INITIAL_DATE value assignment). 
-- Version     : 4.8.4
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/06/2017
-- Description : When a buffer is re-activated, then reset the next buffer 
--				 analysis date 
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar Londono
-- Upgrade date: 2017-02-06
-- Description : When a buffer is activated, also set initial date to current
-- -------------------------------------------------------------------------------------------
-- Author     : Oscar Londono
-- Create date: 2014-07-04
-- Description: When a buffer is activated, then set inactivation date to null
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_UPDATE_BUFFER] ON [dbo].[TFSCM_CLI_BUFFER] --WITH ENCRYPTION
 AFTER UPDATE 

AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CdSku           VARCHAR(50);   
	DECLARE @CdLocation      VARCHAR(50);   
    DECLARE @InactiveOld     BIT;
    DECLARE @InactiveNew     BIT; 
	DECLARE @ItIsManual      BIT;
	DECLARE @OldSku          VARCHAR(50);
	 
    SELECT @CdSku       = SKU      FROM INSERTED;
    SELECT @CdLocation  = LOCATION FROM INSERTED;
    SELECT @InactiveOld = INACTIVE FROM DELETED;
    SELECT @InactiveNew = INACTIVE FROM INSERTED;	
    SELECT @OldSku      = SKU      FROM DELETED;

    -- -----------------------------------------------------------------------
	-- If it is a buffer activation, set inactivation date to null and also  
	-- set buffer initial date to current server date
	-- -----------------------------------------------------------------------		
    IF (@InactiveOld = 1 AND @InactiveNew = 0)
    BEGIN 
		SET @ItIsManual = 1;
		IF (UPDATE(MODIFY_DATE)) 
		BEGIN 
			SET @ItIsManual = 0;
		END 

		UPDATE TFSCM_CLI_BUFFER
		   SET INACTIVATION_DATE    = NULL,
			   BUFFER_INITIAL_DATE  = CASE WHEN (@ItIsManual = 1) THEN
										  GETDATE()
									  ELSE
										  UPDATE_MOVEMENTS
									  END,
			   UPDATE_MOVEMENTS     = CASE WHEN (@ItIsManual = 1) THEN
										  GETDATE()
									  ELSE
										  UPDATE_MOVEMENTS
									  END, 
			   NEXT_BUFFER_ANALYSIS = (CAST(DATEADD(d, 
													(SELECT dbo.GET_MAXIMUM_OF(F.TIME_BETWEEN_BUFFER_RECALCULATIONS, 
															TFSCM_CLI_BUFFER.REPLENISHMENT_TIME + 6, -9999, -9999)
													   FROM TFSCM_CLI_BUFFER_FAMILY F
													  WHERE F.CDBUFFER_FAMILY = TFSCM_CLI_BUFFER.FAMILY),
													CASE WHEN (@ItIsManual = 1) THEN
														GETDATE()
													ELSE
														UPDATE_MOVEMENTS
													END) AS DATE))
		 WHERE SKU      = @CdSku
		   AND LOCATION = @CdLocation;
		   
	END
	
	-- ---------------------------------------------------------------------------------------
	-- TODO OHLO 20190408: Since v4.12.0, If it is a change of SKU value 
	-- ---------------------------------------------------------------------------------------
	IF (@CdSku != @OldSku)
	BEGIN
		EXEC USP_REPLACE_SKU_VALUE @OldSku, @CdLocation, @CdSku, NULL, NULL;
	END
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER] ENABLE TRIGGER [TR_UPDATE_BUFFER]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_BUFFER_CHANGE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author       : Oscar LondoÃƒÂ±o
-- Creation date: 27/11/2018
-- Description  : Only processed events can be removed
-- Version      : 4.10.1
-- ---------------------------------------------------------------------------
-- Author:		Hernan Dario Jimenez
-- Create date: 2014-08-08
-- Description:	Delete Buffer Changes
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_BUFFER_CHANGE] ON [dbo].[TFSCM_CLI_BUFFER_CHANGES]
   INSTEAD OF DELETE
AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@event           VARCHAR(50);
    DECLARE @filter			 VARCHAR(MAX);
	DECLARE	@ProcessingDate  DATETIME;
    
    -- -----------------------------------------------------------------------
    -- Get the event    
    -- -----------------------------------------------------------------------
    SELECT @event          = EVENT, 
		   @ProcessingDate = PROCESSING_DATE, 
		   @filter         = FILTER 
	  FROM DELETED;       
    
    -- -----------------------------------------------------------------------
	-- Only unprocessed events can be deleted
    -- -----------------------------------------------------------------------
    IF (@ProcessingDate = '1901-01-01')
    BEGIN    
		DELETE FROM TFSCM_CLI_BUFFER_CHANGES WHERE EVENT = @event;
	END	
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_CHANGES] ENABLE TRIGGER [TR_DELETE_BUFFER_CHANGE]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_BUFFER_FAMILY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-08-08
-- Description:	Delete Buffer Families
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_BUFFER_FAMILY] ON [dbo].[TFSCM_CLI_BUFFER_FAMILY]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdFamily         VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table to Buffer Families (12)
    -- -----------------------------------------------------------------------
    SET @cdTable = 12;
    
    -- -----------------------------------------------------------------------
    -- Get the family
    -- -----------------------------------------------------------------------
    SELECT @cdFamily = CDBUFFER_FAMILY
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdFamily,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_BUFFER_FAMILY 
		   SET IS_ACTIVE = 0
		 WHERE CDBUFFER_FAMILY = @cdFamily;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Family
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_BUFFER_FAMILY
		 WHERE (CDBUFFER_FAMILY = @cdFamily);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_BUFFER_FAMILY] ENABLE TRIGGER [TR_DELETE_BUFFER_FAMILY]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_CALENDAR]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-09-01
-- Description:	Delete Calendars  
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_CALENDAR] ON [dbo].[TFSCM_CLI_CALENDAR]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdCalendar         VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table to Calendars (99)
    -- -----------------------------------------------------------------------
    SET @cdTable = 99;
    
    -- -----------------------------------------------------------------------
    -- Get the Calendar
    -- -----------------------------------------------------------------------
    SELECT @cdCalendar = CDCALENDAR
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdCalendar,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_CALENDAR
		   SET IS_ACTIVE = 0
		 WHERE CDCALENDAR = @cdCalendar;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Unit
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_CALENDAR
		 WHERE (CDCALENDAR = @cdCalendar);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_CALENDAR] ENABLE TRIGGER [TR_DELETE_CALENDAR]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_CAUSES]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-08-08
-- Description:	Delete Frequent Causes
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_CAUSES] ON [dbo].[TFSCM_CLI_CAUSES]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdCause       VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table to Causes (9)
    -- -----------------------------------------------------------------------
    SET @cdTable = 9;
    
    -- -----------------------------------------------------------------------
    -- Get the Cause
    -- -----------------------------------------------------------------------
    SELECT @cdCause = CDCAUSE
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdCause,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_CAUSES 
		   SET IS_ACTIVE = 0 
		 WHERE CDCAUSE = @cdCause;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Cause
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_CAUSES
		 WHERE (CDCAUSE = @cdCause);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_CAUSES] ENABLE TRIGGER [TR_DELETE_CAUSES]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_LOCATION]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-08-06
-- Description:	Delete locations 
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_LOCATION] ON [dbo].[TFSCM_CLI_LOCATION]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdLocation       VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table as Locations (5)
    -- -----------------------------------------------------------------------
    SET @cdTable = 5;
    
    -- -----------------------------------------------------------------------
    -- Get the location
    -- -----------------------------------------------------------------------
    SELECT @cdLocation = CDLOCATION
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdLocation,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_LOCATION 
		   SET IS_ACTIVE = 0
		 WHERE CDLOCATION = @cdLocation;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Location
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_LOCATION
		 WHERE (CDLOCATION = @cdLocation);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION] ENABLE TRIGGER [TR_DELETE_LOCATION]
GO
/****** Object:  Trigger [dbo].[TR_UPDATE_LOCATION_MODIFY_DATE]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		ohlondono
-- Create date: 27-06-2014
-- Description:	Update LOCATION_MODIFY_DATE
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_UPDATE_LOCATION_MODIFY_DATE] ON  [dbo].[TFSCM_CLI_LOCATION]  
 AFTER UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @cdLocation VARCHAR(50); 
	-- -----------------------------------------------------------------------
	-- If it is an update, then set the current date into LOCATION_MODIFY_DATE
	-- -----------------------------------------------------------------------	
	IF (EXISTS(SELECT CDLOCATION FROM INSERTED) AND EXISTS(SELECT CDLOCATION FROM DELETED))
	BEGIN 
	    -- -------------------------------------------------------------------
	    -- Get location code
	    -- -------------------------------------------------------------------	
		SELECT @cdLocation = CDLOCATION 
		  FROM INSERTED;
		-- -------------------------------------------------------------------
		-- And Update the location modify date
		-- -------------------------------------------------------------------
		UPDATE TFSCM_CLI_LOCATION 
		   SET LOCATION_MODIFY_DATE = getdate()
		 WHERE CDLOCATION = @cdLocation;
	END 	 
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_LOCATION] ENABLE TRIGGER [TR_UPDATE_LOCATION_MODIFY_DATE]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_PRODUCTION_FAMILY]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-08-08
-- Description:	Delete Production Families 
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_PRODUCTION_FAMILY] ON [dbo].[TFSCM_CLI_PRODUCTION_FAMILY]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdFamily       VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table as Production Families (2)
    -- -----------------------------------------------------------------------
    SET @cdTable = 2;
    
    -- -----------------------------------------------------------------------
    -- Get the family
    -- -----------------------------------------------------------------------
    SELECT @cdFamily = CDFAMILY
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdFamily,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_PRODUCTION_FAMILY 
		   SET IS_ACTIVE = 0
		 WHERE CDFAMILY = @cdFamily;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Family
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_PRODUCTION_FAMILY
		 WHERE (CDFAMILY = @cdFamily);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_FAMILY] ENABLE TRIGGER [TR_DELETE_PRODUCTION_FAMILY]
GO
/****** Object:  Trigger [dbo].[TR_INSERT_ON_PRODUCTION_ORDERS_TEMP]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:      JGONZALEZ  
-- Create date: 2016-04-20 
-- Description:	Procedure for setting the value on DATE_INSERTION column
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_INSERT_ON_PRODUCTION_ORDERS_TEMP] on [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP]
--WITH ENCRYPTION
AFTER INSERT
AS
DECLARE @idIsertion  NUMERIC(18,0), @cdOrderType AS VARCHAR(1)
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
 	SET NOCOUNT ON;
	BEGIN
		SELECT @idIsertion  = ID FROM INSERTED	
		SELECT @cdOrderType  = CDORDER_TYPE FROM INSERTED		
		
		UPDATE TFSCM_CLI_PRODUCTION_ORDERS_TEMP 
		   SET DATE_INSERTION = CASE WHEN (@cdOrderType = 'S') 
									THEN DATEADD(MS, (@idIsertion*6), GETDATE())
									ELSE '1901-01-01'
								END
		 WHERE ID = @idIsertion;
		
	END	
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_PRODUCTION_ORDERS_TEMP] ENABLE TRIGGER [TR_INSERT_ON_PRODUCTION_ORDERS_TEMP]
GO
/****** Object:  Trigger [dbo].[TR_DEFAULT_UNIT]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		Oscar Londoño
-- Create date: 2014-04-02
-- Description:	If it is marked as default Unit, the other units must be 
--              marked with 0 
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DEFAULT_UNIT] ON  [dbo].[TFSCM_CLI_UNITS] 
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
    DECLARE @cdUnit    varchar(50);   
    DECLARE @isDefault bit;
    
    IF (EXISTS(SELECT CDUNIT FROM INSERTED ) AND EXISTS(SELECT CDUNIT FROM DELETED ))
    OR (EXISTS(SELECT CDUNIT FROM INSERTED ))
    BEGIN 
		-- -----------------------------------------------------------------------
		-- Get the Unit
		-- -----------------------------------------------------------------------
		SELECT @cdUnit = CDUNIT
		  FROM INSERTED 

		-- -----------------------------------------------------------------------
		-- Get the new IS_DEFAULT_UNIT value
		-- -----------------------------------------------------------------------
		SELECT @isDefault = IS_DEFAULT_UNIT
		  FROM INSERTED 
	          
		-- -----------------------------------------------------------------------
		--  Update all other units with IS_DEFAULT_UNIT = false
		-- ----------------------------------------------------------------------- 
		IF (@isDefault = 1)
		BEGIN
			UPDATE TFSCM_CLI_UNITS
			   SET IS_DEFAULT_UNIT = 0
			 WHERE (CDUNIT <> @cdUnit)  ; 
		END 
	END 
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_UNITS] ENABLE TRIGGER [TR_DEFAULT_UNIT]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_UNITS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===================================================
-- Author:		olondono
-- Create date: 2014-08-08
-- Description:	Delete Units of Masurement
-- ===================================================
CREATE TRIGGER [dbo].[TR_DELETE_UNITS] ON [dbo].[TFSCM_CLI_UNITS]
 
   INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- -----------------------------------------------------------------------
    -- Declare variables
    -- -----------------------------------------------------------------------
    DECLARE	@cdUnit         VARCHAR(50);
	DECLARE	@useLogicalDelete VARCHAR(1);
	DECLARE	@cdTable          SMALLINT;
	
	-- -----------------------------------------------------------------------
    -- Set table to Units (13)
    -- -----------------------------------------------------------------------
    SET @cdTable = 13;
    
    -- -----------------------------------------------------------------------
    -- Get the unit
    -- -----------------------------------------------------------------------
    SELECT @cdUnit = CDUNIT
      FROM DELETED;
      
    -- -----------------------------------------------------------------------
    -- Ask if it uses logical delete
    -- -----------------------------------------------------------------------    
	EXEC SP_USE_LOGICAL_DELETE  @cdTable, @cdUnit,
	                            @useLogicalDelete OUTPUT;
	 
	-- -----------------------------------------------------------------------
    -- If it uses logical delete, set IS_ACTIVE to N
    -- -----------------------------------------------------------------------    
	IF @useLogicalDelete = 'Y' 
	BEGIN
		UPDATE TFSCM_CLI_UNITS 
		   SET IS_ACTIVE = 0 
		 WHERE CDUNIT = @cdUnit;		
	END 
	ELSE
	BEGIN
		-- -------------------------------------------------------------------
		-- No logical delete: Delete Unit
		-- -------------------------------------------------------------------
		DELETE FROM TFSCM_CLI_UNITS
		 WHERE (CDUNIT = @cdUnit);   
	END
GO
ALTER TABLE [dbo].[TFSCM_CLI_UNITS] ENABLE TRIGGER [TR_DELETE_UNITS]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_VIEW_INDICATORS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:		olondono
-- Create date: 2014-07-10
-- Description:	Remove indicators related to the view wich is being deleted
-- ===========================================================================
CREATE TRIGGER [dbo].[TR_DELETE_VIEW_INDICATORS]
   ON [dbo].[TFSCM_CLI_VIEWS] 
   AFTER DELETE 
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @cdView       INT, 
			@cdIndicator  NUMERIC(4,0),
			@return_value INT,
			@ovaResult    VARCHAR(1),
			@ovaMessage   VARCHAR(MAX);
     	  
	-- -----------------------------------------------------------------------
    -- Get the view and its indicator
    -- -----------------------------------------------------------------------
	SELECT @cdView      = CDVIEW      FROM DELETED;	
	SELECT @cdIndicator = CDINDICATOR FROM DELETED;	 

	-- -----------------------------------------------------------------------
	-- Call procedure for deleting the indicator
	-- -----------------------------------------------------------------------     
	EXEC @return_value = SP_REMOVE_VIEW_INDICATOR 
		 @cdView,
		 @cdIndicator,
		 @ovaResult  = @ovaResult  OUTPUT,
		 @ovaMessage = @ovaMessage OUTPUT ; 

	PRINT CAST(@return_value AS VARCHAR) + ' '+CAST(@ovaResult AS VARCHAR)+ ' '+  @ovaMessage	
END
GO
ALTER TABLE [dbo].[TFSCM_CLI_VIEWS] ENABLE TRIGGER [TR_DELETE_VIEW_INDICATORS]
GO
/****** Object:  Trigger [dbo].[tri_del_custom_column_editable]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/01/2020
-- Description : Change the name of the stored procedure SP_ALTER_BUFFER_HISTORY_TABLE to
--               USP_ALTER_BUFFER_HISTORY_TABLE	
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 15/07/2015
-- Description : Procedure for modifiying column configuration for table 
--               Export Buffers (21 in TFSCM_COM_COL_TABLE)
-- -------------------------------------------------------------------------------------------
-- Author       : Edward Rodriguez
-- Creation date: 07/04/2014 
-- Description  : Procedure for delete a field
-- ===========================================================================================
CREATE TRIGGER [dbo].[tri_del_custom_column_editable] on [dbo].[TFSCM_COM_COL_TABLE]
AFTER DELETE
AS
DECLARE @cdTable     SMALLINT;
DECLARE @cdColumn    VARCHAR(50);
DECLARE @isEditable  VARCHAR(1);
DECLARE @cdInterface SMALLINT;
DECLARE @isSystem    VARCHAR(1);
DECLARE @saveHistory VARCHAR(1);
DECLARE @saveHistOld VARCHAR(1);
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
 	SET NOCOUNT ON;
 
	SELECT @isSystem    = IS_SYSTEM    FROM DELETED;
	SELECT @isEditable  = IS_EDITABLE  FROM DELETED;
 	SELECT @cdTable     = CDTABLE      FROM DELETED;
	SELECT @cdColumn    = CDCOLUMN     FROM DELETED;
	SELECT @saveHistory = SAVE_HISTORY FROM DELETED;	
	SELECT @cdInterface = CDINTERFACE  FROM TFSCM_DEX_INTERFACES WHERE CDTABLE = @cdTable AND CDTYPE <> 'S';
	
	IF ( @cdInterface = 3 AND LEN(@cdColumn) >= 6 AND SUBSTRING(@cdColumn, 0, 7) = 'CF_BF_' ) 
	BEGIN
		EXEC SP_ALTER_TEMP_TABLE   @cdInterface, @cdColumn, 'D', '', '';
		EXEC MASTER_BUFFER_BUILDER @cdInterface,'','';
		EXEC MASTER_BUFFER_BUILDER 99,'','';	 
	END
		
	-- ---------------------------------------------------------------------------------------
	-- Buffer history table must be altered; it will just apply for Locations (5) 
	-- and Stock Buffers (11)
	-- ---------------------------------------------------------------------------------------
	IF (@cdTable = 5 OR @cdTable = 11)
	BEGIN
		IF (@saveHistory = 'Y')
		BEGIN
			EXEC USP_ALTER_BUFFER_HISTORY_TABLE @cdTable, @cdColumn, 'N','','';
		END
		-- -----------------------------------------------------------------------------------
		-- If it is Stock Buffers (11), it is necessary to delete this column from 
		-- Export Buffers (21) as well 
		-- -----------------------------------------------------------------------------------
		IF (@cdTable = 11  AND @isSystem = 'N' AND @isEditable = 'N')
		BEGIN 
			EXEC SP_MODIFY_EXPORT_BUFFERS_STRUCTURE 21, @cdColumn, 'D','','';	 
		END
	END 
	
END
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ENABLE TRIGGER [tri_del_custom_column_editable]
GO
/****** Object:  Trigger [dbo].[tri_ins_custom_column_editable]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/01/2020
-- Description : Change the name of the stored procedure SP_ALTER_BUFFER_HISTORY_TABLE to
--               USP_ALTER_BUFFER_HISTORY_TABLE	
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : olondono  
-- Upgrade date: 03/12/2018
-- Description : Fix the trigger 'tri_ins_custom_column_editable', to avoid the
--               updating of Datetime format when a new system column is being
--               inserted
-- Version     : 4.10.0 
-- -------------------------------------------------------------------------------------------
-- Author:      olondono  
-- Create date: 2015-07-15 
-- Description:	Procedure for modifiying column configuration for table 
--              Export Buffers (21 in TFSCM_COM_COL_TABLE)
-- -------------------------------------------------------------------------------------------
-- Author:		Edward Rodriguez
-- Create date: 07/04/2014 
-- Description:	Procedure for insert a field
-- ===========================================================================================
CREATE TRIGGER [dbo].[tri_ins_custom_column_editable] on [dbo].[TFSCM_COM_COL_TABLE]
AFTER INSERT
AS
DECLARE @cdTable     SMALLINT;
DECLARE @cdColumn    VARCHAR(50);
DECLARE @isEditable  VARCHAR(1);
DECLARE @cdInterface SMALLINT;
DECLARE @isSystem    VARCHAR(1);
DECLARE @saveHistory VARCHAR(1);
DECLARE @saveHistOld VARCHAR(1);
DECLARE @colAccuracy SMALLINT;
DECLARE @dsType      VARCHAR(50);
 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
 	SET NOCOUNT ON;
	 
	BEGIN
		SELECT @isSystem    = IS_SYSTEM       FROM INSERTED;
		SELECT @isEditable  = IS_EDITABLE     FROM INSERTED;
		SELECT @cdTable     = CDTABLE         FROM INSERTED;
		SELECT @cdColumn    = CDCOLUMN        FROM INSERTED;
		SELECT @saveHistory = SAVE_HISTORY    FROM INSERTED;
		SELECT @colAccuracy = COLUMN_ACCURACY FROM INSERTED;
		SELECT @dsType      = DSTYPE          FROM INSERTED;
		SELECT @cdInterface = CDINTERFACE     FROM TFSCM_DEX_INTERFACES WHERE CDTABLE = @cdTable AND CDTYPE <> 'S';
				
		IF (@colAccuracy > 0)
		BEGIN 
			UPDATE TFSCM_COM_COL_TABLE 
			   SET VIEW_FORMAT = 'F'
		     WHERE CDTABLE  = @cdTable
		       AND CDCOLUMN = @cdColumn;
		END
		IF (@dsType = 'datetime' AND @isSystem = 'N')
		BEGIN
			UPDATE TFSCM_COM_COL_TABLE 
			   SET VIEW_FORMAT = 'D'
		     WHERE CDTABLE  = @cdTable
		       AND CDCOLUMN = @cdColumn;		       
		END 
		
		IF (@cdInterface = 3 AND LEN(@cdColumn) >= 6 AND SUBSTRING(@cdColumn, 0, 7) = 'CF_BF_' )
		BEGIN
			EXEC SP_ALTER_TEMP_TABLE   @cdInterface, @cdColumn, 'I', '', '';
			EXEC MASTER_BUFFER_BUILDER @cdInterface,'','';
			EXEC MASTER_BUFFER_BUILDER 99,'','';
		END
		
        -- -----------------------------------------------------------------------------------
		-- If it is Stock Buffers (11) and it is a non-editable Custom column, it is necessary
		-- to add this column in Export Buffers (21) as well
		-- -----------------------------------------------------------------------------------		
		IF (@cdTable = 11  AND @isSystem = 'N' AND @isEditable = 'N')
		BEGIN
			EXEC SP_MODIFY_EXPORT_BUFFERS_STRUCTURE @cdTable, @cdColumn, 'I','','';	
		END
		
		-- -----------------------------------------------------------------------------------
		-- Buffer history table must be altered; it will just apply for Locations (5) and
		-- Stock Buffers (11)
		-- -----------------------------------------------------------------------------------			
		IF @cdTable = 5 OR @cdTable = 11 
		BEGIN	 
			IF (@saveHistory = 'Y')
			BEGIN
				EXEC USP_ALTER_BUFFER_HISTORY_TABLE @cdTable, @cdColumn, @saveHistory,'','';
			END
		END 
			
	END	
END
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ENABLE TRIGGER [tri_ins_custom_column_editable]
GO
/****** Object:  Trigger [dbo].[tri_upd_custom_column_editable]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 27/01/2020
-- Description : Change the name of the stored procedure SP_ALTER_BUFFER_HISTORY_TABLE to
--               USP_ALTER_BUFFER_HISTORY_TABLE	
-- Version     : 4.15.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 06/09/2018
-- Description : Alter Temp table when IS_NULLABLE changes
-- Version     : 4.9.3
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 02/08/2017
-- Description : Alter Temp table when accuracy changes
-- Version     : 4.7.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade Date: 07/15/2015
-- Description : Adding the Export Buffers Interface exception, but if it is an
--               update on IS_EDITABLE, SP_MODIFY_EXPORT_BUFFERS_STRUCTURE have
--               to be called
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade Date: 06/22/2015
-- Description : Adding the call to BUFFER CHANGES BUILDER
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade Date: 04/17/2015
-- Description : Adding the call to PURCHASE ORDERS BUILDER
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar HernÃƒÂ¡n LondoÃƒÂ±o Ospina
-- Creation date: 10/02/2013 
-- Description  : Procedure for managing changes on an editable field
-- ===========================================================================================
CREATE TRIGGER [dbo].[tri_upd_custom_column_editable] on [dbo].[TFSCM_COM_COL_TABLE]
AFTER UPDATE
AS
DECLARE @cdTable		SMALLINT
DECLARE @cdColumn		VARCHAR(50)
DECLARE @isEditable		VARCHAR(1)
DECLARE @isEditableOld  VARCHAR(1)
DECLARE @cdInterface	SMALLINT
DECLARE @isSystem		VARCHAR(1)
DECLARE @saveHistory	VARCHAR(1) 
DECLARE @saveHistOld	VARCHAR(1) 
DECLARE @colAccuracy	SMALLINT
DECLARE @colAccurOld	SMALLINT
DECLARE @cdExpTable     SMALLINT
DECLARE @isNullable		VARCHAR(1)
DECLARE @isNullableOld  VARCHAR(1)

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
 	SET NOCOUNT ON;
	
	IF  EXISTS(SELECT IS_EDITABLE FROM INSERTED ) AND EXISTS(SELECT IS_EDITABLE FROM DELETED )
	BEGIN
		SELECT @isSystem	  = IS_SYSTEM       FROM INSERTED;
		SELECT @isEditable	  = IS_EDITABLE     FROM INSERTED;
		SELECT @cdTable		  = CDTABLE         FROM INSERTED;
		SELECT @cdColumn      = CDCOLUMN        FROM INSERTED;
		SELECT @saveHistory   = SAVE_HISTORY    FROM INSERTED;
		SELECT @colAccuracy   = COLUMN_ACCURACY FROM INSERTED;
		SELECT @isNullable	  = IS_NULLABLE     FROM INSERTED;
		SELECT @isEditableOld = IS_EDITABLE     FROM DELETED;
		SELECT @saveHistOld   = SAVE_HISTORY    FROM DELETED;
		SELECT @colAccurOld   = COLUMN_ACCURACY FROM DELETED;
		SELECT @isNullableOld = IS_NULLABLE     FROM DELETED;		
		SELECT @cdInterface   = CDINTERFACE     FROM TFSCM_DEX_INTERFACES WHERE CDTABLE = @cdTable AND CDTYPE <> 'S';
		
		IF (@colAccuracy > 0 AND  @colAccuracy <> @colAccurOld)
		BEGIN 
			UPDATE TFSCM_COM_COL_TABLE 
			   SET VIEW_FORMAT = 'F'
		     WHERE CDTABLE  = @cdTable
		       AND CDCOLUMN = @cdColumn;
		       
		    IF (@cdInterface = 1)
			BEGIN
				-- ---------------------------------------------------------------------------
                -- It's Production Orders
				-- ---------------------------------------------------------------------------
				EXEC MASTER_PRODUCTION_ORDERS_BUILDER @cdInterface,'',''
			END 
			ELSE IF (@cdInterface = 2)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- It's Locations
				-- ---------------------------------------------------------------------------
				EXEC MASTER_BUILDER @cdInterface,'','';	
			END 
			ELSE IF (@cdInterface = 3)           
			BEGIN
				-- ---------------------------------------------------------------------------
				-- It's Buffers
				-- ---------------------------------------------------------------------------
				-- Alter temp table
				EXEC SP_ALTER_TEMP_TABLE @cdInterface, @cdColumn, 'D', '', '';
				EXEC SP_ALTER_TEMP_TABLE @cdInterface, @cdColumn, 'I', '', '';
				
				EXEC MASTER_BUFFER_BUILDER @cdInterface,'',''		
				EXEC MASTER_BUFFER_BUILDER 99,'',''	
			END
			ELSE IF (@cdInterface = 5)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- It's Purchase
				-- ---------------------------------------------------------------------------
				EXEC MASTER_PURCHASE_ORDERS_BUILDER @cdInterface,'',''			
			END 
			ELSE IF (@cdInterface = 6)
			BEGIN
				-- ---------------------------------------------------------------------------
				-- It's Buffer Changes
				-- ---------------------------------------------------------------------------
				EXEC MASTER_BUFFER_CHANGES_BUILDER @cdInterface,'',''	
			END 
			ELSE IF (@cdInterface NOT IN (4, 7))
			BEGIN
				-- ---------------------------------------------------------------------------
				-- It's neither Replenishment or Export Buffers
				-- ---------------------------------------------------------------------------
				EXEC MASTER_BUILDER @cdInterface,'',''					       
			END 
		       
		END 
		
		IF (@isSystem  = 'N')
		BEGIN
			DECLARE @opeType VARCHAR(1) = '';
			
			IF (@isEditable = 'Y')
			BEGIN
				DELETE FROM TFSCM_DEX_INT_DETAIL 
				 WHERE CDFIELD     = @cdColumn
				   AND CDINTERFACE = @cdInterface;			 			 
				-- Table must be Export Buffers 
				SET @cdExpTable = 21;
				SET @opeType    = 'D';
			END
			ELSE 
			BEGIN 
				IF (@isEditable = 'N' AND @isEditableOld <> @isEditable)
				BEGIN
					-- Table must be Buffers  
					SET @cdExpTable = @cdTable;
					SET @opeType    = 'I';
				END
			END
			
			-- -------------------------------------------------------------------------------
			-- If IS_NULLABLE changes, it needs to alter Master and temporary table 
			-- -------------------------------------------------------------------------------
			IF (@isNullableOld <> @isNullable)
			BEGIN
				EXEC SP_ALTER_TEMP_TABLE    @cdInterface, @cdColumn, 'D', '', '';
				EXEC SP_ALTER_TEMP_TABLE    @cdInterface, @cdColumn, 'I', '', '';				
				EXEC USP_ALTER_MASTER_TABLE @cdInterface, @cdColumn, 'U', '', '';
				
				IF (@cdInterface = 3)
				BEGIN
					EXEC MASTER_BUFFER_BUILDER @cdInterface,'',''		
					EXEC MASTER_BUFFER_BUILDER 99,'',''	
				END 
			END
			
			-- -------------------------------------------------------------------------------
			-- If it is Stock Buffers (11) and it is a non-editable Custom column, it is 
			-- necessary to update it in Export Buffers (21) as well
			-- -------------------------------------------------------------------------------
			IF (@cdTable = 11 AND @opeType <> '')
			BEGIN
				EXEC SP_MODIFY_EXPORT_BUFFERS_STRUCTURE @cdExpTable, @cdColumn, @opeType,'','';	
			END
			
			-- -------------------------------------------------------------------------------
			-- Buffer history table must be altered; it will just apply for Locations (5) and
			-- Stock Buffers (11)
			-- -------------------------------------------------------------------------------
			IF (@cdTable = 5 OR @cdTable = 11)
			BEGIN	 
				IF (@saveHistOld != @saveHistory)
				BEGIN
					EXEC USP_ALTER_BUFFER_HISTORY_TABLE @cdTable, @cdColumn, @saveHistory,'','';
				END
			END 
		END 
	END 
END
GO
ALTER TABLE [dbo].[TFSCM_COM_COL_TABLE] ENABLE TRIGGER [tri_upd_custom_column_editable]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_ROLE_PERM]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/05/2020
-- Description : Change the SP name from SP_ASSIGN_DEFAULT_ROLE_PERMISSIONS to 
--				 USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o  
-- Creation date: 13/05/2014 
-- Description  : Delete default permissions from a role.
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_DELETE_ROLE_PERM] ON  [dbo].[TFSCM_COM_ROL]
INSTEAD OF DELETE

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    DECLARE 
		@isSystem     VARCHAR(1)  = 'Y',
		@cdRol        SMALLINT,  
	    @cdOperation  VARCHAR(1)  = 'D',
	    @return_value INT,
	    @ovaResult    VARCHAR(1),
     	@ovaMessage   VARCHAR(MAX); 
     	
    -- -----------------------------------------------------------------------
    -- Get the role code and the operation type
    -- -----------------------------------------------------------------------
	SELECT @cdRol = CDROL 
	  FROM DELETED; 
 
	-- -----------------------------------------------------------------------
	-- Call procedure for inserting permissions 
	-- -----------------------------------------------------------------------     
	EXEC @return_value = [dbo].[USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS]
		 @cdRol,
		 @cdOperation,
		 @ovaResult  = @ovaResult  OUTPUT,
		 @ovaMessage = @ovaMessage OUTPUT ; 

	DELETE FROM TFSCM_COM_ROL WHERE CDROL = @cdRol;
	
	-- PRINT CAST(@return_value AS VARCHAR) + ' '+CAST(@ovaResult AS VARCHAR)+ ' '+  @ovaMessage
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL] ENABLE TRIGGER [TR_DELETE_ROLE_PERM]
GO
/****** Object:  Trigger [dbo].[TR_INSERT_ROLE_PERM]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/05/2020
-- Description : Change the SP name from SP_ASSIGN_DEFAULT_ROLE_PERMISSIONS to 
--				 USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS.
-- Version     : 5.1.0
-- -------------------------------------------------------------------------------------------
-- Author       : Oscar LondoÃƒÂ±o  
-- Creation date: 13/05/2014 
-- Description  : Insert default permissions to a role
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_INSERT_ROLE_PERM] ON  [dbo].[TFSCM_COM_ROL]
AFTER INSERT 

AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
   
    DECLARE 
		@isSystem     VARCHAR(1)  = 'Y',
		@cdRol        SMALLINT,  
	    @cdOperation  VARCHAR(1)  = 'I',
	    @return_value INT,
	    @ovaResult    VARCHAR(1),
     	@ovaMessage   VARCHAR(MAX); 
     	  
	-- -----------------------------------------------------------------------
    -- Get the role code and the operation type
    -- -----------------------------------------------------------------------
    SELECT @cdRol = CDROL 
	  FROM INSERTED;

	-- -----------------------------------------------------------------------
	-- Call procedure for inserting permissions 
	-- -----------------------------------------------------------------------     
	EXEC @return_value = [dbo].[USP_ASSIGN_DEFAULT_ROLE_PERMISSIONS]
		 @cdRol,
		 @cdOperation,
		 @ovaResult  = @ovaResult  OUTPUT,
		 @ovaMessage = @ovaMessage OUTPUT ; 

	--PRINT CAST(@return_value AS VARCHAR) + ' '+CAST(@ovaResult AS VARCHAR)+ ' '+  @ovaMessage
GO
ALTER TABLE [dbo].[TFSCM_COM_ROL] ENABLE TRIGGER [TR_INSERT_ROLE_PERM]
GO
/****** Object:  Trigger [dbo].[TR_DELETE_USER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Michal Mokros
-- Upgrade date: 20/05/2020
-- Description : Change CDUSER by USER_ID/USERNAME
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 12/03/2018
-- Description : Remove Shared Views table records, related to the user views
-- Version     : 4.8.4
-- -------------------------------------------------------------------------------------------
-- Author:		JAG
-- Date:        2016-02-24
-- Description:	Remove records of shared views to users
-- -------------------------------------------------------------------------------------------
-- Author:		olondono
-- Date:        2016-01-14
-- Description:	Remove message notifications for user views
-- -------------------------------------------------------------------------------------------
-- Author:		olondono
-- Create date: 2013-12-26
-- Description:	Delete user views and records related
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_DELETE_USER] ON [dbo].[TFSCM_COM_USERS]
   INSTEAD OF DELETE

AS
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- ---------------------------------------------------------------------------------------
    -- Insert statements for trigger here
    -- ---------------------------------------------------------------------------------------
    DECLARE @UserId bigint;

    -- ---------------------------------------------------------------------------------------
    -- Get the user
    -- ---------------------------------------------------------------------------------------
    SELECT @UserId = USER_ID
      FROM DELETED

    -- ---------------------------------------------------------------------------------------
    -- First: Delete all user filters for deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_USER_FILTER
	 WHERE CDVIEW IN (SELECT CDVIEW
	                    FROM TFSCM_CLI_VIEWS
	                   WHERE (USER_ID = @UserId)) ;

	-- ---------------------------------------------------------------------------------------
    -- And remove all view notification messages for deleted user
    -- ---------------------------------------------------------------------------------------
	SELECT ID_MESSAGESNOTIFICATIONS
	  INTO TEMP_ID_MSG
	  FROM TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS
	 WHERE CDVIEW IN (SELECT CDVIEW
	                    FROM TFSCM_CLI_VIEWS
	                   WHERE (USER_ID = @UserId))
	UNION
	SELECT ID_MESSAGESNOTIFICATIONS
	  FROM TFSCM_CLI_VIEWS_SHARED_TO_USERS
	 WHERE (USER_ID = @UserId);

	DECLARE @idMessage NUMERIC(18,0);

	DECLARE cur_id_msg CURSOR FAST_FORWARD FOR
	 SELECT * FROM TEMP_ID_MSG;

	OPEN cur_id_msg;

	FETCH NEXT FROM cur_id_msg INTO @idMessage;

	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		DELETE FROM TFSCM_CLI_MESSAGESNOTIFICATIONS_VIEWS
		 WHERE (ID_MESSAGESNOTIFICATIONS = @idMessage);

		DELETE FROM TFSCM_CLI_VIEWS_SHARED_TO_USERS
		 WHERE (ID_MESSAGESNOTIFICATIONS = @idMessage);

		DELETE FROM TFSCM_CLI_MESSAGESNOTIFICATIONS_DETAIL
		 WHERE (ID_MESSAGESNOTIFICATIONS = @idMessage);

		DELETE FROM TFSCM_CLI_MESSAGESNOTIFICATIONS
		 WHERE (ID_MESSAGESNOTIFICATIONS = @idMessage);

		FETCH NEXT FROM cur_id_msg INTO @idMessage;
	END

	CLOSE cur_id_msg;
	DEALLOCATE cur_id_msg;

	DROP TABLE TEMP_ID_MSG;

	-- ---------------------------------------------------------------------------------------
    -- And remove all portlets for deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_PORTLET_PANEL
	 WHERE CDVIEW in ( SELECT CDVIEW
	                     FROM TFSCM_CLI_VIEWS
	                    WHERE (USER_ID = @UserId));

    -- ---------------------------------------------------------------------------------------
    -- And Delete all user series for deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_USER_SERIES
	 WHERE (USER_ID = @UserId);
	
	DELETE FROM TFSCM_CLI_VIEWS_SHARED_TO_USERS
	 WHERE CDVIEW IN (SELECT CDVIEW
	                    FROM TFSCM_CLI_VIEWS
					   WHERE (USER_ID = @UserId));

	-- ---------------------------------------------------------------------------------------
    -- And remove all shared views related to deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_VIEWS_SHARED_TO_USERS
	 WHERE (USER_ID = @UserId);

	-- ---------------------------------------------------------------------------------------
    -- Second: Delete all Custom Fields related to views created for
    --         deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_COL_TABLE
	 WHERE CDVIEW IN (SELECT CDVIEW
	                    FROM TFSCM_CLI_VIEWS
					   WHERE (USER_ID = @UserId));

	-- ---------------------------------------------------------------------------------------
    -- Third: Delete all views Fields for deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_CLI_VIEWS
	 WHERE (USER_ID = @UserId);

	-- ---------------------------------------------------------------------------------------
    -- Fourth: Delete rol for deleted user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_COM_USER_ROL
	 WHERE (USER_ID = @UserId);

    -- ---------------------------------------------------------------------------------------
    -- Last: Delete user
    -- ---------------------------------------------------------------------------------------
	DELETE FROM TFSCM_COM_USERS
	 WHERE (USER_ID = @UserId);
GO
ALTER TABLE [dbo].[TFSCM_COM_USERS] ENABLE TRIGGER [TR_DELETE_USER]
GO
/****** Object:  Trigger [dbo].[TR_UPDATE_USER]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Michal Mokros
-- Upgrade date: 20/05/2020
-- Description : Change CDUSER by USER_ID/USERNAME
-- -------------------------------------------------------------------------------------------
-- Author:		olondono
-- Create date: 2014-01-08
-- Description:	Update user views and records related
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_UPDATE_USER] ON [dbo].[TFSCM_COM_USERS]
    INSTEAD OF UPDATE
AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    DECLARE @UserIdOld          bigint;   
    DECLARE @UserIdNew          bigint;
	DECLARE @UsernameOld        varchar(50);
    DECLARE @UsernameNew        varchar(50);
	DECLARE @password           varchar(200);
	DECLARE @dsEmail            varchar(50);
	DECLARE @windowOpenMode     varchar(1);
	DECLARE @isSuperUser        varchar(1);
	DECLARE @defaultLang        varchar(50);
	DECLARE @lastPasswordChange datetime;
 
    -- ---------------------------------------------------------------------------------------
    -- Get the old user 
    -- ---------------------------------------------------------------------------------------
    SELECT @UserIdOld = USER_ID
      FROM DELETED  
      
    -- ---------------------------------------------------------------------------------------
    -- Get the new user info
    -- ---------------------------------------------------------------------------------------
    SELECT @UserIdNew          = USER_ID, 
		   @UsernameNew        = USERNAME,							  
           @password           = [PASSWORD],
		   @dsEmail            = DSEMAIL,
		   @windowOpenMode     = WINDOW_OPEN_MODE,
		   @isSuperUser        = IS_SUPER_USER,
		   @defaultLang        = DEFAULT_LANG,
		   @lastPasswordChange = LAST_PASSWORD_CHANGE
      FROM INSERTED 
 
    -- ---------------------------------------------------------------------------------------
    --  Update all user filters for old user
    -- --------------------------------------------------------------------------------------- 
	UPDATE TFSCM_CLI_VIEWS
	   SET USER_ID = @UserIdNew
	 WHERE (USER_ID = @UserIdOld)  ; 
 
	-- ---------------------------------------------------------------------------------------
    -- Update rol for old user
    -- ---------------------------------------------------------------------------------------
	UPDATE TFSCM_COM_USER_ROL
	   SET USER_ID = @UserIdNew
	 WHERE (USER_ID = @UserIdOld)  ; 
	
	-- ---------------------------------------------------------------------------------------
    -- Update series for old user
    -- ---------------------------------------------------------------------------------------
	SELECT @UserIdNew USER_ID, CDSERIE, DSSERIE, IS_ACTIVE, SERIES_TYPE
	  INTO TABLE_TEMP
	  FROM TFSCM_CLI_USER_SERIES
	  WHERE (USER_ID = @UserIdOld)  ;
	   
	DELETE FROM TFSCM_CLI_USER_SERIES
	  WHERE (USER_ID = @UserIdOld);
	 
	UPDATE TFSCM_COM_USERS
	   SET [USERNAME]             = @UsernameNew,
		   [PASSWORD]             = @password,
		   [DSEMAIL]              = @dsEmail,
		   [WINDOW_OPEN_MODE]     = @windowOpenMode,
		   [IS_SUPER_USER]        = @isSuperUser,
		   [DEFAULT_LANG]         = @defaultLang,
		   [LAST_PASSWORD_CHANGE] = @lastPasswordChange
	 WHERE (USER_ID = @UserIdOld)  ;
	 
	INSERT INTO TFSCM_CLI_USER_SERIES ( USER_ID, CDSERIE, DSSERIE, IS_ACTIVE, SERIES_TYPE)
	SELECT USER_ID, CDSERIE, DSSERIE, IS_ACTIVE, SERIES_TYPE FROM TABLE_TEMP;
	
	DROP TABLE TABLE_TEMP; 
GO
ALTER TABLE [dbo].[TFSCM_COM_USERS] ENABLE TRIGGER [TR_UPDATE_USER]
GO
/****** Object:  Trigger [dbo].[TR_USER_VIEWS]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================================
-- Author      : Michal Mokros
-- Upgrade date: 20/05/2020
-- Description : Change CDUSER by USER_ID/USERNAME
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 23/12/2019
-- Description : Insert defaul values for Release POOGI user series
-- Version     : 4.14.0
-- -------------------------------------------------------------------------------------------
-- Author      : Oscar LondoÃƒÂ±o
-- Upgrade date: 28/11/2017
-- Description : Add the Optimization View for custom views 
-- Version     : 4.8.0
-- -------------------------------------------------------------------------------------------
-- Author      : jag
-- Upfade date : 2016-06-27
-- Description : Insert default values for PMC_BUFFER_SERIE user series
-- -------------------------------------------------------------------------------------------
-- Author       : olondono
-- Creation date: 2013-10-02
-- Description  : Insert default views
-- ===========================================================================================
CREATE TRIGGER [dbo].[TR_USER_VIEWS] ON [dbo].[TFSCM_COM_USERS]
   AFTER INSERT
AS 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- ---------------------------------------------------------------------------------------
    -- Insert statements for trigger here
    -- ---------------------------------------------------------------------------------------
    DECLARE 
		@AdminUser           VARCHAR(50) = 'admin',
		@AutoGenerated       VARCHAR(1)  = 'Y',
		@NonAutoGenerated    VARCHAR(1)  = 'N',
		@OptimizationType    VARCHAR(50) = 'BUFFER_REPLENISHMENT_OPT',
		@CdView              INT,
		@CdViewNew           INT,
		@DsView              VARCHAR(50),
		@CdUserId            BIGINT,
		@Username          VARCHAR(50),						  
		@JsonSystemFilter    VARCHAR(3000),
		@JsonViewConf        VARCHAR(MAX),
		@JsonJoinTables      VARCHAR(3000),
		@CdIndicator         NUMERIC(4, 0),
		@Message             VARCHAR(500),
		@CdSection           SMALLINT,
		@IsDefaultView       VARCHAR(1),
		@IsFavoriteView      VARCHAR(1),
		@IsInitialView       VARCHAR(1),
		@IsAutoGenerated     VARCHAR(1),
		@ViewType            VARCHAR(50),
		@ViewFilter          VARCHAR(MAX),
        @ViewGroupTotalize   VARCHAR(3000),
        @IsPanelCollapsed    VARCHAR(1),
        @InitialPanel        VARCHAR(50);
           
    -- ---------------------------------------------------------------------------------------
    -- Get the new user 
    -- ---------------------------------------------------------------------------------------
    SELECT @CdUserId = USER_ID
      FROM INSERTED
    
    -- ---------------------------------------------------------------------------------------
    -- Cursos for all views related to admin user
    -- ---------------------------------------------------------------------------------------
    DECLARE view_cursor CURSOR FOR 
	 SELECT V.[CDVIEW],    V.[DSVIEW],      V.[JSON_SYSTEM_FILTER],  V.[JSON_VIEW_CONF],     V.[JSON_JOIN_TABLES],  V.[CDINDICATOR],
	 	    V.[MESSAGE],   V.[CDSECTION],   V.[IS_DEFAULT_VIEW],     V.[IS_FAVORITE_VIEW],   V.[IS_INITIAL_VIEW],   V.[IS_AUTO_GENERATED], 
	 	    V.[VIEW_TYPE], V.[VIEW_FILTER], V.[VIEW_GROUP_TOTALIZE], V.[IS_PANEL_COLLAPSED], V.[INITIAL_PANEL]
	   FROM [dbo].[TFSCM_CLI_VIEWS] V
	  WHERE (V.[USER_ID] = (SELECT USER_ID FROM TFSCM_COM_USERS WHERE USERNAME = @AdminUser))
	    AND ((V.[IS_AUTO_GENERATED] = @AutoGenerated)
	 	  OR (V.[IS_AUTO_GENERATED] = @NonAutoGenerated AND [VIEW_TYPE] = @OptimizationType));

	OPEN view_cursor;
	
	FETCH NEXT FROM view_cursor 
	 INTO @CdView,   @DsView,     @JsonSystemFilter,  @JsonViewConf,     @JsonJoinTables, @CdIndicator,
		  @Message,  @CdSection,  @IsDefaultView,     @IsFavoriteView,   @IsInitialView,  @IsAutoGenerated,
		  @ViewType, @ViewFilter, @ViewGroupTotalize, @IsPanelCollapsed, @InitialPanel;
		
    -- ---------------------------------------------------------------------------------------
    -- For each row, set Views, User Filters and Client columns
    -- ---------------------------------------------------------------------------------------
    WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @CdViewNew = MAX(V.[CDVIEW]) + 1
		  FROM [dbo].[TFSCM_CLI_VIEWS] V;
		  
        -- -----------------------------------------------------------------------------------
		-- Insert Views   
		-- -----------------------------------------------------------------------------------
		INSERT INTO [dbo].[TFSCM_CLI_VIEWS]
			([CDVIEW],            [DSVIEW],    [USER_ID],	  [JSON_SYSTEM_FILTER],  [JSON_VIEW_CONF],     [JSON_JOIN_TABLES],
	 	     [CDINDICATOR],       [MESSAGE],   [CDSECTION],   [IS_DEFAULT_VIEW],     [IS_FAVORITE_VIEW],   [IS_INITIAL_VIEW],
	 	     [IS_AUTO_GENERATED], [VIEW_TYPE], [VIEW_FILTER], [VIEW_GROUP_TOTALIZE], [IS_PANEL_COLLAPSED], [INITIAL_PANEL])  
		VALUES 
			(@CdViewNew,       @DsView,   @CdUserId,   @JsonSystemFilter,  @JsonViewConf,     @JsonJoinTables,
			 @CdIndicator,     @Message,  @CdSection,  @IsDefaultView,     @IsFavoriteView,   @IsInitialView,
			 @IsAutoGenerated, @ViewType, @ViewFilter, @ViewGroupTotalize, @IsPanelCollapsed, @InitialPanel); 
       
		-- ----------------------------------------------------------------------------------- 
    	-- Insert User Filters
        -- -----------------------------------------------------------------------------------
		INSERT INTO [dbo].[TFSCM_CLI_USER_FILTER]([CDVIEW], [CDUSER_FILTER], [JSON_USER_FILTER], [CDTYPE])
			SELECT @CdViewNew, F.[CDUSER_FILTER], F.[JSON_USER_FILTER], F.[CDTYPE]
			  FROM [dbo].[TFSCM_CLI_USER_FILTER] F, [dbo].[TFSCM_CLI_VIEWS] V
			 WHERE V.[CDVIEW]    = @CdView 
			   AND V.[USER_ID] = (SELECT USER_ID FROM TFSCM_COM_USERS WHERE USERNAME = @AdminUser)
			   AND V.[IS_AUTO_GENERATED] = @IsAutoGenerated
			   AND F.[CDVIEW]    = V.[CDVIEW] ; 
			   
        -- -----------------------------------------------------------------------------------
		-- Insert Views Client Columns
        -- -----------------------------------------------------------------------------------
		INSERT INTO [dbo].[TFSCM_CLI_COL_TABLE]([CDVIEW],   [CDTABLE],     [CDCOLUMN],       [IS_EDITABLE], [VIEW_TYPE], 
												[SQL_LIST], [VIEW_FORMAT], [IS_PRIMARY_KEY], [DSTYPE])
		SELECT @CdViewNew,   C.[CDTABLE],     C.[CDCOLUMN],       C.[IS_EDITABLE], C.[VIEW_TYPE], 
			   C.[SQL_LIST], C.[VIEW_FORMAT], C.[IS_PRIMARY_KEY], C.[DSTYPE]
		  FROM [dbo].[TFSCM_CLI_COL_TABLE] C, [dbo].[TFSCM_CLI_VIEWS] V
		 WHERE V.[CDVIEW] = @CdView 
		   AND V.[USER_ID] =  (SELECT USER_ID FROM TFSCM_COM_USERS WHERE USERNAME = @AdminUser)
		   AND V.[IS_AUTO_GENERATED] = @IsAutoGenerated
		   AND C.[CDVIEW] = V.[CDVIEW];	    
   
		FETCH NEXT FROM view_cursor 
		INTO @CdView,   @DsView,     @JsonSystemFilter,  @JsonViewConf,     @JsonJoinTables, @CdIndicator,
			 @Message,  @CdSection,  @IsDefaultView,     @IsFavoriteView,   @IsInitialView,  @IsAutoGenerated,
			 @ViewType, @ViewFilter, @ViewGroupTotalize, @IsPanelCollapsed, @InitialPanel;
	END

	CLOSE view_cursor;
	DEALLOCATE view_cursor;
  
	-- ---------------------------------------------------------------------------------------
	-- Insert Client User Series
    -- ---------------------------------------------------------------------------------------
	INSERT INTO [dbo].[TFSCM_CLI_USER_SERIES]([USER_ID], [CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE])
	VALUES (@CdUserId, 0, 'Peor Inventario en Sitio (A)', 'Y', 'BUFFERS'),
		   (@CdUserId, 1, 'Entradas Totales',             'Y', 'BUFFERS'),
		   (@CdUserId, 2, 'Salidas Totales',              'Y', 'BUFFERS');

	INSERT INTO [dbo].[TFSCM_CLI_USER_SERIES]([USER_ID], [CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE])
	VALUES (@CdUserId, 4, '5_Rojo',      'Y', 'PDN_ORDERS'),
		   (@CdUserId, 5, '6_Negro',     'Y', 'PDN_ORDERS'),
		   (@CdUserId, 6, '% Acumulado', 'Y', 'PDN_ORDERS');	
			   
	INSERT INTO [dbo].[TFSCM_CLI_USER_SERIES]([USER_ID], [CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE])
	VALUES (@CdUserId, 0, '1_Azul',      'Y', 'PMC_BUFFER_SERIE'),
		   (@CdUserId, 1, '5_Rojo',      'Y', 'PMC_BUFFER_SERIE'),
		   (@CdUserId, 2, '6_Negro',     'Y', 'PMC_BUFFER_SERIE'),
		   (@CdUserId, 3, '% Acumulado', 'Y', 'PMC_BUFFER_SERIE');

	INSERT INTO [dbo].[TFSCM_CLI_USER_SERIES]([USER_ID], [CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE])
	VALUES (@CdUserId, 0, '1_Amarillo',  'Y', 'PMCAA_BUFFER_SERIES'),
		   (@CdUserId, 1, '% Acumulado', 'Y', 'PMCAA_BUFFER_SERIES');

	INSERT INTO [dbo].[TFSCM_CLI_USER_SERIES]([USER_ID], [CDSERIE], [DSSERIE], [IS_ACTIVE], [SERIES_TYPE])
	VALUES (@CdUserId, 0,	'1_Gris',      'Y', 'RELEASE_POOGI_SERIES'),
		   (@CdUserId, 1,	'% Acumulado', 'Y', 'RELEASE_POOGI_SERIES');
	-- ---------------------------------------------------------------------------------------		   
GO
ALTER TABLE [dbo].[TFSCM_COM_USERS] ENABLE TRIGGER [TR_USER_VIEWS]
GO
/****** Object:  Trigger [dbo].[tri_inserts_data_exchange_column]    Script Date: 5/04/2021 6:23:08 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================================
-- Author:      Oscar Londoño
-- Modify Date: 07/15/2015
-- Description: Adding the exception for Export Buffers Interface
-- ---------------------------------------------------------------------------
-- Author:      Oscar Londoño
-- Modify Date: 06/22/2015
-- Description: Adding the call to BUFFER CHANGES BUILDER
-- ---------------------------------------------------------------------------
-- Author:      Oscar Londoño
-- Modify Date: 04/17/2015
-- Description: Adding the call to PURCHASE ORDERS BUILDER
-- ---------------------------------------------------------------------------
-- Author:		Julian Andres Gonzalez Velez
-- Create date: 08/27/2013 
-- Description:	Procedure for creating SP masters
-- ===========================================================================
CREATE TRIGGER [dbo].[tri_inserts_data_exchange_column] on [dbo].[TFSCM_DEX_INT_DETAIL]
--WITH ENCRYPTION
AFTER INSERT, UPDATE, DELETE
AS
DECLARE @codInterface SMALLINT
DECLARE @cdColumn VARCHAR(50)
DECLARE @bandNoAlterTempTable SMALLINT = 0;

--SELECT @codInterface =  CDINTERFACE FROM INSERTED
BEGIN	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--PRINT 'INICIA [tri_inserts_data_exchange_column]' 
	IF  EXISTS(SELECT CDINTERFACE FROM INSERTED ) AND EXISTS(SELECT CDINTERFACE FROM DELETED )
	BEGIN
		SELECT @codInterface =  CDINTERFACE FROM INSERTED
		IF (@codInterface = 1)                -- It's Production Orders 
			EXEC MASTER_PRODUCTION_ORDERS_BUILDER @codInterface,'',''
		ELSE IF (@codInterface = 2)           -- It's Locations
			EXEC MASTER_BUILDER @codInterface,'',''	
		ELSE IF (@codInterface = 3)           -- It's Buffers 
		BEGIN
			EXEC MASTER_BUFFER_BUILDER @codInterface,'',''	
			EXEC MASTER_BUFFER_BUILDER 99,'',''	
		END
		ELSE IF (@codInterface = 5)           -- It's Purchase 
			EXEC MASTER_PURCHASE_ORDERS_BUILDER @codInterface,'',''
		ELSE IF (@codInterface = 6)           -- It's Buffer Changes
			EXEC MASTER_BUFFER_CHANGES_BUILDER @codInterface,'',''	
		ELSE IF (@codInterface NOT IN (4, 7, 99))    -- It's neither Replenishment or Export Buffers
			EXEC MASTER_BUILDER @codInterface,'',''		
	END	
	ELSE 
		IF  EXISTS(SELECT CDINTERFACE FROM INSERTED)
		BEGIN
			SELECT @codInterface =  CDINTERFACE FROM INSERTED
			-- ---------------------------------------------------------------
			-- MODIFIED: olondono - 20131004 - Alter temp table.
			-- ---------------------------------------------------------------
			SELECT @cdColumn = CDFIELD FROM INSERTED
			PRINT 'Va a insertar '+ @cdColumn
			
			--IF ( @codInterface = 3 AND LEN(@cdColumn) >= 6 AND SUBSTRING(@cdColumn, 0, 7) = 'CF_BF_' )
			IF (@codInterface = 3)
			BEGIN
				INSERT INTO TFSCM_DEX_INT_DETAIL (CDINTERFACE, CDFIELD, DSFIELD, ERP_NAME, IS_UPGRADEABLE, NMPOSITION, IS_SYSTEM_REQUIRED, DATE_FORMAT)
				SELECT 99 CDINTERFACE, CDFIELD, DSFIELD, ERP_NAME, IS_UPGRADEABLE, NMPOSITION, IS_SYSTEM_REQUIRED, DATE_FORMAT
				  FROM INSERTED 
				 
				  
				SELECT @bandNoAlterTempTable = COUNT(1) FROM INFORMATION_SCHEMA.COLUMNS AS C1 WHERE C1.COLUMN_NAME = @cdColumn AND C1.TABLE_NAME = 'TFSCM_CLI_BUFFER_TEMP'
				 
			END 
			IF(@bandNoAlterTempTable = 0)
			BEGIN
			
				EXEC SP_ALTER_TEMP_TABLE @codInterface, @cdColumn, 'I', '', ''
			END
						 
			IF (@codInterface = 1)                -- It's Production Orders  
				EXEC MASTER_PRODUCTION_ORDERS_BUILDER @codInterface,'',''
			ELSE IF (@codInterface = 2)           -- It's Locations
				EXEC MASTER_BUILDER @codInterface,'',''	
			ELSE IF (@codInterface = 3)           -- It's Buffers 
			BEGIN 
				EXEC MASTER_BUFFER_BUILDER @codInterface,'','' 
				EXEC MASTER_BUFFER_BUILDER 99,'',''
			END
			ELSE IF (@codInterface = 5)           -- It's Purchase 
				EXEC MASTER_PURCHASE_ORDERS_BUILDER @codInterface,'',''
			ELSE IF (@codInterface = 6)           -- It's Buffer Changes
				EXEC MASTER_BUFFER_CHANGES_BUILDER @codInterface,'',''	
			ELSE IF (@codInterface NOT IN (4, 7, 99)) -- It's neither Replenishment or Export Buffers
				EXEC MASTER_BUILDER @codInterface,'',''	
            				
		END
		ELSE 
			IF  EXISTS(SELECT CDINTERFACE FROM DELETED)
			BEGIN
				SELECT @codInterface =  CDINTERFACE FROM DELETED
				-- -----------------------------------------------------------
				-- MODIFIED: rosorio - 20140108 - Reorder position.
				-- -----------------------------------------------------------
				EXEC SP_REORDER_INTERFACE @codInterface, @cdColumn, 'D', '', ''
				
				-- -----------------------------------------------------------
				-- MODIFIED: olondono - 20131004 - Alter temp table.
				-- -----------------------------------------------------------
				SELECT @cdColumn = CDFIELD FROM DELETED	
				PRINT 'Va a borrar'+ @cdColumn 
				--IF ( NOT(@codInterface = 3 AND LEN(@cdColumn) >= 6 AND SUBSTRING(@cdColumn, 0, 7) = 'CF_BF_') )
				IF ( NOT(@codInterface = 3 OR @codInterface = 99) )
				BEGIN
					EXEC SP_ALTER_TEMP_TABLE @codInterface, @cdColumn, 'D', '', ''
				END
										
				IF (@codInterface = 1)                -- It's Production Orders  
					EXEC MASTER_PRODUCTION_ORDERS_BUILDER @codInterface,'',''
				ELSE IF (@codInterface = 2)           -- It's Locations
					EXEC MASTER_BUILDER @codInterface,'',''	
				ELSE IF (@codInterface = 3)           -- It's Buffers 
				BEGIN
					DELETE FROM TFSCM_DEX_INT_DETAIL 
					 WHERE CDINTERFACE = 99
					   AND CDFIELD     = @cdColumn;
					
					EXEC MASTER_BUFFER_BUILDER @codInterface,'',''
					EXEC MASTER_BUFFER_BUILDER 99,'',''	
				END 
				ELSE IF (@codInterface = 5)           -- It's Purchase 
					EXEC MASTER_PURCHASE_ORDERS_BUILDER @codInterface,'',''
				ELSE IF (@codInterface = 6)           -- It's Buffer Changes
					EXEC MASTER_BUFFER_CHANGES_BUILDER @codInterface,'',''	
				ELSE IF (@codInterface NOT IN (4, 7, 99)) -- It's neither Replenishment or Export Buffers
					EXEC MASTER_BUILDER @codInterface,'',''		
				 
			END	
	
END
GO
ALTER TABLE [dbo].[TFSCM_DEX_INT_DETAIL] ENABLE TRIGGER [tri_inserts_data_exchange_column]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the view type: PRODUCTION_ORDERS_FINISHED | BUFFER_INACTIVES | BUFFER_MASTER' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TFSCM_CLI_VIEW_TYPE_FILTERS', @level2type=N'COLUMN',@level2name=N'CDVIEW_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the filter type: LC for Locations Filter | DT for Date filter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TFSCM_CLI_VIEW_TYPE_FILTERS', @level2type=N'COLUMN',@level2name=N'FILTER_TYPE'
GO

-- *******************************************************************************************
USE [master];
GO

BACKUP DATABASE FocussCreationNameDatabase  TO DISK = 'urlDisk\FocussCreationNameDatabase.bak' 
WITH FORMAT, MEDIANAME = 'Z_Default', NAME = 'Full Backup of ';
GO

-- First determine the number and names of the files in the backup.
RESTORE FILELISTONLY
   FROM DISK = 'urlDisk\FocussCreationNameDatabase.bak';
GO

-- Restore the files for MyNwind.
RESTORE DATABASE databaseNewName
   FROM DISK = 'urlDisk\FocussCreationNameDatabase.bak'
   WITH NORECOVERY,
   MOVE 'FocussCreationNameDatabase' TO 'urlDisk\databaseNewName.mdf', 
   MOVE 'FocussCreationNameDatabase_log' TO 'urlDisk\databaseNewName.LDF';
GO

-- Apply the first transaction log backup.
RESTORE LOG databaseNewName
   FROM DISK = 'urlDisk\FocussCreationNameDatabase.bak'
   WITH NORECOVERY;
GO

-- Apply the last transaction log backup.
RESTORE LOG databaseNewName
   FROM DISK = 'urlDisk\FocussCreationNameDatabase.bak'
   WITH RECOVERY;
GO

DROP DATABASE FocussCreationNameDatabase;
GO
PRINT 'Creation of databaseNewName database has finished!'